{"version":3,"file":"3274.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/inspector/DetailText.tsx","webpack://grafana/./public/app/features/inspector/InspectDataOptions.tsx","webpack://grafana/./public/app/features/inspector/InspectDataTab.tsx","webpack://grafana/./public/app/features/inspector/InspectErrorTab.tsx","webpack://grafana/./public/app/features/inspector/InspectJSONTab.tsx","webpack://grafana/./public/app/features/inspector/InspectStatsTable.tsx","webpack://grafana/./public/app/features/inspector/InspectStatsTab.tsx","webpack://grafana/./public/app/features/inspector/QueryInspector.tsx","webpack://grafana/./public/app/features/inspector/styles.ts","webpack://grafana/./public/app/features/query/components/QueryEditorRows.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/0/cache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useToggle.js"],"sourcesContent":["import React, { FC } from 'react';\nimport { useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst getStyles = (theme: GrafanaTheme) => css`\n  margin: 0;\n  margin-left: ${theme.spacing.md};\n  font-size: ${theme.typography.size.sm};\n  color: ${theme.colors.textWeak};\n`;\n\nexport const DetailText: FC = ({ children }) => {\n  const collapsedTextStyles = useStyles(getStyles);\n  return <p className={collapsedTextStyles}>{children}</p>;\n};\n","import React, { FC } from 'react';\nimport { DataFrame, DataTransformerID, getFrameDisplayName, SelectableValue } from '@grafana/data';\nimport { Field, HorizontalGroup, Select, Switch, VerticalGroup } from '@grafana/ui';\nimport { getPanelInspectorStyles } from './styles';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { DetailText } from 'app/features/inspector/DetailText';\n\ninterface Props {\n  options: GetDataOptions;\n  dataFrames: DataFrame[];\n  transformId: DataTransformerID;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  selectedDataFrame: number | DataTransformerID;\n  downloadForExcel: boolean;\n  onDataFrameChange: (item: SelectableValue<DataTransformerID | number>) => void;\n  toggleDownloadForExcel: () => void;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\nexport const InspectDataOptions: FC<Props> = ({\n  options,\n  onOptionsChange,\n  panel,\n  data,\n  dataFrames,\n  transformId,\n  transformationOptions,\n  selectedDataFrame,\n  onDataFrameChange,\n  downloadForExcel,\n  toggleDownloadForExcel,\n}) => {\n  const styles = getPanelInspectorStyles();\n\n  const panelTransformations = panel?.getTransformations();\n  const showPanelTransformationsOption =\n    Boolean(panelTransformations?.length) && (transformId as any) !== 'join by time';\n  const showFieldConfigsOption = panel && !panel.plugin?.fieldConfigRegistry.isEmpty();\n\n  let dataSelect = dataFrames;\n  if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n    dataSelect = data!;\n  }\n\n  const choices = dataSelect.map((frame, index) => {\n    return {\n      value: index,\n      label: `${getFrameDisplayName(frame)} (${index})`,\n    } as SelectableValue<number>;\n  });\n\n  const selectableOptions = [...transformationOptions, ...choices];\n\n  function getActiveString() {\n    let activeString = '';\n\n    if (!data) {\n      return activeString;\n    }\n\n    const parts: string[] = [];\n\n    if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n      parts.push('Series joined by time');\n    } else if (data.length > 1) {\n      parts.push(getFrameDisplayName(data[selectedDataFrame as number]));\n    }\n\n    if (options.withTransforms || options.withFieldConfig) {\n      if (options.withTransforms) {\n        parts.push('Panel transforms');\n      }\n\n      if (options.withTransforms && options.withFieldConfig) {\n      }\n\n      if (options.withFieldConfig) {\n        parts.push('Formatted data');\n      }\n    }\n\n    if (downloadForExcel) {\n      parts.push('Excel header');\n    }\n\n    return parts.join(', ');\n  }\n\n  return (\n    <div className={styles.dataDisplayOptions}>\n      <QueryOperationRow\n        id=\"Data options\"\n        index={0}\n        title=\"Data options\"\n        headerElement={<DetailText>{getActiveString()}</DetailText>}\n        isOpen={false}\n      >\n        <div className={styles.options} data-testid=\"dataOptions\">\n          <VerticalGroup spacing=\"none\">\n            {data!.length > 1 && (\n              <Field label=\"Show data frame\">\n                <Select\n                  menuShouldPortal\n                  options={selectableOptions}\n                  value={selectedDataFrame}\n                  onChange={onDataFrameChange}\n                  width={30}\n                  aria-label=\"Select dataframe\"\n                />\n              </Field>\n            )}\n\n            <HorizontalGroup>\n              {showPanelTransformationsOption && onOptionsChange && (\n                <Field\n                  label=\"Apply panel transformations\"\n                  description=\"Table data is displayed with transformations defined in the panel Transform tab.\"\n                >\n                  <Switch\n                    value={!!options.withTransforms}\n                    onChange={() => onOptionsChange({ ...options, withTransforms: !options.withTransforms })}\n                  />\n                </Field>\n              )}\n              {showFieldConfigsOption && onOptionsChange && (\n                <Field\n                  label=\"Formatted data\"\n                  description=\"Table data is formatted with options defined in the Field and Override tabs.\"\n                >\n                  <Switch\n                    id=\"formatted-data-toggle\"\n                    value={!!options.withFieldConfig}\n                    onChange={() => onOptionsChange({ ...options, withFieldConfig: !options.withFieldConfig })}\n                  />\n                </Field>\n              )}\n              <Field label=\"Download for Excel\" description=\"Adds header to CSV for use with Excel\">\n                <Switch id=\"excel-toggle\" value={downloadForExcel} onChange={toggleDownloadForExcel} />\n              </Field>\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </QueryOperationRow>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {\n  applyFieldOverrides,\n  applyRawFieldOverrides,\n  CSVConfig,\n  DataFrame,\n  DataTransformerID,\n  dateTimeFormat,\n  dateTimeFormatISO,\n  MutableDataFrame,\n  SelectableValue,\n  toCSV,\n  transformDataFrame,\n  TimeZone,\n} from '@grafana/data';\nimport { Button, Container, Spinner, Table } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectDataOptions } from './InspectDataOptions';\nimport { getPanelInspectorStyles } from './styles';\nimport { config } from 'app/core/config';\nimport { saveAs } from 'file-saver';\nimport { css } from '@emotion/css';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dataFrameToLogsModel } from 'app/core/logs_model';\nimport { transformToJaeger } from 'app/plugins/datasource/jaeger/responseTransform';\nimport { transformToZipkin } from 'app/plugins/datasource/zipkin/utils/transforms';\nimport { transformToOTLP } from 'app/plugins/datasource/tempo/resultTransformer';\n\ninterface Props {\n  isLoading: boolean;\n  options: GetDataOptions;\n  timeZone: TimeZone;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\ninterface State {\n  /** The string is seriesToColumns transformation. Otherwise it is a dataframe index */\n  selectedDataFrame: number | DataTransformerID;\n  transformId: DataTransformerID;\n  dataFrameIndex: number;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  transformedData: DataFrame[];\n  downloadForExcel: boolean;\n}\n\nexport class InspectDataTab extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      selectedDataFrame: 0,\n      dataFrameIndex: 0,\n      transformId: DataTransformerID.noop,\n      transformationOptions: buildTransformationOptions(),\n      transformedData: props.data ?? [],\n      downloadForExcel: false,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (!this.props.data) {\n      this.setState({ transformedData: [] });\n      return;\n    }\n\n    if (this.props.options.withTransforms) {\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n\n    if (prevProps.data !== this.props.data || prevState.transformId !== this.state.transformId) {\n      const currentTransform = this.state.transformationOptions.find((item) => item.value === this.state.transformId);\n\n      if (currentTransform && currentTransform.transformer.id !== DataTransformerID.noop) {\n        const selectedDataFrame = this.state.selectedDataFrame;\n        const dataFrameIndex = this.state.dataFrameIndex;\n        const subscription = transformDataFrame([currentTransform.transformer], this.props.data).subscribe((data) => {\n          this.setState({ transformedData: data, selectedDataFrame, dataFrameIndex }, () => subscription.unsubscribe());\n        });\n        return;\n      }\n\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n  }\n\n  exportCsv = (dataFrame: DataFrame, csvConfig: CSVConfig = {}) => {\n    const { panel } = this.props;\n    const { transformId } = this.state;\n\n    const dataFrameCsv = toCSV([dataFrame], csvConfig);\n\n    const blob = new Blob([String.fromCharCode(0xfeff), dataFrameCsv], {\n      type: 'text/csv;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const transformation = transformId !== DataTransformerID.noop ? '-as-' + transformId.toLocaleLowerCase() : '';\n    const fileName = `${displayTitle}-data${transformation}-${dateTimeFormat(new Date())}.csv`;\n    saveAs(blob, fileName);\n  };\n\n  exportLogsAsTxt = () => {\n    const { data, panel } = this.props;\n    const logsModel = dataFrameToLogsModel(data || [], undefined);\n    let textToDownload = '';\n\n    logsModel.meta?.forEach((metaItem) => {\n      const string = `${metaItem.label}: ${JSON.stringify(metaItem.value)}\\n`;\n      textToDownload = textToDownload + string;\n    });\n    textToDownload = textToDownload + '\\n\\n';\n\n    logsModel.rows.forEach((row) => {\n      const newRow = dateTimeFormatISO(row.timeEpochMs) + '\\t' + row.entry + '\\n';\n      textToDownload = textToDownload + newRow;\n    });\n\n    const blob = new Blob([textToDownload], {\n      type: 'text/plain;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-logs-${dateTimeFormat(new Date())}.txt`;\n    saveAs(blob, fileName);\n  };\n\n  exportTracesAsJson = () => {\n    const { data, panel } = this.props;\n    if (!data) {\n      return;\n    }\n\n    for (const df of data) {\n      // Only export traces\n      if (df.meta?.preferredVisualisationType !== 'trace') {\n        continue;\n      }\n\n      switch (df.meta?.custom?.traceFormat) {\n        case 'jaeger': {\n          let res = transformToJaeger(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n        case 'zipkin': {\n          let res = transformToZipkin(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n        case 'otlp':\n        default: {\n          let res = transformToOTLP(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n      }\n    }\n  };\n\n  saveTraceJson = (json: any, panel?: PanelModel) => {\n    const blob = new Blob([JSON.stringify(json)], {\n      type: 'application/json',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-traces-${dateTimeFormat(new Date())}.json`;\n    saveAs(blob, fileName);\n  };\n\n  onDataFrameChange = (item: SelectableValue<DataTransformerID | number>) => {\n    this.setState({\n      transformId:\n        item.value === DataTransformerID.seriesToColumns ? DataTransformerID.seriesToColumns : DataTransformerID.noop,\n      dataFrameIndex: typeof item.value === 'number' ? item.value : 0,\n      selectedDataFrame: item.value!,\n    });\n  };\n\n  toggleDownloadForExcel = () => {\n    this.setState((prevState) => ({\n      downloadForExcel: !prevState.downloadForExcel,\n    }));\n  };\n\n  getProcessedData(): DataFrame[] {\n    const { options, panel, timeZone } = this.props;\n    const data = this.state.transformedData;\n\n    if (!options.withFieldConfig || !panel) {\n      return applyRawFieldOverrides(data);\n    }\n\n    // We need to apply field config even though it was already applied in the PanelQueryRunner.\n    // That's because transformers create new fields and data frames, so i.e. display processor is no longer there\n    return applyFieldOverrides({\n      data,\n      theme: config.theme2,\n      fieldConfig: panel.fieldConfig,\n      timeZone,\n      replaceVariables: (value: string) => {\n        return value;\n      },\n    });\n  }\n\n  render() {\n    const { isLoading, options, data, panel, onOptionsChange } = this.props;\n    const { dataFrameIndex, transformId, transformationOptions, selectedDataFrame, downloadForExcel } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    if (isLoading) {\n      return (\n        <div>\n          <Spinner inline={true} /> Loading\n        </div>\n      );\n    }\n\n    const dataFrames = this.getProcessedData();\n\n    if (!dataFrames || !dataFrames.length) {\n      return <div>No Data</div>;\n    }\n\n    // let's make sure we don't try to render a frame that doesn't exists\n    const index = !dataFrames[dataFrameIndex] ? 0 : dataFrameIndex;\n    const dataFrame = dataFrames[index];\n    const hasLogs = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'logs');\n    const hasTraces = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'trace');\n\n    return (\n      <div className={styles.dataTabContent} aria-label={selectors.components.PanelInspector.Data.content}>\n        <div className={styles.actionsWrapper}>\n          <InspectDataOptions\n            data={data}\n            panel={panel}\n            options={options}\n            dataFrames={dataFrames}\n            transformId={transformId}\n            transformationOptions={transformationOptions}\n            selectedDataFrame={selectedDataFrame}\n            downloadForExcel={downloadForExcel}\n            onOptionsChange={onOptionsChange}\n            onDataFrameChange={this.onDataFrameChange}\n            toggleDownloadForExcel={this.toggleDownloadForExcel}\n          />\n          <Button\n            variant=\"primary\"\n            onClick={() => this.exportCsv(dataFrames[dataFrameIndex], { useExcelHeader: this.state.downloadForExcel })}\n            className={css`\n              margin-bottom: 10px;\n            `}\n          >\n            Download CSV\n          </Button>\n          {hasLogs && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportLogsAsTxt}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download logs\n            </Button>\n          )}\n          {hasTraces && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportTracesAsJson}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download traces\n            </Button>\n          )}\n        </div>\n        <Container grow={1}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width === 0) {\n                return null;\n              }\n\n              return (\n                <div style={{ width, height }}>\n                  <Table width={width} height={height} data={dataFrame} showTypeIcons={true} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction buildTransformationOptions() {\n  const transformations: Array<SelectableValue<DataTransformerID>> = [\n    {\n      value: DataTransformerID.seriesToColumns,\n      label: 'Series joined by time',\n      transformer: {\n        id: DataTransformerID.seriesToColumns,\n        options: { byField: 'Time' },\n      },\n    },\n  ];\n\n  return transformations;\n}\n","import React from 'react';\nimport { DataQueryError } from '@grafana/data';\nimport { JSONFormatter } from '@grafana/ui';\n\ninterface InspectErrorTabProps {\n  error?: DataQueryError;\n}\n\nexport const InspectErrorTab: React.FC<InspectErrorTabProps> = ({ error }) => {\n  if (!error) {\n    return null;\n  }\n  if (error.data) {\n    return (\n      <>\n        <h3>{error.data.message}</h3>\n        <JSONFormatter json={error} open={2} />\n      </>\n    );\n  }\n  return <div>{error.message}</div>;\n};\n","import React, { PureComponent } from 'react';\nimport { chain } from 'lodash';\nimport { AppEvents, PanelData, SelectableValue } from '@grafana/data';\nimport { Button, CodeEditor, Field, Select } from '@grafana/ui';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { appEvents } from 'app/core/core';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles } from '../inspector/styles';\n\nenum ShowContent {\n  PanelJSON = 'panel',\n  DataJSON = 'data',\n  DataStructure = 'structure',\n}\n\nconst options: Array<SelectableValue<ShowContent>> = [\n  {\n    label: 'Panel JSON',\n    description: 'The model saved in the dashboard JSON that configures how everything works.',\n    value: ShowContent.PanelJSON,\n  },\n  {\n    label: 'Data',\n    description: 'The raw model passed to the panel visualization',\n    value: ShowContent.DataJSON,\n  },\n  {\n    label: 'DataFrame structure',\n    description: 'Response info without any values',\n    value: ShowContent.DataStructure,\n  },\n];\n\ninterface Props {\n  onClose: () => void;\n  dashboard?: DashboardModel;\n  panel?: PanelModel;\n  data?: PanelData;\n}\n\ninterface State {\n  show: ShowContent;\n  text: string;\n}\n\nexport class InspectJSONTab extends PureComponent<Props, State> {\n  hasPanelJSON: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.hasPanelJSON = !!(props.panel && props.dashboard);\n    // If we are in panel, we want to show PanelJSON, otherwise show DataJSON\n    this.state = {\n      show: this.hasPanelJSON ? ShowContent.PanelJSON : ShowContent.DataJSON,\n      text: this.hasPanelJSON ? getPrettyJSON(props.panel!.getSaveModel()) : getPrettyJSON(props.data),\n    };\n  }\n\n  onSelectChanged = (item: SelectableValue<ShowContent>) => {\n    const show = this.getJSONObject(item.value!);\n    const text = getPrettyJSON(show);\n    this.setState({ text, show: item.value! });\n  };\n\n  // Called onBlur\n  onTextChanged = (text: string) => {\n    this.setState({ text });\n  };\n\n  getJSONObject(show: ShowContent) {\n    const { data, panel } = this.props;\n    if (show === ShowContent.DataJSON) {\n      return data;\n    }\n\n    if (show === ShowContent.DataStructure) {\n      const series = data?.series;\n      if (!series) {\n        return { note: 'Missing Response Data' };\n      }\n      return data!.series.map((frame) => {\n        const { table, fields, ...rest } = frame as any; // remove 'table' from arrow response\n        return {\n          ...rest,\n          fields: frame.fields.map((field) => {\n            return chain(field).omit('values').omit('state').omit('display').value();\n          }),\n        };\n      });\n    }\n\n    if (this.hasPanelJSON && show === ShowContent.PanelJSON) {\n      return panel!.getSaveModel();\n    }\n\n    return { note: `Unknown Object: ${show}` };\n  }\n\n  onApplyPanelModel = () => {\n    const { panel, dashboard, onClose } = this.props;\n    if (this.hasPanelJSON) {\n      try {\n        if (!dashboard!.meta.canEdit) {\n          appEvents.emit(AppEvents.alertError, ['Unable to apply']);\n        } else {\n          const updates = JSON.parse(this.state.text);\n          dashboard!.shouldUpdateDashboardPanelFromJSON(updates, panel!);\n          panel!.restoreModel(updates);\n          panel!.refresh();\n          appEvents.emit(AppEvents.alertSuccess, ['Panel model updated']);\n        }\n      } catch (err) {\n        console.error('Error applying updates', err);\n        appEvents.emit(AppEvents.alertError, ['Invalid JSON text']);\n      }\n\n      onClose();\n    }\n  };\n\n  render() {\n    const { dashboard } = this.props;\n    const { show, text } = this.state;\n    const jsonOptions = this.hasPanelJSON ? options : options.slice(1, options.length);\n    const selected = options.find((v) => v.value === show);\n    const isPanelJSON = show === ShowContent.PanelJSON;\n    const canEdit = dashboard && dashboard.meta.canEdit;\n    const styles = getPanelInspectorStyles();\n\n    return (\n      <>\n        <div className={styles.toolbar} aria-label={selectors.components.PanelInspector.Json.content}>\n          <Field label=\"Select source\" className=\"flex-grow-1\">\n            <Select\n              inputId=\"select-source-dropdown\"\n              options={jsonOptions}\n              value={selected}\n              onChange={this.onSelectChanged}\n              menuShouldPortal\n            />\n          </Field>\n          {this.hasPanelJSON && isPanelJSON && canEdit && (\n            <Button className={styles.toolbarItem} onClick={this.onApplyPanelModel}>\n              Apply\n            </Button>\n          )}\n        </div>\n        <div className={styles.content}>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language=\"json\"\n                showLineNumbers={true}\n                showMiniMap={(text && text.length) > 100}\n                value={text || ''}\n                readOnly={!isPanelJSON}\n                onBlur={this.onTextChanged}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction getPrettyJSON(obj: any): string {\n  return JSON.stringify(obj, null, 2);\n}\n","import React from 'react';\nimport {\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  QueryResultMetaStat,\n  TimeZone,\n} from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface InspectStatsTableProps {\n  timeZone: TimeZone;\n  name: string;\n  stats: QueryResultMetaStat[];\n}\n\nexport const InspectStatsTable: React.FC<InspectStatsTableProps> = ({ timeZone, name, stats }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (!stats || !stats.length) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className=\"section-heading\">{name}</div>\n      <table className=\"filter-table width-30\">\n        <tbody>\n          {stats.map((stat, index) => {\n            return (\n              <tr key={`${stat.displayName}-${index}`}>\n                <td>{stat.displayName}</td>\n                <td className={styles.cell}>{formatStat(stat, timeZone, theme)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction formatStat(stat: QueryResultMetaStat, timeZone: TimeZone, theme: GrafanaTheme2): string {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat,\n    },\n    theme,\n    timeZone,\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      padding-bottom: ${theme.spacing(2)};\n    `,\n    cell: css`\n      text-align: right;\n    `,\n  };\n});\n","import { PanelData, QueryResultMetaStat, TimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectStatsTable } from './InspectStatsTable';\nimport React from 'react';\n\ninterface InspectStatsTabProps {\n  data: PanelData;\n  timeZone: TimeZone;\n}\n\nexport const InspectStatsTab: React.FC<InspectStatsTabProps> = ({ data, timeZone }) => {\n  if (!data.request) {\n    return null;\n  }\n\n  let stats: QueryResultMetaStat[] = [];\n\n  const requestTime = data.request.endTime ? data.request.endTime - data.request.startTime : -1;\n  const processingTime = data.timings?.dataProcessingTime || -1;\n  let dataRows = 0;\n\n  for (const frame of data.series) {\n    dataRows += frame.length;\n  }\n\n  if (requestTime > 0) {\n    stats.push({ displayName: 'Total request time', value: requestTime, unit: 'ms' });\n  }\n  if (processingTime > 0) {\n    stats.push({ displayName: 'Data processing time', value: processingTime, unit: 'ms' });\n  }\n  stats.push({ displayName: 'Number of queries', value: data.request.targets.length });\n  stats.push({ displayName: 'Total number rows', value: dataRows });\n\n  let dataStats: QueryResultMetaStat[] = [];\n\n  for (const series of data.series) {\n    if (series.meta && series.meta.stats) {\n      dataStats = dataStats.concat(series.meta.stats);\n    }\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelInspector.Stats.content}>\n      <InspectStatsTable timeZone={timeZone} name={'Stats'} stats={stats} />\n      <InspectStatsTable timeZone={timeZone} name={'Data source stats'} stats={dataStats} />\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { Button, ClipboardButton, JSONFormatter, LoadingPlaceholder } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AppEvents, DataFrame } from '@grafana/data';\n\nimport appEvents from 'app/core/app_events';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles } from './styles';\nimport { supportsDataQuery } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { config, RefreshEvent } from '@grafana/runtime';\nimport { css } from '@emotion/css';\nimport { Subscription } from 'rxjs';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\ninterface DsQuery {\n  isLoading: boolean;\n  response: {};\n}\n\ninterface ExecutedQueryInfo {\n  refId: string;\n  query: string;\n  frames: number;\n  rows: number;\n}\n\ninterface Props {\n  data: DataFrame[];\n  onRefreshQuery: () => void;\n  panel?: PanelModel;\n}\n\ninterface State {\n  allNodesExpanded: boolean | null;\n  isMocking: boolean;\n  mockedResponse: string;\n  dsQuery: DsQuery;\n  executedQueries: ExecutedQueryInfo[];\n}\n\nexport class QueryInspector extends PureComponent<Props, State> {\n  private formattedJson: any;\n  private subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      executedQueries: [],\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n\n    this.subs.add(\n      backendSrv.getInspectorStream().subscribe({\n        next: (response) => this.onDataSourceResponse(response),\n      })\n    );\n\n    if (panel) {\n      this.subs.add(panel.events.subscribe(RefreshEvent, this.onPanelRefresh));\n      this.updateQueryList();\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (this.props.data !== oldProps.data) {\n      this.updateQueryList();\n    }\n  }\n\n  /**\n   * Find the list of executed queries\n   */\n  updateQueryList() {\n    const { data } = this.props;\n    const executedQueries: ExecutedQueryInfo[] = [];\n\n    if (data?.length) {\n      let last: ExecutedQueryInfo | undefined = undefined;\n\n      data.forEach((frame, idx) => {\n        const query = frame.meta?.executedQueryString;\n\n        if (query) {\n          const refId = frame.refId || '?';\n\n          if (last?.refId === refId) {\n            last.frames++;\n            last.rows += frame.length;\n          } else {\n            last = {\n              refId,\n              frames: 0,\n              rows: frame.length,\n              query,\n            };\n            executedQueries.push(last);\n          }\n        }\n      });\n    }\n\n    this.setState({ executedQueries });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  onPanelRefresh = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: true,\n        response: {},\n      },\n    }));\n  };\n\n  onDataSourceResponse(response: any) {\n    // ignore silent requests\n    if (response.config?.hideFromInspector) {\n      return;\n    }\n\n    response = { ...response }; // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n\n      delete response.config;\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.ok;\n      delete response.url;\n      delete response.redirected;\n      delete response.type;\n      delete response.$$config;\n    }\n\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: false,\n        response: response,\n      },\n    }));\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  onToggleMocking = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isMocking: !this.state.isMocking,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  setMockedResponse = (evt: any) => {\n    const mockedResponse = evt.target.value;\n    this.setState((prevState) => ({\n      ...prevState,\n      mockedResponse,\n    }));\n  };\n\n  renderExecutedQueries(executedQueries: ExecutedQueryInfo[]) {\n    if (!executedQueries.length) {\n      return null;\n    }\n\n    const styles = {\n      refId: css`\n        font-weight: ${config.theme.typography.weight.semibold};\n        color: ${config.theme.colors.textBlue};\n        margin-right: 8px;\n      `,\n    };\n\n    return (\n      <div>\n        {executedQueries.map((info) => {\n          return (\n            <div key={info.refId}>\n              <div>\n                <span className={styles.refId}>{info.refId}:</span>\n                {info.frames > 1 && <span>{info.frames} frames, </span>}\n                <span>{info.rows} rows</span>\n              </div>\n              <pre>{info.query}</pre>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { allNodesExpanded, executedQueries } = this.state;\n    const { panel, onRefreshQuery } = this.props;\n    const { response, isLoading } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n    const styles = getPanelInspectorStyles();\n    const haveData = Object.keys(response).length > 0;\n\n    if (panel && !supportsDataQuery(panel.plugin)) {\n      return null;\n    }\n\n    return (\n      <>\n        <div aria-label={selectors.components.PanelInspector.Query.content}>\n          <h3 className=\"section-heading\">Query inspector</h3>\n          <p className=\"small muted\">\n            Query inspector allows you to view raw request and response. To collect this data Grafana needs to issue a\n            new query. Click refresh button below to trigger a new query.\n          </p>\n        </div>\n        {this.renderExecutedQueries(executedQueries)}\n        <div className={styles.toolbar}>\n          <Button\n            icon=\"sync\"\n            onClick={onRefreshQuery}\n            aria-label={selectors.components.PanelInspector.Query.refreshButton}\n          >\n            Refresh\n          </Button>\n\n          {haveData && allNodesExpanded && (\n            <Button icon=\"minus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Collapse all\n            </Button>\n          )}\n          {haveData && !allNodesExpanded && (\n            <Button icon=\"plus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Expand all\n            </Button>\n          )}\n\n          {haveData && (\n            <ClipboardButton\n              getText={this.getTextForClipboard}\n              onClipboardCopy={this.onClipboardSuccess}\n              className={styles.toolbarItem}\n              icon=\"copy\"\n              variant=\"secondary\"\n            >\n              Copy to clipboard\n            </ClipboardButton>\n          )}\n          <div className=\"flex-grow-1\" />\n        </div>\n        <div className={styles.contentQueryInspector}>\n          {isLoading && <LoadingPlaceholder text=\"Loading query inspector...\" />}\n          {!isLoading && haveData && (\n            <JSONFormatter json={response} open={openNodes} onDidRender={this.setFormattedJson} />\n          )}\n          {!isLoading && !haveData && (\n            <p className=\"muted\">No request and response collected yet. Hit refresh button</p>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { config } from 'app/core/config';\nimport { stylesFactory } from '@grafana/ui';\n\nexport const getPanelInspectorStyles = stylesFactory(() => {\n  return {\n    wrap: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      flex: 1 1 0;\n    `,\n    toolbar: css`\n      display: flex;\n      width: 100%;\n      flex-grow: 0;\n      align-items: center;\n      justify-content: flex-end;\n      margin-bottom: ${config.theme.spacing.sm};\n    `,\n    toolbarItem: css`\n      margin-left: ${config.theme.spacing.md};\n    `,\n    content: css`\n      flex-grow: 1;\n      height: 100%;\n      padding-bottom: 16px;\n    `,\n    contentQueryInspector: css`\n      flex-grow: 1;\n      padding: ${config.theme.spacing.md} 0;\n    `,\n    editor: css`\n      font-family: monospace;\n      height: 100%;\n      flex-grow: 1;\n    `,\n    viewer: css`\n      overflow: scroll;\n    `,\n    dataFrameSelect: css`\n      flex-grow: 2;\n    `,\n    tabContent: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    dataTabContent: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n    `,\n    actionsWrapper: css`\n      display: flex;\n    `,\n    leftActions: css`\n      display: flex;\n      flex-grow: 1;\n\n      max-width: 85%;\n      @media (max-width: 1345px) {\n        max-width: 75%;\n      }\n    `,\n    options: css`\n      padding-top: ${config.theme.spacing.sm};\n    `,\n    dataDisplayOptions: css`\n      flex-grow: 1;\n      min-width: 300px;\n      margin-right: ${config.theme.spacing.sm};\n    `,\n    selects: css`\n      display: flex;\n      > * {\n        margin-right: ${config.theme.spacing.sm};\n      }\n    `,\n  };\n});\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  EventBusExtended,\n  HistoryItem,\n  PanelData,\n} from '@grafana/data';\nimport { QueryEditorRow } from './QueryEditorRow';\nimport { DragDropContext, DragStart, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\n\ninterface Props {\n  // The query configuration\n  queries: DataQuery[];\n  dsSettings: DataSourceInstanceSettings;\n\n  // Query editing\n  onQueriesChange: (queries: DataQuery[]) => void;\n  onAddQuery: (query: DataQuery) => void;\n  onRunQueries: () => void;\n\n  // Query Response Data\n  data: PanelData;\n\n  // Misc\n  app?: CoreApp;\n  history?: Array<HistoryItem<DataQuery>>;\n  eventBus?: EventBusExtended;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(this.props.queries.filter((item) => item !== query));\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    // update query in array\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  onDataSourceChange(dataSource: DataSourceInstanceSettings, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        if (item.datasource) {\n          const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n          if (previous?.type === dataSource.type) {\n            return {\n              ...item,\n              datasource: { uid: dataSource.uid },\n            };\n          }\n        }\n\n        return {\n          refId: item.refId,\n          hide: item.hide,\n          datasource: { uid: dataSource.uid },\n        };\n      })\n    );\n  }\n\n  onDragStart = (result: DragStart) => {\n    const { queries, dsSettings } = this.props;\n\n    reportInteraction('query_row_reorder_started', {\n      startIndex: result.source.index,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange, dsSettings } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      reportInteraction('query_row_reorder_canceled', {\n        startIndex,\n        endIndex,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type,\n      });\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n\n    reportInteraction('query_row_reorder_ended', {\n      startIndex,\n      endIndex,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  render() {\n    const { dsSettings, data, queries, app, history, eventBus } = this.props;\n\n    return (\n      <DragDropContext onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n                  const onChangeDataSourceSettings = dsSettings.meta.mixed\n                    ? (settings: DataSourceInstanceSettings) => this.onDataSourceChange(settings, index)\n                    : undefined;\n\n                  return (\n                    <QueryEditorRow\n                      id={query.refId}\n                      index={index}\n                      key={query.refId}\n                      data={data}\n                      query={query}\n                      dataSource={dataSourceSettings}\n                      onChangeDataSource={onChangeDataSourceSettings}\n                      onChange={(query) => this.onChangeQuery(query, index)}\n                      onRemoveQuery={this.onRemoveQuery}\n                      onAddQuery={this.props.onAddQuery}\n                      onRunQuery={this.props.onRunQueries}\n                      queries={queries}\n                      app={app}\n                      history={history}\n                      eventBus={eventBus}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst getDataSourceSettings = (\n  query: DataQuery,\n  groupSettings: DataSourceInstanceSettings\n): DataSourceInstanceSettings => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};\n","import { identity } from 'lodash';\nimport { ZipkinAnnotation, ZipkinEndpoint, ZipkinSpan } from '../types';\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin',\n      },\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  if (span.shared) {\n    row.tags = [\n      {\n        key: 'shared',\n        value: span.shared,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n    valueToTag('endpointType', span.localEndpoint ? 'local' : 'remote'),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Transforms data frame to Zipkin response\n */\nexport const transformToZipkin = (data: MutableDataFrame): ZipkinSpan[] => {\n  let response: ZipkinSpan[] = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n    response.push({\n      traceId: span.traceID,\n      parentId: span.parentSpanID,\n      name: span.operationName,\n      id: span.spanID,\n      timestamp: span.startTime * 1000,\n      duration: span.duration * 1000,\n      ...getEndpoint(span),\n      annotations: span.logs.length\n        ? span.logs.map((l: TraceLog) => ({ timestamp: l.timestamp, value: l.fields[0].value }))\n        : undefined,\n      tags: span.tags.length\n        ? span.tags\n            .filter((t: TraceKeyValuePair) => t.key !== 'kind' && t.key !== 'endpointType' && t.key !== 'shared')\n            .reduce((tags: { [key: string]: string }, t: TraceKeyValuePair) => {\n              if (t.key === 'error') {\n                return {\n                  ...tags,\n                  [t.key]: span.tags.find((t: TraceKeyValuePair) => t.key === 'errorValue').value || '',\n                };\n              }\n              return { ...tags, [t.key]: t.value };\n            }, {})\n        : undefined,\n      kind: span.tags.find((t: TraceKeyValuePair) => t.key === 'kind')?.value,\n      shared: span.tags.find((t: TraceKeyValuePair) => t.key === 'shared')?.value,\n    });\n  }\n\n  return response;\n};\n\n// Returns remote or local endpoint object\nconst getEndpoint = (span: any): { [key: string]: ZipkinEndpoint } | undefined => {\n  const key =\n    span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'endpointType')?.value === 'local'\n      ? 'localEndpoint'\n      : 'remoteEndpoint';\n  return span.serviceName !== 'unknown'\n    ? {\n        [key]: {\n          serviceName: span.serviceName,\n          ipv4: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv4')?.value,\n          ipv6: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv6')?.value,\n          port: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'port')?.value,\n        },\n      }\n    : undefined;\n};\n","import { useReducer } from 'react';\nvar toggleReducer = function (state, nextValue) {\n    return typeof nextValue === 'boolean' ? nextValue : !state;\n};\nvar useToggle = function (initialValue) {\n    return useReducer(toggleReducer, initialValue);\n};\nexport default useToggle;\n"],"names":["getStyles","theme","css","spacing","md","typography","size","sm","colors","textWeak","DetailText","children","collapsedTextStyles","useStyles","className","InspectDataOptions","options","onOptionsChange","panel","data","dataFrames","transformId","transformationOptions","selectedDataFrame","onDataFrameChange","downloadForExcel","toggleDownloadForExcel","styles","getPanelInspectorStyles","panelTransformations","getTransformations","showPanelTransformationsOption","Boolean","length","showFieldConfigsOption","plugin","fieldConfigRegistry","isEmpty","dataSelect","DataTransformerID","selectableOptions","map","frame","index","value","label","getFrameDisplayName","dataDisplayOptions","QueryOperationRow","id","title","headerElement","parts","push","withTransforms","withFieldConfig","join","getActiveString","isOpen","VerticalGroup","Field","Select","menuShouldPortal","onChange","width","HorizontalGroup","description","Switch","InspectDataTab","PureComponent","constructor","props","super","dataFrame","csvConfig","state","dataFrameCsv","toCSV","blob","Blob","String","fromCharCode","type","displayTitle","getDisplayTitle","transformation","toLocaleLowerCase","fileName","dateTimeFormat","Date","saveAs","this","logsModel","dataFrameToLogsModel","undefined","textToDownload","meta","forEach","metaItem","string","JSON","stringify","rows","row","newRow","dateTimeFormatISO","timeEpochMs","entry","df","preferredVisualisationType","custom","traceFormat","res","transformToJaeger","MutableDataFrame","saveTraceJson","transformToZipkin","transformToOTLP","json","item","setState","dataFrameIndex","prevState","buildTransformationOptions","transformedData","componentDidUpdate","prevProps","currentTransform","find","transformer","subscription","transformDataFrame","subscribe","unsubscribe","getProcessedData","timeZone","applyFieldOverrides","config","fieldConfig","replaceVariables","applyRawFieldOverrides","render","isLoading","Spinner","inline","hasLogs","some","hasTraces","dataTabContent","selectors","actionsWrapper","Button","variant","onClick","exportCsv","useExcelHeader","exportLogsAsTxt","exportTracesAsJson","Container","grow","height","style","Table","showTypeIcons","byField","InspectErrorTab","error","message","JSONFormatter","open","ShowContent","PanelJSON","DataJSON","DataStructure","InspectJSONTab","text","getPrettyJSON","getJSONObject","show","dashboard","onClose","hasPanelJSON","canEdit","updates","parse","shouldUpdateDashboardPanelFromJSON","restoreModel","refresh","appEvents","AppEvents","err","console","getSaveModel","series","rest","fields","field","chain","omit","note","jsonOptions","slice","selected","v","isPanelJSON","toolbar","inputId","onSelectChanged","toolbarItem","onApplyPanelModel","content","disableWidth","CodeEditor","language","showLineNumbers","showMiniMap","readOnly","onBlur","onTextChanged","obj","InspectStatsTable","name","stats","useTheme2","wrapper","stat","displayName","cell","formatStat","display","getDisplayProcessor","FieldType","formattedValueToString","stylesFactory","InspectStatsTab","request","requestTime","endTime","startTime","processingTime","timings","dataProcessingTime","dataRows","unit","targets","dataStats","concat","QueryInspector","Subscription","dsQuery","response","formattedJson","allNodesExpanded","isMocking","evt","mockedResponse","target","executedQueries","componentDidMount","subs","add","backendSrv","next","onDataSourceResponse","events","RefreshEvent","onPanelRefresh","updateQueryList","oldProps","last","idx","query","executedQueryString","refId","frames","componentWillUnmount","hideFromInspector","headers","transformRequest","transformResponse","paramSerializer","jsonpCallbackParam","requestId","inspect","retry","timeout","status","statusText","ok","url","redirected","$$config","renderExecutedQueries","info","onRefreshQuery","openNodes","getNrOfOpenNodes","haveData","Object","keys","supportsDataQuery","icon","onToggleExpand","ClipboardButton","getText","getTextForClipboard","onClipboardCopy","onClipboardSuccess","contentQueryInspector","LoadingPlaceholder","onDidRender","setFormattedJson","wrap","editor","viewer","dataFrameSelect","tabContent","leftActions","selects","QueryEditorRows","onQueriesChange","queries","filter","result","dsSettings","reportInteraction","startIndex","source","numberOfQueries","datasourceType","destination","endIndex","update","Array","from","removed","splice","onChangeQuery","itemIndex","onDataSourceChange","dataSource","datasource","previous","getDataSourceSrv","getInstanceSettings","uid","hide","app","history","eventBus","onDragStart","onDragEnd","droppableId","direction","provided","ref","innerRef","droppableProps","dataSourceSettings","getDataSourceSettings","onChangeDataSourceSettings","mixed","settings","onChangeDataSource","onRemoveQuery","onAddQuery","onRunQuery","onRunQueries","placeholder","groupSettings","zSpans","spanRows","transformSpan","span","traceID","traceId","spanID","parentSpanID","parentId","operationName","serviceName","localEndpoint","remoteEndpoint","serviceTags","timestamp","duration","logs","annotations","transformAnnotation","tags","reduce","acc","key","kind","shared","annotation","endpoint","valueToTag","ipv4","ipv6","port","identity","i","get","getEndpoint","l","t","toggleReducer","nextValue","initialValue","useReducer"],"sourceRoot":""}