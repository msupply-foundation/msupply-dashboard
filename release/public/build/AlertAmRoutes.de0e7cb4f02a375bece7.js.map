{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/utils/amroutes.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack:///./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack:///./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack:///./public/app/features/alerting/unified/components/DynamicTable.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack:///./public/app/features/alerting/unified/AmRoutes.tsx","webpack:///./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack:///./public/app/core/hooks/useCleanup.ts","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","defaultValueAndType","timeOptions","value","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","isEqual","intervalToValueAndType","strValue","valueType","parseInterval","undefined","timeOption","find","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","emptyRoute","id","groupBy","routes","continue","receiver","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","amRouteToFormAmRoute","route","keys","length","group_wait","group_interval","repeat_interval","Math","random","id2route","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","parseMatcher","match","match_re","group_by","formAmRouteToAmRoute","formAmRoute","id2ExistingRoute","existing","amRoute","stringifyMatcher","stringToSelectableValue","str","label","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","AmRootRouteForm","alertManagerSourceName","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","defaultValues","onSubmit","control","errors","setValue","className","render","field","onChange","options","href","makeAMLink","description","allowCustomValue","onCreateOption","opts","collapsible","isOpen","onToggle","invalid","error","message","cx","fieldState","rules","validate","menuPlacement","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","colors","text","primary","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","data-testid","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","getStyles","titleContainer","title","icon","size","background","EmptyArea","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","useStyles","button","bg2","textSemiWeak","xl","md","sm","collapseItem","items","itemId","currentItem","isExpanded","expandItem","DynamicTable","cols","isExpandable","onCollapse","onExpand","renderExpandedContent","testIdGenerator","useTheme2","isMobile","useMedia","row","cell","col","item","index","expandCell","expandButton","bodyCell","data-column","renderCell","expandedContentRow","sizes","unshift","border","strong","AmRoutesExpandedForm","formStyles","overrideGrouping","setOverrideGrouping","overrideTimings","setOverrideTimings","register","fields","append","remove","matchersContainer","localPath","align","required","defaultValue","placeholder","matcherRegexField","defaultChecked","removeButton","tooltip","addMatcherBtn","buttonGroup","commonSpacing","nestedPolicies","AmRoutesExpandedRead","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","setItems","getRenderEditExpandedContent","newItems","removeCustomExpandedContent","data","Matchers","addCustomExpandedContent","splice","useEffect","idCreator","prepareItems","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","addNewRoute","withErrorBoundary","dispatch","useDispatch","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","fetchConfig","fetchAlertManagerConfigAction","result","loading","resultLoading","resultError","initialAsyncRequestState","config","alertmanager_config","enterRootRouteEditMode","exitRootRouteEditMode","useCleanup","unifiedAlerting","saveAMConfig","saving","savingError","dispatched","savingDispatched","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","AlertingPageWrapper","pageId","AlertManagerPicker","current","severity","break","to","style","medium","onRemoveLabel","removeLabel","wrapper","matcher","labelKey","operator","matcherToOperator","xs","stateSelector","selectorRef","useRef","cleanUpAction","self","window","apply","Function","prototype","Timeout","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","queryParams","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","storeSource","get","disabled","imgUrl","meta","getAllDataSources","filter","DataSourceType","Alertmanager","substr","info","logos","small","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","children","isLoading","navModel","getNavModel","useSelector","navIndex","Contents"],"mappings":"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","file":"AlertAmRoutes.de0e7cb4f02a375bece7.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { SelectableValue } from '@grafana/data';\nimport { Validate } from 'react-hook-form';\nimport { Matcher, Route } from 'app/plugins/datasource/alertmanager/types';\nimport { FormAmRoute } from '../types/amroutes';\nimport { parseInterval, timeOptions } from './time';\nimport { parseMatcher, stringifyMatcher } from './alertmanager';\n\nconst defaultValueAndType: [string, string] = ['', timeOptions[0].value];\n\nconst matchersToArrayFieldMatchers = (matchers: Record<string, string> | undefined, isRegex: boolean): Matcher[] =>\n  Object.entries(matchers ?? {}).reduce(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        isRegex: isRegex,\n        isEqual: true,\n      },\n    ],\n    []\n  );\n\nconst intervalToValueAndType = (strValue: string | undefined): [string, string] => {\n  if (!strValue) {\n    return defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: Matcher = {\n  name: '',\n  value: '',\n  isRegex: false,\n  isEqual: true,\n};\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  matchers: [emptyArrayFieldMatcher],\n  groupBy: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n};\n\n//returns route, and a record mapping id to existing route route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route || Object.keys(route).length === 0) {\n    return [emptyRoute, {}];\n  }\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval);\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  return [\n    {\n      id,\n      matchers: [\n        ...(route.matchers?.map(parseMatcher) ?? []),\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      groupBy: route.group_by ?? [],\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (formAmRoute: FormAmRoute, id2ExistingRoute: Record<string, Route>): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: formAmRoute.groupBy,\n    matchers: formAmRoute.matchers.length ? formAmRoute.matchers.map(stringifyMatcher) : undefined,\n    match: undefined,\n    match_re: undefined,\n    group_wait: formAmRoute.groupWaitValue\n      ? `${formAmRoute.groupWaitValue}${formAmRoute.groupWaitValueType}`\n      : undefined,\n    group_interval: formAmRoute.groupIntervalValue\n      ? `${formAmRoute.groupIntervalValue}${formAmRoute.groupIntervalValueType}`\n      : undefined,\n    repeat_interval: formAmRoute.repeatIntervalValue\n      ? `${formAmRoute.repeatIntervalValue}${formAmRoute.repeatIntervalValueType}`\n      : undefined,\n    routes: formAmRoute.routes.map((subRoute) => formAmRouteToAmRoute(subRoute, id2ExistingRoute)),\n  };\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { cx } from '@emotion/css';\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\">\n            <div className={styles.container}>\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <Select\n                    {...field}\n                    className={styles.input}\n                    onChange={(value) => onChange(mapSelectValueToString(value))}\n                    options={receivers}\n                  />\n                )}\n                control={control}\n                name=\"receiver\"\n              />\n              <span>or</span>\n              <Link href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}>\n                Create a contact point\n              </Link>\n            </div>\n          </Field>\n          <Field label=\"Group by\" description=\"Group alerts when you receive a notification based on labels.\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={groupByOptions}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && (\n          <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n            Edit\n          </Button>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import React, { ButtonHTMLAttributes, FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, useStyles } from '@grafana/ui';\n\nexport interface EmptyAreaProps {\n  buttonLabel: string;\n  onButtonClick: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n}\n\nexport const EmptyArea: FC<EmptyAreaProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n}) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <p className={styles.text}>{text}</p>\n      <Button\n        className={styles.button}\n        icon={buttonIcon}\n        onClick={onButtonClick}\n        size={buttonSize}\n        type=\"button\"\n        variant={buttonVariant}\n      >\n        {buttonLabel}\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing.md};\n    `,\n    button: css`\n      margin: ${theme.spacing.md} 0 ${theme.spacing.sm};\n    `,\n  };\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n\nexport const collapseItem = <T = unknown>(\n  items: Array<DynamicTableItemProps<T>>,\n  itemId: DynamicTableItemProps<T>['id']\n): Array<DynamicTableItemProps<T>> =>\n  items.map((currentItem) => {\n    if (currentItem.id !== itemId) {\n      return currentItem;\n    }\n\n    return {\n      ...currentItem,\n      isExpanded: false,\n    };\n  });\n\nexport const expandItem = <T = unknown>(\n  items: Array<DynamicTableItemProps<T>>,\n  itemId: DynamicTableItemProps<T>['id']\n): Array<DynamicTableItemProps<T>> =>\n  items.map((currentItem) => {\n    if (currentItem.id !== itemId) {\n      return currentItem;\n    }\n\n    return {\n      ...currentItem,\n      isExpanded: true,\n    };\n  });\n\nexport const addCustomExpandedContent = <T = unknown>(\n  items: Array<DynamicTableItemProps<T>>,\n  itemId: DynamicTableItemProps<T>['id'],\n  renderExpandedContent: DynamicTableItemProps['renderExpandedContent']\n): Array<DynamicTableItemProps<T>> =>\n  items.map((currentItem) => {\n    if (currentItem.id !== itemId) {\n      return currentItem;\n    }\n\n    return {\n      ...currentItem,\n      renderExpandedContent,\n    };\n  });\n\nexport const removeCustomExpandedContent = <T = unknown>(\n  items: Array<DynamicTableItemProps<T>>,\n  itemId: DynamicTableItemProps<T>['id']\n): Array<DynamicTableItemProps<T>> =>\n  items.map((currentItem) => {\n    if (currentItem.id !== itemId) {\n      return currentItem;\n    }\n\n    return {\n      ...currentItem,\n      renderExpandedContent: undefined,\n    };\n  });\n","import React, { FC, ReactNode } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2, useTheme2 } from '@grafana/ui';\nimport { useMedia } from 'react-use';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell?: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n\n  renderExpandedContent?: () => ReactNode;\n  isExpanded?: boolean;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n  onCollapse?: (id: DynamicTableItemProps<T>) => void;\n  onExpand?: (id: DynamicTableItemProps<T>) => void;\n  renderExpandedContent?: (item: DynamicTableItemProps, index: number) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>) => string;\n}\n\nexport const DynamicTable: FC<DynamicTableProps> = ({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  renderExpandedContent,\n  testIdGenerator,\n}) => {\n  const styles = useStyles2(getStyles(cols, isExpandable));\n  const theme = useTheme2();\n  const isMobile = useMedia(`(${theme.breakpoints.down('sm')})`);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.row}>\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => (\n        <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item)}>\n          {isExpandable && (\n            <div className={cx(styles.cell, styles.expandCell)}>\n              <IconButton\n                size={isMobile ? 'xl' : 'md'}\n                className={styles.expandButton}\n                name={item.isExpanded ? 'angle-down' : 'angle-right'}\n                onClick={() => (item.isExpanded ? onCollapse?.(item) : onExpand?.(item))}\n                type=\"button\"\n              />\n            </div>\n          )}\n          {cols.map((col) => (\n            <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n              {col.renderCell?.(item, index)}\n            </div>\n          ))}\n          {item.isExpanded && (\n            <div className={styles.expandedContentRow}>\n              {item.renderExpandedContent ? item.renderExpandedContent() : renderExpandedContent?.(item, index)}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (cols: DynamicTableColumnProps[], isExpandable: boolean) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n      }\n    `,\n    cell: css`\n      align-items: center;\n      display: grid;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: 2;\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n    `,\n  });\n};\n","import React, { FC, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Checkbox,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [overrideGrouping, setOverrideGrouping] = useState(routes.groupBy.length > 0);\n  const [overrideTimings, setOverrideTimings] = useState(\n    !!routes.groupWaitValue || !!routes.groupIntervalValue || !!routes.repeatIntervalValue\n  );\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <div>Matching labels</div>\n                <div className={styles.matchersContainer}>\n                  {fields.map((field, index) => {\n                    const localPath = `matchers[${index}]`;\n                    return (\n                      <HorizontalGroup key={field.id} align=\"flex-start\">\n                        <Field\n                          label=\"Label\"\n                          invalid={!!errors.matchers?.[index]?.name}\n                          error={errors.matchers?.[index]?.name?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.name`, { required: 'Field is required' })}\n                            defaultValue={field.name}\n                            placeholder=\"label\"\n                          />\n                        </Field>\n                        <Field\n                          label=\"Value\"\n                          invalid={!!errors.matchers?.[index]?.value}\n                          error={errors.matchers?.[index]?.value?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.value`, { required: 'Field is required' })}\n                            defaultValue={field.value}\n                            placeholder=\"value\"\n                          />\n                        </Field>\n                        <Field className={styles.matcherRegexField} label=\"Regex\">\n                          <Checkbox {...register(`${localPath}.isRegex`)} defaultChecked={field.isRegex} />\n                        </Field>\n                        <Field className={styles.matcherRegexField} label=\"Equal\">\n                          <Checkbox {...register(`${localPath}.isEqual`)} defaultChecked={field.isEqual} />\n                        </Field>\n                        <IconButton\n                          className={styles.removeButton}\n                          tooltip=\"Remove matcher\"\n                          name={'trash-alt'}\n                          onClick={() => remove(index)}\n                        >\n                          Remove\n                        </IconButton>\n                      </HorizontalGroup>\n                    );\n                  })}\n                </div>\n                <Button\n                  className={styles.addMatcherBtn}\n                  icon=\"plus\"\n                  onClick={() => append(emptyArrayFieldMatcher)}\n                  variant=\"secondary\"\n                  type=\"button\"\n                >\n                  Add matcher\n                </Button>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch\n              value={overrideGrouping}\n              onChange={() => setOverrideGrouping((overrideGrouping) => !overrideGrouping)}\n            />\n          </Field>\n          {overrideGrouping && (\n            <Field label=\"Group by\" description=\"Group alerts when you receive a notification based on labels.\">\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={groupByOptions}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch\n              value={overrideTimings}\n              onChange={() => setOverrideTimings((overrideTimings) => !overrideTimings)}\n            />\n          </Field>\n          {overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matcherRegexField: css`\n      margin-left: ${theme.spacing(6)};\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { FC, useState } from 'react';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({ onChange, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && (\n          <Button\n            className={styles.addNestedRoutingBtn}\n            icon=\"plus\"\n            onClick={() => {\n              setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n              setIsAddMode(true);\n            }}\n            variant=\"secondary\"\n            type=\"button\"\n          >\n            Add nested policy\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Button, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  addCustomExpandedContent,\n  collapseItem,\n  expandItem,\n  prepareItems,\n  removeCustomExpandedContent,\n} from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\nimport { Matchers } from '../silences/Matchers';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({ isAddMode, onCancelAdd, onChange, receivers, routes }) => {\n  const [items, setItems] = useState<RouteTableItemProps[]>([]);\n\n  const getRenderEditExpandedContent = useCallback(\n    // eslint-disable-next-line react/display-name\n    (item: RouteTableItemProps, index: number) => () => (\n      <AmRoutesExpandedForm\n        onCancel={() => {\n          setItems((items) => {\n            let newItems = collapseItem(items, item.id);\n            newItems = removeCustomExpandedContent(newItems, item.id);\n\n            return newItems;\n          });\n\n          if (isAddMode) {\n            onCancelAdd();\n          }\n        }}\n        onSave={(data) => {\n          const newRoutes = [...routes];\n\n          newRoutes[index] = {\n            ...newRoutes[index],\n            ...data,\n          };\n\n          setItems((items) => collapseItem(items, item.id));\n\n          onChange(newRoutes);\n        }}\n        receivers={receivers}\n        routes={item.data}\n      />\n    ),\n    [isAddMode, onCancelAdd, onChange, receivers, routes]\n  );\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => <Matchers matchers={item.data.matchers} />,\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => item.data.groupBy.join(', ') || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'actions',\n      label: 'Actions',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item, index) => {\n        if (item.renderExpandedContent) {\n          return null;\n        }\n\n        const expandWithCustomContent = () =>\n          setItems((items) => {\n            let newItems = expandItem(items, item.id);\n            newItems = addCustomExpandedContent(newItems, item.id, getRenderEditExpandedContent(item, index));\n\n            return newItems;\n          });\n\n        return (\n          <HorizontalGroup>\n            <Button icon=\"pen\" onClick={expandWithCustomContent} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n            <IconButton\n              name=\"trash-alt\"\n              onClick={() => {\n                const newRoutes = [...routes];\n\n                newRoutes.splice(index, 1);\n\n                onChange(newRoutes);\n              }}\n              type=\"button\"\n            />\n          </HorizontalGroup>\n        );\n      },\n      size: '100px',\n    },\n  ];\n\n  useEffect(() => {\n    const items = prepareItems(routes).map((item, index, arr) => {\n      if (isAddMode && index === arr.length - 1) {\n        return {\n          ...item,\n          isExpanded: true,\n          renderExpandedContent: getRenderEditExpandedContent(item, index),\n        };\n      }\n\n      return {\n        ...item,\n        isExpanded: false,\n        renderExpandedContent: undefined,\n      };\n    });\n\n    setItems(items);\n  }, [routes, getRenderEditExpandedContent, isAddMode]);\n\n  return (\n    <DynamicTable\n      cols={cols}\n      isExpandable={true}\n      items={items}\n      onCollapse={(item: RouteTableItemProps) => setItems((items) => collapseItem(items, item.id))}\n      onExpand={(item: RouteTableItemProps) => setItems((items) => expandItem(items, item.id))}\n      testIdGenerator={() => 'am-routes-row'}\n      renderExpandedContent={(item: RouteTableItemProps, index) => (\n        <AmRoutesExpandedRead\n          onChange={(data) => {\n            const newRoutes = [...routes];\n\n            newRoutes[index] = {\n              ...item.data,\n              ...data,\n            };\n\n            onChange(newRoutes);\n          }}\n          receivers={receivers}\n          routes={item.data}\n        />\n      )}\n    />\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { EmptyArea } from '../EmptyArea';\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({ onChange, onRootRouteEdit, receivers, routes }) => {\n  const [actualRoutes, setActualRoutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  const styles = useStyles2(getStyles);\n\n  const addNewRoute = () => {\n    setIsAddMode(true);\n    setActualRoutes((actualRoutes) => [...actualRoutes, emptyRoute]);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        <EmptyArea\n          buttonIcon=\"rocket\"\n          buttonLabel=\"Set a default contact point\"\n          onButtonClick={onRootRouteEdit}\n          text=\"You haven't set a default contact point for the root route yet.\"\n        />\n      ) : actualRoutes.length > 0 ? (\n        <>\n          {!isAddMode && (\n            <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n              New policy\n            </Button>\n          )}\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setActualRoutes((actualRoutes) => {\n                const newRoutes = [...actualRoutes];\n                newRoutes.pop();\n\n                return newRoutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={actualRoutes}\n          />\n        </>\n      ) : (\n        <EmptyArea\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n      margin-bottom: ${theme.spacing(3.5)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useCleanup } from '../../../core/hooks/useCleanup';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, loading: resultLoading, error: resultError } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [routes, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const { loading: saving, error: savingError, dispatched: savingDispatched } = useUnifiedAlertingSelector(\n    (state) => state.saveAMConfig\n  );\n\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    const newData = formAmRouteToAmRoute(\n      {\n        ...routes,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (savingDispatched && !saving && !savingError) {\n      fetchConfig();\n    }\n  }, [fetchConfig, savingDispatched, saving, savingError]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/routes\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading alert manager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {resultLoading && <LoadingPlaceholder text=\"Loading alert manager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={routes}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            onChange={handleSave}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={routes}\n          />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n});\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alert manager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alert manager' : 'Choose alert manager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n"],"sourceRoot":""}