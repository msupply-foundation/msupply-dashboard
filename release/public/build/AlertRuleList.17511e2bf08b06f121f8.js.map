{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts","webpack:///./public/app/features/alerting/AlertHowToModal.tsx"],"names":["getAlertRulesAsync","options","async","dispatch","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","togglePauseAlertRule","id","post","state","locationService","getSearchObject","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","push","error","alertError","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","mapDispatchToProps","setSearchQuery","connector","connect","navModel","getNavModel","navIndex","alertRules","getAlertRuleItems","search","getSearchQuery","isLoading","AlertRuleListUnconnected","PureComponent","stateFilters","label","value","onStateFilterChanged","option","partial","onOpenHowTo","publish","ShowModalReactEvent","component","AlertHowToModal","onSearchQueryChange","this","props","onTogglePause","rule","paused","alertStateFilterOption","text","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Contents","className","placeholder","onChange","config","featureToggles","ngalert","variant","href","onClick","spacing","map","hot","module","AlertRuleItem","ruleUrl","url","panelId","renderText","useCallback","highlightClassName","textToHighlight","searchWords","heading","Figure","size","stateIcon","stateClass","Meta","stateText","stateAge","info","Actions","icon","searchQuery","regex","RegExp","items","filter","item","test","onDismiss","title","isOpen","onClickBackdrop","src","alt"],"mappings":"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","file":"AlertRuleList.17511e2bf08b06f121f8.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.featureToggles.ngalert && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default hot(module)(connector(AlertRuleListUnconnected));\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n"],"sourceRoot":""}