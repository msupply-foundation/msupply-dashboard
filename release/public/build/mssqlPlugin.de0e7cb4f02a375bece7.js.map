{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/config_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts"],"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","length","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","textFields","filter","type","FieldType","string","flatMap","toArray","map","v","Array","from","Set","transformToKeyValueList","rows","textColIndex","valueColIndex","res","this","containsKey","transformToSimpleList","j","unique","findColIndex","columns","colName","key","options","timeField","Promise","reject","message","timeEndField","tagsField","list","timeEnd","Math","floor","annotation","time","tags","trim","split","MssqlDatasource","DataSourceWithBackend","constructor","instanceSettings","templateSrv","getTemplateSrv","timeSrv","getTimeSrv","super","id","responseParser","interval","settingsData","jsonData","timeInterval","interpolateVariable","variable","multi","includeAll","replace","_map","val","join","interpolateVariablesInQueries","queries","scopedVars","expandedQueries","query","datasource","rawSql","rawQuery","applyTemplateVariables","target","refId","datasourceId","format","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","toPromise","metricFindQuery","optionalOptions","timeRange","interpolatedQuery","rsp","testDatasource","intervalMs","maxDataPoints","mapTo","status","catchError","err","console","error","of","targetContainsTemplate","variableExists","MssqlQueryCtrl","QueryCtrl","$scope","$injector","formats","lastQueryMeta","lastQueryError","showHelp","alias","panelCtrl","panel","events","on","PanelEvents","dataReceived","onDataReceived","bind","dataError","onDataError","dataList","meta","results","queryRes","templateUrl","MssqlConfigCtrl","onPasswordReset","onPasswordChange","showUserCredentials","encrypt","authenticationType","Password","onAuthenticationTypeChange","user","password","MssqlAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl"],"mappings":"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","file":"mssqlPlugin.de0e7cb4f02a375bece7.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { map } from 'lodash';\nimport { AnnotationEvent, DataFrame, FieldType, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, toDataQueryResponse, FetchResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      const textFields = frame.fields.filter((f) => f.type === FieldType.string);\n      if (textFields) {\n        values.push(\n          ...textFields\n            .flatMap((f) => f.values.toArray())\n            .map((v) => ({\n              text: '' + v,\n            }))\n        );\n      }\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number): MetricFindValue[] {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any): MetricFindValue[] {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return map(unique, (value) => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      return Promise.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { AnnotationEvent, DataSourceInstanceSettings, ScopedVars, MetricFindValue } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { MssqlQueryForInterpolation, MssqlQuery, MssqlOptions } from './types';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nexport class MssqlDatasource extends DataSourceWithBackend<MssqlQuery, MssqlOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MssqlOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    const settingsData = instanceSettings.jsonData || ({} as MssqlOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable(value: any, variable: any) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (val) => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  interpolateVariablesInQueries(\n    queries: MssqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MssqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  applyTemplateVariables(target: MssqlQuery, scopedVars: ScopedVars): Record<string, any> {\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(target.rawSql, scopedVars, this.interpolateVariable),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const range = this.timeSrv.timeRange();\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  testDatasource(): Promise<any> {\n    return getBackendSrv()\n      .fetch({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .pipe(\n        mapTo({ status: 'success', message: 'Database Connection OK' }),\n        catchError((err) => {\n          console.error(err);\n          if (err.data && err.data.message) {\n            return of({ status: 'error', message: err.data.message });\n          }\n\n          return of({ status: 'error', message: err.status });\n        })\n      )\n      .toPromise();\n  }\n\n  targetContainsTemplate(query: MssqlQuery): boolean {\n    const rawSql = query.rawSql.replace('$__', '');\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { MssqlQuery } from './types';\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl<MssqlQuery> {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nexport class MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n  showUserCredentials: boolean;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.current = $scope.ctrl.current;\n    this.current.jsonData.encrypt = this.current.jsonData.encrypt || 'false';\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType || 'SQL Server Authentication';\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.showUserCredentials = this.current.jsonData.authenticationType !== 'Windows Authentication';\n  }\n\n  onAuthenticationTypeChange() {\n    // This is using the fallback in https://github.com/denisenkom/go-mssqldb to use Windows Auth if login/user id is empty.\n    if (this.current.jsonData.authenticationType === 'Windows Authentication') {\n      this.current.user = '';\n      this.current.password = '';\n    }\n\n    this.showUserCredentials = this.current.jsonData.authenticationType !== 'Windows Authentication';\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\nimport { MssqlConfigCtrl } from './config_ctrl';\nimport { MssqlQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport const plugin = new DataSourcePlugin<MssqlDatasource, MssqlQuery>(MssqlDatasource)\n  .setQueryCtrl(MssqlQueryCtrl)\n  .setConfigCtrl(MssqlConfigCtrl)\n  .setAnnotationQueryCtrl(MssqlAnnotationsQueryCtrl);\n"],"sourceRoot":""}