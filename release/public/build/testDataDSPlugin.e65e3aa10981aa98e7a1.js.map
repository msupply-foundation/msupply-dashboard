{"version":3,"file":"testDataDSPlugin.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts","webpack://grafana/./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack://grafana/./public/app/plugins/datasource/testdata/runStreams.ts","webpack://grafana/./public/app/plugins/datasource/testdata/variables.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack://grafana/./public/app/plugins/datasource/testdata/datasource.ts","webpack://grafana/./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/constants.ts","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/module.tsx"],"sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\nimport { liveTimer } from 'app/features/dashboard/dashgrid/liveTimer';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      name: target.alias || 'Signal ' + target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = StreamingDataFrame.fromDataFrameJSON({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = liveTimer.lastUpdate - lastSent;\n      if (elapsed > 1000 || liveTimer.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = liveTimer.lastUpdate;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamDefaultReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: undefined,\n    };\n  }\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553, 15.906441318223264, 4.913011921591567, 7.4163203042094095, 1092, 22.85961441405067,\n        56.135855729084696, 4.45946191601527, 12.818300278280843, 4.25, 12.565442646791492, 77.63447512700567,\n        40.387096774193544, 77.63447512700567, 27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 682.4, 512.8416666666667, 125.64444444444445, 0.005585812037424941, 137.59722222222223,\n        300.0527777777778, 30.582348853370394, 125.77222222222223, 0.028706417080318163, 30.582348853370394, 165.675,\n        0.100021510002151, 165.675, 162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882, 1, 1, 1, 0.5, 1, 0.9901128505170387, 0.9069260134520997, 1, 0, 0.9069260134520997,\n        0.9624432037288534, 0, 0.9624432037288534, 0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0, 0, 0, 0, 0.5, 0, 0.009479813736472288, 0, 0, 0, 0, 0.017168821152524185, 0, 0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174, 0, 0, 0, 0, 0, 0.0004073357464890436, 0.09307398654790038, 0, 1, 0.09307398654790038,\n        0.02038797511862247, 1, 0.02038797511862247, 0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 125.77222222222223, 0.03333333333333333, 137.59722222222223, 0.022222222222222223,\n        299.96666666666664, 162.33055555555555, 0.005555555555555556, 125.64444444444445, 30.582348853370394,\n        50.51111111111111, 299.9166666666667, 0.100021510002151, 165.675, 682.4, 162.33055555555555, 30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields.subTitle.values.add(node.subTitle);\n    nodeFields.mainStat.values.add(node.stat1);\n    nodeFields.secondaryStat.values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { from, merge, Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { queryMetricTree } from './metricTree';\nimport { runStream } from './runStreams';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\nimport { TestDataVariableSupport } from './variables';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          if (target.alias) {\n            target.alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    query.labels = this.templateSrv.replace(query.labels!, scopedVars);\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({ data: [], error: ex }).pipe(delay(100));\n    }\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select menuShouldPortal width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, TestDataQuery } from './types';\n\nexport const defaultPulseQuery: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestDataQuery = {\n  scenarioId: 'random_walk',\n  refId: '',\n};\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { CSVWave } from '../types';\nimport { defaultCSVWaveQuery } from '../constants';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nclass CSVWaveEditor extends PureComponent<WaveProps> {\n  onFieldChange = (field: keyof CSVWave) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      [field]: value,\n    });\n  };\n\n  onNameChange = this.onFieldChange('name');\n  onLabelsChange = this.onFieldChange('labels');\n  onCSVChange = this.onFieldChange('valuesCSV');\n  onTimeStepChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const timeStep = e.target.valueAsNumber;\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      timeStep,\n    });\n  };\n\n  render() {\n    const { wave, last } = this.props;\n    let action = this.props.onAdd;\n    if (!last) {\n      action = () => {\n        this.props.onChange(this.props.index, undefined); // remove\n      };\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField\n          label={'Values'}\n          grow\n          tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n        >\n          <Input value={wave.valuesCSV} placeholder={'CSV values'} onChange={this.onCSVChange} autoFocus={true} />\n        </InlineField>\n        <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n          <Input value={wave.timeStep} type=\"number\" placeholder={'60'} width={6} onChange={this.onTimeStepChange} />\n        </InlineField>\n        <InlineField label={'Labels'}>\n          <Input value={wave.labels} placeholder={'labels'} width={12} onChange={this.onLabelsChange} />\n        </InlineField>\n        <InlineField label={'Name'}>\n          <Input value={wave.name} placeholder={'name'} width={10} onChange={this.onNameChange} />\n        </InlineField>\n        <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={action} />\n      </InlineFieldRow>\n    );\n  }\n}\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-labeled-stream',\n    value: 'random-labeled-stream',\n    description: 'Value with moving labels',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          menuShouldPortal\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","import React, { useState } from 'react';\nimport { Alert, CodeEditor } from '@grafana/ui';\nimport { EditorProps } from '../QueryEditor';\nimport { isArray } from 'lodash';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data: any = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'ohlc_dogecoin.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          menuShouldPortal\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { CodeEditor } from '@grafana/ui';\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onSaveCSV = (csvContent: string) => {\n    onChange({ ...query, csvContent });\n  };\n\n  return (\n    <CodeEditor\n      height={300}\n      language=\"csv\"\n      value={query.csvContent ?? ''}\n      onBlur={onSaveCSV}\n      onSave={onSaveCSV}\n      showMiniMap={false}\n      showLineNumbers={true}\n    />\n  );\n};\n","import React from 'react';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            menuShouldPortal\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            menuShouldPortal\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            menuShouldPortal\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","// Libraries\nimport React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\n// Components\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\n\n// Types\nimport { TestDataDataSource } from './datasource';\nimport { CSVWave, NodesQuery, TestDataQuery, USAQuery } from './types';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    return datasource.getScenarios();\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            menuShouldPortal\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        <InlineField label=\"Alias\" labelWidth={14}>\n          <Input\n            width={32}\n            id={`alias-${query.refId}`}\n            type=\"text\"\n            placeholder=\"optional\"\n            pattern='[^<>&\\\\\"]+'\n            name=\"alias\"\n            value={query.alias}\n            onChange={onInputChange}\n          />\n        </InlineField>\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} />}\n      {scenarioId === 'streaming_client' && <StreamingClientEditor onChange={onStreamClientChange} query={query} />}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'raw_frame' && <RawFrameEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            menuShouldPortal\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && <PredictablePulseEditor onChange={onPulseWaveChange} query={query} />}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"names":["buildMetricTree","parent","depth","chars","children","letter","nodeName","push","name","queryTree","query","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","indexOf","pattern","RegExp","test","concat","queryMetricTree","index","getNextWord","Math","floor","random","words","defaultStreamQuery","type","speed","spread","noise","bands","runStream","target","req","defaults","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","schema","alias","fields","FieldType","i","suffix","frame","StreamingDataFrame","maxLength","value","timeoutId","lastSent","addNextRow","time","data","values","min","max","event","Date","now","pushNextEvent","liveTimer","next","key","state","LoadingState","setTimeout","console","log","clearTimeout","runSignalStream","CircularDataFrame","append","capacity","addField","meta","preferredVisualisationType","add","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","complete","read","then","url","Error","fetch","Request","response","body","getReader","runFetchStream","TestDataVariableSupport","StandardVariableSupport","toDataQuery","stringInput","scenarioId","csvWave","undefined","nodes","NodeGraphDataFrameFieldNames","config","links","title","internal","queryType","datasourceUid","datasourceName","displayName","unit","color","mode","FieldColorModeId","fixedColor","edges","makeRandomNode","success","error","id","toString","subTitle","stat1","stat2","TestDataDataSource","DataSourceWithBackend","constructor","instanceSettings","templateSrv","getTemplateSrv","super","this","variables","options","backendQueries","streams","targets","hide","resolveTemplateVariables","scopedVars","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","rawFrameQuery","csvContent","points","point","backendOpts","of","merge","labels","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","pipe","delay","count","timeWalker","from","valueOf","step","to","tags","annotationQuery","Promise","resolve","getQueryDisplayText","testDatasource","status","message","getScenarios","scenariosCache","getResource","items","getSearchFilterScopedVar","wildcardChar","map","item","frames","root","nodesWithoutMaxEdges","maxEdges","sourceIndex","source","splice","additionalEdges","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","mainStat","secondaryStat","arc__success","arc__errors","edge","has","generateRandomNodes","JSON","parse","rawFrameContent","v","f","toDataFrame","ex","getBackendSrv","get","res","liveQueryCounter","channel","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","path","TestInfoTab","PureComponent","props","render","LinkButton","variant","href","rel","ConfigEditor","streamingClientFields","label","placeholder","types","StreamingClientEditor","onChange","onInputChange","e","Number","InlineFieldRow","InlineField","labelWidth","Select","menuShouldPortal","width","defaultValue","Input","grow","randomWalkFields","tooltip","testSelectors","selectors","RandomWalkEditor","selector","PredictablePulseEditor","pulseWave","defaultPulseQuery","timeStep","onCount","onValue","offCount","offValue","defaultCSVWaveQuery","valuesCSV","defaultQuery","CSVWaveEditor","wave","onFieldChange","valueAsNumber","last","action","onAdd","onCSVChange","autoFocus","onTimeStepChange","onLabelsChange","onNameChange","Button","icon","onClick","CSVWavesEditor","waves","liveTestDataChannels","description","GrafanaLiveEditor","find","NodeGraphEditor","o","currentTarget","parseInt","RawFrameEditor","setError","useState","warning","setWarning","onSaveFrames","json","isArray","series","toDataFrameDTO","toDataQueryResponse","dataFrameToJSON","stringify","Alert","severity","CodeEditor","height","language","onBlur","onSave","showMiniMap","showLineNumbers","CSVFileEditor","files","csvFileName","CSVContentEditor","onSaveCSV","USAQueryEditor","usaQueryModes","ep","period","MultiSelect","fieldNames","vals","stateNames","states","showLabelsFor","endpoints","editorSelectors","TestDataAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","onRunQuery","loading","scenarioList","useAsync","async","onUpdate","currentScenario","useMemo","scenario","newValue","checked","onStreamClientChange","onPulseWaveChange","sort","a","b","localeCompare","showLabels","includes","scenarioSelectContainer","inputId","sc","update","usa","lines","InlineSwitch","levelColumn","TextArea","rows","val","setAnnotationQueryCtrl","addConfigPage"],"sourceRoot":""}