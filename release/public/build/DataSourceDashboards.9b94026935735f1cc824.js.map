{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/DataSourceDashboards.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","edition","hasValidLicense","config","licenseInfo","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","link","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","pluginCatalogURL","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","async","dispatch","getState","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","err","console","error","initDataSourceSettingsFailed","Error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","statusText","message","errMessage","details","data","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","uid","byUid","fetch","method","showErrorAlert","toPromise","ok","log","parseInt","Number","isNaN","toString","window","location","href","locationUtil","assureBaseUrl","getDataSourceUsingUidOrId","pluginInfo","getPluginSettings","meta","isBackend","DataSourceClass","prototype","DataSourceWithBackend","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","locationService","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","then","settings","datasources","defaultDatasource","init","endsWith","slice","mapDispatchToProps","importDashboard","loadPluginDashboards","removeDashboard","connector","connect","state","props","dataSourceId","match","params","navModel","getNavModel","navIndex","dashboards","isLoading","isLoadingPluginDashboards","DataSourceDashboards","PureComponent","dashboard","overwrite","this","pluginId","path","inputs","value","importedUri","render","Contents","onImport","onRemove","pluginMeta","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","hasLicense","hideFromTabs","caching","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeName","typeLogoUrl","user","secureJsonFields","getDataSources","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount"],"mappings":"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","file":"DataSourceDashboards.9b94026935735f1cc824.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-honeycomb-datasource',\n      description: 'Honeycomb integration ad datasource',\n      name: 'Honeycomb',\n      imgUrl: 'public/img/plugins/honeycomb.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport config from '../../../core/config';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!pageId) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n\n      // have we already loaded the plugin then we can skip the steps below?\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        const { statusText, message: errMessage, details, data } = err;\n\n        const message = errMessage || data?.message || 'HTTP error ' + statusText;\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const dataSource = await getDataSourceUsingUidOrId(uid);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: isBackend,\n    };\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\n/**\n * Get data source by uid or id, if old id detected handles redirect\n */\nasync function getDataSourceUsingUidOrId(uid: string): Promise<DataSourceSettings> {\n  // Try first with uid api\n  try {\n    const byUid = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/uid/${uid}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    if (byUid.ok) {\n      return byUid.data;\n    }\n  } catch (err) {\n    console.log('Failed to lookup data source by uid', err);\n  }\n\n  // try lookup by old db id\n  const id = parseInt(uid, 10);\n  if (!Number.isNaN(id)) {\n    const response = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/${id}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    // Not ideal to do a full page reload here but so tricky to handle this\n    // otherwise We can update the location using react router, but need to\n    // fully reload the route as the nav model page index is not matching with\n    // the url in that case. And react router has no way to unmount remount a\n    // route\n    if (response.ok && response.data.id.toString() === uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${response.data.uid}`);\n      return {} as DataSourceSettings; // avoids flashing an error\n    }\n  }\n\n  throw Error('Could not find data source');\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    locationService.push(`/datasources/edit/${result.datasource.uid}`);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource); // by UID not yet supported\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n\n    locationService.push('/datasources');\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init(config.datasources, settings.defaultDatasource);\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${dataSourceId}`),\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n    dataSourceId,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, dataSourceId } = this.props;\n    await loadDataSource(dataSourceId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={(dashboard) => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceDashboards);\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'database',\n      id: `datasource-cache-${dataSource.id}`,\n      text: 'Cache',\n      url: `datasources/edit/${dataSource.id}/cache`,\n      hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeName: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}