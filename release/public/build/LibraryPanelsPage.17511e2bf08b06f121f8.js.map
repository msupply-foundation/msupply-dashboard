{"version":3,"sources":["webpack:///./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx","webpack:///./public/app/features/library-panels/LibraryPanelsPage.tsx"],"names":["OpenLibraryPanelModal","libraryPanel","onDismiss","styles","useStyles2","getStyles","loading","setLoading","useState","connected","setConnected","option","setOption","undefined","useEffect","async","connectedDashboards","getLibraryPanelConnectedDashboards","uid","length","getConnected","loadOptions","useCallback","searchString","options","getConnectedDashboards","filter","d","title","toLowerCase","includes","map","label","value","loadOptionsAsync","debouncedLoadOptions","useMemo","debounce","leading","trailing","onClickBackdrop","isOpen","className","container","isClearable","isLoading","defaultOptions","onChange","placeholder","noOptionsMessage","ButtonRow","variant","onClick","fill","e","preventDefault","locationService","push","urlUtil","renderUrl","disabled","Boolean","theme","css","mapStateToProps","state","navModel","getNavModel","navIndex","LibraryPanelsPage","connect","selected","setSelected","Contents","showSecondaryActions","showSort","showPanelFilter","showFolderFilter"],"mappings":"oOAgBO,SAASA,GAAsB,aAAEC,EAAF,UAAgBC,IACpD,MAAMC,EAASC,qBAAWC,IACnBC,EAASC,GAAcC,oBAAS,IAChCC,EAAWC,GAAgBF,mBAAS,IACpCG,EAAQC,GAAaJ,wBAA0DK,GACtFC,oBAAU,KACaC,WACnB,MAAMC,QAA4BC,YAAmChB,EAAaiB,KAClFR,EAAaM,EAAoBG,SAEnCC,IACC,CAACnB,EAAaiB,MACjB,MAAMG,EAAcC,sBACjBC,GAkDLR,eAAgCG,EAAaK,EAAsBhB,GACjEA,GAAW,GACX,MACMiB,SADmBC,YAAuBP,IAE7CQ,OAAQC,GAAMA,EAAEC,MAAMC,cAAcC,SAASP,EAAaM,gBAC1DE,IAAKJ,IAAD,CAAUK,MAAOL,EAAEC,MAAOK,MAAON,KAGxC,OAFApB,GAAW,GAEJiB,EA1DqBU,CAAiBjC,EAAaiB,IAAKK,EAAchB,GAC3E,CAACN,EAAaiB,MAEViB,EAAuBC,kBAAQ,IAAMC,mBAAShB,EAAa,IAAK,CAAEiB,SAAS,EAAMC,UAAU,IAAS,CACxGlB,IAOF,OACE,eAAC,QAAD,CAAOO,MAAM,0BAA0B1B,UAAWA,EAAWsC,gBAAiBtC,EAAWuC,QAAM,EAA/F,UACE,sBAAKC,UAAWvC,EAAOwC,UAAvB,UACiB,IAAdlC,EAAA,MACC,gHACE,KACHA,EAAY,EACX,qCACE,4DAC8B,IAC5B,mCACGA,EADH,IACeA,EAAY,EAAI,aAAe,eAHhD,0DAOA,cAAC,cAAD,CACEmC,aAAW,EACXC,UAAWvC,EACXwC,gBAAgB,EAChBzB,YAAac,EACbY,SAAUnC,EACVoC,YAAY,uCACZC,iBAAiB,2BAGnB,QAEN,eAAC,QAAMC,UAAP,WACE,cAAC,SAAD,CAAQC,QAAQ,YAAYC,QAASlD,EAAWmD,KAAK,UAArD,oBAGA,cAAC,SAAD,CAAQD,QApCOE,IAAqC,MACxDA,EAAEC,iBACFC,kBAAgBC,KAAKC,UAAQC,UAAW,OAAKhD,SAAN,UAAMA,EAAQsB,aAAd,aAAM,EAAef,KAAO,MAkCjC0C,UAAWC,QAAQlD,GAAjD,SACGA,EAAU,iBAAgBA,aAAjB,EAAiBA,EAAQqB,WAAa,qCAkB1D,SAAS3B,EAAUyD,GACjB,MAAO,CACLnB,UAAWoB,KAAI,M,kCC5FnB,iJAWA,MAAMC,EAAmBC,IAAD,CACtBC,SAAUC,YAAYF,EAAMG,SAAU,oBAS3BC,GANKC,kBAAQN,OAAiBnD,GAMC,EAAGqD,eAC7C,MAAOK,EAAUC,GAAehE,wBAAwCK,GAExE,OACE,cAAC,IAAD,CAAMqD,SAAUA,EAAhB,SACE,eAAC,IAAKO,SAAN,WACE,cAAC,IAAD,CAAqBrB,QAASoB,EAAaE,sBAAoB,EAACC,UAAQ,EAACC,iBAAe,EAACC,kBAAgB,IACxGN,EAAW,cAAC,IAAD,CAAuBrE,UAAW,IAAMsE,OAAY3D,GAAYZ,aAAcsE,IAAe,YAMlGD,4BAAQN,EAARM,CAAyBD","file":"LibraryPanelsPage.17511e2bf08b06f121f8.js","sourcesContent":["import React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { LibraryElementDTO } from '../../types';\nimport { DashboardSearchHit } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { debounce } from 'lodash';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchHit> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 300, { leading: true, trailing: true }), [\n    loadOptions,\n  ]);\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal title=\"View panel in dashboard\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>Panel is not linked to a dashboard. Add the panel to a dashboard and retry.</span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              This panel is being used in{' '}\n              <strong>\n                {connected} {connected > 1 ? 'dashboards' : 'dashboard'}\n              </strong>\n              .Please choose which dashboard to view the panel in:\n            </p>\n            <AsyncSelect\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder=\"Start typing to search for dashboard\"\n              noOptionsMessage=\"No dashboards found\"\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option ? `View panel in ${option?.label}...` : 'View panel in dashboard...'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n","import React, { FC, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { StoreState } from '../../types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport Page from '../../core/components/Page/Page';\nimport { LibraryPanelsSearch } from './components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { LibraryElementDTO } from './types';\nimport { OpenLibraryPanelModal } from './components/OpenLibraryPanelModal/OpenLibraryPanelModal';\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'library-panels'),\n});\n\nconst connector = connect(mapStateToProps, undefined);\n\ninterface OwnProps extends GrafanaRouteComponentProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const LibraryPanelsPage: FC<Props> = ({ navModel }) => {\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <LibraryPanelsSearch onClick={setSelected} showSecondaryActions showSort showPanelFilter showFolderFilter />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connect(mapStateToProps)(LibraryPanelsPage);\n"],"sourceRoot":""}