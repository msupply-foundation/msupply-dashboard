{"version":3,"sources":["webpack:///./public/app/features/org/OrgProfile.tsx","webpack:///./public/app/features/org/OrgDetailsPage.tsx","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./public/app/features/org/state/actions.ts"],"names":["OrgProfile","onSubmit","orgName","defaultValues","register","label","type","required","OrgDetailsPage","PureComponent","onUpdateOrganization","this","props","setOrganizationName","updateOrganization","loadOrganization","render","navModel","organization","isLoading","Object","keys","length","Contents","spacing","name","resourceUri","mapDispatchToProps","hot","module","connect","state","getNavModel","navIndex","themes","value","SharedPreferences","constructor","super","service","onSubmitForm","async","homeDashboardId","theme","timezone","update","window","location","reload","onThemeChanged","setState","onTimeZoneChanged","onHomeDashboardChanged","dashboardId","getFullDashName","dashboard","folderTitle","title","PreferencesService","dashboards","prefs","load","backendSrv","search","starred","find","d","id","missing","dashboardIds","push","tags","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","styles","getStyles","options","item","onChange","className","labelText","content","aria-label","getOptionValue","i","getOptionLabel","placeholder","selectors","components","TimeZonePicker","container","includeInternal","variant","stylesFactory","css","dependencies","getBackendSrv","organizationResponse","get","dispatch","organizationLoaded","getStore","put","updateConfigurationSubtitle"],"mappings":"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","file":"OrgDetailsPage.17511e2bf08b06f121f8.js","sourcesContent":["import React, { FC } from 'react';\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\">\n          <Field label=\"Organization name\">\n            <Input type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport OrgProfile from './OrgProfile';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { Organization, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { setOrganizationName } from './state/reducers';\nimport { VerticalGroup } from '@grafana/ui';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />\n              <SharedPreferences resourceUri=\"org\" />\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage));\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n    this.service.update({ homeDashboardId, theme, timezone });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: DashboardSearchHit) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                aria-label=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: DashboardSearchHit) => this.onHomeDashboardChanged(dashboard.id)}\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { ThunkResult } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { organizationLoaded } from './reducers';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n"],"sourceRoot":""}