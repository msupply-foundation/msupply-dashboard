{"version":3,"sources":["webpack:///./node_modules/uuid/dist/esm-browser/parse.js","webpack:///./node_modules/uuid/dist/esm-browser/sha1.js","webpack:///./node_modules/uuid/dist/esm-browser/v5.js","webpack:///./node_modules/uuid/dist/esm-browser/v35.js","webpack:///./public/app/plugins/datasource/loki/query_utils.ts","webpack:///./public/app/plugins/datasource/loki/types.ts","webpack:///./public/app/plugins/datasource/loki/result_transformer.ts","webpack:///./node_modules/rxjs/_esm5/internal/observable/dom/WebSocketSubject.js","webpack:///./public/app/plugins/datasource/loki/live_streams.ts","webpack:///./node_modules/rxjs/_esm5/internal/observable/dom/webSocket.js","webpack:///./public/app/plugins/datasource/loki/importing/fromGraphite.ts","webpack:///./public/app/plugins/datasource/loki/language_provider.ts","webpack:///./public/app/plugins/datasource/loki/datasource.ts","webpack:///./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiExploreQueryEditor.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack:///./public/app/plugins/datasource/loki/LokiAnnotationsQueryCtrl.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/loki/module.ts","webpack:///./public/app/plugins/datasource/loki/syntax.ts","webpack:///./node_modules/react-use/esm/usePrevious.js"],"names":["uuid","validate","TypeError","v","arr","Uint8Array","parseInt","slice","s","x","y","z","ROTL","n","generateUUID","value","namespace","buf","offset","str","unescape","encodeURIComponent","bytes","i","length","push","charCodeAt","stringToBytes","set","hashfunc","version","stringify","name","err","DNS","URL","v35","K","H","msg","Array","isArray","prototype","call","l","N","Math","ceil","M","_i","Uint32Array","j","pow","floor","_i2","W","t","_t","a","b","c","d","e","_t2","T","getHighlighterExpressionsFromQuery","input","expression","results","filterStart","search","filterOperator","substr","skip","filterEnd","filterTerm","trim","quotedTerm","match","unwrappedFilterTerm","regexOperator","escapeRegExp","LokiResultType","lokiStreamResultToDataFrame","stream","reverse","refId","labels","labelsString","Object","entries","map","key","val","sort","join","times","ArrayVector","timesNs","lines","uids","usedUids","ts","line","values","add","Date","toISOString","createUid","dataFrame","fields","type","FieldType","time","config","displayName","string","mutableDataFrame","MutableDataFrame","constructDataFrame","id","uuidv5","newCount","lokiMatrixToTimeSeries","matrixResult","options","labelData","label","undefined","isEmpty","legendFormat","metricName","__name__","labelPart","getOriginalMetricName","aliasPattern","getTemplateSrv","replace","scopedVars","aliasData","_","g1","query","createMetricLabel","metric","target","title","datapoints","lokiPointsToTimeseriesPoints","tags","meta","data","stepMs","step","baseTimestampMs","start","datapointValue","parseFloat","isNaN","timestamp","endTimestamp","end","lokiResultsToTableModel","lokiResults","resultCount","valueWithRefId","TableModel","sortedLabels","Set","reduce","acc","cur","concat","keys","table","columns","text","filterable","number","forEach","series","newSeries","rows","lokiStreamsToDataFrames","response","limit","result","stats","section","unit","test","capitalize","m","toLowerCase","lokiStatsToMetaStat","searchWords","selector","expr","custom","lokiQueryStatKey","preferredVisualisationType","enhanceDataFrame","some","f","error","derivedFields","derivedFieldsGrouped","groupBy","newFields","fieldFromDerivedFieldConfig","DataFrameView","row","field","logMatch","matcherRegex","derivedFieldConfigs","dataSourceSrv","getDataSourceSrv","dataLinks","derivedFieldConfig","datasourceUid","dsSettings","getInstanceSettings","url","internal","datasourceName","links","rangeQueryResponseToTimeSeries","responseListLength","transformerOptions","format","resultType","Vector","vecResult","Matrix","DEFAULT_WEBSOCKET_CONFIG","deserializer","JSON","parse","serializer","_super","WebSocketSubject","urlConfigOrSource","destination","_this","this","Observable","source","_config","_output","Subject","hasOwnProperty","WebSocketCtor","WebSocket","Error","ReplaySubject","lift","operator","sock","_resetState","_socket","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","subscription","subscribe","complete","unsubscribe","_connectSocket","_a","protocol","binaryType","socket","Subscription","readyState","close","onopen","openObserver","queue","Subscriber","create","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","LiveStreams","streams","getStream","retryInterval","CircularDataFrame","capacity","size","addField","parseLabels","other","pipe","baseLabels","tsField","tsNsField","lineField","labelsField","idField","unique","findUniqueLabels","allLabelsString","appendResponseToBufferedData","retryWhen","attempts","mergeMap","retryAttempt","console","warn","timer","throwError","finalize","GRAPHITE_TO_LOKI_OPERATOR","fromGraphite","graphiteQuery","matchingFound","seriesByTagUsed","tag","targetNodes","segments","segment","mappings","filter","mapping","matchers","every","matcher","index","labelName","converted","includes","pairs","DEFAULT_KEYS","RATE_RANGES","sortValue","wrapLabel","filterText","LokiLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","labelKeys","labelFetchTs","started","lookupsDisabled","seriesCache","LRU","labelsCache","cleanText","request","async","params","metadataRequest","startTask","fetchLabels","then","getBeginningCompletionItems","context","suggestions","getEmptyCompletionItems","getTermCompletionItems","prefixMatch","items","FUNCTIONS","suggestion","kind","getPipeCompletionItem","PIPE_OPERATORS","PIPE_PARSERS","fetchSeriesLabels","from","to","getTimeRangeParams","cacheKey","generateCacheKey","get","processLabels","fetchSeries","assign","getSyntax","syntax","getLabelKeys","wrapperClasses","prefix","emptyResult","empty","document","selectedLines","getTextsAtRange","selection","currentLine","first","getText","nextCharacter","anchor","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","history","historyItems","chain","h","uniq","take","item","cutoffTs","now","historyForItem","hint","recent","dateTime","fromNow","documentation","addHistoryMetadata","skipSort","labelKey","anchorBlock","cursorOffset","isValueStart","parsedSelector","parseSelector","existingKeys","labelValues","getLabelValues","getSeriesLabels","possibleKeys","difference","newSuggestion","queries","originDataSource","datasourceType","Promise","all","importPrometheusQuery","rest","graphiteDataSource","model","GraphiteQueryModel","textEditor","parseTarget","getImportQueryConfiguration","loki","selectorMatch","selectorRegexp","labelRegexp","labelsToKeep","timeRange","valueOf","res","forceRefresh","param","roundTime","nanos","fetchLabelValues","rangeParams","DEFAULT_QUERY_PARAMS","direction","LokiDatasource","DataSourceApi","instanceSettings","templateSrv","timeSrv","getTimeSrv","languageProvider","maxLines","runInstantQuery","timeNs","getTime","range","queryLimit","isMetricsQuery","maxDataPoints","min","Infinity","_request","Stream","jsonData","catchError","throwUnless","status","runRangeQuery","liveStreaming","runLiveQuery","createRangeQuery","switchMap","of","processRangeQueryResponse","liveTarget","createLiveTarget","state","LoadingState","Streaming","getLogRowContext","prepareLogRowContextQueryTarget","message","statusText","toPromise","commonTargetOptions","nsTimestamp","FieldCache","getFieldByName","rowIndex","timeEpochMs","settingsData","apiUrl","baseUrl","serializeParams","req","getBackendSrv","fetch","subQueries","filteredTargets","targets","hide","interpolateQueryExpr","instant","Done","merge","startNs","endNs","rangeMs","adjustedInterval","adjustInterval","intervalMs","alignedTimes","convertToWebSocketUrl","interpolateVariablesInQueries","expandedQueries","getQueryDisplayText","importQueries","hideFromInspector","resolve","interpolated","processMetricFindQuery","labelNamesQuery","labelValuesQuery","variable","multi","includeAll","lokiRegularEscape","lokiSpecialRegexEscape","lodashMap","modifyQuery","action","addLabelToQuery","getHighlighterExpression","date","roundUp","dateMath","testDatasource","tagKeys","titleFormat","textFormat","annotation","interpolatedExpr","annotations","splitKeys","split","frame","String","apply","renderTemplate","showContextToggle","condition","processError","cloneDeep","interval","max","_match","Prism","tokenize","DEFAULT_EXAMPLES","PREFERRED_LABELS","LOGQL_EXAMPLES","LokiCheatSheet","PureComponent","userLabelTimer","userExamples","checkUserLabels","provider","props","preferredLabel","find","shuffle","setState","scheduleUserLabelChecking","componentDidMount","componentWillUnmount","clearTimeout","setTimeout","renderExpression","onClickExample","className","onClick","render","example","href","LokiExploreQueryEditor","onChange","onRunQuery","LokiQueryField","onBlur","ExtraFieldElement","LokiOptionFields","queryType","lineLimitValue","toString","memo","LokiQueryEditor","legendField","width","tooltip","placeholder","nextQuery","currentTarget","data-testid","testIds","editor","runOnBlur","LokiQueryEditorForAlerting","LokiQueryEditorByApp","app","CoreApp","CloudAlerting","LokiAnnotationsQueryCtrl","$scope","ctrl","onQueryChange","bind","templateUrl","FormField","LegacyForms","MaxLinesField","labelWidth","inputWidth","inputEl","event","spellCheck","Switch","getStyles","stylesFactory","css","nameField","regexField","DerivedField","onDelete","styles","showInternalLink","setShowInternalLink","useState","previousUid","usePrevious","useEffect","handleChange","variant","icon","preventDefault","newValue","checked","tracing","ds","uid","current","DebugSection","debugText","setDebugText","debugFields","testMatch","link","getFieldLinksForExplore","makeDebugFields","cx","DebugFields","theme","infoText","spacing","md","colors","textWeak","derivedField","sm","DerivedFields","useTheme","showDebug","setShowDebug","newField","newDerivedFields","splice","DataLinkBuiltInVars","valueRaw","origin","VariableOrigin","Value","makeJsonUpdater","setMaxLines","setDerivedFields","plugin","DataSourcePlugin","Datasource","setQueryEditor","setConfigEditor","onOptionsChange","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField","setQueryEditorHelp","setAnnotationQueryCtrl","insertText","move","detail","tokenizer","comment","pattern","lookbehind","inside","alias","punctuation","greedy","RegExp","function","ref"],"mappings":"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","file":"lokiPlugin.17511e2bf08b06f121f8.js","sourcesContent":["import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import { escapeRegExp } from 'lodash';\n\nexport function formatQuery(selector: string | undefined): string {\n  return `${selector || ''}`.trim();\n}\n\n/**\n * Returns search terms from a LogQL query.\n * E.g., `{} |= foo |=bar != baz` returns `['foo', 'bar']`.\n */\nexport function getHighlighterExpressionsFromQuery(input: string): string[] {\n  let expression = input;\n  const results = [];\n\n  // Consume filter expression from left to right\n  while (expression) {\n    const filterStart = expression.search(/\\|=|\\|~|!=|!~/);\n    // Nothing more to search\n    if (filterStart === -1) {\n      break;\n    }\n    // Drop terms for negative filters\n    const filterOperator = expression.substr(filterStart, 2);\n    const skip = expression.substr(filterStart).search(/!=|!~/) === 0;\n    expression = expression.substr(filterStart + 2);\n    if (skip) {\n      continue;\n    }\n    // Check if there is more chained\n    const filterEnd = expression.search(/\\|=|\\|~|!=|!~/);\n    let filterTerm;\n    if (filterEnd === -1) {\n      filterTerm = expression.trim();\n    } else {\n      filterTerm = expression.substr(0, filterEnd).trim();\n      expression = expression.substr(filterEnd);\n    }\n\n    // Unwrap the filter term by removing quotes\n    const quotedTerm = filterTerm.match(/^\"((?:[^\\\\\"]|\\\\\")*)\"$/);\n\n    if (quotedTerm) {\n      const unwrappedFilterTerm = quotedTerm[1];\n      const regexOperator = filterOperator === '|~';\n      results.push(regexOperator ? unwrappedFilterTerm : escapeRegExp(unwrappedFilterTerm));\n    } else {\n      return [];\n    }\n  }\n\n  return results;\n}\n","import { DataQuery, DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\n\nexport interface LokiInstantQueryRequest {\n  query: string;\n  limit?: number;\n  time?: string;\n  direction?: 'BACKWARD' | 'FORWARD';\n}\n\nexport interface LokiRangeQueryRequest {\n  query: string;\n  limit?: number;\n  start?: number;\n  end?: number;\n  step?: number;\n  direction?: 'BACKWARD' | 'FORWARD';\n}\n\nexport enum LokiResultType {\n  Stream = 'streams',\n  Vector = 'vector',\n  Matrix = 'matrix',\n}\n\nexport interface LokiQuery extends DataQuery {\n  expr: string;\n  query?: string;\n  format?: string;\n  reverse?: boolean;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  maxLines?: number;\n  range?: boolean;\n  instant?: boolean;\n}\n\nexport interface LokiOptions extends DataSourceJsonData {\n  maxLines?: string;\n  derivedFields?: DerivedFieldConfig[];\n}\n\nexport interface LokiStats {\n  [component: string]: {\n    [label: string]: number;\n  };\n}\n\nexport interface LokiVectorResult {\n  metric: { [label: string]: string };\n  value: [number, string];\n}\n\nexport interface LokiVectorResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Vector;\n    result: LokiVectorResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiMatrixResult {\n  metric: Record<string, string>;\n  values: Array<[number, string]>;\n}\n\nexport interface LokiMatrixResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Matrix;\n    result: LokiMatrixResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiStreamResult {\n  stream: Record<string, string>;\n  values: Array<[string, string]>;\n}\n\nexport interface LokiStreamResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Stream;\n    result: LokiStreamResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiTailResponse {\n  streams: LokiStreamResult[];\n  dropped_entries?: Array<{\n    labels: Record<string, string>;\n    timestamp: string;\n  }> | null;\n}\n\nexport type LokiResult = LokiVectorResult | LokiMatrixResult | LokiStreamResult;\nexport type LokiResponse = LokiVectorResponse | LokiMatrixResponse | LokiStreamResponse;\n\nexport interface LokiLogsStreamEntry {\n  line: string;\n  ts: string;\n}\n\nexport interface LokiExpression {\n  regexp: string;\n  query: string;\n}\n\nexport type DerivedFieldConfig = {\n  matcherRegex: string;\n  name: string;\n  url?: string;\n  datasourceUid?: string;\n};\n\nexport interface TransformerOptions {\n  format?: string;\n  legendFormat?: string;\n  step: number;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  refId: string;\n  scopedVars: ScopedVars;\n  meta?: QueryResultMeta;\n  valueWithRefId?: boolean;\n}\n","import { capitalize, groupBy, isEmpty } from 'lodash';\nimport { v5 as uuidv5 } from 'uuid';\nimport { of } from 'rxjs';\n\nimport {\n  FieldType,\n  TimeSeries,\n  Labels,\n  DataFrame,\n  ArrayVector,\n  MutableDataFrame,\n  findUniqueLabels,\n  DataFrameView,\n  DataLink,\n  Field,\n  QueryResultMetaStat,\n  QueryResultMeta,\n  TimeSeriesValue,\n  ScopedVars,\n} from '@grafana/data';\n\nimport { getTemplateSrv, getDataSourceSrv } from '@grafana/runtime';\nimport TableModel from 'app/core/table_model';\nimport { formatQuery, getHighlighterExpressionsFromQuery } from './query_utils';\nimport {\n  LokiRangeQueryRequest,\n  LokiResponse,\n  LokiMatrixResult,\n  LokiVectorResult,\n  TransformerOptions,\n  LokiResultType,\n  LokiStreamResult,\n  LokiTailResponse,\n  LokiQuery,\n  LokiOptions,\n  DerivedFieldConfig,\n  LokiStreamResponse,\n  LokiStats,\n} from './types';\n\nconst UUID_NAMESPACE = '6ec946da-0f49-47a8-983a-1d76d17e7c92';\n\n/**\n * Transforms LokiStreamResult structure into a dataFrame. Used when doing standard queries and newer version of Loki.\n */\nexport function lokiStreamResultToDataFrame(stream: LokiStreamResult, reverse?: boolean, refId?: string): DataFrame {\n  const labels: Labels = stream.stream;\n  const labelsString = Object.entries(labels)\n    .map(([key, val]) => `${key}=\"${val}\"`)\n    .sort()\n    .join('');\n\n  const times = new ArrayVector<string>([]);\n  const timesNs = new ArrayVector<string>([]);\n  const lines = new ArrayVector<string>([]);\n  const uids = new ArrayVector<string>([]);\n\n  // We need to store and track all used uids to ensure that uids are unique\n  const usedUids: { string?: number } = {};\n\n  for (const [ts, line] of stream.values) {\n    // num ns epoch in string, we convert it to iso string here so it matches old format\n    times.add(new Date(parseInt(ts.substr(0, ts.length - 6), 10)).toISOString());\n    timesNs.add(ts);\n    lines.add(line);\n    uids.add(createUid(ts, labelsString, line, usedUids, refId));\n  }\n\n  return constructDataFrame(times, timesNs, lines, uids, labels, reverse, refId);\n}\n\n/**\n * Constructs dataFrame with supplied fields and other data. Also makes sure it is properly reversed if needed.\n */\nfunction constructDataFrame(\n  times: ArrayVector<string>,\n  timesNs: ArrayVector<string>,\n  lines: ArrayVector<string>,\n  uids: ArrayVector<string>,\n  labels: Labels,\n  reverse?: boolean,\n  refId?: string\n) {\n  const dataFrame = {\n    refId,\n    fields: [\n      { name: 'ts', type: FieldType.time, config: { displayName: 'Time' }, values: times }, // Time\n      { name: 'line', type: FieldType.string, config: {}, values: lines, labels }, // Line - needs to be the first field with string type\n      { name: 'id', type: FieldType.string, config: {}, values: uids },\n      { name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' }, values: timesNs }, // Time\n    ],\n    length: times.length,\n  };\n\n  if (reverse) {\n    const mutableDataFrame = new MutableDataFrame(dataFrame);\n    mutableDataFrame.reverse();\n    return mutableDataFrame;\n  }\n\n  return dataFrame;\n}\n\n/**\n * Transform LokiResponse data and appends it to MutableDataFrame. Used for streaming where the dataFrame can be\n * a CircularDataFrame creating a fixed size rolling buffer.\n * TODO: Probably could be unified with the logStreamToDataFrame function.\n * @param response\n * @param data Needs to have ts, line, labels, id as fields\n */\nexport function appendResponseToBufferedData(response: LokiTailResponse, data: MutableDataFrame) {\n  // Should we do anything with: response.dropped_entries?\n\n  const streams: LokiStreamResult[] = response.streams;\n  if (!streams || !streams.length) {\n    return;\n  }\n\n  let baseLabels: Labels = {};\n  for (const f of data.fields) {\n    if (f.type === FieldType.string) {\n      if (f.labels) {\n        baseLabels = f.labels;\n      }\n      break;\n    }\n  }\n\n  const tsField = data.fields[0];\n  const tsNsField = data.fields[1];\n  const lineField = data.fields[2];\n  const labelsField = data.fields[3];\n  const idField = data.fields[4];\n\n  // We are comparing used ids only within the received stream. This could be a problem if the same line + labels + nanosecond timestamp came in 2 separate batches.\n  // As this is very unlikely, and the result would only affect live-tailing css animation we have decided to not compare all received uids from data param as this would slow down processing.\n  const usedUids: { string?: number } = {};\n\n  for (const stream of streams) {\n    // Find unique labels\n    const unique = findUniqueLabels(stream.stream, baseLabels);\n    const allLabelsString = Object.entries(stream.stream)\n      .map(([key, val]) => `${key}=\"${val}\"`)\n      .sort()\n      .join('');\n\n    // Add each line\n    for (const [ts, line] of stream.values) {\n      tsField.values.add(new Date(parseInt(ts.substr(0, ts.length - 6), 10)).toISOString());\n      tsNsField.values.add(ts);\n      lineField.values.add(line);\n      labelsField.values.add(unique);\n      idField.values.add(createUid(ts, allLabelsString, line, usedUids, data.refId));\n    }\n  }\n}\n\nfunction createUid(ts: string, labelsString: string, line: string, usedUids: any, refId?: string): string {\n  // Generate id as hashed nanosecond timestamp, labels and line (this does not have to be unique)\n  let id = uuidv5(`${ts}_${labelsString}_${line}`, UUID_NAMESPACE);\n\n  // Check if generated id is unique\n  // If not and we've already used it, append it's count after it\n  if (id in usedUids) {\n    // Increase the count\n    const newCount = usedUids[id] + 1;\n    usedUids[id] = newCount;\n    // Append count to generated id to make it unique\n    id = `${id}_${newCount}`;\n  } else {\n    // If id is unique and wasn't used, add it to usedUids and start count at 0\n    usedUids[id] = 0;\n  }\n  // Return unique id\n  if (refId) {\n    return `${id}_${refId}`;\n  }\n  return id;\n}\n\nfunction lokiMatrixToTimeSeries(matrixResult: LokiMatrixResult, options: TransformerOptions): TimeSeries {\n  const name = createMetricLabel(matrixResult.metric, options);\n  return {\n    target: name,\n    title: name,\n    datapoints: lokiPointsToTimeseriesPoints(matrixResult.values, options),\n    tags: matrixResult.metric,\n    meta: options.meta,\n    refId: options.refId,\n  };\n}\n\nexport function lokiPointsToTimeseriesPoints(\n  data: Array<[number, string]>,\n  options: TransformerOptions\n): TimeSeriesValue[][] {\n  const stepMs = options.step * 1000;\n  const datapoints: TimeSeriesValue[][] = [];\n\n  let baseTimestampMs = options.start / 1e6;\n  for (const [time, value] of data) {\n    let datapointValue: TimeSeriesValue = parseFloat(value);\n\n    if (isNaN(datapointValue)) {\n      datapointValue = null;\n    }\n\n    const timestamp = time * 1000;\n    for (let t = baseTimestampMs; t < timestamp; t += stepMs) {\n      datapoints.push([null, t]);\n    }\n\n    baseTimestampMs = timestamp + stepMs;\n    datapoints.push([datapointValue, timestamp]);\n  }\n\n  const endTimestamp = options.end / 1e6;\n  for (let t = baseTimestampMs; t <= endTimestamp; t += stepMs) {\n    datapoints.push([null, t]);\n  }\n\n  return datapoints;\n}\n\nexport function lokiResultsToTableModel(\n  lokiResults: Array<LokiMatrixResult | LokiVectorResult>,\n  resultCount: number,\n  refId: string,\n  meta: QueryResultMeta,\n  valueWithRefId?: boolean\n): TableModel {\n  if (!lokiResults || lokiResults.length === 0) {\n    return new TableModel();\n  }\n\n  // Collect all labels across all metrics\n  const metricLabels: Set<string> = new Set<string>(\n    lokiResults.reduce((acc, cur) => acc.concat(Object.keys(cur.metric)), [] as string[])\n  );\n\n  // Sort metric labels, create columns for them and record their index\n  const sortedLabels = [...metricLabels.values()].sort();\n  const table = new TableModel();\n  table.refId = refId;\n  table.meta = meta;\n  table.columns = [\n    { text: 'Time', type: FieldType.time },\n    ...sortedLabels.map((label) => ({ text: label, filterable: true, type: FieldType.string })),\n    { text: resultCount > 1 || valueWithRefId ? `Value #${refId}` : 'Value', type: FieldType.number },\n  ];\n\n  // Populate rows, set value to empty string when label not present.\n  lokiResults.forEach((series) => {\n    const newSeries: LokiMatrixResult = {\n      metric: series.metric,\n      values: (series as LokiVectorResult).value\n        ? [(series as LokiVectorResult).value]\n        : (series as LokiMatrixResult).values,\n    };\n\n    if (!newSeries.values) {\n      return;\n    }\n\n    if (!newSeries.metric) {\n      table.rows.concat(newSeries.values.map(([a, b]) => [a * 1000, parseFloat(b)]));\n    } else {\n      table.rows.push(\n        ...newSeries.values.map(([a, b]) => [\n          a * 1000,\n          ...sortedLabels.map((label) => newSeries.metric[label] || ''),\n          parseFloat(b),\n        ])\n      );\n    }\n  });\n\n  return table;\n}\n\nexport function createMetricLabel(labelData: { [key: string]: string }, options?: TransformerOptions) {\n  let label =\n    options === undefined || isEmpty(options.legendFormat)\n      ? getOriginalMetricName(labelData)\n      : renderTemplate(getTemplateSrv().replace(options.legendFormat ?? '', options.scopedVars), labelData);\n\n  if (!label && options) {\n    label = options.query;\n  }\n  return label;\n}\n\nfunction renderTemplate(aliasPattern: string, aliasData: { [key: string]: string }) {\n  const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n  return aliasPattern.replace(aliasRegex, (_, g1) => (aliasData[g1] ? aliasData[g1] : g1));\n}\n\nfunction getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nexport function decamelize(s: string): string {\n  return s.replace(/[A-Z]/g, (m) => ` ${m.toLowerCase()}`);\n}\n\n// Turn loki stats { metric: value } into meta stat { title: metric, value: value }\nfunction lokiStatsToMetaStat(stats: LokiStats | undefined): QueryResultMetaStat[] {\n  const result: QueryResultMetaStat[] = [];\n\n  if (!stats) {\n    return result;\n  }\n\n  for (const section in stats) {\n    const values = stats[section];\n    for (const label in values) {\n      const value = values[label];\n      let unit;\n      if (/time/i.test(label) && value) {\n        unit = 's';\n      } else if (/bytes.*persecond/i.test(label)) {\n        unit = 'Bps';\n      } else if (/bytes/i.test(label)) {\n        unit = 'decbytes';\n      }\n      const title = `${capitalize(section)}: ${decamelize(label)}`;\n      result.push({ displayName: title, value, unit });\n    }\n  }\n\n  return result;\n}\n\nexport function lokiStreamsToDataFrames(\n  response: LokiStreamResponse,\n  target: { refId: string; expr?: string },\n  limit: number,\n  config: LokiOptions,\n  reverse = false\n): DataFrame[] {\n  const data = limit > 0 ? response.data.result : [];\n  const stats: QueryResultMetaStat[] = lokiStatsToMetaStat(response.data.stats);\n  // Use custom mechanism to identify which stat we want to promote to label\n  const custom = {\n    lokiQueryStatKey: 'Summary: total bytes processed',\n  };\n\n  const meta: QueryResultMeta = {\n    searchWords: getHighlighterExpressionsFromQuery(formatQuery(target.expr)),\n    limit,\n    stats,\n    custom,\n    preferredVisualisationType: 'logs',\n  };\n\n  const series: DataFrame[] = data.map((stream) => {\n    const dataFrame = lokiStreamResultToDataFrame(stream, reverse, target.refId);\n    enhanceDataFrame(dataFrame, config);\n\n    if (meta.custom && dataFrame.fields.some((f) => f.labels && Object.keys(f.labels).some((l) => l === '__error__'))) {\n      meta.custom.error = 'Error when parsing some of the logs';\n    }\n\n    return {\n      ...dataFrame,\n      refId: target.refId,\n      meta,\n    };\n  });\n\n  if (stats.length && !data.length) {\n    return [\n      {\n        fields: [],\n        length: 0,\n        refId: target.refId,\n        meta,\n      },\n    ];\n  }\n\n  return series;\n}\n\n/**\n * Adds new fields and DataLinks to DataFrame based on DataSource instance config.\n */\nexport const enhanceDataFrame = (dataFrame: DataFrame, config: LokiOptions | null): void => {\n  if (!config) {\n    return;\n  }\n\n  const derivedFields = config.derivedFields ?? [];\n  if (!derivedFields.length) {\n    return;\n  }\n  const derivedFieldsGrouped = groupBy(derivedFields, 'name');\n\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig);\n\n  const view = new DataFrameView(dataFrame);\n  view.forEach((row: { line: string }) => {\n    for (const field of newFields) {\n      const logMatch = row.line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.add(logMatch && logMatch[1]);\n    }\n  });\n\n  dataFrame.fields = [...dataFrame.fields, ...newFields];\n};\n\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs: DerivedFieldConfig[]): Field<any, ArrayVector> {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const dataLinks = derivedFieldConfigs.reduce((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n\n      acc.push({\n        // Will be filled out later\n        title: '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: { query: derivedFieldConfig.url },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url,\n      });\n    }\n    return acc;\n  }, [] as DataLink[]);\n\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks,\n    },\n    // We are adding values later on\n    values: new ArrayVector<string>([]),\n  };\n}\n\nexport function rangeQueryResponseToTimeSeries(\n  response: LokiResponse,\n  query: LokiRangeQueryRequest,\n  target: LokiQuery,\n  responseListLength: number,\n  scopedVars: ScopedVars\n): TimeSeries[] {\n  /** Show results of Loki metric queries only in graph */\n  const meta: QueryResultMeta = {\n    preferredVisualisationType: 'graph',\n  };\n  const transformerOptions: TransformerOptions = {\n    format: target.format,\n    legendFormat: target.legendFormat ?? '',\n    start: query.start!,\n    end: query.end!,\n    step: query.step!,\n    query: query.query,\n    responseListLength,\n    refId: target.refId,\n    meta,\n    valueWithRefId: target.valueWithRefId,\n    scopedVars,\n  };\n\n  switch (response.data.resultType) {\n    case LokiResultType.Vector:\n      return response.data.result.map((vecResult) =>\n        lokiMatrixToTimeSeries({ metric: vecResult.metric, values: [vecResult.value] }, transformerOptions)\n      );\n    case LokiResultType.Matrix:\n      return response.data.result.map((matrixResult) => lokiMatrixToTimeSeries(matrixResult, transformerOptions));\n    default:\n      return [];\n  }\n}\n\nexport function processRangeQueryResponse(\n  response: LokiResponse,\n  target: LokiQuery,\n  query: LokiRangeQueryRequest,\n  responseListLength: number,\n  limit: number,\n  config: LokiOptions,\n  scopedVars: ScopedVars,\n  reverse = false\n) {\n  switch (response.data.resultType) {\n    case LokiResultType.Stream:\n      return of({\n        data: lokiStreamsToDataFrames(response as LokiStreamResponse, target, limit, config, reverse),\n        key: `${target.refId}_log`,\n      });\n\n    case LokiResultType.Vector:\n    case LokiResultType.Matrix:\n      return of({\n        data: rangeQueryResponseToTimeSeries(\n          response,\n          query,\n          {\n            ...target,\n            format: 'time_series',\n          },\n          responseListLength,\n          scopedVars\n        ),\n        key: target.refId,\n      });\n    default:\n      throw new Error(`Unknown result type \"${(response.data as any).resultType}\".`);\n  }\n}\n","/** PURE_IMPORTS_START tslib,_.._Subject,_.._Subscriber,_.._Observable,_.._Subscription,_.._ReplaySubject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: function (e) { return JSON.parse(e.data); },\n    serializer: function (value) { return JSON.stringify(value); },\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = _super.call(this) || this;\n        if (urlConfigOrSource instanceof Observable) {\n            _this.destination = destination;\n            _this.source = urlConfigOrSource;\n        }\n        else {\n            var config = _this._config = tslib_1.__assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            _this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (var key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            var subscription = self.subscribe(function (x) {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var _socket = _this._socket;\n            if (!_socket) {\n                socket.close();\n                _this._resetState();\n                return;\n            }\n            var openObserver = _this._config.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) {\n                if (socket.readyState === 1) {\n                    try {\n                        var serializer = _this._config.serializer;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        _this.destination.error(e);\n                    }\n                }\n            }, function (e) {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this._config.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            try {\n                var deserializer = _this._config.deserializer;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(function () {\n            var _socket = _this._socket;\n            if (_this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscriber;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _socket = this._socket;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        _super.prototype.unsubscribe.call(this);\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\nexport { WebSocketSubject };\n//# sourceMappingURL=WebSocketSubject.js.map\n","import { DataFrame, FieldType, parseLabels, KeyValue, CircularDataFrame } from '@grafana/data';\nimport { Observable, throwError, timer } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { LokiTailResponse } from './types';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { appendResponseToBufferedData } from './result_transformer';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LokiLiveTarget {\n  query: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LokiLiveTarget, retryInterval = 5000): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({ capacity: target.size });\n    data.addField({ name: 'ts', type: FieldType.time, config: { displayName: 'Time' } });\n    data.addField({ name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' } });\n    data.addField({ name: 'line', type: FieldType.string }).labels = parseLabels(target.query);\n    data.addField({ name: 'labels', type: FieldType.other }); // The labels for each line\n    data.addField({ name: 'id', type: FieldType.string });\n    data.meta = { ...data.meta, preferredVisualisationType: 'logs' };\n    data.refId = target.refId;\n\n    stream = webSocket(target.url).pipe(\n      map((response: LokiTailResponse) => {\n        appendResponseToBufferedData(response, data);\n        return [data];\n      }),\n      retryWhen((attempts: Observable<any>) =>\n        attempts.pipe(\n          mergeMap((error, i) => {\n            const retryAttempt = i + 1;\n            // Code 1006 is used to indicate that a connection was closed abnormally.\n            // Added hard limit of 30 on number of retries.\n            // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n            if (error.code === 1006 && retryAttempt < 30) {\n              if (retryAttempt > 10) {\n                // If more than 10 times retried, consol.warn, but keep reconnecting\n                console.warn(\n                  `Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`\n                );\n              }\n              // Retry every 5s\n              return timer(retryInterval);\n            }\n            return throwError(error);\n          })\n        )\n      ),\n      finalize(() => {\n        delete this.streams[target.url];\n      })\n    );\n    this.streams[target.url] = stream;\n\n    return stream;\n  }\n}\n","/** PURE_IMPORTS_START _WebSocketSubject PURE_IMPORTS_END */\nimport { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map\n","import { default as GraphiteQueryModel } from '../../graphite/graphite_query';\nimport { map } from 'lodash';\nimport { LokiQuery } from '../types';\nimport { GraphiteDatasource } from '../../graphite/datasource';\nimport { getTemplateSrv } from '../../../../features/templating/template_srv';\nimport { GraphiteMetricLokiMatcher, GraphiteQuery, GraphiteToLokiQueryImportConfiguration } from '../../graphite/types';\n\nconst GRAPHITE_TO_LOKI_OPERATOR = {\n  '=': '=',\n  '!=': '!=',\n  '=~': '=~',\n  '!=~': '!~',\n};\n\n/**\n * Converts Graphite glob-like pattern to a regular expression\n */\nfunction convertGlobToRegEx(text: string): string {\n  if (text.includes('*') || text.includes('{')) {\n    return '^' + text.replace(/\\*/g, '.*').replace(/\\{/g, '(').replace(/}/g, ')').replace(/,/g, '|');\n  } else {\n    return text;\n  }\n}\n\nexport default function fromGraphiteQueries(\n  graphiteQueries: GraphiteQuery[],\n  graphiteDataSource: GraphiteDatasource\n): LokiQuery[] {\n  return graphiteQueries.map((query) => {\n    const model: GraphiteQueryModel = new GraphiteQueryModel(\n      graphiteDataSource,\n      {\n        ...query,\n        target: query.target || '',\n        textEditor: false,\n      },\n      getTemplateSrv()\n    );\n    model.parseTarget();\n\n    return {\n      refId: query.refId,\n      expr: fromGraphite(model, graphiteDataSource.getImportQueryConfiguration().loki),\n    };\n  });\n}\n\nfunction fromGraphite(graphiteQuery: GraphiteQueryModel, config: GraphiteToLokiQueryImportConfiguration): string {\n  let matchingFound = false;\n  let labels: any = {};\n\n  if (graphiteQuery.seriesByTagUsed) {\n    matchingFound = true;\n    graphiteQuery.tags.forEach((tag) => {\n      labels[tag.key] = {\n        value: tag.value,\n        operator: GRAPHITE_TO_LOKI_OPERATOR[tag.operator],\n      };\n    });\n  } else {\n    const targetNodes = graphiteQuery.segments.map((segment) => segment.value);\n    let mappings = config.mappings.filter((mapping) => mapping.matchers.length <= targetNodes.length);\n\n    for (let mapping of mappings) {\n      const matchers = mapping.matchers.concat();\n\n      matchingFound = matchers.every((matcher: GraphiteMetricLokiMatcher, index: number) => {\n        if (matcher.labelName) {\n          let value = (targetNodes[index] as string)!;\n\n          if (value === '*') {\n            return true;\n          }\n\n          const converted = convertGlobToRegEx(value);\n          labels[matcher.labelName] = {\n            value: converted,\n            operator: converted !== value ? '=~' : '=',\n          };\n\n          return true;\n        }\n        return targetNodes[index] === matcher.value || matcher.value === '*';\n      });\n    }\n  }\n\n  let pairs = map(labels, (value, key) => `${key}${value.operator}\"${value.value}\"`);\n  if (matchingFound && pairs.length) {\n    return `{${pairs.join(', ')}}`;\n  } else {\n    return '';\n  }\n}\n","// Libraries\nimport { chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\n\n// Services & Utils\nimport {\n  parseSelector,\n  labelRegexp,\n  selectorRegexp,\n  processLabels,\n} from 'app/plugins/datasource/prometheus/language_utils';\nimport syntax, { FUNCTIONS, PIPE_PARSERS, PIPE_OPERATORS } from './syntax';\n\n// Types\nimport { LokiQuery } from './types';\nimport { dateTime, AbsoluteTimeRange, LanguageProvider, HistoryItem, DataQuery, DataSourceApi } from '@grafana/data';\nimport { PromQuery } from '../prometheus/types';\n\nimport LokiDatasource from './datasource';\nimport { CompletionItem, TypeaheadInput, TypeaheadOutput, CompletionItemGroup } from '@grafana/ui';\nimport { Grammar } from 'prismjs';\nimport fromGraphite from './importing/fromGraphite';\nimport { GraphiteDatasource } from '../graphite/datasource';\n\nconst DEFAULT_KEYS = ['job', 'namespace'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 10;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\nconst NS_IN_MS = 1000000;\n\n// When changing RATE_RANGES, check if Prometheus/PromQL ranges should be changed too\n// @see public/app/plugins/datasource/prometheus/promql.ts\nconst RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const LABEL_REFRESH_INTERVAL = 1000 * 30; // 30sec\n\nconst wrapLabel = (label: string) => ({ label, filterText: `\\\"${label}\\\"` });\n\nexport type LokiHistoryItem = HistoryItem<LokiQuery>;\n\ntype TypeaheadContext = {\n  history?: LokiHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: LokiHistoryItem[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query.expr === item.label);\n  let hint = `Queried ${historyForItem.length} times in the last 24h.`;\n  const recent = historyForItem[0];\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nexport default class LokiLanguageProvider extends LanguageProvider {\n  labelKeys: string[];\n  labelFetchTs: number;\n  started = false;\n  datasource: LokiDatasource;\n  lookupsDisabled = false; // Dynamically set to true for big/slow instances\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private seriesCache = new LRU<string, Record<string, string[]>>(10);\n  private labelsCache = new LRU<string, string[]>(10);\n\n  constructor(datasource: LokiDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.labelKeys = [];\n    this.labelFetchTs = 0;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%\\|]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = async (url: string, params?: any): Promise<any> => {\n    try {\n      return await this.datasource.metadataRequest(url, params);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Initialise the language provider by fetching set of labels. Without this initialisation the provider would return\n   * just a set of hardcoded default labels on provideCompletionItems or a recent queries from history.\n   */\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchLabels().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { wrapperClasses, value, prefix, text } = input;\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value?.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^['\"~=\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for {|} and {foo=|}\n      return await this.getLabelCompletionItems(input);\n    } else if (wrapperClasses.includes('context-pipe')) {\n      return this.getPipeCompletionItem();\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  }\n\n  getBeginningCompletionItems = (context?: TypeaheadContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems(context?: TypeaheadContext): TypeaheadOutput {\n    const history = context?.history;\n    const suggestions = [];\n\n    if (history?.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        prefixMatch: true,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  }\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      prefixMatch: true,\n      label: 'Functions',\n      items: FUNCTIONS.map((suggestion) => ({ ...suggestion, kind: 'function' })),\n    });\n\n    return { suggestions };\n  };\n\n  getPipeCompletionItem = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      label: 'Operators',\n      items: PIPE_OPERATORS.map((suggestion) => ({ ...suggestion, kind: 'operators' })),\n    });\n\n    suggestions.push({\n      label: 'Parsers',\n      items: PIPE_PARSERS.map((suggestion) => ({ ...suggestion, kind: 'parsers' })),\n    });\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  async getLabelCompletionItems({ text, wrapperClasses, labelKey, value }: TypeaheadInput): Promise<TypeaheadOutput> {\n    let context = 'context-labels';\n    const suggestions: CompletionItemGroup[] = [];\n    if (!value) {\n      return { context, suggestions: [] };\n    }\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    if (!labelKey && selector === EMPTY_SELECTOR) {\n      // start task gets all labels\n      await this.start();\n      const allLabels = this.getLabelKeys();\n      return { context, suggestions: [{ label: `Labels`, items: allLabels.map(wrapLabel) }] };\n    }\n\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let labelValues;\n    // Query labels for selector\n    if (selector) {\n      if (selector === EMPTY_SELECTOR && labelKey) {\n        const labelValuesForKey = await this.getLabelValues(labelKey);\n        labelValues = { [labelKey]: labelValuesForKey };\n      } else {\n        labelValues = await this.getSeriesLabels(selector);\n      }\n    }\n\n    if (!labelValues) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { context, suggestions };\n    }\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && labelValues[labelKey]) {\n        context = 'context-label-values';\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"`,\n          // Filter to prevent previously selected values from being repeatedly suggested\n          items: labelValues[labelKey].map(wrapLabel).filter(({ filterText }) => filterText !== text),\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = labelValues ? Object.keys(labelValues) : DEFAULT_KEYS;\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const newSuggestion: CompletionItemGroup = { label: `Labels`, items: newItems };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  }\n\n  async importQueries(queries: DataQuery[], originDataSource: DataSourceApi): Promise<LokiQuery[]> {\n    const datasourceType = originDataSource.meta.id;\n    if (datasourceType === 'prometheus') {\n      return Promise.all(\n        queries.map(async (query) => {\n          const expr = await this.importPrometheusQuery((query as PromQuery).expr);\n          const { ...rest } = query as PromQuery;\n          return {\n            ...rest,\n            expr,\n          };\n        })\n      );\n    }\n    if (datasourceType === 'graphite') {\n      return fromGraphite(queries, originDataSource as GraphiteDatasource);\n    }\n    // Return a cleaned LokiQuery\n    return queries.map((query) => ({\n      refId: query.refId,\n      expr: '',\n    }));\n  }\n\n  async importPrometheusQuery(query: string): Promise<string> {\n    if (!query) {\n      return '';\n    }\n\n    // Consider only first selector in query\n    const selectorMatch = query.match(selectorRegexp);\n    if (!selectorMatch) {\n      return '';\n    }\n\n    const selector = selectorMatch[0];\n    const labels: { [key: string]: { value: any; operator: any } } = {};\n    selector.replace(labelRegexp, (_, key, operator, value) => {\n      labels[key] = { value, operator };\n      return '';\n    });\n\n    // Keep only labels that exist on origin and target datasource\n    await this.start(); // fetches all existing label keys\n    const existingKeys = this.labelKeys;\n    let labelsToKeep: { [key: string]: { value: any; operator: any } } = {};\n    if (existingKeys && existingKeys.length) {\n      // Check for common labels\n      for (const key in labels) {\n        if (existingKeys && existingKeys.includes(key)) {\n          // Should we check for label value equality here?\n          labelsToKeep[key] = labels[key];\n        }\n      }\n    } else {\n      // Keep all labels by default\n      labelsToKeep = labels;\n    }\n\n    const labelKeys = Object.keys(labelsToKeep).sort();\n    const cleanSelector = labelKeys\n      .map((key) => `${key}${labelsToKeep[key].operator}${labelsToKeep[key].value}`)\n      .join(',');\n\n    return ['{', cleanSelector, '}'].join('');\n  }\n\n  async getSeriesLabels(selector: string) {\n    if (this.lookupsDisabled) {\n      return undefined;\n    }\n    try {\n      return await this.fetchSeriesLabels(selector);\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/loki/api/v1/label';\n    const timeRange = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, timeRange);\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  }\n\n  async refreshLogLabels(forceRefresh?: boolean) {\n    if ((this.labelKeys && Date.now().valueOf() - this.labelFetchTs > LABEL_REFRESH_INTERVAL) || forceRefresh) {\n      await this.fetchLabels();\n    }\n  }\n\n  /**\n   * Fetch labels for a selector. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   */\n  fetchSeriesLabels = async (match: string): Promise<Record<string, string[]>> => {\n    const url = '/loki/api/v1/series';\n    const { from: start, to: end } = this.datasource.getTimeRangeParams();\n\n    const cacheKey = this.generateCacheKey(url, start, end, match);\n    let value = this.seriesCache.get(cacheKey);\n    if (!value) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.seriesCache.set(cacheKey, {});\n      const params = { match, start, end };\n      const data = await this.request(url, params);\n      const { values } = processLabels(data);\n      value = values;\n      this.seriesCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/loki/api/v1/series';\n    const { from: start, to: end } = this.datasource.getTimeRangeParams();\n    const params = { match, start, end };\n    return await this.request(url, params);\n  };\n\n  // Cache key is a bit different here. We round up to a minute the intervals.\n  // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n  // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n  // when user does not the newest values for a minute if already cached.\n  generateCacheKey(url: string, start: number, end: number, param: string): string {\n    return [url, this.roundTime(start), this.roundTime(end), param].join();\n  }\n\n  // Round nanos epoch to nearest 5 minute interval\n  roundTime(nanos: number): number {\n    return nanos ? Math.floor(nanos / NS_IN_MS / 1000 / 60 / 5) : 0;\n  }\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  async fetchLabelValues(key: string): Promise<string[]> {\n    const url = `/loki/api/v1/label/${key}/values`;\n    const rangeParams = this.datasource.getTimeRangeParams();\n    const { from: start, to: end } = rangeParams;\n\n    const cacheKey = this.generateCacheKey(url, start, end, key);\n    const params = { start, end };\n\n    let labelValues = this.labelsCache.get(cacheKey);\n    if (!labelValues) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.labelsCache.set(cacheKey, []);\n      const res = await this.request(url, params);\n      if (Array.isArray(res)) {\n        labelValues = res.slice().sort();\n        this.labelsCache.set(cacheKey, labelValues);\n      }\n    }\n\n    return labelValues ?? [];\n  }\n}\n","// Libraries\nimport { cloneDeep, isEmpty, map as lodashMap } from 'lodash';\nimport { merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport Prism from 'prismjs';\n\n// Types\nimport {\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  DataFrame,\n  DataFrameView,\n  DataQuery,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  dateMath,\n  DateTime,\n  FieldCache,\n  LoadingState,\n  LogRowModel,\n  QueryResultMeta,\n  ScopedVars,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv, BackendSrvRequest, FetchError, getBackendSrv } from '@grafana/runtime';\nimport { addLabelToQuery } from 'app/plugins/datasource/prometheus/add_label_to_query';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { convertToWebSocketUrl } from 'app/core/utils/explore';\nimport {\n  lokiResultsToTableModel,\n  lokiStreamResultToDataFrame,\n  lokiStreamsToDataFrames,\n  processRangeQueryResponse,\n} from './result_transformer';\nimport { getHighlighterExpressionsFromQuery } from './query_utils';\n\nimport {\n  LokiOptions,\n  LokiQuery,\n  LokiRangeQueryRequest,\n  LokiResponse,\n  LokiResultType,\n  LokiStreamResponse,\n} from './types';\nimport { LiveStreams, LokiLiveTarget } from './live_streams';\nimport LanguageProvider from './language_provider';\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport syntax from './syntax';\n\nexport type RangeQueryOptions = DataQueryRequest<LokiQuery> | AnnotationQueryRequest<LokiQuery>;\nexport const DEFAULT_MAX_LINES = 1000;\nexport const LOKI_ENDPOINT = '/loki/api/v1';\nconst NS_IN_MS = 1000000;\n\nconst RANGE_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query_range`;\nconst INSTANT_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query`;\n\nconst DEFAULT_QUERY_PARAMS: Partial<LokiRangeQueryRequest> = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_MAX_LINES,\n  query: '',\n};\n\nexport class LokiDatasource extends DataSourceApi<LokiQuery, LokiOptions> {\n  private streams = new LiveStreams();\n  languageProvider: LanguageProvider;\n  maxLines: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<LokiOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n\n    this.languageProvider = new LanguageProvider(this);\n    const settingsData = instanceSettings.jsonData || {};\n    this.maxLines = parseInt(settingsData.maxLines ?? '0', 10) || DEFAULT_MAX_LINES;\n  }\n\n  _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<Record<string, any>>(req);\n  }\n\n  query(options: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const filteredTargets = options.targets\n      .filter((target) => target.expr && !target.hide)\n      .map((target) => ({\n        ...target,\n        expr: this.templateSrv.replace(target.expr, options.scopedVars, this.interpolateQueryExpr),\n      }));\n\n    for (const target of filteredTargets) {\n      if (target.instant) {\n        subQueries.push(this.runInstantQuery(target, options, filteredTargets.length));\n      } else {\n        subQueries.push(this.runRangeQuery(target, options, filteredTargets.length));\n      }\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(subQueries)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...subQueries);\n  }\n\n  runInstantQuery = (\n    target: LokiQuery,\n    options: DataQueryRequest<LokiQuery>,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    const timeNs = this.getTime(options.range.to, true);\n    const queryLimit = isMetricsQuery(target.expr) ? options.maxDataPoints : target.maxLines;\n    const query = {\n      query: target.expr,\n      time: `${timeNs + (1e9 - (timeNs % 1e9))}`,\n      limit: Math.min(queryLimit || Infinity, this.maxLines),\n    };\n\n    /** Used only for results of metrics instant queries */\n    const meta: QueryResultMeta = {\n      preferredVisualisationType: 'table',\n    };\n\n    return this._request(INSTANT_QUERY_ENDPOINT, query).pipe(\n      map((response: { data: LokiResponse }) => {\n        if (response.data.data.resultType === LokiResultType.Stream) {\n          return {\n            data: response.data\n              ? lokiStreamsToDataFrames(\n                  response.data as LokiStreamResponse,\n                  target,\n                  query.limit,\n                  this.instanceSettings.jsonData\n                )\n              : [],\n            key: `${target.refId}_instant`,\n          };\n        }\n\n        return {\n          data: [lokiResultsToTableModel(response.data.data.result, responseListLength, target.refId, meta, true)],\n          key: `${target.refId}_instant`,\n        };\n      }),\n      catchError((err: any) => this.throwUnless(err, err.status === 404, target))\n    );\n  };\n\n  createRangeQuery(target: LokiQuery, options: RangeQueryOptions, limit: number): LokiRangeQueryRequest {\n    const query = target.expr;\n    let range: { start?: number; end?: number; step?: number } = {};\n    if (options.range) {\n      const startNs = this.getTime(options.range.from, false);\n      const endNs = this.getTime(options.range.to, true);\n      const rangeMs = Math.ceil((endNs - startNs) / 1e6);\n      const adjustedInterval =\n        this.adjustInterval((options as DataQueryRequest<LokiQuery>).intervalMs || 1000, rangeMs) / 1000;\n      // We want to ceil to 3 decimal places\n      const step = Math.ceil(adjustedInterval * 1000) / 1000;\n      const alignedTimes = {\n        start: startNs - (startNs % 1e9),\n        end: endNs + (1e9 - (endNs % 1e9)),\n      };\n\n      range = {\n        start: alignedTimes.start,\n        end: alignedTimes.end,\n        step,\n      };\n    }\n\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...range,\n      query,\n      limit,\n    };\n  }\n\n  /**\n   * Attempts to send a query to /loki/api/v1/query_range\n   */\n  runRangeQuery = (\n    target: LokiQuery,\n    options: RangeQueryOptions,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    // For metric query we use maxDataPoints from the request options which should be something like width of the\n    // visualisation in pixels. In case of logs request we either use lines limit defined in the query target or\n    // global limit defined for the data source which ever is lower.\n    let maxDataPoints = isMetricsQuery(target.expr)\n      ? // We fallback to maxLines here because maxDataPoints is defined as possibly undefined. Not sure that can\n        // actually happen both Dashboards and Explore should send some value here. If not maxLines does not make that\n        // much sense but nor any other arbitrary value.\n        (options as DataQueryRequest<LokiQuery>).maxDataPoints || this.maxLines\n      : // If user wants maxLines 0 we still fallback to data source limit. I think that makes sense as why would anyone\n        // want to do a query and not see any results?\n        target.maxLines || this.maxLines;\n\n    if ((options as DataQueryRequest<LokiQuery>).liveStreaming) {\n      return this.runLiveQuery(target, maxDataPoints);\n    }\n    const query = this.createRangeQuery(target, options, maxDataPoints);\n    return this._request(RANGE_QUERY_ENDPOINT, query).pipe(\n      catchError((err: any) => this.throwUnless(err, err.status === 404, target)),\n      switchMap((response: { data: LokiResponse; status: number }) =>\n        processRangeQueryResponse(\n          response.data,\n          target,\n          query,\n          responseListLength,\n          maxDataPoints,\n          this.instanceSettings.jsonData,\n          (options as DataQueryRequest<LokiQuery>).scopedVars,\n          (options as DataQueryRequest<LokiQuery>).reverse\n        )\n      )\n    );\n  };\n\n  createLiveTarget(target: LokiQuery, maxDataPoints: number): LokiLiveTarget {\n    const query = target.expr;\n    const baseUrl = this.instanceSettings.url;\n    const params = serializeParams({ query });\n\n    return {\n      query,\n      url: convertToWebSocketUrl(`${baseUrl}/loki/api/v1/tail?${params}`),\n      refId: target.refId,\n      size: maxDataPoints,\n    };\n  }\n\n  /**\n   * Runs live queries which in this case means creating a websocket and listening on it for new logs.\n   * This returns a bit different dataFrame than runQueries as it returns single dataframe even if there are multiple\n   * Loki streams, sets only common labels on dataframe.labels and has additional dataframe.fields.labels for unique\n   * labels per row.\n   */\n  runLiveQuery = (target: LokiQuery, maxDataPoints: number): Observable<DataQueryResponse> => {\n    const liveTarget = this.createLiveTarget(target, maxDataPoints);\n\n    return this.streams.getStream(liveTarget).pipe(\n      map((data) => ({\n        data: data || [],\n        key: `loki-${liveTarget.refId}`,\n        state: LoadingState.Streaming,\n      })),\n      catchError((err: any) => {\n        return throwError(`Live tailing was stopped due to following error: ${err.reason}`);\n      })\n    );\n  };\n\n  interpolateVariablesInQueries(queries: LokiQuery[], scopedVars: ScopedVars): LokiQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => ({\n        ...query,\n        datasource: this.name,\n        expr: this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr),\n      }));\n    }\n\n    return expandedQueries;\n  }\n\n  getQueryDisplayText(query: LokiQuery) {\n    return query.expr;\n  }\n\n  getTimeRangeParams() {\n    const timeRange = this.timeSrv.timeRange();\n    return { from: timeRange.from.valueOf() * NS_IN_MS, to: timeRange.to.valueOf() * NS_IN_MS };\n  }\n\n  async importQueries(queries: DataQuery[], originDataSource: DataSourceApi): Promise<LokiQuery[]> {\n    return this.languageProvider.importQueries(queries, originDataSource);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, string | number>) {\n    const res = await this._request(url, params, { hideFromInspector: true }).toPromise();\n    return res.data.data || res.data.values || [];\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n    const interpolated = this.templateSrv.replace(query, {}, this.interpolateQueryExpr);\n    return await this.processMetricFindQuery(interpolated);\n  }\n\n  async processMetricFindQuery(query: string) {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n\n    const params = this.getTimeRangeParams();\n    const labelNames = query.match(labelNamesRegex);\n    if (labelNames) {\n      return await this.labelNamesQuery(params);\n    }\n\n    const labelValues = query.match(labelValuesRegex);\n    if (labelValues) {\n      return await this.labelValuesQuery(labelValues[2], params);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async labelNamesQuery(params?: Record<string, string | number>) {\n    const url = `${LOKI_ENDPOINT}/label`;\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  async labelValuesQuery(label: string, params?: Record<string, string | number>) {\n    const url = `${LOKI_ENDPOINT}/label/${label}/values`;\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  interpolateQueryExpr(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return lokiRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return lokiSpecialRegexEscape(value);\n    }\n\n    const escapedValues = lodashMap(value, lokiSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  modifyQuery(query: LokiQuery, action: any): LokiQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        expression = addLabelToQuery(expression, action.key, action.value, undefined, true);\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        expression = addLabelToQuery(expression, action.key, action.value, '!=', true);\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getHighlighterExpression(query: LokiQuery): string[] {\n    return getHighlighterExpressionsFromQuery(query.expr);\n  }\n\n  getTime(date: string | DateTime, roundUp: boolean) {\n    if (typeof date === 'string') {\n      date = dateMath.parse(date, roundUp)!;\n    }\n\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  getLogRowContext = (row: LogRowModel, options?: RowContextOptions): Promise<{ data: DataFrame[] }> => {\n    const target = this.prepareLogRowContextQueryTarget(\n      row,\n      (options && options.limit) || 10,\n      (options && options.direction) || 'BACKWARD'\n    );\n\n    const reverse = options && options.direction === 'FORWARD';\n    return this._request(RANGE_QUERY_ENDPOINT, target)\n      .pipe(\n        catchError((err: any) => {\n          if (err.status === 404) {\n            return of(err);\n          }\n\n          const error: DataQueryError = {\n            message: 'Error during context query. Please check JS console logs.',\n            status: err.status,\n            statusText: err.statusText,\n          };\n          throw error;\n        }),\n        switchMap((res: { data: LokiStreamResponse; status: number }) =>\n          of({\n            data: res.data ? res.data.data.result.map((stream) => lokiStreamResultToDataFrame(stream, reverse)) : [],\n          })\n        )\n      )\n      .toPromise();\n  };\n\n  prepareLogRowContextQueryTarget = (row: LogRowModel, limit: number, direction: 'BACKWARD' | 'FORWARD') => {\n    const query = Object.keys(row.labels)\n      .map((label) => `${label}=\"${row.labels[label].replace(/\\\\/g, '\\\\\\\\')}\"`) // escape backslashes in label as users can't escape them by themselves\n      .join(',');\n\n    const contextTimeBuffer = 2 * 60 * 60 * 1000; // 2h buffer\n    const commonTargetOptions = {\n      limit,\n      query: `{${query}}`,\n      expr: `{${query}}`,\n      direction,\n    };\n\n    const fieldCache = new FieldCache(row.dataFrame);\n    const nsField = fieldCache.getFieldByName('tsNs')!;\n    const nsTimestamp = nsField.values.get(row.rowIndex);\n\n    if (direction === 'BACKWARD') {\n      return {\n        ...commonTargetOptions,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        start: row.timeEpochMs - contextTimeBuffer + '000000',\n        end: nsTimestamp,\n        direction,\n      };\n    } else {\n      return {\n        ...commonTargetOptions,\n        // start param in Loki API is inclusive so we'll have to filter out the row that this request is based from\n        // and any other that were logged in the same ns but before the row. Right now these rows will be lost\n        // because the are before but came it he response that should return only rows after.\n        start: nsTimestamp,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        end: row.timeEpochMs + contextTimeBuffer + '000000',\n      };\n    }\n  };\n\n  testDatasource() {\n    // Consider only last 10 minutes otherwise request takes too long\n    const startMs = Date.now() - 10 * 60 * 1000;\n    const start = `${startMs}000000`; // API expects nanoseconds\n    return this._request(`${LOKI_ENDPOINT}/label`, { start })\n      .pipe(\n        map((res) => {\n          const values: any[] = res?.data?.data || res?.data?.values || [];\n          const testResult =\n            values.length > 0\n              ? { status: 'success', message: 'Data source connected and labels found.' }\n              : {\n                  status: 'error',\n                  message:\n                    'Data source connected, but no labels received. Verify that Loki and Promtail is configured properly.',\n                };\n          return testResult;\n        }),\n        catchError((err: any) => {\n          let message = 'Loki: ';\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Cannot connect to Loki';\n          }\n\n          if (err.status) {\n            message += `. ${err.status}`;\n          }\n\n          if (err.data && err.data.message) {\n            message += `. ${err.data.message}`;\n          } else if (err.data) {\n            message += `. ${err.data}`;\n          }\n          return of({ status: 'error', message: message });\n        })\n      )\n      .toPromise();\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const { expr, maxLines, instant, tagKeys = '', titleFormat = '', textFormat = '' } = options.annotation;\n\n    if (!expr) {\n      return [];\n    }\n\n    const interpolatedExpr = this.templateSrv.replace(expr, {}, this.interpolateQueryExpr);\n    const query = { refId: `annotation-${options.annotation.name}`, expr: interpolatedExpr, maxLines, instant };\n    const { data } = instant\n      ? await this.runInstantQuery(query, options as any).toPromise()\n      : await this.runRangeQuery(query, options as any).toPromise();\n\n    const annotations: AnnotationEvent[] = [];\n    const splitKeys: string[] = tagKeys.split(',').filter((v: string) => v !== '');\n\n    for (const frame of data) {\n      const labels: { [key: string]: string } = {};\n      for (const field of frame.fields) {\n        if (field.labels) {\n          for (const [key, value] of Object.entries(field.labels)) {\n            labels[key] = String(value).trim();\n          }\n        }\n      }\n\n      const tags: string[] = [\n        ...new Set(\n          Object.entries(labels).reduce((acc: string[], [key, val]) => {\n            if (val === '') {\n              return acc;\n            }\n            if (splitKeys.length && !splitKeys.includes(key)) {\n              return acc;\n            }\n            acc.push.apply(acc, [val]);\n            return acc;\n          }, [])\n        ),\n      ];\n\n      const view = new DataFrameView<{ ts: string; line: string }>(frame);\n\n      view.forEach((row) => {\n        annotations.push({\n          time: new Date(row.ts).valueOf(),\n          title: renderTemplate(titleFormat, labels),\n          text: renderTemplate(textFormat, labels) || row.line,\n          tags,\n        });\n      });\n    }\n\n    return annotations;\n  }\n\n  showContextToggle(row?: LogRowModel): boolean {\n    return (row && row.searchWords && row.searchWords.length > 0) === true;\n  }\n\n  throwUnless(err: FetchError, condition: boolean, target: LokiQuery) {\n    if (condition) {\n      return of(err);\n    }\n\n    const error = this.processError(err, target);\n    throw error;\n  }\n\n  processError(err: FetchError, target: LokiQuery) {\n    let error = cloneDeep(err);\n    if (err.data.message.includes('escape') && target.expr.includes('\\\\')) {\n      error.data.message = `Error: ${err.data.message}. Make sure that all special characters are escaped with \\\\. For more information on escaping of special characters visit LogQL documentation at https://grafana.com/docs/loki/latest/logql/.`;\n    }\n    return error;\n  }\n\n  adjustInterval(interval: number, range: number) {\n    // Loki will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    if (interval !== 0 && range / interval > 11000) {\n      interval = Math.ceil(range / 11000);\n    }\n    // The min interval is set to 1ms\n    return Math.max(interval, 1);\n  }\n}\n\nexport function renderTemplate(aliasPattern: string, aliasData: { [key: string]: string }) {\n  const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n  return aliasPattern.replace(aliasRegex, (_match, g1) => {\n    if (aliasData[g1]) {\n      return aliasData[g1];\n    }\n    return '';\n  });\n}\n\nexport function lokiRegularEscape(value: any) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function lokiSpecialRegexEscape(value: any) {\n  if (typeof value === 'string') {\n    return lokiRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()|]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\n/**\n * Checks if the query expression uses function and so should return a time series instead of logs.\n * Sometimes important to know that before we actually do the query.\n */\nfunction isMetricsQuery(query: string): boolean {\n  const tokens = Prism.tokenize(query, syntax);\n  return tokens.some((t) => {\n    // Not sure in which cases it can be string maybe if nothing matched which means it should not be a function\n    return typeof t !== 'string' && t.type === 'function';\n  });\n}\n\nexport default LokiDatasource;\n","import React, { PureComponent } from 'react';\nimport { shuffle } from 'lodash';\nimport { QueryEditorHelpProps, DataQuery } from '@grafana/data';\nimport LokiLanguageProvider from '../language_provider';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, filters out logs that don’t contain the word \"metrics\" and parses each log line to extract more labels and filters with them.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps, { userExamples: string[] }> {\n  userLabelTimer: NodeJS.Timeout;\n  state = {\n    userExamples: DEFAULT_EXAMPLES,\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={(e) => onClickExample({ refId: 'A', expr } as DataQuery)}\n      >\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">Start by selecting a log stream from the Log labels selector.</div>\n          <div className=\"cheat-sheet-item__label\">\n            Alternatively, you can write a stream selector into the query field:\n          </div>\n          {this.renderExpression('{job=\"default/prometheus\"}')}\n          {userExamples !== DEFAULT_EXAMPLES && userExamples.length > 0 ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : null}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { memo } from 'react';\n\n// Types\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { LokiDatasource } from '../datasource';\nimport { LokiQuery, LokiOptions } from '../types';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\n\ntype Props = ExploreQueryFieldProps<LokiDatasource, LokiQuery, LokiOptions>;\n\nexport function LokiExploreQueryEditor(props: Props) {\n  const { query, data, datasource, history, onChange, onRunQuery } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onBlur={() => {}}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      ExtraFieldElement={\n        <LokiOptionFields\n          queryType={query.instant ? 'instant' : 'range'}\n          lineLimitValue={query?.maxLines?.toString() || ''}\n          query={query}\n          onRunQuery={onRunQuery}\n          onChange={onChange}\n        />\n      }\n    />\n  );\n}\n\nexport default memo(LokiExploreQueryEditor);\n","// Libraries\nimport React from 'react';\n\n// Types\nimport { InlineFormLabel } from '@grafana/ui';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditor(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery } = props;\n\n  const onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const nextQuery = { ...query, legendFormat: e.currentTarget.value };\n    onChange(nextQuery);\n  };\n\n  const legendField = (\n    <div className=\"gf-form-inline\">\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          width={6}\n          tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname. The legend only applies to metric queries.\"\n        >\n          Legend\n        </InlineFormLabel>\n        <input\n          type=\"text\"\n          className=\"gf-form-input\"\n          placeholder=\"legend format\"\n          value={query.legendFormat || ''}\n          onChange={onLegendChange}\n          onBlur={onRunQuery}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <>\n          <LokiOptionFields\n            queryType={query.instant ? 'instant' : 'range'}\n            lineLimitValue={query?.maxLines?.toString() || ''}\n            query={query}\n            onRunQuery={onRunQuery}\n            onChange={onChange}\n            runOnBlur={true}\n          />\n          {legendField}\n        </>\n      }\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import React from 'react';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\nimport { CoreApp } from '@grafana/data';\nimport { LokiQueryEditorProps } from './types';\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    default:\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n","import { LokiQuery } from './types';\n/**\n * Just a simple wrapper for a react component that is actually implementing the query editor.\n */\nexport class LokiAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(query: LokiQuery) {\n    this.annotation.expr = query.expr;\n    this.annotation.maxLines = query.maxLines;\n    this.annotation.instant = query.instant;\n  }\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={(event) => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, DataLinkInput, stylesFactory, LegacyForms } from '@grafana/ui';\nimport { VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { DerivedFieldConfig } from '../types';\nimport { usePrevious } from 'react-use';\n\nconst { Switch, FormField } = LegacyForms;\n\nconst getStyles = stylesFactory(() => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n}));\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.row}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={5}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant=\"destructive\"\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n          className={css`\n            margin-left: 8px;\n          `}\n        />\n      </div>\n\n      <FormField\n        label={showInternalLink ? 'Query' : 'URL'}\n        labelWidth={5}\n        inputEl={\n          <DataLinkInput\n            placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n            value={value.url || ''}\n            onChange={(newValue) =>\n              onChange({\n                ...value,\n                url: newValue,\n              })\n            }\n            suggestions={suggestions}\n          />\n        }\n        className={css`\n          width: 100%;\n        `}\n      />\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              })\n            }\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { DerivedFieldConfig } from '../types';\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: any = field.value;\n          if (field.error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: any;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        return {\n          name: field.name,\n          value: value || '<no match>',\n          href: link && link.href,\n        } as DebugField;\n      } catch (error) {\n        return {\n          name: field.name,\n          error,\n        } as DebugField;\n      }\n    });\n}\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DerivedFieldConfig } from '../types';\nimport { DerivedField } from './DerivedField';\nimport { DebugSection } from './DebugSection';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textWeak};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DerivedField\n                className={styles.derivedField}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1, newField);\n                  onChange(newDerivedFields);\n                }}\n                onDelete={() => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1);\n                  onChange(newDerivedFields);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Exact string captured by the regular expression',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...(value || []), { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value && value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { LokiOptions } from '../types';\nimport { MaxLinesField } from './MaxLinesField';\nimport { DerivedFields } from './DerivedFields';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater = <T extends any>(field: keyof LokiOptions) => (\n  options: DataSourceSettings<LokiOptions>,\n  value: T\n): DataSourceSettings<LokiOptions> => {\n  return {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      [field]: value,\n    },\n  };\n};\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport Datasource from './datasource';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiExploreQueryEditor from './components/LokiExploreQueryEditor';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { LokiAnnotationsQueryCtrl } from './LokiAnnotationsQueryCtrl';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(Datasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(LokiExploreQueryEditor)\n  .setQueryEditorHelp(LokiCheatSheet)\n  .setAnnotationQueryCtrl(LokiAnnotationsQueryCtrl);\n","import { Grammar } from 'prismjs';\nimport { CompletionItem } from '@grafana/ui';\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n];\n\nexport const PIPE_PARSERS: CompletionItem[] = [\n  {\n    label: 'json',\n    insertText: 'json',\n    documentation: 'Extracting labels from the log line using json parser. Only available in Loki 2.0+.',\n  },\n  {\n    label: 'regexp',\n    insertText: 'regexp \"\"',\n    documentation: 'Extracting labels from the log line using regexp parser. Only available in Loki 2.0+.',\n    move: -1,\n  },\n  {\n    label: 'logfmt',\n    insertText: 'logfmt',\n    documentation: 'Extracting labels from the log line using logfmt parser. Only available in Loki 2.0+.',\n  },\n];\n\nexport const PIPE_OPERATORS: CompletionItem[] = [\n  {\n    label: 'unwrap',\n    insertText: 'unwrap',\n    detail: 'unwrap identifier',\n    documentation:\n      'Take labels and use the values as sample data for metric aggregations. Only available in Loki 2.0+.',\n  },\n  {\n    label: 'label_format',\n    insertText: 'label_format',\n    documentation:\n      'Use to rename, modify or add labels. For example, | label_format foo=bar . Only available in Loki 2.0+.',\n  },\n  {\n    label: 'line_format',\n    insertText: 'line_format',\n    documentation:\n      'Rewrites log line content. For example, | line_format \"{{.query}} {{.duration}}\" . Only available in Loki 2.0+.',\n  },\n];\n\nexport const RANGE_VEC_FUNCTIONS = [\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation:\n      'The population standard variance of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation:\n      'The population standard deviation of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'bytes_over_time',\n    label: 'bytes_over_time',\n    detail: 'bytes_over_time(range-vector)',\n    documentation: 'Counts the amount of bytes used by each log stream for a given range',\n  },\n  {\n    insertText: 'bytes_rate',\n    label: 'bytes_rate',\n    detail: 'bytes_rate(range-vector)',\n    documentation: 'Calculates the number of bytes per second for each stream.',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n];\n\nexport const FUNCTIONS = [...AGGREGATION_OPERATORS, ...RANGE_VEC_FUNCTIONS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((without|by)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  'context-pipe': {\n    pattern: /\\s\\|[^=~]\\s?\\w*/i,\n    inside: {\n      'pipe-operator': {\n        pattern: /\\|/i,\n        alias: 'operator',\n      },\n      'pipe-operations': {\n        pattern: new RegExp(`${[...PIPE_PARSERS, ...PIPE_OPERATORS].map((f) => f.label).join('|')}`, 'i'),\n        alias: 'keyword',\n      },\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=\\])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: /\\s?(\\|[=~]?|!=?|<(?:=>?|<|>)?|>[>=]?)\\s?/i,\n  punctuation: /[{}()`,.]/,\n};\n\nexport default tokenizer;\n","import { useEffect, useRef } from 'react';\nvar usePrevious = function (state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n"],"sourceRoot":""}