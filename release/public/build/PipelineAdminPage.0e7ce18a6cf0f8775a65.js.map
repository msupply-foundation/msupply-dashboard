{"version":3,"file":"PipelineAdminPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useNavModel.ts","webpack://grafana/./public/app/features/live/pages/RuleModal.tsx","webpack://grafana/./public/app/features/live/pages/PipelineAdminPage.tsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { getNavModel } from '../selectors/navModel';\nimport { NavModel } from '../core';\n\nexport const useNavModel = (id: string): NavModel => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  return getNavModel(navIndex, id);\n};\n","import React, { useState } from 'react';\nimport { Modal, TabContent, TabsBar, Tab, CodeEditor } from '@grafana/ui';\nimport { Rule } from './types';\n\ninterface Props {\n  rule: Rule;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst tabs = [\n  { label: 'Converter', value: 'converter' },\n  { label: 'Processor', value: 'processor' },\n  { label: 'Output', value: 'output' },\n];\nconst height = 600;\n\nexport const RuleModal: React.FC<Props> = (props) => {\n  const { rule, isOpen, onClose } = props;\n  const [activeTab, setActiveTab] = useState<string>('converter');\n\n  return (\n    <Modal isOpen={isOpen} title={rule.pattern} onDismiss={onClose} closeOnEscape>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab.value === activeTab}\n              onChangeTab={() => {\n                setActiveTab(tab.value);\n              }}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent>\n        {activeTab === 'converter' && <ConverterEditor {...props} />}\n        {activeTab === 'processor' && <ProcessorEditor {...props} />}\n        {activeTab === 'output' && <OutputEditor {...props} />}\n      </TabContent>\n    </Modal>\n  );\n};\n\nexport const ConverterEditor: React.FC<Props> = ({ rule }) => {\n  const { converter } = rule.settings;\n  if (!converter) {\n    return <div>No converter defined</div>;\n  }\n\n  return (\n    <CodeEditor\n      height={height}\n      value={JSON.stringify(converter, null, '\\t')}\n      showLineNumbers={true}\n      readOnly={true}\n      language=\"json\"\n      showMiniMap={false}\n    />\n  );\n};\n\nexport const ProcessorEditor: React.FC<Props> = ({ rule }) => {\n  const { processor } = rule.settings;\n  if (!processor) {\n    return <div>No processor defined</div>;\n  }\n\n  return (\n    <CodeEditor\n      height={height}\n      value={JSON.stringify(processor, null, '\\t')}\n      showLineNumbers={true}\n      readOnly={true}\n      language=\"json\"\n      showMiniMap={false}\n    />\n  );\n};\n\nexport const OutputEditor: React.FC<Props> = ({ rule }) => {\n  const { output } = rule.settings;\n  if (!output) {\n    return <div>No output defined</div>;\n  }\n\n  return (\n    <CodeEditor\n      height={height}\n      value={JSON.stringify(output, null, '\\t')}\n      showLineNumbers={true}\n      readOnly={true}\n      language=\"json\"\n      showMiniMap={false}\n    />\n  );\n};\n","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input, Tag, useStyles } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Rule, Output } from './types';\nimport { RuleModal } from './RuleModal';\n\nfunction renderOutputTags(key: string, output?: Output): React.ReactNode {\n  if (!output?.type) {\n    return null;\n  }\n  if (output.multiple?.outputs?.length) {\n    return output.multiple?.outputs.map((v, i) => renderOutputTags(`${key}-${i}`, v));\n  }\n  return <Tag key={key} name={output.type} />;\n}\n\nexport default function PipelineAdminPage() {\n  const [rules, setRules] = useState<Rule[]>([]);\n  const [isOpen, setOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState<Rule>();\n  const [defaultRules, setDefaultRules] = useState<any[]>([]);\n  const navModel = useNavModel('live-pipeline');\n  const [error, setError] = useState<string>();\n  const styles = useStyles(getStyles);\n\n  useEffect(() => {\n    getBackendSrv()\n      .get(`api/live/channel-rules`)\n      .then((data) => {\n        setRules(data.rules);\n        setDefaultRules(data.rules);\n      })\n      .catch((e) => {\n        if (e.data) {\n          setError(JSON.stringify(e.data, null, 2));\n        }\n      });\n  }, []);\n\n  const onRowClick = (event: any) => {\n    const pattern = event.target.getAttribute('data-pattern');\n    const column = event.target.getAttribute('data-column');\n    console.log('show:', column);\n    // setActiveTab(column);\n    setSelectedRule(rules.filter((rule) => rule.pattern === pattern)[0]);\n    setOpen(true);\n  };\n\n  const onSearchQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      setRules(rules.filter((rule) => rule.pattern.toLowerCase().includes(e.target.value.toLowerCase())));\n      console.log(e.target.value, rules);\n    } else {\n      setRules(defaultRules);\n    }\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {error && <pre>{error}</pre>}\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <Input placeholder=\"Search pattern...\" onChange={onSearchQueryChange} />\n          </div>\n        </div>\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th>Pattern</th>\n                <th>Converter</th>\n                <th>Processor</th>\n                <th>Output</th>\n              </tr>\n            </thead>\n            <tbody>\n              {rules.map((rule) => (\n                <tr key={rule.pattern} onClick={onRowClick} className={styles.row}>\n                  <td data-pattern={rule.pattern} data-column=\"pattern\">\n                    {rule.pattern}\n                  </td>\n                  <td data-pattern={rule.pattern} data-column=\"converter\">\n                    {rule.settings?.converter?.type}\n                  </td>\n                  <td data-pattern={rule.pattern} data-column=\"processor\">\n                    {rule.settings?.processor?.type}\n                  </td>\n                  <td data-pattern={rule.pattern} data-column=\"output\">\n                    {renderOutputTags('out', rule.settings?.output)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {isOpen && selectedRule && <RuleModal rule={selectedRule} isOpen={isOpen} onClose={() => setOpen(false)} />}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    row: css`\n      cursor: pointer;\n    `,\n  };\n};\n"],"names":["useNavModel","id","navIndex","useSelector","state","getNavModel","tabs","label","value","RuleModal","props","rule","isOpen","onClose","activeTab","setActiveTab","useState","Modal","title","pattern","onDismiss","closeOnEscape","TabsBar","map","tab","index","Tab","active","onChangeTab","TabContent","ConverterEditor","ProcessorEditor","OutputEditor","converter","settings","CodeEditor","height","JSON","stringify","showLineNumbers","readOnly","language","showMiniMap","processor","output","renderOutputTags","key","type","multiple","outputs","length","v","i","Tag","name","PipelineAdminPage","rules","setRules","setOpen","selectedRule","setSelectedRule","defaultRules","setDefaultRules","navModel","error","setError","styles","useStyles","getStyles","useEffect","getBackendSrv","get","then","data","catch","e","onRowClick","event","target","getAttribute","column","console","log","filter","Page","className","Input","placeholder","onChange","toLowerCase","includes","onClick","row","theme","css"],"sourceRoot":""}