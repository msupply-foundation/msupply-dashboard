{"version":3,"file":"graphitePlugin.e65e3aa10981aa98e7a1.js","mappings":"0qCAEA,MAAMA,EAAiB,uDAEhB,MAAMC,EAMXC,YAAYC,GAAiB,2FAC3BC,KAAKC,MAAQ,EACbD,KAAKE,MAAQ,EACbF,KAAKG,MAAQ,EACbH,KAAKI,KAAO,GACZ,MAAMC,EAAQT,EAAeU,KAAKP,GAC9BM,IACFL,KAAKC,MAAQM,OAAOF,EAAM,IAC1BL,KAAKE,MAAQK,OAAOF,EAAM,IAAM,GAChCL,KAAKG,MAAQI,OAAOF,EAAM,IAAM,GAChCL,KAAKI,KAAOC,EAAM,IAItBG,SAAST,GACP,MAAMU,EAAW,IAAIZ,EAAWE,GAEhC,IAAK,IAAIW,EAAI,EAAGA,EAAIV,KAAKW,WAAWC,SAAUF,EAAG,CAC/C,GAAIV,KAAKW,WAAWD,GAAKD,EAASE,WAAWD,GAC3C,OAAO,EAET,GAAIV,KAAKW,WAAWD,GAAKD,EAASE,WAAWD,GAC3C,OAAO,EAGX,OAAO,EAGTG,UACE,OAAOC,EAAAA,EAAAA,UAASd,KAAKC,OAGnBU,iBACF,MAAO,CAACX,KAAKC,MAAOD,KAAKE,MAAOF,KAAKG,QAIlC,SAASY,EAAgBC,EAAWC,GAEzC,OADgB,IAAIpB,EAAWmB,GAChBR,SAASS,G,wHCjB1B,MAAMC,EAAkB,GAExB,SAASC,EAAWC,GAClBA,EAAQC,OAASD,EAAQC,QAAU,GACnCD,EAAQE,cAAgBF,EAAQE,eAAiB,GAEjDJ,EAAME,EAAQG,MAAQH,EAClBA,EAAQI,YACVN,EAAME,EAAQI,WAAaJ,GAI/B,MAAMK,EAAwB,CAAC,CAAEF,KAAM,QAASG,KAAM,kBAAmBC,UAAU,EAAMC,UAAU,IA46BnG,SAASC,EAAyBC,EAA2BC,GAC3D,OAAQD,EAAI/B,SAAWgB,EAAgBgB,EAAiBD,EAAI/B,SA36B9DoB,EAAW,CACTI,KAAM,iBACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,UAAWG,KAAM,QAClCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,YAAaG,KAAM,MAAOC,UAAU,IACrDL,cAAe,KAGjBH,EAAW,CACTI,KAAM,sBACNS,SAAU,cAGZb,EAAW,CACTI,KAAM,6BACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,wBACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,cACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,iBAAkBG,KAAM,QACzCJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,aACNF,OAAQI,EACRH,cAAe,CAAC,MAChBU,SAAU,YAGZb,EAAW,CACTI,KAAM,eACNF,OAAQI,EACRH,cAAe,CAAC,IAChBU,SAAU,YAGZb,EAAW,CACTI,KAAM,eACNF,OAAQI,EACRH,cAAe,CAAC,MAChBU,SAAU,YAGZb,EAAW,CACTI,KAAM,iBACNF,OAAQI,EACRH,cAAe,CAAC,MAChBU,SAAU,YAGZb,EAAW,CACTI,KAAM,YACNF,OAAQI,EACRH,cAAe,CAAC,MAChBU,SAAU,YAGZb,EAAW,CACTI,KAAM,QACNF,OAAQI,EACRH,cAAe,CAAC,KAAM,MACtBU,SAAU,YAGZb,EAAW,CACTI,KAAM,YACNC,UAAW,MACXQ,SAAU,UACVX,OAAQI,EACRH,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,gBACNC,UAAW,MACXQ,SAAU,UACVX,OAAQI,EACRH,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,gBACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,qBACNS,SAAU,UACVX,OAAQ,CACN,CAAEE,KAAM,IAAKG,KAAM,OACnB,CAAEH,KAAM,cAAeG,KAAM,UAAWO,QAAS,CAAC,OAAQ,WAE5DX,cAAe,CAAC,GAAI,WAGtBH,EAAW,CACTI,KAAM,yBACNS,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,MAAOE,UAAU,IAChDN,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,YACNC,UAAW,MACXQ,SAAU,YAGZb,EAAW,CACTI,KAAM,YACNC,UAAW,MACXQ,SAAU,YAGZb,EAAW,CACTI,KAAM,6BACNS,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,MAAOE,UAAU,IAChDN,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,QACNS,SAAU,QACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,WAChCJ,cAAe,CAAC,WAGlBH,EAAW,CACTI,KAAM,WACNS,SAAU,QACVX,OAAQ,CACN,CAAEE,KAAM,SAAUG,KAAM,UACxB,CAAEH,KAAM,UAAWG,KAAM,WAE3BJ,cAAe,CAAC,GAAI,SAGtBH,EAAW,CACTI,KAAM,gBACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,WACNG,KAAM,SACNO,QAAS,CAAC,MAAO,UAAW,MAAO,SAGvCX,cAAe,CAAC,SAGlBH,EAAW,CACTI,KAAM,aACNS,SAAU,UACVX,OAAQ,GACRC,cAAe,KAGjBH,EAAW,CACTI,KAAM,cACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,OACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAE9C,CACEV,KAAM,WACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,eAG5BX,cAAe,CAAC,EAAG,SAGrBH,EAAW,CACTI,KAAM,cACNS,SAAU,QACVX,OAAQ,CACN,CACEE,KAAM,OACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC5CL,UAAU,IAGdN,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,SACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,QACNG,KAAM,MACNO,QAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAEtE,CACEV,KAAM,OACNG,KAAM,MACNO,QAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MAGxEX,cAAe,CAAC,EAAG,KAGrBH,EAAW,CACTI,KAAM,aACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,UACNG,KAAM,UACNO,QAAS,CAAC,OAAQ,SAClBN,UAAU,IAGdL,cAAe,CAAC,WAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,eACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,cACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,gBACNS,SAAU,UAGZb,EAAW,CACTI,KAAM,aACNW,MAAM,EACNF,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,WAC/BJ,cAAe,CAAC,gBAGlBH,EAAW,CACTI,KAAM,cACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,eACNS,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,aACNS,SAAU,YAGZb,EAAW,CACTI,KAAM,gBACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,OAGlBH,EAAW,CACTI,KAAM,UACNS,SAAU,UACVX,OAAQ,GACRC,cAAe,KAGjBH,EAAW,CACTI,KAAM,QACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,SAAUG,KAAM,QACjCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,SACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,SAAUG,KAAM,QACjCJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,gBACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,SAAUG,KAAM,QACjCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,WACNS,SAAU,cAGZb,EAAW,CACTI,KAAM,aACNS,SAAU,cAGZb,EAAW,CACTI,KAAM,wBACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,iBAAkBG,KAAM,MAAOC,UAAU,IAC1DL,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,SACNG,KAAM,SACNO,QAAS,CAAC,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,SAG1DX,cAAe,CAAC,QAGlBH,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,gBACNG,KAAM,SACNO,QAAS,CAAC,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,QAExD,CAAEV,KAAM,iBAAkBG,KAAM,OAChC,CAAEH,KAAM,eAAgBG,KAAM,QAEhCJ,cAAe,CAAC,KAAM,EAAG,KAG3BH,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CAAEE,KAAM,WAAYG,KAAM,UAC1B,CACEH,KAAM,OACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,MAAO,MAAO,SAExC,CACEV,KAAM,cACNG,KAAM,UACNC,UAAU,EACVM,QAAS,CAAC,QAAS,UAGvBX,cAAe,CAAC,KAAM,MAAO,WAG/BH,EAAW,CACTI,KAAM,iBACNS,SAAU,YACVX,OAAQ,CACN,CAAEE,KAAM,WAAYG,KAAM,UAC1B,CACEH,KAAM,OACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,MAAO,MAAO,UAG1CX,cAAe,CAAC,KAAM,SAGxBH,EAAW,CACTI,KAAM,WACNS,SAAU,cAGZb,EAAW,CACTI,KAAM,WACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,WAAYG,KAAM,WACnCJ,cAAe,CAAC,SAGlBH,EAAW,CACTI,KAAM,MACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,QAC/BJ,cAAe,CAAC,QAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,QACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,cACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,UACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,UAAWG,KAAM,WAClCJ,cAAe,CAAC,aAGlBH,EAAW,CACTI,KAAM,iBACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,aACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,gBACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,gBACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,MAGlBH,EAAW,CACTI,KAAM,eACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,OAGlBH,EAAW,CACTI,KAAM,QACNS,SAAU,YACVX,OAAQ,CACN,CAAEE,KAAM,IAAKG,KAAM,OACnB,CAAEH,KAAM,YAAaG,KAAM,QAE7BJ,cAAe,CAAC,EAAG,MAGrBH,EAAW,CACTI,KAAM,iBACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,gBACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,wBACNS,SAAU,cACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,mBACNS,SAAU,cACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,wBACNS,SAAU,cACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,mBACNS,SAAU,cACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,KAGlBH,EAAW,CACTI,KAAM,iBACNS,SAAU,gBACVX,OAAQ,CACN,CAAEE,KAAM,QAASG,KAAM,OACvB,CAAEH,KAAM,SAAUG,KAAM,UACxB,CAAEH,KAAM,UAAWG,KAAM,WAE3BJ,cAAe,CAAC,EAAG,SAAU,aAO/BH,EAAW,CACTI,KAAM,gBACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,OACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,MAAO,MAAO,UAG1CX,cAAe,CAAC,OAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,2BACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,QACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,QAChCJ,cAAe,CAAC,GAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,2BACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,iBACNS,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,WAAYG,KAAM,WACnCJ,cAAe,CAAC,mBAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,OACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,WAC/BJ,cAAe,CAAC,QAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,eACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,WACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,cAE1B,CACEV,KAAM,OACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC5CL,UAAU,IAGdN,cAAe,CAAC,MAAO,GACvBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,qBACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,eACNG,KAAM,SACNO,QAAS,CAAC,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,SAG1DX,cAAe,CAAC,MAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,cACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,QAASG,KAAM,MAAOC,UAAU,IACjDL,cAAe,GACfvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,SACNS,SAAU,YACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,UACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,mBACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,gBACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,QAC7DN,UAAU,GAEZ,CACEJ,KAAM,cACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,QAC7DN,UAAU,IAGdL,cAAe,GACfvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNC,UAAW,MACXH,OAAQ,CAAC,CAAEE,KAAM,OAAQG,KAAM,QAC/BJ,cAAe,CAAC,GAChBU,SAAU,UACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,aACNG,KAAM,kBACNO,QAAS,CAAC,IAAK,IAAK,KAAM,OAAQ,QAAS,QAAS,WAGxDX,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,8BACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,WACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC5CL,UAAU,IAGdN,cAAe,CAAC,GAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,eACNS,SAAU,YACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,MACNS,SAAU,YACVX,OAAQ,CAAC,CAAEE,KAAM,SAAUG,KAAM,QACjCJ,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQI,EACRH,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,eACNC,UAAW,SACXH,OAAQ,CACN,CACEE,KAAM,WACNG,KAAM,SACNO,QAAS,CAAC,YAAa,aAAc,iBAEvC,CACEV,KAAM,aACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,KAEtD,CAAEV,KAAM,iBAAkBG,KAAM,SAAUE,UAAU,IAEtDN,cAAe,CAAC,YAAa,EAAG,cAChCU,SAAU,UACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,0BACNS,SAAU,gBACVX,OAAQ,CAAC,CAAEE,KAAM,IAAKG,KAAM,QAC5BJ,cAAe,CAAC,IAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,oBACNS,SAAU,gBACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,aACNS,SAAU,YACVjC,QAAS,QAGXoB,EAAW,CACTI,KAAM,YACNS,SAAU,YACVX,OAAQ,CACN,CACEE,KAAM,eACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,SAE/D,CACEV,KAAM,aACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,QAC7DN,UAAU,IAGdL,cAAe,CAAC,OAChBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,kBACNS,SAAU,UACVX,OAAQ,CACN,CAAEE,KAAM,QAASG,KAAM,kBAAmBC,UAAU,GACpD,CACEJ,KAAM,OACNG,KAAM,MACNO,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MAGhDX,cAAe,CAAC,KAAM,GACtBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,cACNS,SAAU,UACVX,OAAQ,CAAC,CAAEE,KAAM,gBAAiBG,KAAM,SAAUE,UAAU,IAC5D7B,QAAS,QAGXoB,EAAW,CACTI,KAAM,cACNS,SAAU,UACVX,OAAQ,CACN,CACEE,KAAM,WACNG,KAAM,SACNO,QAAS,CAAC,MAAO,MAAO,cAE1B,CAAEV,KAAM,MAAOG,KAAM,SAAUE,UAAU,IAE3CN,cAAe,CAAC,MAAO,OACvBvB,QAAS,QAGXoB,EAAW,CACTI,KAAM,cACNS,SAAU,QACVX,OAAQ,CAAC,CAAEE,KAAM,MAAOG,KAAM,SAAUE,UAAU,IAClDN,cAAe,CAAC,OAChBvB,QAAS,QAOJ,MAAMoC,EAiBXrC,YAAYsB,EAAkBa,GAAsC,2FAClEjC,KAAKoC,IAAMhB,EACXpB,KAAKqB,OAAS,GAEVY,GAAWA,EAAQI,mBAAqBjB,EAAQE,gBAClDtB,KAAKqB,OAASD,EAAQE,cAAcgB,MAAM,IAG5CtC,KAAKuC,aAGPC,OAAOC,EAAmBC,GACxB,MAAMC,EAAM3C,KAAKoC,IAAIb,KAAO,IAEtBqB,GAAaC,EAAAA,EAAAA,KAAI7C,KAAKqB,QAAQ,CAACyB,EAAO5B,KAC1C,IAAI6B,EASJ,GAPI7B,EAAQlB,KAAKoC,IAAIf,OAAOT,OAC1BmC,EAAY/C,KAAKoC,IAAIf,OAAOH,GAAOQ,MAC1BsB,EAAAA,EAAAA,MAAIC,EAAAA,EAAAA,MAAKjD,KAAKoC,IAAIf,QAAS,cACpC0B,GAAYC,EAAAA,EAAAA,MAAIC,EAAAA,EAAAA,MAAKjD,KAAKoC,IAAIf,QAAS,UAIrC6B,EAAAA,EAAAA,UAAS,CAAC,kBAAmB,UAAW,MAAO,QAAS,OAAQ,mBAAoBH,GACtF,OAAOD,EAGT,MAAMK,GAAoBC,EAAAA,EAAAA,UAASN,GAASJ,EAAiBI,GAASA,EAItE,OAAII,EAAAA,EAAAA,UAAS,CAAC,kBAAmB,eAAgBH,KAAcM,EAAAA,EAAAA,WAAUF,IAChEG,EAAAA,EAAAA,UAASR,GAGX,IAAMA,EAAQ,OAIvB,KAA6C,KAAtCF,EAAWA,EAAWhC,OAAS,IACpCgC,EAAWW,MAOb,OAJId,GACFG,EAAWY,QAAQf,GAGdE,EAAMC,EAAWa,KAAK,MAAQ,IAGvCC,2BAA2BC,EAAezC,GACxC,OAA+B,IAA3ByC,EAASC,QAAQ,UAIjB5D,KAAKoC,IAAIf,OAAOH,EAAQ,KAAMlB,KAAKoC,IAAIf,OAAOH,EAAQ,GAAGS,cAIzDT,EAAQ,GAAKlB,KAAKoC,IAAIf,OAAOT,SAAUoC,EAAAA,EAAAA,MAAIC,EAAAA,EAAAA,MAAKjD,KAAKoC,IAAIf,QAAS,cAOxEwC,YAAYF,EAAezC,GAGrBlB,KAAK0D,2BAA2BC,EAAUzC,IAC5C4C,EAAAA,EAAAA,MAAKH,EAASI,MAAM,MAAM,CAACC,EAASC,KAClCjE,KAAK6D,YAAYG,EAAQE,OAAQhD,EAAQ+C,OAK5B,KAAbN,IAAoBzC,GAASlB,KAAKoC,IAAIf,OAAOT,QAAUZ,KAAKoC,IAAIf,OAAOH,GAAOS,UAChF3B,KAAKqB,OAAO8C,OAAOjD,EAAO,GAE1BlB,KAAKqB,OAAOH,GAASyC,EAGvB3D,KAAKuC,cAGPA,aACE,GAA2B,IAAvBvC,KAAKqB,OAAOT,OAEd,YADAZ,KAAKoE,KAAOpE,KAAKoC,IAAIb,KAAO,MAI9B,IAAI6C,EAAOpE,KAAKoC,IAAIb,KAAO,IAC3B6C,GAAQpE,KAAKqB,OAAOoC,KAAK,MACzBW,GAAQ,IACRpE,KAAKoE,KAAOA,GAWhB,SAASC,EAAW9C,EAAc0C,GAChC,OAAMA,GAAO/C,GAAOK,IAGZ0C,GAAO/C,GAAOK,GAFb,CAAEA,KAAMA,EAAMF,OAAQ,CAAC,CAAEE,KAAM,GAAIG,KAAM,GAAIE,UAAU,IAASN,cAAe,CAAC,IAAKgD,SAAS,GAuHzG,SACEC,mBAjIF,SAA4BnD,EAAca,EAAsCgC,GAI9E,OAHIb,EAAAA,EAAAA,UAAShC,KACXA,EAAUiD,EAAWjD,EAAS6C,IAEzB,IAAI9B,EAAaf,EAASa,IA8HjCoC,WAAYA,EACZG,YArHF,SAAqBzC,EAAyBkC,GAC5C,MAAMQ,EAAkB,GAUxB,OATAC,EAAAA,EAAAA,SAAQT,GAAO/C,GAAQE,IACjBS,EAAyBT,EAASW,KACpC0C,EAAMrD,EAAQG,OAAQoD,EAAAA,EAAAA,QAAO,GAAIvD,EAAS,CACxCC,QAAQuD,EAAAA,EAAAA,QAAOxD,EAAQC,QAASwD,GACvBhD,EAAyBgD,EAAO9C,WAKxC0C,GA2GPK,cAvGF,SAAuBC,GACrB,MAAMC,EAAqB,GA+F3B,OA7FAN,EAAAA,EAAAA,SAAQK,GAAW,IAAI,CAAC3D,EAAS6D,KAE/B,GAAsB,UAAlB7D,EAAQ8D,MACV,OAGF,IAAIC,EAAc/D,EAAQ+D,YACtBA,IAEFA,EAAcA,EACXC,QAAQ,8BAA+B,UACvCA,QAAQ,iBAAkB,cAC1BA,QAAQ,2BAA4B,oBAGzC,MAAMC,EAAgB,CACpB9D,KAAMH,EAAQG,KACd4D,YAAAA,EACAnD,SAAUZ,EAAQ8D,MAClB7D,OAAQ,GACRC,cAAe,GACfY,MAAM,GAIJ,iBAAiBoD,MAAKtC,EAAAA,EAAAA,KAAI5B,EAAS,iBAAkB,KAGnDA,EAAQC,OAAO,GAAGO,SACpBR,EAAQC,OAAO,GAAGkE,UAAW,EAG7BnE,EAAQC,OAAOmE,QAIjBH,EAAKnD,MAAO,GAGdwC,EAAAA,EAAAA,SAAQtD,EAAQC,QAASoE,IACvB,MAAMZ,EAAa,CACjBtD,KAAMkE,EAASlE,KACfG,KAAM,SACNC,UAAW8D,EAASF,SACpB3D,WAAY6D,EAAS7D,SACrBK,aAASyD,QAGcA,IAArBD,EAASE,QACPF,EAASE,UAAYC,EAAAA,EACvBP,EAAK/D,cAAcuE,KAAK,OAExBR,EAAK/D,cAAcuE,MAAKvC,EAAAA,EAAAA,UAASmC,EAASE,UAEnCF,EAASK,YAClBT,EAAK/D,cAAcuE,MAAKvC,EAAAA,EAAAA,UAASmC,EAASK,YAAY,KAEtDT,EAAK/D,cAAcuE,KAAK,IAGJ,YAAlBJ,EAAS/D,MACXmD,EAAMnD,KAAO,UACbmD,EAAM5C,QAAU,CAAC,OAAQ,UACE,YAAlBwD,EAAS/D,KAClBmD,EAAMnD,KAAO,MACc,UAAlB+D,EAAS/D,KAClBmD,EAAMnD,KAAO,QACc,SAAlB+D,EAAS/D,MAClBmD,EAAMnD,KAAO,OACbmD,EAAM5C,QAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,OACpD,cAAlBwD,EAAS/D,MAClBmD,EAAMnD,KAAO,cACbmD,EAAM5C,QAAU,CAAC,OAAQ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,OAC5D,kBAAlBwD,EAAS/D,KAClBmD,EAAMnD,KAAO,kBACc,eAAlB+D,EAAS/D,KAClBmD,EAAMnD,KAAO,kBACc,aAAlB+D,EAAS/D,OAClBmD,EAAMnD,KAAO,mBAGX+D,EAASxD,QACX4C,EAAM5C,SAAUY,EAAAA,EAAAA,KAAI4C,EAASxD,QAASqB,EAAAA,UAC7BmC,EAASK,cAClBjB,EAAM5C,SAAUY,EAAAA,EAAAA,KAAI4C,EAASK,YAAaxC,EAAAA,WAG5C+B,EAAKhE,OAAOwE,KAAKhB,MAGnBG,EAASC,GAAYI,KAGhBL,I,4DC9rCF,IAAKe,ECFZ,SAASC,EAAUC,GACjB,GAAIA,EACF,OAAOC,SAASD,EAAK,IAKzB,SAASE,EAAqBF,GAC5B,GAAIA,EACF,MAAY,SAARA,GAGQ,UAARA,GAGGC,SAASD,EAAK,IAKlB,SAASG,EAAgBC,GAC9B,IAAK,MAAMjG,KAAQiG,EAAU,CAC3B,MAAMC,EAAelG,EAAK,gBAE1B,GAAIkG,EAAe,EAAG,OAKpB,MAAO,CACLlC,KAAO,sCALMmC,EAAsBnG,EAAK,sBACZkG,GAAcE,mBAC/B,UAACpG,EAAK,iCAAN,QAAmC,IAAIgF,QAAQ,eAAgB,eAI1EqB,SAAU,OACVC,QAAS,SAKf,OAAO,KAGF,SAASC,EAA8BN,GAC5C,IAAK,MAAMjG,KAAQiG,EAAU,CAC3B,MAAMO,EAAYxG,EAAK,aAEvB,GAAIwG,EAAY,EAAG,OAGjB,MAAO,CACLxC,KAAO,iCAAgCwC,gCAH5B,UAACxG,EAAK,0BAAN,QAA4B,IAAIgF,QAAQ,eAAgB,eAInEqB,SAAU,OACVC,QAAS,SAKf,OAAO,KAGF,SAASH,EAAsBM,GACpC,OAAKA,EAGEA,EAAK9C,MAAM,KAAKlB,KAAKF,IAC1B,MAAMmE,EAAOnE,EAAIoB,MAAM,KACvB,MAAO,CACLyC,SAAUM,EAAK,GACfC,UAAWD,EAAK,GAChBE,UAAWF,EAAK,GAChBG,UAAWjB,EAAUc,EAAK,IAC1BI,MAAOf,EAAqBW,EAAK,QAT5B,I,SD1DCf,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,WAAAA,a,CAAAA,IAAAA,EAAAA,K,oDEbL,MAAMoB,EAAoB,CAAC,MAAO,MAAO,OAEnCC,GAA2BnE,EAAAA,EAAAA,MAAKkE,G,wKCO7C,MAAME,EAAqB,CACzB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9G,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAC9G,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAChH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","sources":["webpack://grafana/./public/app/core/utils/version.ts","webpack://grafana/./public/app/plugins/datasource/graphite/gfunc.ts","webpack://grafana/./public/app/plugins/datasource/graphite/types.ts","webpack://grafana/./public/app/plugins/datasource/graphite/meta.ts","webpack://grafana/./public/app/plugins/datasource/graphite/versions.ts","webpack://grafana/./public/app/plugins/datasource/graphite/lexer.ts","webpack://grafana/./public/app/plugins/datasource/graphite/parser.ts","webpack://grafana/./public/app/plugins/datasource/graphite/graphite_query.ts","webpack://grafana/./public/app/plugins/datasource/graphite/datasource.ts","webpack://grafana/./public/app/plugins/datasource/graphite/utils.ts","webpack://grafana/./public/app/plugins/datasource/graphite/configuration/MappingsHelp.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/configuration/MappingsConfiguration.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/configuration/parseLokiLabelMappings.ts","webpack://grafana/./public/app/plugins/datasource/graphite/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/MetricTankMetaInspector.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/state/actions.ts","webpack://grafana/./public/app/plugins/datasource/graphite/state/helpers.ts","webpack://grafana/./public/app/plugins/datasource/graphite/state/store.ts","webpack://grafana/./public/app/plugins/datasource/graphite/state/context.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/GraphiteTextEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/helpers.ts","webpack://grafana/./public/app/plugins/datasource/graphite/state/providers.ts","webpack://grafana/./public/app/plugins/datasource/graphite/components/TagEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/PlayButton.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/MetricSegment.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/MetricsSection.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/SeriesSection.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/FunctionParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/FunctionEditorControls.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/FunctionEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/GraphiteFunctionEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/AddGraphiteFunction.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/FunctionsSection.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/components/GraphiteQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/graphite/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/0/cache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/usePrevious.js"],"sourcesContent":["import { isNumber } from 'lodash';\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport class SemVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  meta: string;\n\n  constructor(version: string) {\n    this.major = 0;\n    this.minor = 0;\n    this.patch = 0;\n    this.meta = '';\n    const match = versionPattern.exec(version);\n    if (match) {\n      this.major = Number(match[1]);\n      this.minor = Number(match[2] || 0);\n      this.patch = Number(match[3] || 0);\n      this.meta = match[4];\n    }\n  }\n\n  isGtOrEq(version: string): boolean {\n    const compared = new SemVersion(version);\n\n    for (let i = 0; i < this.comparable.length; ++i) {\n      if (this.comparable[i] > compared.comparable[i]) {\n        return true;\n      }\n      if (this.comparable[i] < compared.comparable[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isValid(): boolean {\n    return isNumber(this.major);\n  }\n\n  get comparable() {\n    return [this.major, this.minor, this.patch];\n  }\n}\n\nexport function isVersionGtOrEq(a: string, b: string): boolean {\n  const aSemver = new SemVersion(a);\n  return aSemver.isGtOrEq(b);\n}\n","import { assign, each, filter, forEach, get, includes, isString, last, map, toString, isFinite } from 'lodash';\nimport { isVersionGtOrEq } from 'app/core/utils/version';\nimport { InterpolateFunction } from '@grafana/data';\n\nexport type ParamDef = {\n  name: string;\n  type: string;\n  options?: Array<string | number>;\n  multiple?: boolean;\n  optional?: boolean;\n  version?: string;\n};\n\nexport interface FuncDef {\n  name: string;\n  params: ParamDef[];\n  defaultParams: Array<string | number>;\n  category?: string;\n  shortName?: any;\n  fake?: boolean;\n  version?: string;\n  description?: string;\n  /**\n   * True if the function was not found on the list of available function descriptions.\n   */\n  unknown?: boolean;\n}\n\nexport type FuncDefs = {\n  [functionName in string]: FuncDef;\n};\n\nconst index: FuncDefs = {};\n\nfunction addFuncDef(funcDef: Partial<FuncDef> & { name: string; category: string }) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  index[funcDef.name] = funcDef as FuncDef;\n  if (funcDef.shortName) {\n    index[funcDef.shortName] = funcDef as FuncDef;\n  }\n}\n\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\n\naddFuncDef({\n  name: 'scaleToSeconds',\n  category: 'Transform',\n  params: [{ name: 'seconds', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'perSecond',\n  category: 'Transform',\n  params: [{ name: 'max value', type: 'int', optional: true }],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'holtWintersForecast',\n  category: 'Calculate',\n});\n\naddFuncDef({\n  name: 'holtWintersConfidenceBands',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'holtWintersAberration',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'nPercentile',\n  category: 'Calculate',\n  params: [{ name: 'Nth percentile', type: 'int' }],\n  defaultParams: [95],\n});\n\naddFuncDef({\n  name: 'diffSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'stddevSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'divideSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'multiplySeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'asPercent',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'group',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A', '#B'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'sumSeries',\n  shortName: 'sum',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'averageSeries',\n  shortName: 'avg',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'rangeOfSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'percentileOfSeries',\n  category: 'Combine',\n  params: [\n    { name: 'n', type: 'int' },\n    { name: 'interpolate', type: 'boolean', options: ['true', 'false'] },\n  ],\n  defaultParams: [95, 'false'],\n});\n\naddFuncDef({\n  name: 'sumSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'maxSeries',\n  shortName: 'max',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'minSeries',\n  shortName: 'min',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'averageSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'alias',\n  category: 'Alias',\n  params: [{ name: 'alias', type: 'string' }],\n  defaultParams: ['alias'],\n});\n\naddFuncDef({\n  name: 'aliasSub',\n  category: 'Alias',\n  params: [\n    { name: 'search', type: 'string' },\n    { name: 'replace', type: 'string' },\n  ],\n  defaultParams: ['', '\\\\1'],\n});\n\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'average', 'min', 'max'],\n    },\n  ],\n  defaultParams: ['max'],\n});\n\naddFuncDef({\n  name: 'cumulative',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'groupByNode',\n  category: 'Combine',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n  ],\n  defaultParams: [3, 'sum'],\n});\n\naddFuncDef({\n  name: 'aliasByNode',\n  category: 'Alias',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'substr',\n  category: 'Special',\n  params: [\n    {\n      name: 'start',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'stop',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: [0, 0],\n});\n\naddFuncDef({\n  name: 'sortByName',\n  category: 'Sorting',\n  params: [\n    {\n      name: 'natural',\n      type: 'boolean',\n      options: ['true', 'false'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['false'],\n});\n\naddFuncDef({\n  name: 'sortByMaxima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByMinima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByTotal',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'aliasByMetric',\n  category: 'Alias',\n});\n\naddFuncDef({\n  name: 'randomWalk',\n  fake: true,\n  category: 'Special',\n  params: [{ name: 'name', type: 'string' }],\n  defaultParams: ['randomWalk'],\n});\n\naddFuncDef({\n  name: 'countSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'constantLine',\n  category: 'Special',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'cactiStyle',\n  category: 'Special',\n});\n\naddFuncDef({\n  name: 'keepLastValue',\n  category: 'Transform',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'changed',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'integral',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'derivative',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'nonNegativeDerivative',\n  category: 'Transform',\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Transform',\n  params: [\n    {\n      name: 'amount',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n});\n\naddFuncDef({\n  name: 'timeStack',\n  category: 'Transform',\n  params: [\n    {\n      name: 'timeShiftUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n    { name: 'timeShiftStart', type: 'int' },\n    { name: 'timeShiftEnd', type: 'int' },\n  ],\n  defaultParams: ['1d', 0, 7],\n});\n\naddFuncDef({\n  name: 'summarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n    {\n      name: 'alignToFrom',\n      type: 'boolean',\n      optional: true,\n      options: ['false', 'true'],\n    },\n  ],\n  defaultParams: ['1h', 'sum', 'false'],\n});\n\naddFuncDef({\n  name: 'smartSummarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['1h', 'sum'],\n});\n\naddFuncDef({\n  name: 'absolute',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'hitcount',\n  category: 'Transform',\n  params: [{ name: 'interval', type: 'string' }],\n  defaultParams: ['10s'],\n});\n\naddFuncDef({\n  name: 'log',\n  category: 'Transform',\n  params: [{ name: 'base', type: 'int' }],\n  defaultParams: ['10'],\n});\n\naddFuncDef({\n  name: 'averageAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'averageBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'maximumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'maximumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'limit',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'mostDeviant',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exclude',\n  category: 'Filter Series',\n  params: [{ name: 'exclude', type: 'string' }],\n  defaultParams: ['exclude'],\n});\n\naddFuncDef({\n  name: 'highestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'highestMax',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'movingMedian',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: ['5'],\n});\n\naddFuncDef({\n  name: 'stdev',\n  category: 'Calculate',\n  params: [\n    { name: 'n', type: 'int' },\n    { name: 'tolerance', type: 'int' },\n  ],\n  defaultParams: [5, 0.1],\n});\n\naddFuncDef({\n  name: 'highestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAbovePercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowPercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'useSeriesAbove',\n  category: 'Filter Series',\n  params: [\n    { name: 'value', type: 'int' },\n    { name: 'search', type: 'string' },\n    { name: 'replace', type: 'string' },\n  ],\n  defaultParams: [0, 'search', 'replace'],\n});\n\n////////////////////\n// Graphite 1.0.x //\n////////////////////\n\naddFuncDef({\n  name: 'aggregateLine',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'averageOutsidePercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'delay',\n  category: 'Transform',\n  params: [{ name: 'steps', type: 'int' }],\n  defaultParams: [1],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'fallbackSeries',\n  category: 'Special',\n  params: [{ name: 'fallback', type: 'string' }],\n  defaultParams: ['constantLine(0)'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'grep',\n  category: 'Filter Series',\n  params: [{ name: 'grep', type: 'string' }],\n  defaultParams: ['grep'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'groupByNodes',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: ['sum', 3],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'integralByInterval',\n  category: 'Transform',\n  params: [\n    {\n      name: 'intervalUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'interpolate',\n  category: 'Transform',\n  params: [{ name: 'limit', type: 'int', optional: true }],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'invert',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'isNonNull',\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'linearRegression',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'startSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n    {\n      name: 'endSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'mapSeries',\n  shortName: 'map',\n  params: [{ name: 'node', type: 'int' }],\n  defaultParams: [3],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMin',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMax',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingSum',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'multiplySeriesWithWildcards',\n  category: 'Combine',\n  params: [\n    {\n      name: 'position',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [2],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'offsetToZero',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'pow',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'powSeries',\n  category: 'Transform',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'reduceSeries',\n  shortName: 'reduce',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\n    },\n    {\n      name: 'reduceNode',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    },\n    { name: 'reduceMatchers', type: 'string', multiple: true },\n  ],\n  defaultParams: ['asPercent', 2, 'used_bytes'],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeBetweenPercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeEmptySeries',\n  category: 'Filter Series',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'squareRoot',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'timeSlice',\n  category: 'Transform',\n  params: [\n    {\n      name: 'startSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n    },\n    {\n      name: 'endSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['-1h'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'weightedAverage',\n  category: 'Combine',\n  params: [\n    { name: 'other', type: 'value_or_series', optional: true },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: ['#A', 4],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'seriesByTag',\n  category: 'Special',\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'groupByTags',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    { name: 'tag', type: 'string', multiple: true },\n  ],\n  defaultParams: ['sum', 'tag'],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'aliasByTags',\n  category: 'Alias',\n  params: [{ name: 'tag', type: 'string', multiple: true }],\n  defaultParams: ['tag'],\n  version: '1.1',\n});\n\nfunction isVersionRelatedFunction(obj: { version?: string }, graphiteVersion: string) {\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\n}\n\nexport class FuncInstance {\n  def: FuncDef;\n  params: Array<string | number>;\n  text: any;\n  /**\n   * True if this function was just added and not edited yet. It's used to focus on first\n   * function param to edit it straight away after adding a function.\n   */\n  declare added: boolean;\n  /**\n   * Hidden functions are not displayed in UI but available in text editor\n   * This is used for seriesByTagUsed function which when used switches\n   * the editor to tag-only mode. Defined tags are provided to seriesByTagUsed\n   * as parameters.\n   */\n  hidden?: boolean;\n\n  constructor(funcDef: FuncDef, options?: { withDefaultParams: any }) {\n    this.def = funcDef;\n    this.params = [];\n\n    if (options && options.withDefaultParams && funcDef.defaultParams) {\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  render(metricExp: string, replaceVariables: InterpolateFunction): string {\n    const str = this.def.name + '(';\n\n    const parameters = map(this.params, (value, index) => {\n      let paramType;\n\n      if (index < this.def.params.length) {\n        paramType = this.def.params[index].type;\n      } else if (get(last(this.def.params), 'multiple')) {\n        paramType = get(last(this.def.params), 'type');\n      }\n\n      // param types that should never be quoted\n      if (includes(['value_or_series', 'boolean', 'int', 'float', 'node', 'int_or_infinity'], paramType)) {\n        return value;\n      }\n\n      const valueInterpolated = isString(value) ? replaceVariables(value) : value;\n\n      // param types that might be quoted\n      // To quote variables correctly we need to interpolate it to check if it contains a numeric or string value\n      if (includes(['int_or_interval', 'node_or_tag'], paramType) && isFinite(+valueInterpolated)) {\n        return toString(value);\n      }\n\n      return \"'\" + value + \"'\";\n    });\n\n    // don't send any blank parameters to graphite\n    while (parameters[parameters.length - 1] === '') {\n      parameters.pop();\n    }\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue: any, index: number) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\n      return true;\n    }\n\n    if (index + 1 >= this.def.params.length && get(last(this.def.params), 'multiple')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateParam(strValue: any, index: any) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      each(strValue.split(','), (partVal, idx) => {\n        this.updateParam(partVal.trim(), index + idx);\n      });\n      return;\n    }\n\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    let text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nfunction createFuncInstance(funcDef: any, options?: { withDefaultParams: any }, idx?: any): FuncInstance {\n  if (isString(funcDef)) {\n    funcDef = getFuncDef(funcDef, idx);\n  }\n  return new FuncInstance(funcDef, options);\n}\n\nfunction getFuncDef(name: string, idx?: any): FuncDef {\n  if (!(idx || index)[name]) {\n    return { name: name, params: [{ name: '', type: '', multiple: true }], defaultParams: [''], unknown: true };\n  }\n  return (idx || index)[name];\n}\n\nfunction getFuncDefs(graphiteVersion: string, idx?: any): FuncDefs {\n  const funcs: FuncDefs = {};\n  forEach(idx || index, (funcDef: FuncDef) => {\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\n      funcs[funcDef.name] = assign({}, funcDef, {\n        params: filter(funcDef.params, (param) => {\n          return isVersionRelatedFunction(param, graphiteVersion);\n        }),\n      });\n    }\n  });\n  return funcs;\n}\n\n// parse response from graphite /functions endpoint into internal format\nfunction parseFuncDefs(rawDefs: any): FuncDefs {\n  const funcDefs: FuncDefs = {};\n\n  forEach(rawDefs || {}, (funcDef, funcName) => {\n    // skip graphite graph functions\n    if (funcDef.group === 'Graph') {\n      return;\n    }\n\n    let description = funcDef.description;\n    if (description) {\n      // tidy up some pydoc syntax that rst2html can't handle\n      description = description\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\n        .replace(/.. seealso:: /g, 'See also: ')\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\n    }\n\n    const func: FuncDef = {\n      name: funcDef.name,\n      description,\n      category: funcDef.group,\n      params: [],\n      defaultParams: [],\n      fake: false,\n    };\n\n    // get rid of the first \"seriesList\" param\n    if (/^seriesLists?$/.test(get(funcDef, 'params[0].type', ''))) {\n      // handle functions that accept multiple seriesLists\n      // we leave the param in place but mark it optional, so users can add more series if they wish\n      if (funcDef.params[0].multiple) {\n        funcDef.params[0].required = false;\n        // otherwise chop off the first param, it'll be handled separately\n      } else {\n        funcDef.params.shift();\n      }\n      // tag function as fake\n    } else {\n      func.fake = true;\n    }\n\n    forEach(funcDef.params, (rawParam) => {\n      const param: any = {\n        name: rawParam.name,\n        type: 'string',\n        optional: !rawParam.required,\n        multiple: !!rawParam.multiple,\n        options: undefined,\n      };\n\n      if (rawParam.default !== undefined) {\n        if (rawParam.default === Infinity) {\n          func.defaultParams.push('inf');\n        } else {\n          func.defaultParams.push(toString(rawParam.default));\n        }\n      } else if (rawParam.suggestions) {\n        func.defaultParams.push(toString(rawParam.suggestions[0]));\n      } else {\n        func.defaultParams.push('');\n      }\n\n      if (rawParam.type === 'boolean') {\n        param.type = 'boolean';\n        param.options = ['true', 'false'];\n      } else if (rawParam.type === 'integer') {\n        param.type = 'int';\n      } else if (rawParam.type === 'float') {\n        param.type = 'float';\n      } else if (rawParam.type === 'node') {\n        param.type = 'node';\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'nodeOrTag') {\n        param.type = 'node_or_tag';\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'intOrInterval') {\n        param.type = 'int_or_interval';\n      } else if (rawParam.type === 'seriesList') {\n        param.type = 'value_or_series';\n      } else if (rawParam.type === 'intOrInf') {\n        param.type = 'int_or_infinity';\n      }\n\n      if (rawParam.options) {\n        param.options = map(rawParam.options, toString);\n      } else if (rawParam.suggestions) {\n        param.options = map(rawParam.suggestions, toString);\n      }\n\n      func.params.push(param);\n    });\n\n    funcDefs[funcName] = func;\n  });\n\n  return funcDefs;\n}\n\nexport default {\n  createFuncInstance: createFuncInstance,\n  getFuncDef: getFuncDef,\n  getFuncDefs: getFuncDefs,\n  parseFuncDefs: parseFuncDefs,\n};\n","import { DataQuery, DataSourceJsonData, TimeRange } from '@grafana/data';\nimport { GraphiteDatasource } from './datasource';\nimport { TemplateSrv } from '../../../features/templating/template_srv';\n\nexport interface GraphiteQuery extends DataQuery {\n  target?: string;\n}\n\nexport interface GraphiteOptions extends DataSourceJsonData {\n  graphiteVersion: string;\n  graphiteType: GraphiteType;\n  rollupIndicatorEnabled?: boolean;\n  importConfiguration: GraphiteQueryImportConfiguration;\n}\n\nexport enum GraphiteType {\n  Default = 'default',\n  Metrictank = 'metrictank',\n}\n\nexport interface MetricTankRequestMeta {\n  [key: string]: any;\n}\n\nexport interface MetricTankSeriesMeta {\n  'schema-name': string;\n  'schema-retentions': string; //\"1s:35d:20min:5:1542274085,1min:38d:2h:1:true,10min:120d:6h:1:true,2h:2y:6h:2\",\n  'archive-read': number;\n  'archive-interval': number;\n  'aggnum-norm': number;\n  'consolidator-normfetch': string; //\"MaximumConsolidator\",\n  'aggnum-rc': number;\n  'consolidator-rc': string; //\"MaximumConsolidator\",\n  count: number;\n}\n\nexport interface MetricTankMeta {\n  request: MetricTankRequestMeta;\n  info: MetricTankSeriesMeta[];\n}\n\nexport type GraphiteQueryImportConfiguration = {\n  loki: GraphiteToLokiQueryImportConfiguration;\n};\n\nexport type GraphiteToLokiQueryImportConfiguration = {\n  mappings: GraphiteLokiMapping[];\n};\n\nexport type GraphiteLokiMapping = {\n  matchers: GraphiteMetricLokiMatcher[];\n};\n\nexport type GraphiteMetricLokiMatcher = {\n  value: string;\n  labelName?: string;\n};\n\nexport type GraphiteSegment = {\n  value: string;\n  type?: 'tag' | 'metric' | 'series-ref' | 'template';\n  expandable?: boolean;\n  fake?: boolean;\n};\n\nexport type GraphiteTagOperator = '=' | '!=' | '=~' | '!=~';\n\nexport type GraphiteTag = {\n  key: string;\n  operator: GraphiteTagOperator;\n  value: string;\n};\n\nexport type GraphiteQueryEditorDependencies = {\n  target: any;\n  datasource: GraphiteDatasource;\n  range?: TimeRange;\n  templateSrv: TemplateSrv;\n  queries: DataQuery[];\n  // schedule onChange/onRunQuery after the reducer actions finishes\n  refresh: () => void;\n};\n","import { MetricTankSeriesMeta } from './types';\nimport { QueryResultMetaNotice } from '@grafana/data';\n\n// https://github.com/grafana/metrictank/blob/master/scripts/config/storage-schemas.conf#L15-L46\n\nexport interface RetentionInfo {\n  interval: string;\n  retention?: string;\n  chunkspan?: string;\n  numchunks?: number;\n  ready?: boolean | number; // whether, or as of what data timestamp, the archive is ready for querying.\n}\n\nfunction toInteger(val?: string): number | undefined {\n  if (val) {\n    return parseInt(val, 10);\n  }\n  return undefined;\n}\n\nfunction toBooleanOrTimestamp(val?: string): number | boolean | undefined {\n  if (val) {\n    if (val === 'true') {\n      return true;\n    }\n    if (val === 'false') {\n      return false;\n    }\n    return parseInt(val, 10);\n  }\n  return undefined;\n}\n\nexport function getRollupNotice(metaList: MetricTankSeriesMeta[]): QueryResultMetaNotice | null {\n  for (const meta of metaList) {\n    const archiveIndex = meta['archive-read'];\n\n    if (archiveIndex > 0) {\n      const schema = parseSchemaRetentions(meta['schema-retentions']);\n      const intervalString = schema[archiveIndex].interval;\n      const func = (meta['consolidator-normfetch'] ?? '').replace('Consolidator', '');\n\n      return {\n        text: `Data is rolled up, aggregated over ${intervalString} using ${func} function`,\n        severity: 'info',\n        inspect: 'meta',\n      };\n    }\n  }\n\n  return null;\n}\n\nexport function getRuntimeConsolidationNotice(metaList: MetricTankSeriesMeta[]): QueryResultMetaNotice | null {\n  for (const meta of metaList) {\n    const runtimeNr = meta['aggnum-rc'];\n\n    if (runtimeNr > 0) {\n      const func = (meta['consolidator-rc'] ?? '').replace('Consolidator', '');\n\n      return {\n        text: `Data is runtime consolidated, ${runtimeNr} datapoints combined using ${func} function`,\n        severity: 'info',\n        inspect: 'meta',\n      };\n    }\n  }\n\n  return null;\n}\n\nexport function parseSchemaRetentions(spec: string): RetentionInfo[] {\n  if (!spec) {\n    return [];\n  }\n  return spec.split(',').map((str) => {\n    const vals = str.split(':');\n    return {\n      interval: vals[0],\n      retention: vals[1],\n      chunkspan: vals[2],\n      numchunks: toInteger(vals[3]),\n      ready: toBooleanOrTimestamp(vals[4]),\n    };\n  });\n}\n","import { last } from 'lodash';\n\nexport const GRAPHITE_VERSIONS = ['0.9', '1.0', '1.1'];\n\nexport const DEFAULT_GRAPHITE_VERSION = last(GRAPHITE_VERSIONS)!;\n","import { bind } from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nconst unicodeLetterTable = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886,\n  887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369,\n  1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786,\n  1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069,\n  2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425,\n  2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525,\n  2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649,\n  2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749,\n  2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908,\n  2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975,\n  2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133,\n  3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294,\n  3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461,\n  3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716,\n  3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980,\n  4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256,\n  4293, 4304, 4346, 4348, 4348, 4352, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749,\n  4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937,\n  5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320,\n  6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963,\n  6981, 6987, 7043, 7072, 7086, 7087, 7104, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061,\n  8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182,\n  8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484,\n  8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312,\n  11358, 11360, 11492, 11499, 11502, 11520, 11557, 11568, 11621, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694,\n  11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321,\n  12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686,\n  12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40907, 40907, 40960, 42124, 42192, 42237, 42240,\n  42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894,\n  42896, 42897, 42912, 42921, 43002, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250,\n  43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586,\n  43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714,\n  43714, 43739, 43741, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032,\n  55203, 55203, 55216, 55238, 55243, 55291, 63744, 64045, 64048, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285,\n  64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829,\n  64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613,\n  65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66334, 66352, 66378, 66432, 66461, 66464,\n  66499, 66504, 66511, 66513, 66517, 66560, 66717, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644,\n  67647, 67669, 67840, 67861, 67872, 67897, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68147, 68192, 68220, 68352,\n  68405, 68416, 68437, 68448, 68466, 68608, 68680, 69635, 69687, 69763, 69807, 73728, 74606, 74752, 74850, 77824, 78894,\n  92160, 92728, 110592, 110593, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977,\n  119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086,\n  120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488,\n  120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688,\n  120712, 120714, 120744, 120746, 120770, 120772, 120779, 131072, 131072, 173782, 173782, 173824, 173824, 177972,\n  177972, 177984, 177984, 178205, 178205, 194560, 195101,\n];\n\nconst identifierStartTable: any[] = [];\n\nfor (let i = 0; i < 128; i++) {\n  identifierStartTable[i] =\n    (i >= 48 && i <= 57) || // 0-9\n    i === 36 || // $\n    i === 126 || // ~\n    i === 124 || // |\n    (i >= 65 && i <= 90) || // A-Z\n    i === 95 || // _\n    i === 45 || // -\n    i === 42 || // *\n    i === 58 || // :\n    i === 91 || // templateStart [\n    i === 93 || // templateEnd ]\n    i === 63 || // ?\n    i === 37 || // %\n    i === 35 || // #\n    i === 61 || // =\n    (i >= 97 && i <= 122); // a-z\n}\n\nconst identifierPartTable = identifierStartTable;\n\nexport class Lexer {\n  input: any;\n  char: number;\n  from: number;\n\n  constructor(expression: any) {\n    this.input = expression;\n    this.char = 1;\n    this.from = 1;\n  }\n\n  peek(i?: number) {\n    return this.input.charAt(i || 0);\n  }\n\n  skip(i?: number) {\n    i = i || 1;\n    this.char += i;\n    this.input = this.input.slice(i);\n  }\n\n  tokenize() {\n    const list = [];\n    let token = this.next();\n    while (token) {\n      list.push(token);\n      token = this.next();\n    }\n    return list;\n  }\n\n  next() {\n    this.from = this.char;\n\n    // Move to the next non-space character.\n    if (/\\s/.test(this.peek())) {\n      while (/\\s/.test(this.peek())) {\n        this.from += 1;\n        this.skip();\n      }\n\n      if (this.peek() === '') {\n        // EOL\n        return null;\n      }\n    }\n\n    let match = this.scanStringLiteral();\n    if (match) {\n      return match;\n    }\n\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\n\n    if (match) {\n      this.skip(match.value.length);\n      return match;\n    }\n\n    // No token could be matched, give up.\n    return null;\n  }\n\n  scanTemplateSequence() {\n    if (this.peek() === '[' && this.peek(1) === '[') {\n      return {\n        type: 'templateStart',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    if (this.peek() === ']' && this.peek(1) === ']') {\n      return {\n        type: 'templateEnd',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    return null;\n  }\n\n  /*\n   * Extract a JavaScript identifier out of the next sequence of\n   * characters or return 'null' if its not possible. In addition,\n   * to Identifier this method can also produce BooleanLiteral\n   * (true/false) and NullLiteral (null).\n   */\n  scanIdentifier() {\n    let id = '';\n    let index = 0;\n    let type, char;\n\n    // Detects any character in the Unicode categories \"Uppercase\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n    // \"Letter number (Nl)\".\n    //\n    // Both approach and unicodeLetterTable were borrowed from\n    // Google's Traceur.\n\n    function isUnicodeLetter(code: number) {\n      for (let i = 0; i < unicodeLetterTable.length; ) {\n        if (code < unicodeLetterTable[i++]) {\n          return false;\n        }\n\n        if (code <= unicodeLetterTable[i++]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isHexDigit(str: string) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    const readUnicodeEscapeSequence = bind(function (this: any) {\n      index += 1;\n\n      if (this.peek(index) !== 'u') {\n        return null;\n      }\n\n      const ch1 = this.peek(index + 1);\n      const ch2 = this.peek(index + 2);\n      const ch3 = this.peek(index + 3);\n      const ch4 = this.peek(index + 4);\n      let code;\n\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n        if (isUnicodeLetter(code)) {\n          index += 5;\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\n        }\n\n        return null;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierStart = bind(function (this: any) {\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (chr === '*') {\n        index += 1;\n        return chr;\n      }\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierStartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierPart = bind(function (this: any) {\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierPartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    char = getIdentifierStart();\n    if (char === null) {\n      return null;\n    }\n\n    id = char;\n    for (;;) {\n      char = getIdentifierPart();\n\n      if (char === null) {\n        break;\n      }\n\n      id += char;\n    }\n\n    switch (id) {\n      case 'true': {\n        type = 'bool';\n        break;\n      }\n      case 'false': {\n        type = 'bool';\n        break;\n      }\n      default:\n        type = 'identifier';\n    }\n\n    return {\n      type: type,\n      value: id,\n      pos: this.char,\n    };\n  }\n\n  /*\n   * Extract a numeric literal out of the next sequence of\n   * characters or return 'null' if its not possible. This method\n   * supports all numeric literals described in section 7.8.3\n   * of the EcmaScript 5 specification.\n   *\n   * This method's implementation was heavily influenced by the\n   * scanNumericLiteral function in the Esprima parser's source code.\n   */\n  scanNumericLiteral(): any {\n    let index = 0;\n    let value = '';\n    const length = this.input.length;\n    let char = this.peek(index);\n    let bad;\n\n    function isDecimalDigit(str: string) {\n      return /^[0-9]$/.test(str);\n    }\n\n    function isOctalDigit(str: string) {\n      return /^[0-7]$/.test(str);\n    }\n\n    function isHexDigit(str: string) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    function isIdentifierStart(ch: string) {\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    // handle negative num literals\n    if (char === '-') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n    }\n\n    // Numbers must start either with a decimal digit or a point.\n    if (char !== '.' && !isDecimalDigit(char)) {\n      return null;\n    }\n\n    if (char !== '.') {\n      value += this.peek(index);\n      index += 1;\n      char = this.peek(index);\n\n      if (value === '0') {\n        // Base-16 numbers.\n        if (char === 'x' || char === 'X') {\n          index += 1;\n          value += char;\n\n          while (index < length) {\n            char = this.peek(index);\n            if (!isHexDigit(char)) {\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (value.length <= 2) {\n            // 0x\n            return {\n              type: 'number',\n              value: value,\n              isMalformed: true,\n              pos: this.char,\n            };\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 16,\n            isMalformed: false,\n            pos: this.char,\n          };\n        }\n\n        // Base-8 numbers.\n        if (isOctalDigit(char)) {\n          index += 1;\n          value += char;\n          bad = false;\n\n          while (index < length) {\n            char = this.peek(index);\n\n            // Numbers like '019' (note the 9) are not valid octals\n            // but we still parse them and mark as malformed.\n\n            if (isDecimalDigit(char)) {\n              bad = true;\n            }\n            if (!isOctalDigit(char)) {\n              // if the char is a non punctuator then its not a valid number\n              if (!this.isPunctuator(char)) {\n                return null;\n              }\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 8,\n            isMalformed: bad,\n          };\n        }\n\n        // Decimal numbers that start with '0' such as '09' are illegal\n        // but we still parse them and return as malformed.\n\n        if (isDecimalDigit(char)) {\n          index += 1;\n          value += char;\n        }\n      }\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Decimal digits.\n\n    if (char === '.') {\n      value += char;\n      index += 1;\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Exponent part.\n\n    if (char === 'e' || char === 'E') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n\n      if (char === '+' || char === '-') {\n        value += this.peek(index);\n        index += 1;\n      }\n\n      char = this.peek(index);\n      if (isDecimalDigit(char)) {\n        value += char;\n        index += 1;\n\n        while (index < length) {\n          char = this.peek(index);\n          if (!isDecimalDigit(char)) {\n            break;\n          }\n          value += char;\n          index += 1;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (index < length) {\n      char = this.peek(index);\n      if (!this.isPunctuator(char)) {\n        return null;\n      }\n    }\n\n    return {\n      type: 'number',\n      value: value,\n      base: 10,\n      pos: this.char,\n      isMalformed: !isFinite(+value),\n    };\n  }\n\n  isPunctuator(ch1: string) {\n    switch (ch1) {\n      case '.':\n      case '(':\n      case ')':\n      case ',':\n      case '{':\n      case '}':\n        return true;\n    }\n\n    return false;\n  }\n\n  scanPunctuator() {\n    const ch1 = this.peek();\n\n    if (this.isPunctuator(ch1)) {\n      return {\n        type: ch1,\n        value: ch1,\n        pos: this.char,\n      };\n    }\n\n    return null;\n  }\n\n  /*\n   * Extract a string out of the next sequence of characters and/or\n   * lines or return 'null' if its not possible. Since strings can\n   * span across multiple lines this method has to move the char\n   * pointer.\n   *\n   * This method recognizes pseudo-multiline JavaScript strings:\n   *\n   *   var str = \"hello\\\n   *   world\";\n   */\n  scanStringLiteral() {\n    const quote = this.peek();\n\n    // String must start with a quote.\n    if (quote !== '\"' && quote !== \"'\") {\n      return null;\n    }\n\n    let value = '';\n\n    this.skip();\n\n    while (this.peek() !== quote) {\n      if (this.peek() === '') {\n        // End Of Line\n        return {\n          type: 'string',\n          value: value,\n          isUnclosed: true,\n          quote: quote,\n          pos: this.char,\n        };\n      }\n\n      const char = this.peek();\n      const jump = 1; // A length of a jump, after we're done\n      // parsing this character.\n\n      value += char;\n      this.skip(jump);\n    }\n\n    this.skip();\n    return {\n      type: 'string',\n      value: value,\n      isUnclosed: false,\n      quote: quote,\n      pos: this.char,\n    };\n  }\n}\n","import { Lexer } from './lexer';\n\nexport class Parser {\n  expression: any;\n  lexer: Lexer;\n  tokens: any;\n  index: number;\n\n  constructor(expression: any) {\n    this.expression = expression;\n    this.lexer = new Lexer(expression);\n    this.tokens = this.lexer.tokenize();\n    this.index = 0;\n  }\n\n  getAst() {\n    return this.start();\n  }\n\n  start() {\n    try {\n      return this.functionCall() || this.metricExpression();\n    } catch (e) {\n      return {\n        type: 'error',\n        message: e.message,\n        pos: e.pos,\n      };\n    }\n  }\n\n  curlyBraceSegment() {\n    if (this.match('identifier', '{') || this.match('{')) {\n      let curlySegment = '';\n\n      while (!this.match('') && !this.match('}')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      if (!this.match('}')) {\n        this.errorMark(\"Expected closing '}'\");\n      }\n\n      curlySegment += this.consumeToken().value;\n\n      // if curly segment is directly followed by identifier\n      // include it in the segment\n      if (this.match('identifier')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      return {\n        type: 'segment',\n        value: curlySegment,\n      };\n    } else {\n      return null;\n    }\n  }\n\n  metricSegment() {\n    const curly = this.curlyBraceSegment();\n    if (curly) {\n      return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n      // hack to handle float numbers in metric segments\n      const parts = this.consumeToken().value.split('.');\n      if (parts.length === 2) {\n        this.tokens.splice(this.index, 0, { type: '.' });\n        this.tokens.splice(this.index + 1, 0, {\n          type: 'number',\n          value: parts[1],\n        });\n      }\n\n      return {\n        type: 'segment',\n        value: parts[0],\n      };\n    }\n\n    if (!this.match('templateStart')) {\n      this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n      this.errorMark('Expected identifier after templateStart');\n    }\n\n    const node = {\n      type: 'template',\n      value: this.consumeToken().value,\n    };\n\n    if (!this.match('templateEnd')) {\n      this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n  }\n\n  metricExpression() {\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'metric',\n      segments: [],\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n      this.consumeToken();\n\n      const segment = this.metricSegment();\n      if (!segment) {\n        this.errorMark('Expected metric identifier');\n      }\n\n      node.segments.push(segment);\n    }\n\n    return node;\n  }\n\n  functionCall() {\n    if (!this.match('identifier', '(')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'function',\n      name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n      this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n  }\n\n  boolExpression() {\n    if (!this.match('bool')) {\n      return null;\n    }\n\n    return {\n      type: 'bool',\n      value: this.consumeToken().value === 'true',\n    };\n  }\n\n  functionParameters(): any {\n    if (this.match(')') || this.match('')) {\n      return [];\n    }\n\n    const param =\n      this.functionCall() ||\n      this.numericLiteral() ||\n      this.seriesRefExpression() ||\n      this.boolExpression() ||\n      this.metricExpression() ||\n      this.stringLiteral();\n\n    if (!this.match(',')) {\n      return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n  }\n\n  seriesRefExpression() {\n    if (!this.match('identifier')) {\n      return null;\n    }\n\n    const value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n\n    return {\n      type: 'series-ref',\n      value: token.value,\n    };\n  }\n\n  numericLiteral() {\n    if (!this.match('number')) {\n      return null;\n    }\n\n    return {\n      type: 'number',\n      value: parseFloat(this.consumeToken().value),\n    };\n  }\n\n  stringLiteral() {\n    if (!this.match('string')) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n    if (token.isUnclosed) {\n      throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n      type: 'string',\n      value: token.value,\n    };\n  }\n\n  errorMark(text: string) {\n    const currentToken = this.tokens[this.index];\n    const type = currentToken ? currentToken.type : 'end of string';\n    throw {\n      message: text + ' instead found ' + type,\n      pos: currentToken ? currentToken.pos : this.lexer.char,\n    };\n  }\n\n  // returns token value and incre\n  consumeToken() {\n    this.index++;\n    return this.tokens[this.index - 1];\n  }\n\n  matchToken(type: any, index: number) {\n    const token = this.tokens[this.index + index];\n    return (token === undefined && type === '') || (token && token.type === type);\n  }\n\n  match(token1: any, token2?: any) {\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\n  }\n}\n","import { compact, each, findIndex, flatten, get, join, keyBy, last, map, reduce, without } from 'lodash';\nimport { arrayMove } from 'app/core/utils/arrayMove';\nimport { Parser } from './parser';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\nimport { FuncInstance } from './gfunc';\nimport { GraphiteSegment } from './types';\nimport { GraphiteDatasource } from './datasource';\n\nexport type GraphiteTagOperator = '=' | '=~' | '!=' | '!=~';\n\nexport type GraphiteTag = {\n  key: string;\n  operator: GraphiteTagOperator;\n  value: string;\n};\n\nexport type GraphiteTarget = {\n  refId: string | number;\n  target: string;\n  /**\n   * Contains full query after interpolating sub-queries (e.g. \"function(#A)\" referencing query with refId=A)\n   */\n  targetFull: string;\n  textEditor: boolean;\n  paused: boolean;\n};\n\nexport default class GraphiteQuery {\n  datasource: GraphiteDatasource;\n  target: GraphiteTarget;\n  functions: FuncInstance[] = [];\n  segments: GraphiteSegment[] = [];\n  tags: GraphiteTag[] = [];\n  error: any;\n  seriesByTagUsed = false;\n  checkOtherSegmentsIndex = 0;\n  removeTagValue: string;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(datasource: any, target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.datasource = datasource;\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n    this.parseTarget();\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.functions = [];\n    this.segments = [];\n    this.tags = [];\n    this.seriesByTagUsed = false;\n    this.error = null;\n\n    if (this.target.textEditor) {\n      return;\n    }\n\n    const parser = new Parser(this.target.target);\n    const astNode = parser.getAst();\n    if (astNode === null) {\n      this.checkOtherSegmentsIndex = 0;\n      return;\n    }\n\n    if (astNode.type === 'error') {\n      this.error = astNode.message + ' at position: ' + astNode.pos;\n      this.target.textEditor = true;\n      return;\n    }\n\n    try {\n      this.parseTargetRecursive(astNode, null);\n    } catch (err) {\n      console.error('error parsing target:', err.message);\n      this.error = err.message;\n      this.target.textEditor = true;\n    }\n\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\n  }\n\n  getSegmentPathUpTo(index: number) {\n    const arr = this.segments.slice(0, index);\n\n    return reduce(\n      arr,\n      (result, segment) => {\n        return result ? result + '.' + segment.value : segment.value;\n      },\n      ''\n    );\n  }\n\n  parseTargetRecursive(astNode: any, func: any): any {\n    if (astNode === null) {\n      return null;\n    }\n\n    switch (astNode.type) {\n      case 'function':\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\n          withDefaultParams: false,\n        });\n        each(astNode.params, (param) => {\n          this.parseTargetRecursive(param, innerFunc);\n        });\n\n        innerFunc.updateText();\n        this.functions.push(innerFunc);\n\n        // extract tags from seriesByTag function and hide function\n        if (innerFunc.def.name === 'seriesByTag' && !this.seriesByTagUsed) {\n          this.seriesByTagUsed = true;\n          innerFunc.hidden = true;\n          this.tags = this.splitSeriesByTagParams(innerFunc);\n        }\n\n        break;\n      case 'series-ref':\n        if (this.segments.length > 0 || this.getSeriesByTagFuncIndex() >= 0) {\n          this.addFunctionParameter(func, astNode.value);\n        } else {\n          this.segments.push(astNode);\n        }\n        break;\n      case 'bool':\n      case 'string':\n      case 'number':\n        this.addFunctionParameter(func, astNode.value);\n        break;\n      case 'metric':\n        if (this.segments.length || this.tags.length) {\n          this.addFunctionParameter(func, join(map(astNode.segments, 'value'), '.'));\n        } else {\n          this.segments = astNode.segments;\n        }\n        break;\n    }\n  }\n\n  updateSegmentValue(segment: any, index: number) {\n    this.segments[index].value = segment.value;\n  }\n\n  addSelectMetricSegment() {\n    this.segments.push({ value: 'select metric' });\n  }\n\n  addFunction(newFunc: any) {\n    this.functions.push(newFunc);\n  }\n\n  addFunctionParameter(func: any, value: string) {\n    if (func.params.length >= func.def.params.length && !get(last(func.def.params), 'multiple', false)) {\n      throw { message: 'too many parameters for function ' + func.def.name };\n    }\n    func.params.push(value);\n  }\n\n  removeFunction(func: any) {\n    this.functions = without(this.functions, func);\n  }\n\n  moveFunction(func: any, offset: number) {\n    const index = this.functions.indexOf(func);\n    arrayMove(this.functions, index, index + offset);\n  }\n\n  updateModelTarget(targets: any) {\n    const wrapFunction = (target: string, func: any) => {\n      return func.render(target, (value: string) => {\n        return this.templateSrv.replace(value, this.scopedVars);\n      });\n    };\n\n    if (!this.target.textEditor) {\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.?select metric$/, '');\n      this.target.target = reduce(this.functions, wrapFunction, metricPath);\n    }\n\n    this.updateRenderedTarget(this.target, targets);\n\n    // loop through other queries and update targetFull as needed\n    for (const target of targets || []) {\n      if (target.refId !== this.target.refId) {\n        this.updateRenderedTarget(target, targets);\n      }\n    }\n\n    // clean-up added param\n    this.functions.forEach((func) => (func.added = false));\n  }\n\n  updateRenderedTarget(target: { refId: string | number; target: any; targetFull: any }, targets: any) {\n    // render nested query\n    const targetsByRefId = keyBy(targets, 'refId');\n\n    // no references to self\n    delete targetsByRefId[target.refId];\n\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\n    let targetWithNestedQueries = target.target;\n\n    // Use ref count to track circular references\n    function countTargetRefs(targetsByRefId: any, refId: string) {\n      let refCount = 0;\n      each(targetsByRefId, (t, id) => {\n        if (id !== refId) {\n          const match = nestedSeriesRefRegex.exec(t.target);\n          const count = match && match.length ? match.length - 1 : 0;\n          refCount += count;\n        }\n      });\n      targetsByRefId[refId].refCount = refCount;\n    }\n    each(targetsByRefId, (t, id) => {\n      countTargetRefs(targetsByRefId, id);\n    });\n\n    // Keep interpolating until there are no query references\n    // The reason for the loop is that the referenced query might contain another reference to another query\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match: string, g1: string) => {\n        const t = targetsByRefId[g1];\n        if (!t) {\n          return match;\n        }\n\n        // no circular references\n        if (t.refCount === 0) {\n          delete targetsByRefId[g1];\n        }\n        t.refCount--;\n\n        return t.target;\n      });\n\n      if (updated === targetWithNestedQueries) {\n        break;\n      }\n\n      targetWithNestedQueries = updated;\n    }\n\n    delete target.targetFull;\n    if (target.target !== targetWithNestedQueries) {\n      target.targetFull = targetWithNestedQueries;\n    }\n  }\n\n  splitSeriesByTagParams(func: { params: any }) {\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\n    return flatten(\n      map(func.params, (param: string) => {\n        const matches = tagPattern.exec(param);\n        if (matches) {\n          const tag = matches.slice(1);\n          if (tag.length === 3) {\n            return {\n              key: tag[0],\n              operator: tag[1] as GraphiteTagOperator,\n              value: tag[2],\n            };\n          }\n        }\n        return [];\n      })\n    );\n  }\n\n  getSeriesByTagFuncIndex() {\n    return findIndex(this.functions, (func) => func.def.name === 'seriesByTag');\n  }\n\n  getSeriesByTagFunc() {\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\n    if (seriesByTagFuncIndex >= 0) {\n      return this.functions[seriesByTagFuncIndex];\n    } else {\n      return undefined;\n    }\n  }\n\n  addTag(tag: { key: any; operator: GraphiteTagOperator; value: string }) {\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc()!.params.push(newTagParam);\n    this.tags.push(tag);\n  }\n\n  removeTag(index: number) {\n    this.getSeriesByTagFunc()!.params.splice(index, 1);\n    this.tags.splice(index, 1);\n  }\n\n  updateTag(tag: { key: string; operator: GraphiteTagOperator; value: string }, tagIndex: number) {\n    this.error = null;\n\n    if (tag.key === this.removeTagValue) {\n      this.removeTag(tagIndex);\n      if (this.tags.length === 0) {\n        this.removeFunction(this.getSeriesByTagFunc());\n        this.checkOtherSegmentsIndex = 0;\n        this.seriesByTagUsed = false;\n      }\n      return;\n    }\n\n    this.getSeriesByTagFunc()!.params[tagIndex] = renderTagString(tag);\n    this.tags[tagIndex] = tag;\n  }\n\n  renderTagExpressions(excludeIndex = -1) {\n    return compact(\n      map(this.tags, (tagExpr, index) => {\n        // Don't render tag that we want to lookup\n        if (index !== excludeIndex) {\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\n        } else {\n          return undefined;\n        }\n      })\n    );\n  }\n}\n\nfunction renderTagString(tag: { key: any; operator?: any; value?: any }) {\n  return tag.key + tag.operator + tag.value;\n}\n","import { each, indexOf, isArray, isString, map as _map } from 'lodash';\nimport { lastValueFrom, Observable, of, OperatorFunction, pipe, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { getBackendSrv } from '@grafana/runtime';\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceWithQueryExportSupport,\n  dateMath,\n  AbstractQuery,\n  AbstractLabelOperator,\n  AbstractLabelMatcher,\n  MetricFindValue,\n  QueryResultMetaStat,\n  ScopedVars,\n  TimeRange,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\nimport gfunc, { FuncDefs, FuncInstance } from './gfunc';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n// Types\nimport {\n  GraphiteLokiMapping,\n  GraphiteMetricLokiMatcher,\n  GraphiteOptions,\n  GraphiteQuery,\n  GraphiteQueryImportConfiguration,\n  GraphiteType,\n  MetricTankRequestMeta,\n} from './types';\nimport { getRollupNotice, getRuntimeConsolidationNotice } from 'app/plugins/datasource/graphite/meta';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\nimport { DEFAULT_GRAPHITE_VERSION } from './versions';\nimport { reduceError } from './utils';\nimport { default as GraphiteQueryModel } from './graphite_query';\n\nconst GRAPHITE_TAG_COMPARATORS = {\n  '=': AbstractLabelOperator.Equal,\n  '!=': AbstractLabelOperator.NotEqual,\n  '=~': AbstractLabelOperator.EqualRegEx,\n  '!=~': AbstractLabelOperator.NotEqualRegEx,\n};\n\n/**\n * Converts Graphite glob-like pattern to a regular expression\n */\nfunction convertGlobToRegEx(text: string): string {\n  if (text.includes('*') || text.includes('{')) {\n    return '^' + text.replace(/\\*/g, '.*').replace(/\\{/g, '(').replace(/}/g, ')').replace(/,/g, '|');\n  } else {\n    return text;\n  }\n}\n\nexport class GraphiteDatasource\n  extends DataSourceApi<GraphiteQuery, GraphiteOptions, GraphiteQueryImportConfiguration>\n  implements DataSourceWithQueryExportSupport<GraphiteQuery>\n{\n  basicAuth: string;\n  url: string;\n  name: string;\n  graphiteVersion: any;\n  supportsTags: boolean;\n  isMetricTank: boolean;\n  rollupIndicatorEnabled: boolean;\n  cacheTimeout: any;\n  withCredentials: boolean;\n  funcDefs: FuncDefs | null = null;\n  funcDefsPromise: Promise<any> | null = null;\n  _seriesRefLetters: string;\n  private readonly metricMappings: GraphiteLokiMapping[];\n\n  constructor(instanceSettings: any, private readonly templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    // graphiteVersion is set when a datasource is created but it hadn't been set in the past so we're\n    // still falling back to the default behavior here for backwards compatibility (see also #17429)\n    this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || DEFAULT_GRAPHITE_VERSION;\n    this.metricMappings = instanceSettings.jsonData.importConfiguration?.loki?.mappings || [];\n    this.isMetricTank = instanceSettings.jsonData.graphiteType === GraphiteType.Metrictank;\n    this.supportsTags = supportsTags(this.graphiteVersion);\n    this.cacheTimeout = instanceSettings.cacheTimeout;\n    this.rollupIndicatorEnabled = instanceSettings.jsonData.rollupIndicatorEnabled;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.funcDefs = null;\n    this.funcDefsPromise = null;\n    this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  }\n\n  getQueryOptionsInfo() {\n    return {\n      maxDataPoints: true,\n      cacheTimeout: true,\n      links: [\n        {\n          text: 'Help',\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\n        },\n      ],\n    };\n  }\n\n  getImportQueryConfiguration(): GraphiteQueryImportConfiguration {\n    return {\n      loki: {\n        mappings: this.metricMappings,\n      },\n    };\n  }\n\n  async exportToAbstractQueries(queries: GraphiteQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.exportToAbstractQuery(query));\n  }\n\n  exportToAbstractQuery(query: GraphiteQuery): AbstractQuery {\n    const graphiteQuery: GraphiteQueryModel = new GraphiteQueryModel(\n      this,\n      {\n        ...query,\n        target: query.target || '',\n        textEditor: false,\n      },\n      getTemplateSrv()\n    );\n    graphiteQuery.parseTarget();\n\n    let labels: AbstractLabelMatcher[] = [];\n    const config = this.getImportQueryConfiguration().loki;\n\n    if (graphiteQuery.seriesByTagUsed) {\n      graphiteQuery.tags.forEach((tag) => {\n        labels.push({\n          name: tag.key,\n          operator: GRAPHITE_TAG_COMPARATORS[tag.operator],\n          value: tag.value,\n        });\n      });\n    } else {\n      const targetNodes = graphiteQuery.segments.map((segment) => segment.value);\n      let mappings = config.mappings.filter((mapping) => mapping.matchers.length <= targetNodes.length);\n\n      for (let mapping of mappings) {\n        const matchers = mapping.matchers.concat();\n\n        matchers.every((matcher: GraphiteMetricLokiMatcher, index: number) => {\n          if (matcher.labelName) {\n            let value = (targetNodes[index] as string)!;\n\n            if (value === '*') {\n              return true;\n            }\n\n            const converted = convertGlobToRegEx(value);\n            labels.push({\n              name: matcher.labelName,\n              operator: converted !== value ? AbstractLabelOperator.EqualRegEx : AbstractLabelOperator.Equal,\n              value: converted,\n            });\n            return true;\n          }\n          return targetNodes[index] === matcher.value || matcher.value === '*';\n        });\n      }\n    }\n\n    return {\n      refId: query.refId,\n      labelMatchers: labels,\n    };\n  }\n\n  query(options: DataQueryRequest<GraphiteQuery>): Observable<DataQueryResponse> {\n    const graphOptions = {\n      from: this.translateTime(options.range.raw.from, false, options.timezone),\n      until: this.translateTime(options.range.raw.to, true, options.timezone),\n      targets: options.targets,\n      format: (options as any).format,\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\n      maxDataPoints: options.maxDataPoints,\n    };\n\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\n    if (params.length === 0) {\n      return of({ data: [] });\n    }\n\n    if (this.isMetricTank) {\n      params.push('meta=true');\n    }\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/render',\n      data: params.join('&'),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    };\n\n    this.addTracingHeaders(httpOptions, options);\n\n    if (options.panelId) {\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\n    }\n\n    return this.doGraphiteRequest(httpOptions).pipe(map(this.convertResponseToDataFrames));\n  }\n\n  addTracingHeaders(httpOptions: { headers: any }, options: { dashboardId?: number; panelId?: number }) {\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      if (options.dashboardId) {\n        httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      }\n      if (options.panelId) {\n        httpOptions.headers['X-Panel-Id'] = options.panelId;\n      }\n    }\n  }\n\n  convertResponseToDataFrames = (result: any): DataQueryResponse => {\n    const data: DataFrame[] = [];\n    if (!result || !result.data) {\n      return { data };\n    }\n\n    // Series are either at the root or under a node called 'series'\n    const series = result.data.series || result.data;\n\n    if (!isArray(series)) {\n      throw { message: 'Missing series in result', data: result };\n    }\n\n    for (let i = 0; i < series.length; i++) {\n      const s = series[i];\n\n      // Disables Grafana own series naming\n      s.title = s.target;\n\n      for (let y = 0; y < s.datapoints.length; y++) {\n        s.datapoints[y][1] *= 1000;\n      }\n\n      const frame = toDataFrame(s);\n\n      // Metrictank metadata\n      if (s.meta) {\n        frame.meta = {\n          custom: {\n            requestMetaList: result.data.meta, // info for the whole request\n            seriesMetaList: s.meta, // Array of metadata\n          },\n        };\n\n        if (this.rollupIndicatorEnabled) {\n          const rollupNotice = getRollupNotice(s.meta);\n          const runtimeNotice = getRuntimeConsolidationNotice(s.meta);\n\n          if (rollupNotice) {\n            frame.meta.notices = [rollupNotice];\n          } else if (runtimeNotice) {\n            frame.meta.notices = [runtimeNotice];\n          }\n        }\n\n        // only add the request stats to the first frame\n        if (i === 0 && result.data.meta.stats) {\n          frame.meta.stats = this.getRequestStats(result.data.meta);\n        }\n      }\n\n      data.push(frame);\n    }\n\n    return { data };\n  };\n\n  getRequestStats(meta: MetricTankRequestMeta): QueryResultMetaStat[] {\n    const stats: QueryResultMetaStat[] = [];\n\n    for (const key in meta.stats) {\n      let unit: string | undefined = undefined;\n\n      if (key.endsWith('.ms')) {\n        unit = 'ms';\n      }\n\n      stats.push({ displayName: key, value: meta.stats[key], unit });\n    }\n\n    return stats;\n  }\n\n  parseTags(tagString: string) {\n    let tags: string[] = [];\n    tags = tagString.split(',');\n    if (tags.length === 1) {\n      tags = tagString.split(' ');\n      if (tags[0] === '') {\n        tags = [];\n      }\n    }\n    return tags;\n  }\n\n  interpolateVariablesInQueries(queries: GraphiteQuery[], scopedVars: ScopedVars): GraphiteQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          target: this.templateSrv.replace(query.target ?? '', scopedVars),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  annotationQuery(options: any) {\n    // Graphite metric as annotation\n    if (options.annotation.target) {\n      const target = this.templateSrv.replace(options.annotation.target, {}, 'glob');\n      const graphiteQuery = {\n        range: options.range,\n        targets: [{ target: target }],\n        format: 'json',\n        maxDataPoints: 100,\n      } as unknown as DataQueryRequest<GraphiteQuery>;\n\n      return lastValueFrom(\n        this.query(graphiteQuery).pipe(\n          map((result: any) => {\n            const list = [];\n\n            for (let i = 0; i < result.data.length; i++) {\n              const target = result.data[i];\n\n              for (let y = 0; y < target.length; y++) {\n                const time = target.fields[0].values.get(y);\n                const value = target.fields[1].values.get(y);\n\n                if (!value) {\n                  continue;\n                }\n\n                list.push({\n                  annotation: options.annotation,\n                  time,\n                  title: target.name,\n                });\n              }\n            }\n\n            return list;\n          })\n        )\n      );\n    } else {\n      // Graphite event as annotation\n      const tags = this.templateSrv.replace(options.annotation.tags);\n      return this.events({ range: options.range, tags: tags }).then((results: any) => {\n        const list = [];\n        if (!isArray(results.data)) {\n          console.error(`Unable to get annotations from ${results.url}.`);\n          return [];\n        }\n        for (let i = 0; i < results.data.length; i++) {\n          const e = results.data[i];\n\n          let tags = e.tags;\n          if (isString(e.tags)) {\n            tags = this.parseTags(e.tags);\n          }\n\n          list.push({\n            annotation: options.annotation,\n            time: e.when * 1000,\n            title: e.what,\n            tags: tags,\n            text: e.data,\n          });\n        }\n\n        return list;\n      });\n    }\n  }\n\n  events(options: { range: TimeRange; tags: any; timezone?: any }) {\n    try {\n      let tags = '';\n      if (options.tags) {\n        tags = '&tags=' + options.tags;\n      }\n      return lastValueFrom(\n        this.doGraphiteRequest({\n          method: 'GET',\n          url:\n            '/events/get_data?from=' +\n            this.translateTime(options.range.raw.from, false, options.timezone) +\n            '&until=' +\n            this.translateTime(options.range.raw.to, true, options.timezone) +\n            tags,\n        })\n      );\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  targetContainsTemplate(target: GraphiteQuery) {\n    return this.templateSrv.variableExists(target.target ?? '');\n  }\n\n  translateTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\n        date = date.substring(3);\n        date = date.replace('m', 'min');\n        date = date.replace('M', 'mon');\n        return date;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    // graphite' s from filter is exclusive\n    // here we step back one minute in order\n    // to guarantee that we get all the data that\n    // exists for the specified range\n    if (roundUp) {\n      if (date.get('s')) {\n        date.add(1, 's');\n      }\n    } else if (roundUp === false) {\n      if (date.get('s')) {\n        date.subtract(1, 's');\n      }\n    }\n\n    return date.unix();\n  }\n\n  metricFindQuery(query: string, optionalOptions?: any): Promise<MetricFindValue[]> {\n    const options: any = optionalOptions || {};\n\n    // First attempt to check for tag-related functions (using empty wildcard for interpolation)\n    let interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '', options: optionalOptions })\n    );\n\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\n    let allParams = interpolatedQuery.match(/^tag_values\\((.*)\\)$/);\n    let expressions = allParams ? allParams[1].split(',').filter((p) => !!p) : undefined;\n    if (expressions) {\n      options.limit = 10000;\n      return this.getTagValuesAutoComplete(expressions.slice(1), expressions[0], undefined, options);\n    }\n\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\n    allParams = interpolatedQuery.match(/^tags\\((.*)\\)$/);\n    expressions = allParams ? allParams[1].split(',').filter((p) => !!p) : undefined;\n    if (expressions) {\n      options.limit = 10000;\n      return this.getTagsAutoComplete(expressions, undefined, options);\n    }\n\n    // If no tag-related query was found, perform metric-based search (using * as the wildcard for interpolation)\n    let useExpand = query.match(/^expand\\((.*)\\)$/);\n    query = useExpand ? useExpand[1] : query;\n\n    interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: optionalOptions })\n    );\n\n    let range;\n    if (options.range) {\n      range = {\n        from: this.translateTime(options.range.from, false, options.timezone),\n        until: this.translateTime(options.range.to, true, options.timezone),\n      };\n    }\n\n    if (useExpand) {\n      return this.requestMetricExpand(interpolatedQuery, options.requestId, range);\n    } else {\n      return this.requestMetricFind(interpolatedQuery, options.requestId, range);\n    }\n  }\n\n  /**\n   * Search for metrics matching giving pattern using /metrics/find endpoint. It will\n   * return all possible values at the last level of the query, for example:\n   *\n   * metrics: prod.servers.001.cpu, prod.servers.002.cpu\n   * query: *.servers.*\n   * result: 001, 002\n   *\n   * For more complex searches use requestMetricExpand\n   */\n  private requestMetricFind(\n    query: string,\n    requestId: string,\n    range?: { from: any; until: any }\n  ): Promise<MetricFindValue[]> {\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/metrics/find',\n      params: {},\n      data: `query=${query}`,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // for cancellations\n      requestId: requestId,\n    };\n\n    if (range) {\n      httpOptions.params.from = range.from;\n      httpOptions.params.until = range.until;\n    }\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          return _map(results.data, (metric) => {\n            return {\n              text: metric.text,\n              expandable: metric.expandable ? true : false,\n            };\n          });\n        })\n      )\n    );\n  }\n\n  /**\n   * Search for metrics matching giving pattern using /metrics/expand endpoint.\n   * The result will contain all metrics (with full name) matching provided query.\n   * It's a more flexible version of /metrics/find endpoint (@see requestMetricFind)\n   */\n  private requestMetricExpand(\n    query: string,\n    requestId: string,\n    range?: { from: any; until: any }\n  ): Promise<MetricFindValue[]> {\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/metrics/expand',\n      params: { query },\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // for cancellations\n      requestId,\n    };\n\n    if (range) {\n      httpOptions.params.from = range.from;\n      httpOptions.params.until = range.until;\n    }\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          return _map(results.data.results, (metric) => {\n            return {\n              text: metric,\n              expandable: false,\n            };\n          });\n        })\n      )\n    );\n  }\n\n  getTags(optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags',\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          return _map(results.data, (tag) => {\n            return {\n              text: tag.tag,\n              id: tag.id,\n            };\n          });\n        })\n      )\n    );\n  }\n\n  getTagValues(options: any = {}) {\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/' + this.templateSrv.replace(options.key),\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          if (results.data && results.data.values) {\n            return _map(results.data.values, (value) => {\n              return {\n                text: value.value,\n                id: value.id,\n              };\n            });\n          } else {\n            return [];\n          }\n        })\n      )\n    );\n  }\n\n  getTagsAutoComplete(expressions: any[], tagPrefix: any, optionalOptions?: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/tags',\n      params: {\n        expr: _map(expressions, (expression) => this.templateSrv.replace((expression || '').trim())),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (tagPrefix) {\n      httpOptions.params.tagPrefix = tagPrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n    return lastValueFrom(this.doGraphiteRequest(httpOptions).pipe(mapToTags()));\n  }\n\n  getTagValuesAutoComplete(expressions: any[], tag: any, valuePrefix: any, optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/values',\n      params: {\n        expr: _map(expressions, (expression) => this.templateSrv.replace((expression || '').trim())),\n        tag: this.templateSrv.replace((tag || '').trim()),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (valuePrefix) {\n      httpOptions.params.valuePrefix = valuePrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n    return lastValueFrom(this.doGraphiteRequest(httpOptions).pipe(mapToTags()));\n  }\n\n  getVersion(optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/version',\n      requestId: options.requestId,\n    };\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          if (results.data) {\n            const semver = new SemVersion(results.data);\n            return semver.isValid() ? results.data : '';\n          }\n          return '';\n        }),\n        catchError(() => {\n          return of('');\n        })\n      )\n    );\n  }\n\n  createFuncInstance(funcDef: any, options?: any): FuncInstance {\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\n  }\n\n  getFuncDef(name: string) {\n    return gfunc.getFuncDef(name, this.funcDefs);\n  }\n\n  waitForFuncDefsLoaded() {\n    return this.getFuncDefs();\n  }\n\n  getFuncDefs() {\n    if (this.funcDefsPromise !== null) {\n      return this.funcDefsPromise;\n    }\n\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\n      return this.funcDefsPromise;\n    }\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/functions',\n    };\n\n    return lastValueFrom(\n      this.doGraphiteRequest(httpOptions).pipe(\n        map((results: any) => {\n          if (results.status !== 200 || typeof results.data !== 'object') {\n            if (typeof results.data === 'string') {\n              // Fix for a Graphite bug: https://github.com/graphite-project/graphite-web/issues/2609\n              // There is a fix for it https://github.com/graphite-project/graphite-web/pull/2612 but\n              // it was merged to master in July 2020 but it has never been released (the last Graphite\n              // release was 1.1.7 - March 2020). The bug was introduced in Graphite 1.1.7, in versions\n              // 1.1.0 - 1.1.6 /functions endpoint returns a valid JSON\n              const fixedData = JSON.parse(results.data.replace(/\"default\": ?Infinity/g, '\"default\": 1e9999'));\n              this.funcDefs = gfunc.parseFuncDefs(fixedData);\n            } else {\n              this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n            }\n          } else {\n            this.funcDefs = gfunc.parseFuncDefs(results.data);\n          }\n          return this.funcDefs;\n        }),\n        catchError((error: any) => {\n          console.error('Fetching graphite functions error', error);\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n          return of(this.funcDefs);\n        })\n      )\n    );\n  }\n\n  testDatasource() {\n    const query = {\n      panelId: 3,\n      rangeRaw: { from: 'now-1h', to: 'now' },\n      range: {\n        raw: { from: 'now-1h', to: 'now' },\n      },\n      targets: [{ target: 'constantLine(100)' }],\n      maxDataPoints: 300,\n    } as unknown as DataQueryRequest<GraphiteQuery>;\n\n    return lastValueFrom(this.query(query)).then(() => ({ status: 'success', message: 'Data source is working' }));\n  }\n\n  doGraphiteRequest(options: {\n    method?: string;\n    url: any;\n    requestId?: any;\n    withCredentials?: any;\n    headers?: any;\n    inspect?: any;\n  }) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    options.inspect = { type: 'graphite' };\n\n    return getBackendSrv()\n      .fetch(options)\n      .pipe(\n        catchError((err: any) => {\n          return throwError(reduceError(err));\n        })\n      );\n  }\n\n  buildGraphiteParams(options: any, scopedVars?: ScopedVars): string[] {\n    const graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\n    const cleanOptions = [],\n      targets: any = {};\n    let target, targetValue, i;\n    const regex = /\\#([A-Z])/g;\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\n    let hasTargets = false;\n\n    options['format'] = 'json';\n\n    function fixIntervalFormat(match: any) {\n      return match.replace('m', 'min').replace('M', 'mon');\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      if (!target.refId) {\n        target.refId = this._seriesRefLetters[i];\n      }\n\n      targetValue = this.templateSrv.replace(target.target, scopedVars);\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\n      targets[target.refId] = targetValue;\n    }\n\n    function nestedSeriesRegexReplacer(match: any, g1: string | number) {\n      return targets[g1] || match;\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      targetValue = targets[target.refId];\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\n      targets[target.refId] = targetValue;\n\n      if (!target.hide) {\n        hasTargets = true;\n        cleanOptions.push('target=' + encodeURIComponent(targetValue));\n      }\n    }\n\n    each(options, (value, key) => {\n      if (indexOf(graphiteOptions, key) === -1) {\n        return;\n      }\n      if (value) {\n        cleanOptions.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (!hasTargets) {\n      return [];\n    }\n\n    return cleanOptions;\n  }\n}\n\nfunction supportsTags(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction supportsFunctionIndex(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction mapToTags(): OperatorFunction<any, Array<{ text: string }>> {\n  return pipe(\n    map((results: any) => {\n      if (results.data) {\n        return _map(results.data, (value) => {\n          return { text: value };\n        });\n      } else {\n        return [];\n      }\n    })\n  );\n}\n","import { last } from 'lodash';\n\n/**\n * Graphite-web before v1.6 returns HTTP 500 with full stack traces in an HTML page\n * when a query fails. It results in massive error alerts with HTML tags in the UI.\n * This function removes all HTML tags and keeps only the last line from the stack\n * trace which should be the most meaningful.\n */\nexport function reduceError(error: any): any {\n  if (error && error.status === 500 && error.data?.message?.startsWith('<body')) {\n    // Remove all HTML tags and take the last line from the stack trace\n    const newMessage = last<string>(\n      error.data.message\n        .replace(/(<([^>]+)>)/gi, '')\n        .trim()\n        .split(/\\n/)\n    )!.replace(/u?&#[^;]+;/g, '');\n    error.data.message = `Graphite encountered an unexpected error while handling your request. ${newMessage}`;\n  }\n  return error;\n}\n","import { Alert } from '@grafana/ui';\nimport React from 'react';\n\ntype Props = {\n  onDismiss: () => void;\n};\n\nexport default function MappingsHelp(props: Props): JSX.Element {\n  return (\n    <Alert severity=\"info\" title=\"How to map Graphite metrics to labels?\" onRemove={props.onDismiss}>\n      <p>Mappings are currently supported only between Graphite and Loki queries.</p>\n      <p>\n        When you switch your data source from Graphite to Loki, your queries are mapped according to the mappings\n        defined in the example below. To define a mapping, write the full path of the metric and replace nodes you want\n        to map to label with the label name in parentheses. The value of the label is extracted from your Graphite query\n        when you switch data sources.\n      </p>\n      <p>\n        All tags are automatically mapped to labels regardless of the mapping configuration. Graphite matching patterns\n        (using &#123;&#125;) are converted to Loki&apos;s regular expressions matching patterns. When you use functions\n        in your queries, the metrics, and tags are extracted to match them with defined mappings.\n      </p>\n      <p>\n        Example: for a mapping = <code>servers.(cluster).(server).*</code>:\n      </p>\n      <table>\n        <thead>\n          <tr>\n            <th>Graphite query</th>\n            <th>Mapped to Loki query</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <code>\n                alias(servers.<u>west</u>.<u>001</u>.cpu,1,2)\n              </code>\n            </td>\n            <td>\n              <code>\n                &#123;cluster=&quot;<u>west</u>&quot;, server=&quot;<u>001</u>&quot;&#125;\n              </code>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>\n                alias(servers.*.<u>&#123;001,002&#125;</u>.*,1,2)\n              </code>\n            </td>\n            <td>\n              <code>\n                &#123;server=~&quot;<u>(001|002)</u>&quot;&#125;\n              </code>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <code>interpolate(seriesByTag(&apos;foo=bar&apos;, &apos;server=002&apos;), inf))</code>\n            </td>\n            <td>\n              <code>&#123;foo=&quot;bar&quot;, server=&quot;002&quot;&#125;</code>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Alert>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Button, Icon, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport MappingsHelp from './MappingsHelp';\n\ntype Props = {\n  mappings: string[];\n  onChange: (mappings: string[]) => void;\n  onDismiss: () => void;\n  onRestoreHelp: () => void;\n  showHelp: boolean;\n};\n\nexport const MappingsConfiguration = (props: Props): JSX.Element => {\n  const [mappings, setMappings] = useState(props.mappings || []);\n\n  return (\n    <div>\n      <h3 className=\"page-heading\">Label mappings</h3>\n      {!props.showHelp && (\n        <p>\n          <Button variant=\"link\" onClick={props.onRestoreHelp}>\n            Learn how label mappings work\n          </Button>\n        </p>\n      )}\n      {props.showHelp && <MappingsHelp onDismiss={props.onDismiss} />}\n\n      <div className=\"gf-form-group\">\n        {mappings.map((mapping, i) => (\n          <InlineFieldRow key={i}>\n            <InlineField label={`Mapping (${i + 1})`}>\n              <Input\n                width={50}\n                onChange={(changeEvent: ChangeEvent<HTMLInputElement>) => {\n                  let newMappings = mappings.concat();\n                  newMappings[i] = changeEvent.target.value;\n                  setMappings(newMappings);\n                }}\n                onBlur={() => {\n                  props.onChange(mappings);\n                }}\n                placeholder=\"e.g. test.metric.(labelName).*\"\n                value={mapping}\n              />\n            </InlineField>\n            <Button\n              type=\"button\"\n              aria-label=\"Remove header\"\n              variant=\"secondary\"\n              size=\"xs\"\n              onClick={(_) => {\n                let newMappings = mappings.concat();\n                newMappings.splice(i, 1);\n                setMappings(newMappings);\n                props.onChange(newMappings);\n              }}\n            >\n              <Icon name=\"trash-alt\" />\n            </Button>\n          </InlineFieldRow>\n        ))}\n        <Button\n          variant=\"secondary\"\n          icon=\"plus\"\n          type=\"button\"\n          onClick={() => {\n            setMappings([...mappings, '']);\n          }}\n        >\n          Add label mapping\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { GraphiteLokiMapping } from '../types';\n\n/**\n * Converts a simple string used in LokiLogsMappings component (e.g. \"servers.(name).*\")\n * to data model saved in data source configuration.\n */\nexport function fromString(text: string): GraphiteLokiMapping {\n  return {\n    matchers: text.split('.').map((metricNode) => {\n      if (metricNode.startsWith('(') && metricNode.endsWith(')')) {\n        return {\n          value: '*',\n          labelName: metricNode.slice(1, -1),\n        };\n      } else {\n        return { value: metricNode };\n      }\n    }),\n  };\n}\n\n/**\n * Coverts configuration stored in data source configuration into a string displayed in LokiLogsMappings component.\n */\nexport function toString(mapping: GraphiteLokiMapping): string {\n  return mapping.matchers\n    .map((matcher) => {\n      return matcher.labelName ? `(${matcher.labelName})` : `${matcher.value}`;\n    })\n    .join('.');\n}\n","import React, { PureComponent } from 'react';\nimport { Alert, DataSourceHttpSettings, InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Switch } = LegacyForms;\nimport {\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceJsonDataOptionChecked,\n} from '@grafana/data';\nimport { GraphiteOptions, GraphiteType } from '../types';\nimport { DEFAULT_GRAPHITE_VERSION, GRAPHITE_VERSIONS } from '../versions';\nimport { MappingsConfiguration } from './MappingsConfiguration';\nimport { fromString, toString } from './parseLokiLabelMappings';\nimport store from 'app/core/store';\n\nexport const SHOW_MAPPINGS_HELP_KEY = 'grafana.datasources.graphite.config.showMappingsHelp';\n\nconst graphiteVersions = GRAPHITE_VERSIONS.map((version) => ({ label: `${version}.x`, value: version }));\n\nconst graphiteTypes = Object.entries(GraphiteType).map(([label, value]) => ({\n  label,\n  value,\n}));\n\nexport type Props = DataSourcePluginOptionsEditorProps<GraphiteOptions>;\n\ntype State = {\n  showMappingsHelp: boolean;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showMappingsHelp: store.getObject(SHOW_MAPPINGS_HELP_KEY, true),\n    };\n  }\n\n  renderTypeHelp = () => {\n    return (\n      <p>\n        There are different types of Graphite compatible backends. Here you can specify the type you are using. If you\n        are using{' '}\n        <a href=\"https://github.com/grafana/metrictank\" className=\"pointer\" target=\"_blank\" rel=\"noreferrer\">\n          Metrictank\n        </a>{' '}\n        then select that here. This will enable Metrictank specific features like query processing meta data. Metrictank\n        is a multi-tenant timeseries engine for Graphite and friends.\n      </p>\n    );\n  };\n\n  componentDidMount() {\n    updateDatasourcePluginJsonDataOption(this.props, 'graphiteVersion', this.currentGraphiteVersion);\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    const currentVersion = graphiteVersions.find((item) => item.value === this.currentGraphiteVersion);\n\n    return (\n      <>\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            This data source uses browser access mode. This mode is deprecated and will be removed in the future. Please\n            use server access mode instead.\n          </Alert>\n        )}\n        <DataSourceHttpSettings\n          defaultUrl=\"http://localhost:8080\"\n          dataSourceConfig={options}\n          onChange={onOptionsChange}\n        />\n        <h3 className=\"page-heading\">Graphite details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel tooltip=\"This option controls what functions are available in the Graphite query editor.\">\n                Version\n              </InlineFormLabel>\n              <Select\n                aria-label=\"Graphite version\"\n                menuShouldPortal\n                value={currentVersion}\n                options={graphiteVersions}\n                width={8}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteVersion')}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel tooltip={this.renderTypeHelp}>Type</InlineFormLabel>\n              <Select\n                aria-label=\"Graphite backend type\"\n                menuShouldPortal\n                options={graphiteTypes}\n                value={graphiteTypes.find((type) => type.value === options.jsonData.graphiteType)}\n                width={8}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteType')}\n              />\n            </div>\n          </div>\n          {options.jsonData.graphiteType === GraphiteType.Metrictank && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <Switch\n                  label=\"Rollup indicator\"\n                  labelClass={'width-10'}\n                  tooltip=\"Shows up as an info icon in panel headers when data is aggregated\"\n                  checked={!!options.jsonData.rollupIndicatorEnabled}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(this.props, 'rollupIndicatorEnabled')}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        <MappingsConfiguration\n          mappings={(options.jsonData.importConfiguration?.loki?.mappings || []).map(toString)}\n          showHelp={this.state.showMappingsHelp}\n          onDismiss={() => {\n            this.setState({ showMappingsHelp: false });\n            store.setObject(SHOW_MAPPINGS_HELP_KEY, false);\n          }}\n          onRestoreHelp={() => {\n            this.setState({ showMappingsHelp: true });\n            store.setObject(SHOW_MAPPINGS_HELP_KEY, true);\n          }}\n          onChange={(mappings) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...options.jsonData,\n                importConfiguration: {\n                  ...options.jsonData.importConfiguration,\n                  loki: {\n                    mappings: mappings.map(fromString),\n                  },\n                },\n              },\n            });\n          }}\n        />\n      </>\n    );\n  }\n\n  private get currentGraphiteVersion() {\n    return this.props.options.jsonData.graphiteVersion || DEFAULT_GRAPHITE_VERSION;\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { MetadataInspectorProps, rangeUtil } from '@grafana/data';\nimport { GraphiteDatasource } from '../datasource';\nimport { GraphiteQuery, GraphiteOptions, MetricTankSeriesMeta } from '../types';\nimport { parseSchemaRetentions, getRollupNotice, getRuntimeConsolidationNotice } from '../meta';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nexport type Props = MetadataInspectorProps<GraphiteDatasource, GraphiteQuery, GraphiteOptions>;\n\nexport interface State {\n  index: number;\n}\n\nexport class MetricTankMetaInspector extends PureComponent<Props, State> {\n  renderMeta(meta: MetricTankSeriesMeta, key: string) {\n    const styles = getStyles();\n    const buckets = parseSchemaRetentions(meta['schema-retentions']);\n    const rollupNotice = getRollupNotice([meta]);\n    const runtimeNotice = getRuntimeConsolidationNotice([meta]);\n    const normFunc = (meta['consolidator-normfetch'] ?? '').replace('Consolidator', '');\n\n    const totalSeconds = buckets.reduce(\n      (acc, bucket) => acc + (bucket.retention ? rangeUtil.intervalToSeconds(bucket.retention) : 0),\n      0\n    );\n\n    return (\n      <div className={styles.metaItem} key={key}>\n        <div className={styles.metaItemHeader}>\n          Schema: {meta['schema-name']}\n          <div className=\"small muted\">Series count: {meta.count}</div>\n        </div>\n        <div className={styles.metaItemBody}>\n          <div className={styles.step}>\n            <div className={styles.stepHeading}>Step 1: Fetch</div>\n            <div className={styles.stepDescription}>\n              First data is fetched, either from raw data archive or a rollup archive\n            </div>\n\n            {rollupNotice && <p>{rollupNotice.text}</p>}\n            {!rollupNotice && <p>No rollup archive was used</p>}\n\n            <div>\n              {buckets.map((bucket, index) => {\n                const bucketLength = bucket.retention ? rangeUtil.intervalToSeconds(bucket.retention) : 0;\n                const lengthPercent = (bucketLength / totalSeconds) * 100;\n                const isActive = index === meta['archive-read'];\n\n                return (\n                  <div key={bucket.retention} className={styles.bucket}>\n                    <div className={styles.bucketInterval}>{bucket.interval}</div>\n                    <div\n                      className={cx(styles.bucketRetention, { [styles.bucketRetentionActive]: isActive })}\n                      style={{ flexGrow: lengthPercent }}\n                    />\n                    <div style={{ flexGrow: 100 - lengthPercent }}>{bucket.retention}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className={styles.step}>\n            <div className={styles.stepHeading}>Step 2: Normalization</div>\n            <div className={styles.stepDescription}>\n              Normalization happens when series with different intervals between points are combined.\n            </div>\n\n            {meta['aggnum-norm'] > 1 && <p>Normalization did occur using {normFunc}</p>}\n            {meta['aggnum-norm'] === 1 && <p>No normalization was needed</p>}\n          </div>\n\n          <div className={styles.step}>\n            <div className={styles.stepHeading}>Step 3: Runtime consolidation</div>\n            <div className={styles.stepDescription}>\n              If there are too many data points at this point Metrictank will consolidate them down to below max data\n              points (set in queries tab).\n            </div>\n\n            {runtimeNotice && <p>{runtimeNotice.text}</p>}\n            {!runtimeNotice && <p>No runtime consolidation</p>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { data } = this.props;\n\n    // away to dedupe them\n    const seriesMetas: Record<string, MetricTankSeriesMeta> = {};\n\n    for (const series of data) {\n      if (series.meta && series.meta.custom) {\n        for (const metaItem of series.meta.custom.seriesMetaList as MetricTankSeriesMeta[]) {\n          // key is to dedupe as many series will have identitical meta\n          const key = `${JSON.stringify(metaItem)}`;\n\n          if (seriesMetas[key]) {\n            seriesMetas[key].count += metaItem.count;\n          } else {\n            seriesMetas[key] = metaItem;\n          }\n        }\n      }\n    }\n\n    if (Object.keys(seriesMetas).length === 0) {\n      return <div>No response meta data</div>;\n    }\n\n    return (\n      <div>\n        <h2 className=\"page-heading\">Metrictank Lineage</h2>\n        {Object.keys(seriesMetas).map((key) => this.renderMeta(seriesMetas[key], key))}\n      </div>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n  const borderColor = theme.isDark ? theme.palette.gray25 : theme.palette.gray85;\n  const background = theme.isDark ? theme.palette.dark1 : theme.palette.white;\n  const headerBg = theme.isDark ? theme.palette.gray15 : theme.palette.gray85;\n\n  return {\n    metaItem: css`\n      background: ${background};\n      border: 1px solid ${borderColor};\n      margin-bottom: ${theme.spacing.md};\n    `,\n    metaItemHeader: css`\n      background: ${headerBg};\n      padding: ${theme.spacing.xs} ${theme.spacing.md};\n      font-size: ${theme.typography.size.md};\n      display: flex;\n      justify-content: space-between;\n    `,\n    metaItemBody: css`\n      padding: ${theme.spacing.md};\n    `,\n    stepHeading: css`\n      font-size: ${theme.typography.size.md};\n    `,\n    stepDescription: css`\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    step: css`\n      margin-bottom: ${theme.spacing.lg};\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    `,\n    bucket: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.sm};\n      border-radius: ${theme.border.radius.md};\n    `,\n    bucketInterval: css`\n      flex-grow: 0;\n      width: 60px;\n    `,\n    bucketRetention: css`\n      background: linear-gradient(0deg, ${theme.palette.blue85}, ${theme.palette.blue95});\n      text-align: center;\n      color: ${theme.palette.white};\n      margin-right: ${theme.spacing.md};\n      border-radius: ${theme.border.radius.md};\n    `,\n    bucketRetentionActive: css`\n      background: linear-gradient(0deg, ${theme.palette.greenBase}, ${theme.palette.greenShade});\n    `,\n  };\n});\n","import { GraphiteQuery, GraphiteQueryEditorDependencies, GraphiteSegment, GraphiteTag } from '../types';\nimport { createAction } from '@reduxjs/toolkit';\nimport { FuncInstance } from '../gfunc';\nimport { TimeRange } from '@grafana/data';\n\n/**\n * List of possible actions changing the state of QueryEditor\n */\n\nconst init = createAction<GraphiteQueryEditorDependencies>('init');\n\n/**\n * Synchronise editor dependencies with internal state.\n */\nconst timeRangeChanged = createAction<TimeRange | undefined>('time-range-changed');\nconst queriesChanged = createAction<GraphiteQuery[] | undefined>('queries-changed');\nconst queryChanged = createAction<GraphiteQuery>('query-changed');\n\n// Metrics & Tags\nconst segmentValueChanged = createAction<{ segment: GraphiteSegment | string; index: number }>('segment-value-changed');\n\n// Tags\nconst addNewTag = createAction<{ segment: GraphiteSegment }>('add-new-tag');\nconst tagChanged = createAction<{ tag: GraphiteTag; index: number }>('tag-changed');\nconst unpause = createAction('unpause');\n\n// Functions\nconst addFunction = createAction<{ name: string }>('add-function');\nconst removeFunction = createAction<{ func: FuncInstance }>('remove-function');\nconst moveFunction = createAction<{ func: FuncInstance; offset: number }>('move-function');\nconst updateFunctionParam = createAction<{ func: FuncInstance; index: number; value: string }>('change-function-param');\n\n// Text editor\nconst updateQuery = createAction<{ query: string }>('update-query');\nconst runQuery = createAction('run-current-query');\nconst toggleEditorMode = createAction('toggle-editor');\n\nexport const actions = {\n  init,\n  timeRangeChanged,\n  queriesChanged,\n  queryChanged,\n  segmentValueChanged,\n  tagChanged,\n  addNewTag,\n  unpause,\n  addFunction,\n  removeFunction,\n  moveFunction,\n  updateFunctionParam,\n  updateQuery,\n  runQuery,\n  toggleEditorMode,\n};\n","import { GraphiteQueryEditorState } from './store';\nimport { clone } from 'lodash';\nimport { dispatch } from '../../../../store/store';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { FuncInstance } from '../gfunc';\nimport { GraphiteQuery, GraphiteTagOperator } from '../types';\n\n/**\n * Helpers used by reducers and providers. They modify state object directly so should operate on a copy of the state.\n */\n\nexport const GRAPHITE_TAG_OPERATORS: GraphiteTagOperator[] = ['=', '!=', '=~', '!=~'];\n\n/**\n * Tag names and metric names are displayed in a single dropdown. This prefix is used to\n * distinguish both in the UI.\n */\nexport const TAG_PREFIX = 'tag: ';\n\n/**\n * Create new AST based on new query.\n * Build segments from parsed metric name and functions.\n */\nexport async function parseTarget(state: GraphiteQueryEditorState): Promise<void> {\n  state.queryModel.parseTarget();\n  await buildSegments(state);\n}\n\n/**\n * Create segments out of the current metric path + add \"select metrics\" if it's possible to add more to the path\n */\nexport async function buildSegments(state: GraphiteQueryEditorState, modifyLastSegment = true): Promise<void> {\n  // Start with a shallow copy from the model, then check if \"select metric\" segment should be added at the end\n  state.segments = clone(state.queryModel.segments);\n\n  const checkOtherSegmentsIndex = state.queryModel.checkOtherSegmentsIndex || 0;\n\n  await checkOtherSegments(state, checkOtherSegmentsIndex, modifyLastSegment);\n}\n\n/**\n * Add \"select metric\" segment at the end\n */\nexport function addSelectMetricSegment(state: GraphiteQueryEditorState): void {\n  state.queryModel.addSelectMetricSegment();\n  state.segments.push({ value: 'select metric', fake: true });\n}\n\n/**\n * Validates the state after adding or changing a segment:\n * - adds \"select metric\" only when more segments can be added to the metric name\n * - check if subsequent segments are still valid if in-between segment changes and\n *   removes invalid segments.\n */\nexport async function checkOtherSegments(\n  state: GraphiteQueryEditorState,\n  fromIndex: number,\n  modifyLastSegment = true\n): Promise<void> {\n  if (state.queryModel.segments.length === 1 && state.queryModel.segments[0].type === 'series-ref') {\n    return;\n  }\n\n  if (fromIndex === 0) {\n    addSelectMetricSegment(state);\n    return;\n  }\n\n  const path = state.queryModel.getSegmentPathUpTo(fromIndex + 1);\n  if (path === '') {\n    return;\n  }\n\n  try {\n    const segments = await state.datasource.metricFindQuery(path);\n    if (segments.length === 0) {\n      if (path !== '' && modifyLastSegment) {\n        state.queryModel.segments = state.queryModel.segments.splice(0, fromIndex);\n        state.segments = state.segments.splice(0, fromIndex);\n        addSelectMetricSegment(state);\n      }\n    } else if (segments[0].expandable) {\n      if (state.segments.length === fromIndex) {\n        addSelectMetricSegment(state);\n      } else {\n        await checkOtherSegments(state, fromIndex + 1);\n      }\n    }\n  } catch (err) {\n    handleMetricsAutoCompleteError(state, err);\n  }\n}\n\nexport function spliceSegments(state: GraphiteQueryEditorState, index: number): void {\n  state.segments = state.segments.splice(0, index);\n  state.queryModel.segments = state.queryModel.segments.splice(0, index);\n}\n\nexport function emptySegments(state: GraphiteQueryEditorState): void {\n  state.queryModel.segments = [];\n  state.segments = [];\n}\n\n/**\n * When seriesByTag function is added the UI changes it's state and only tags can be added from now.\n */\nexport async function addSeriesByTagFunc(state: GraphiteQueryEditorState, tag: string): Promise<void> {\n  const newFunc = state.datasource.createFuncInstance('seriesByTag', {\n    withDefaultParams: false,\n  });\n  const tagParam = `${tag}=`;\n  newFunc.params = [tagParam];\n  state.queryModel.addFunction(newFunc);\n  newFunc.added = true;\n\n  emptySegments(state);\n  handleTargetChanged(state);\n  await parseTarget(state);\n}\n\nexport function smartlyHandleNewAliasByNode(state: GraphiteQueryEditorState, func: FuncInstance): void {\n  if (func.def.name !== 'aliasByNode') {\n    return;\n  }\n\n  for (let i = 0; i < state.segments.length; i++) {\n    if (state.segments[i].value.indexOf('*') >= 0) {\n      func.params[0] = i;\n      func.added = false;\n      handleTargetChanged(state);\n      return;\n    }\n  }\n}\n\n/**\n * Pauses running the query to allow selecting tag value. This is to prevent getting errors if the query is run\n * for a tag with no selected value.\n */\nexport function pause(state: GraphiteQueryEditorState): void {\n  state.paused = true;\n}\n\nexport function removeTagPrefix(value: string): string {\n  return value.replace(TAG_PREFIX, '');\n}\n\nexport function handleTargetChanged(state: GraphiteQueryEditorState): void {\n  if (state.queryModel.error) {\n    return;\n  }\n\n  const oldTarget = state.queryModel.target.target;\n  // Interpolate from other queries:\n  // Because of mixed data sources the list may contain queries for non-Graphite data sources. To ensure a valid query\n  // is used for interpolation we should check required properties are passed though in theory it allows to interpolate\n  // with queries that contain \"target\" property as well.\n  state.queryModel.updateModelTarget(\n    (state.queries || []).filter((query) => 'target' in query && typeof (query as GraphiteQuery).target === 'string')\n  );\n\n  if (state.queryModel.target.target !== oldTarget && !state.paused) {\n    state.refresh();\n  }\n}\n\n/**\n * When metrics autocomplete fails - the error is shown, but only once per page view\n */\nexport function handleMetricsAutoCompleteError(\n  state: GraphiteQueryEditorState,\n  error: Error\n): GraphiteQueryEditorState {\n  console.error(error);\n  if (!state.metricAutoCompleteErrorShown) {\n    state.metricAutoCompleteErrorShown = true;\n    dispatch(notifyApp(createErrorNotification(`Fetching metrics failed: ${error.message}.`)));\n  }\n  return state;\n}\n\n/**\n * When tags autocomplete fails - the error is shown, but only once per page view\n */\nexport function handleTagsAutoCompleteError(state: GraphiteQueryEditorState, error: Error): GraphiteQueryEditorState {\n  console.error(error);\n  if (!state.tagsAutoCompleteErrorShown) {\n    state.tagsAutoCompleteErrorShown = true;\n    dispatch(notifyApp(createErrorNotification(`Fetching tags failed: ${error.message}.`)));\n  }\n  return state;\n}\n","import GraphiteQuery, { GraphiteTarget } from '../graphite_query';\nimport { GraphiteSegment, GraphiteTagOperator } from '../types';\nimport { GraphiteDatasource } from '../datasource';\nimport { TemplateSrv } from '../../../../features/templating/template_srv';\nimport { actions } from './actions';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport {\n  addSeriesByTagFunc,\n  buildSegments,\n  checkOtherSegments,\n  emptySegments,\n  handleTargetChanged,\n  parseTarget,\n  pause,\n  removeTagPrefix,\n  smartlyHandleNewAliasByNode,\n  spliceSegments,\n} from './helpers';\nimport { Action, Dispatch } from 'redux';\nimport { FuncDefs } from '../gfunc';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { DataQuery, TimeRange } from '@grafana/data';\n\nexport type GraphiteQueryEditorState = {\n  // external dependencies\n  datasource: GraphiteDatasource;\n  target: GraphiteTarget;\n  refresh: () => void;\n  queries?: DataQuery[];\n  templateSrv: TemplateSrv;\n  range?: TimeRange;\n\n  // internal\n  supportsTags: boolean;\n  paused: boolean;\n  removeTagValue: string;\n  funcDefs: FuncDefs | null;\n  segments: GraphiteSegment[];\n  queryModel: GraphiteQuery;\n  error: Error | null;\n  tagsAutoCompleteErrorShown: boolean;\n  metricAutoCompleteErrorShown: boolean;\n};\n\nconst reducer = async (action: Action, state: GraphiteQueryEditorState): Promise<GraphiteQueryEditorState> => {\n  state = { ...state };\n\n  if (actions.init.match(action)) {\n    const deps = action.payload;\n    deps.target.target = deps.target.target || '';\n\n    await deps.datasource.waitForFuncDefsLoaded();\n\n    state = {\n      ...state,\n      ...deps,\n      queryModel: new GraphiteQuery(deps.datasource, deps.target, getTemplateSrv()),\n      supportsTags: deps.datasource.supportsTags,\n      paused: false,\n      removeTagValue: '-- remove tag --',\n      funcDefs: deps.datasource.funcDefs,\n      queries: deps.queries,\n    };\n\n    await buildSegments(state, false);\n  }\n  if (actions.timeRangeChanged.match(action)) {\n    state.range = action.payload;\n  }\n  if (actions.queriesChanged.match(action)) {\n    state.queries = action.payload;\n    handleTargetChanged(state);\n  }\n  if (actions.queryChanged.match(action)) {\n    state.target.target = action.payload.target || '';\n    await parseTarget(state);\n    handleTargetChanged(state);\n  }\n  if (actions.segmentValueChanged.match(action)) {\n    const { segment: segmentOrString, index: segmentIndex } = action.payload;\n\n    let segment;\n    // is segment was changed to a string - create a new segment\n    if (typeof segmentOrString === 'string') {\n      segment = {\n        value: segmentOrString,\n        expandable: true,\n        fake: false,\n      };\n    } else {\n      segment = segmentOrString as GraphiteSegment;\n    }\n\n    state.error = null;\n    state.segments[segmentIndex] = segment;\n    state.queryModel.updateSegmentValue(segment, segmentIndex);\n\n    if (state.queryModel.functions.length > 0 && state.queryModel.functions[0].def.fake) {\n      state.queryModel.functions = [];\n    }\n\n    if (segment.type === 'tag') {\n      const tag = removeTagPrefix(segment.value);\n      pause(state);\n      await addSeriesByTagFunc(state, tag);\n      return state;\n    }\n\n    // if newly selected segment can be expanded -> check if the path is correct\n    if (segment.expandable) {\n      await checkOtherSegments(state, segmentIndex + 1);\n    } else {\n      // if not expandable -> remove all other segments\n      spliceSegments(state, segmentIndex + 1);\n    }\n\n    handleTargetChanged(state);\n  }\n  if (actions.tagChanged.match(action)) {\n    const { tag, index: tagIndex } = action.payload;\n    state.queryModel.updateTag(tag, tagIndex);\n    handleTargetChanged(state);\n    if (state.queryModel.tags.length === 0) {\n      await checkOtherSegments(state, 0);\n      state.paused = false;\n    }\n  }\n  if (actions.addNewTag.match(action)) {\n    const segment = action.payload.segment;\n    const newTagKey = segment.value;\n    const newTag = { key: newTagKey, operator: '=' as GraphiteTagOperator, value: '' };\n    state.queryModel.addTag(newTag);\n    handleTargetChanged(state);\n  }\n  if (actions.unpause.match(action)) {\n    state.paused = false;\n    state.refresh();\n  }\n  if (actions.addFunction.match(action)) {\n    const newFunc = state.datasource.createFuncInstance(action.payload.name, {\n      withDefaultParams: true,\n    });\n    newFunc.added = true;\n    state.queryModel.addFunction(newFunc);\n    smartlyHandleNewAliasByNode(state, newFunc);\n\n    if (state.segments.length === 1 && state.segments[0].fake) {\n      emptySegments(state);\n    }\n\n    if (!newFunc.params.length && newFunc.added) {\n      handleTargetChanged(state);\n    }\n\n    if (newFunc.def.name === 'seriesByTag') {\n      await parseTarget(state);\n    }\n  }\n  if (actions.removeFunction.match(action)) {\n    state.queryModel.removeFunction(action.payload.func);\n    handleTargetChanged(state);\n  }\n  if (actions.moveFunction.match(action)) {\n    const { func, offset } = action.payload;\n    state.queryModel.moveFunction(func, offset);\n    handleTargetChanged(state);\n  }\n  if (actions.updateFunctionParam.match(action)) {\n    const { func, index, value } = action.payload;\n    func.updateParam(value, index);\n    handleTargetChanged(state);\n  }\n  if (actions.updateQuery.match(action)) {\n    state.target.target = action.payload.query;\n    handleTargetChanged(state);\n  }\n  if (actions.runQuery.match(action)) {\n    state.refresh();\n  }\n  if (actions.toggleEditorMode.match(action)) {\n    state.target.textEditor = !state.target.textEditor;\n    await parseTarget(state);\n  }\n\n  return { ...state };\n};\n\nexport const createStore = (onChange: (state: GraphiteQueryEditorState) => void): Dispatch<AnyAction> => {\n  let state = {} as GraphiteQueryEditorState;\n\n  const dispatch = async (action: AnyAction) => {\n    state = await reducer(action, state);\n    onChange(state);\n  };\n\n  return dispatch as Dispatch<AnyAction>;\n};\n","import React, { createContext, Dispatch, PropsWithChildren, useContext, useEffect, useMemo, useState } from 'react';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { QueryEditorProps } from '@grafana/data';\nimport { GraphiteDatasource } from '../datasource';\nimport { GraphiteOptions, GraphiteQuery } from '../types';\nimport { createStore, GraphiteQueryEditorState } from './store';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\nimport { actions } from './actions';\nimport { usePrevious } from 'react-use';\n\nconst DispatchContext = createContext<Dispatch<AnyAction>>({} as Dispatch<AnyAction>);\nconst GraphiteStateContext = createContext<GraphiteQueryEditorState>({} as GraphiteQueryEditorState);\n\nexport const useDispatch = () => {\n  return useContext(DispatchContext);\n};\n\nexport const useGraphiteState = () => {\n  return useContext(GraphiteStateContext);\n};\n\nexport type GraphiteQueryEditorProps = QueryEditorProps<GraphiteDatasource, GraphiteQuery, GraphiteOptions>;\n\nexport const GraphiteQueryEditorContext = ({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  queries,\n  range,\n  children,\n}: PropsWithChildren<GraphiteQueryEditorProps>) => {\n  const [state, setState] = useState<GraphiteQueryEditorState>();\n  const [needsRefresh, setNeedsRefresh] = useState<boolean>(false);\n\n  const dispatch = useMemo(() => {\n    return createStore((state) => {\n      setState(state);\n    });\n  }, []);\n\n  // synchronise changes provided in props with editor's state\n  const previousRange = usePrevious(range);\n  useEffect(() => {\n    if (previousRange?.raw !== range?.raw) {\n      dispatch(actions.timeRangeChanged(range));\n    }\n  }, [dispatch, range, previousRange]);\n\n  useEffect(\n    () => {\n      if (state) {\n        dispatch(actions.queriesChanged(queries));\n      }\n    },\n    // adding state to dependencies causes infinite loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch, queries]\n  );\n\n  useEffect(\n    () => {\n      if (state && state.target?.target !== query.target) {\n        dispatch(actions.queryChanged(query));\n      }\n    },\n    // adding state to dependencies causes infinite loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch, query]\n  );\n\n  useEffect(\n    () => {\n      if (needsRefresh && state) {\n        setNeedsRefresh(false);\n        onChange({ ...query, target: state.target.target });\n        onRunQuery();\n      }\n    },\n    // adding state to dependencies causes infinite loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [needsRefresh, onChange, onRunQuery, query]\n  );\n\n  if (!state) {\n    dispatch(\n      actions.init({\n        target: query,\n        datasource: datasource,\n        range: range,\n        templateSrv: getTemplateSrv(),\n        // list of queries is passed only when the editor is in Dashboards. This is to allow interpolation\n        // of sub-queries which are stored in \"targetFull\" property used by alerting in the backend.\n        queries: queries || [],\n        refresh: () => {\n          // do not run onChange/onRunQuery straight away to ensure the internal state gets updated first\n          // to avoid race conditions (onChange could update props before the reducer action finishes)\n          setNeedsRefresh(true);\n        },\n      })\n    );\n    return null;\n  } else {\n    return (\n      <GraphiteStateContext.Provider value={state}>\n        <DispatchContext.Provider value={dispatch}>{children}</DispatchContext.Provider>\n      </GraphiteStateContext.Provider>\n    );\n  }\n};\n","import React, { useCallback } from 'react';\nimport { QueryField } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\n\ntype Props = {\n  rawQuery: string;\n};\n\nexport function GraphiteTextEditor({ rawQuery }: Props) {\n  const dispatch = useDispatch();\n\n  const updateQuery = useCallback(\n    (query: string) => {\n      dispatch(actions.updateQuery({ query }));\n    },\n    [dispatch]\n  );\n\n  const runQuery = useCallback(() => {\n    dispatch(actions.runQuery());\n  }, [dispatch]);\n\n  return (\n    <QueryField\n      query={rawQuery}\n      onChange={updateQuery}\n      onBlur={runQuery}\n      onRunQuery={runQuery}\n      placeholder={'Enter a Graphite query (run with Shift+Enter)'}\n      portalOrigin=\"graphite\"\n    />\n  );\n}\n","import { FuncDefs, FuncInstance, ParamDef } from '../gfunc';\nimport { forEach, sortBy } from 'lodash';\nimport { SelectableValue } from '@grafana/data';\nimport { EditableParam } from './FunctionParamEditor';\nimport { GraphiteSegment } from '../types';\n\nexport function mapStringsToSelectables<T extends string>(values: T[]): Array<SelectableValue<T>> {\n  return values.map((value) => ({\n    value,\n    label: value,\n  }));\n}\n\nexport function mapSegmentsToSelectables(segments: GraphiteSegment[]): Array<SelectableValue<GraphiteSegment>> {\n  return segments.map((segment) => ({\n    label: segment.value,\n    value: segment,\n  }));\n}\n\nexport function mapFuncDefsToSelectables(funcDefs: FuncDefs): Array<SelectableValue<string>> {\n  const categories: any = {};\n\n  forEach(funcDefs, (funcDef) => {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = { label: funcDef.category, value: funcDef.category, options: [] };\n    }\n    categories[funcDef.category].options.push({\n      label: funcDef.name,\n      value: funcDef.name,\n    });\n  });\n\n  return sortBy(categories, 'label');\n}\n\nfunction createEditableParam(paramDef: ParamDef, additional: boolean, value?: string | number): EditableParam {\n  return {\n    name: paramDef.name,\n    value: value?.toString() || '',\n    optional: !!paramDef.optional || additional, // only first param is required when multiple are allowed\n    multiple: !!paramDef.multiple,\n    options:\n      paramDef.options?.map((option: string | number) => ({\n        value: option.toString(),\n        label: option.toString(),\n      })) ?? [],\n  };\n}\n\n/**\n * Create a list of params that can be edited in the function editor.\n */\nexport function mapFuncInstanceToParams(func: FuncInstance): EditableParam[] {\n  // list of required parameters (from func.def)\n  const params: EditableParam[] = func.def.params.map((paramDef: ParamDef, index: number) =>\n    createEditableParam(paramDef, false, func.params[index])\n  );\n\n  // list of additional (multiple or optional) params entered by the user\n  while (params.length < func.params.length) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    const value = func.params[params.length];\n    params.push(createEditableParam(paramDef, true, value));\n  }\n\n  // extra \"fake\" param to allow adding more multiple values at the end\n  if (params.length && params[params.length - 1].value && params[params.length - 1]?.multiple) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    params.push(createEditableParam(paramDef, true, ''));\n  }\n\n  return params;\n}\n","import { GraphiteQueryEditorState } from './store';\nimport { eachRight, map, remove } from 'lodash';\nimport {\n  TAG_PREFIX,\n  GRAPHITE_TAG_OPERATORS,\n  handleMetricsAutoCompleteError,\n  handleTagsAutoCompleteError,\n} from './helpers';\nimport { GraphiteSegment, GraphiteTag, GraphiteTagOperator } from '../types';\nimport { mapSegmentsToSelectables, mapStringsToSelectables } from '../components/helpers';\nimport { SelectableValue } from '@grafana/data';\n\n/**\n * All auto-complete lists are updated while typing. To avoid performance issues we do not render more\n * than MAX_SUGGESTIONS limits in a single dropdown.\n *\n * MAX_SUGGESTIONS is per metrics and tags separately. On the very first dropdown where metrics and tags are\n * combined together meaning it may end up with max of 2 * MAX_SUGGESTIONS items in total.\n */\nconst MAX_SUGGESTIONS = 5000;\n\n/**\n * Providers are hooks for views to provide temporal data for autocomplete. They don't modify the state.\n */\n\n/**\n * Return list of available options for a segment with given index\n *\n * It may be:\n * - mixed list of metrics and tags (only when nothing was selected)\n * - list of metric names (if a metric name was selected for this segment)\n */\nasync function getAltSegments(\n  state: GraphiteQueryEditorState,\n  index: number,\n  prefix: string\n): Promise<GraphiteSegment[]> {\n  let query = prefix.length > 0 ? '*' + prefix + '*' : '*';\n  if (index > 0) {\n    query = state.queryModel.getSegmentPathUpTo(index) + '.' + query;\n  }\n  const options = {\n    range: state.range,\n    requestId: 'get-alt-segments',\n  };\n\n  try {\n    const segments = await state.datasource.metricFindQuery(query, options);\n    const altSegments: GraphiteSegment[] = map(segments, (segment) => {\n      return {\n        value: segment.text,\n        expandable: segment.expandable,\n      };\n    });\n\n    if (index > 0 && altSegments.length === 0) {\n      return altSegments;\n    }\n\n    // add query references\n    if (index === 0) {\n      eachRight(state.queries, (target) => {\n        if (target.refId === state.queryModel.target.refId) {\n          return;\n        }\n\n        altSegments.unshift({\n          type: 'series-ref',\n          value: '#' + target.refId,\n          expandable: false,\n        });\n      });\n    }\n\n    // add template variables\n    eachRight(state.templateSrv.getVariables(), (variable) => {\n      altSegments.unshift({\n        type: 'template',\n        value: '$' + variable.name,\n        expandable: true,\n      });\n    });\n\n    // add wildcard option and limit number of suggestions (API doesn't support limiting\n    // hence we are doing it here)\n    altSegments.unshift({ value: '*', expandable: true });\n    altSegments.splice(MAX_SUGGESTIONS);\n\n    if (state.supportsTags && index === 0) {\n      removeTaggedEntry(altSegments);\n      return await addAltTagSegments(state, prefix, altSegments);\n    } else {\n      return altSegments;\n    }\n  } catch (err) {\n    handleMetricsAutoCompleteError(state, err);\n  }\n\n  return [];\n}\n\n/**\n * Get the list of segments with tags and metrics. Suggestions are reduced in getAltSegments and addAltTagSegments so in case\n * we hit MAX_SUGGESTIONS limit there are always some tags and metrics shown.\n */\nexport async function getAltSegmentsSelectables(\n  state: GraphiteQueryEditorState,\n  index: number,\n  prefix: string\n): Promise<Array<SelectableValue<GraphiteSegment>>> {\n  return mapSegmentsToSelectables(await getAltSegments(state, index, prefix));\n}\n\nexport function getTagOperatorsSelectables(): Array<SelectableValue<GraphiteTagOperator>> {\n  return mapStringsToSelectables(GRAPHITE_TAG_OPERATORS);\n}\n\n/**\n * Returns tags as dropdown options\n */\nasync function getTags(state: GraphiteQueryEditorState, index: number, tagPrefix: string): Promise<string[]> {\n  try {\n    const tagExpressions = state.queryModel.renderTagExpressions(index);\n    const values = await state.datasource.getTagsAutoComplete(tagExpressions, tagPrefix, {\n      range: state.range,\n      limit: MAX_SUGGESTIONS,\n    });\n\n    const altTags = map(values, 'text');\n    altTags.splice(0, 0, state.removeTagValue);\n    return altTags;\n  } catch (err) {\n    handleTagsAutoCompleteError(state, err);\n  }\n\n  return [];\n}\n\nexport async function getTagsSelectables(\n  state: GraphiteQueryEditorState,\n  index: number,\n  tagPrefix: string\n): Promise<Array<SelectableValue<string>>> {\n  return mapStringsToSelectables(await getTags(state, index, tagPrefix));\n}\n\n/**\n * List of tags when a tag is added. getTags is used for editing.\n * When adding - segment is used. When editing - dropdown is used.\n */\nasync function getTagsAsSegments(state: GraphiteQueryEditorState, tagPrefix: string): Promise<GraphiteSegment[]> {\n  let tagsAsSegments: GraphiteSegment[];\n  try {\n    const tagExpressions = state.queryModel.renderTagExpressions();\n    const values = await state.datasource.getTagsAutoComplete(tagExpressions, tagPrefix, {\n      range: state.range,\n      limit: MAX_SUGGESTIONS,\n    });\n    tagsAsSegments = map(values, (val) => {\n      return {\n        value: val.text,\n        type: 'tag',\n        expandable: false,\n      };\n    });\n  } catch (err) {\n    tagsAsSegments = [];\n    handleTagsAutoCompleteError(state, err);\n  }\n\n  return tagsAsSegments;\n}\n\n/**\n * Get list of tags, used when adding additional tags (first tag is selected from a joined list of metrics and tags)\n */\nexport async function getTagsAsSegmentsSelectables(\n  state: GraphiteQueryEditorState,\n  tagPrefix: string\n): Promise<Array<SelectableValue<GraphiteSegment>>> {\n  return mapSegmentsToSelectables(await getTagsAsSegments(state, tagPrefix));\n}\n\nasync function getTagValues(\n  state: GraphiteQueryEditorState,\n  tag: GraphiteTag,\n  index: number,\n  valuePrefix: string\n): Promise<string[]> {\n  const tagExpressions = state.queryModel.renderTagExpressions(index);\n  const tagKey = tag.key;\n  const values = await state.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix, {\n    limit: MAX_SUGGESTIONS,\n  });\n  const altValues = map(values, 'text');\n  // Add template variables as additional values\n  eachRight(state.templateSrv.getVariables(), (variable) => {\n    altValues.push('${' + variable.name + ':regex}');\n  });\n\n  return altValues;\n}\n\nexport async function getTagValuesSelectables(\n  state: GraphiteQueryEditorState,\n  tag: GraphiteTag,\n  index: number,\n  valuePrefix: string\n): Promise<Array<SelectableValue<string>>> {\n  return mapStringsToSelectables(await getTagValues(state, tag, index, valuePrefix));\n}\n\n/**\n * Add segments with tags prefixed with \"tag: \" to include them in the same list as metrics\n */\nasync function addAltTagSegments(\n  state: GraphiteQueryEditorState,\n  prefix: string,\n  altSegments: GraphiteSegment[]\n): Promise<GraphiteSegment[]> {\n  let tagSegments = await getTagsAsSegments(state, prefix);\n\n  tagSegments = map(tagSegments, (segment) => {\n    segment.value = TAG_PREFIX + segment.value;\n    return segment;\n  });\n\n  return altSegments.concat(...tagSegments);\n}\n\nfunction removeTaggedEntry(altSegments: GraphiteSegment[]) {\n  remove(altSegments, (s) => s.value === '_tagged');\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { Segment, SegmentAsync } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { GraphiteTag, GraphiteTagOperator } from '../types';\nimport { getTagOperatorsSelectables, getTagsSelectables, getTagValuesSelectables } from '../state/providers';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { debounce } from 'lodash';\nimport { useDispatch } from '../state/context';\n\ntype Props = {\n  tag: GraphiteTag;\n  tagIndex: number;\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Editor for a tag at given index. Allows changing the name of the tag, operator or value. Tag names are provided with\n * getTagsSelectables and contain only valid tags (it may depend on currently used tags). The dropdown for tag names is\n * also used for removing tag (with a special \"--remove tag--\" option provided by getTagsSelectables).\n *\n * Options for tag names and values are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagEditor({ tag, tagIndex, state }: Props) {\n  const dispatch = useDispatch();\n  const getTagsOptions = useCallback(\n    (inputValue: string | undefined) => {\n      return getTagsSelectables(state, tagIndex, inputValue || '');\n    },\n    [state, tagIndex]\n  );\n  const debouncedGetTagsOptions = useMemo(() => debounce(getTagsOptions, 200, { leading: true }), [getTagsOptions]);\n\n  const getTagValueOptions = useCallback(\n    (inputValue: string | undefined) => {\n      return getTagValuesSelectables(state, tag, tagIndex, inputValue || '');\n    },\n    [state, tagIndex, tag]\n  );\n  const debouncedGetTagValueOptions = useMemo(\n    () => debounce(getTagValueOptions, 200, { leading: true }),\n    [getTagValueOptions]\n  );\n\n  return (\n    <>\n      <SegmentAsync\n        inputMinWidth={150}\n        value={tag.key}\n        loadOptions={debouncedGetTagsOptions}\n        reloadOptionsOnChange={true}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, key: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n        allowCustomValue={true}\n      />\n      <Segment<GraphiteTagOperator>\n        inputMinWidth={50}\n        value={tag.operator}\n        options={getTagOperatorsSelectables()}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, operator: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n      />\n      <SegmentAsync\n        inputMinWidth={150}\n        value={tag.value}\n        loadOptions={debouncedGetTagValueOptions}\n        reloadOptionsOnChange={true}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, value: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n        allowCustomValue={true}\n      />\n    </>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { Button } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\n\nexport function PlayButton() {\n  const dispatch = useDispatch();\n  const onClick = useCallback(() => {\n    dispatch(actions.unpause());\n  }, [dispatch]);\n  return <Button icon=\"play\" onClick={onClick} type=\"button\" variant=\"secondary\" aria-label=\"Unpause query\" />;\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { GraphiteSegment } from '../types';\nimport { GraphiteTag } from '../graphite_query';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { getTagsAsSegmentsSelectables } from '../state/providers';\nimport { Button, SegmentAsync, useStyles2 } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { TagEditor } from './TagEditor';\nimport { debounce } from 'lodash';\nimport { useDispatch } from '../state/context';\nimport { PlayButton } from './PlayButton';\n\ntype Props = {\n  tags: GraphiteTag[];\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Renders all tags and a button allowing to add more tags.\n *\n * Options for tag names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagsSection({ tags, state }: Props) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  // Options are reloaded while user is typing with backend taking care of auto-complete (auto-complete cannot be\n  // implemented in front-end because backend returns only limited number of entries)\n  const getTagsAsSegmentsOptions = useCallback(\n    (inputValue?: string) => {\n      return getTagsAsSegmentsSelectables(state, inputValue || '');\n    },\n    [state]\n  );\n  const debouncedGetTagsAsSegments = useMemo(\n    () => debounce(getTagsAsSegmentsOptions, 200, { leading: true }),\n    [getTagsAsSegmentsOptions]\n  );\n\n  return (\n    <>\n      {tags.map((tag, index) => {\n        return <TagEditor key={index} tagIndex={index} tag={tag} state={state} />;\n      })}\n      {tags.length && (\n        <SegmentAsync<GraphiteSegment>\n          inputMinWidth={150}\n          onChange={(value) => {\n            dispatch(actions.addNewTag({ segment: value.value! }));\n          }}\n          loadOptions={debouncedGetTagsAsSegments}\n          reloadOptionsOnChange={true}\n          Component={<Button icon=\"plus\" variant=\"secondary\" className={styles.button} aria-label=\"Add new tag\" />}\n        />\n      )}\n      {state.paused && <PlayButton />}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { SegmentAsync } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { GraphiteSegment } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { getAltSegmentsSelectables } from '../state/providers';\nimport { debounce } from 'lodash';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { useDispatch } from '../state/context';\n\ntype Props = {\n  segment: GraphiteSegment;\n  metricIndex: number;\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Represents a single metric node in the metric path at the given index. Allows to change the metric name to one of the\n * provided options or a custom value.\n *\n * Options for tag names and metric names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n *\n * getAltSegmentsSelectables() also returns list of tags for segment with index=0. Once a tag is selected the editor\n * enters tag-adding mode (see SeriesSection and GraphiteQueryModel.seriesByTagUsed).\n */\nexport function MetricSegment({ metricIndex, segment, state }: Props) {\n  const dispatch = useDispatch();\n  const loadOptions = useCallback(\n    (value: string | undefined) => {\n      return getAltSegmentsSelectables(state, metricIndex, value || '');\n    },\n    [state, metricIndex]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 200, { leading: true }), [loadOptions]);\n\n  const onSegmentChanged = useCallback(\n    (selectableValue: SelectableValue<GraphiteSegment | string>) => {\n      // selectableValue.value is always defined because emptyValues are not allowed in SegmentAsync by default\n      dispatch(actions.segmentValueChanged({ segment: selectableValue.value!, index: metricIndex }));\n    },\n    [dispatch, metricIndex]\n  );\n\n  // segmentValueChanged action will destroy SegmentAsync immediately if a tag is selected. To give time\n  // for the clean up the action is debounced.\n  const onSegmentChangedDebounced = useMemo(() => debounce(onSegmentChanged, 100), [onSegmentChanged]);\n\n  return (\n    <SegmentAsync<GraphiteSegment | string>\n      value={segment.value}\n      inputMinWidth={150}\n      allowCustomValue={true}\n      loadOptions={debouncedLoadOptions}\n      reloadOptionsOnChange={true}\n      onChange={onSegmentChangedDebounced}\n    />\n  );\n}\n","import React from 'react';\nimport { GraphiteSegment } from '../types';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { MetricSegment } from './MetricSegment';\n\ntype Props = {\n  segments: GraphiteSegment[];\n  state: GraphiteQueryEditorState;\n};\n\nexport function MetricsSection({ segments = [], state }: Props) {\n  return (\n    <>\n      {segments.map((segment, index) => {\n        return <MetricSegment segment={segment} metricIndex={index} key={index} state={state} />;\n      })}\n    </>\n  );\n}\n","import React from 'react';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { TagsSection } from './TagsSection';\nimport { MetricsSection } from './MetricsSection';\nimport { SegmentSection } from '@grafana/ui';\n\ntype Props = {\n  state: GraphiteQueryEditorState;\n};\n\nexport function SeriesSection({ state }: Props) {\n  const sectionContent = state.queryModel?.seriesByTagUsed ? (\n    <TagsSection tags={state.queryModel?.tags} state={state} />\n  ) : (\n    <MetricsSection segments={state.segments} state={state} />\n  );\n\n  return (\n    <SegmentSection label=\"Series\" fill={true}>\n      {sectionContent}\n    </SegmentSection>\n  );\n}\n","import React from 'react';\nimport { Segment, SegmentInput, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport type EditableParam = {\n  name: string;\n  value: string;\n  optional: boolean;\n  multiple: boolean;\n  options: Array<SelectableValue<string>>;\n};\n\ntype FieldEditorProps = {\n  editableParam: EditableParam;\n  onChange: (value: string) => void;\n  onExpandedChange: (expanded: boolean) => void;\n  autofocus: boolean;\n};\n\n/**\n * Render a function parameter with a segment dropdown for multiple options or simple input.\n */\nexport function FunctionParamEditor({ editableParam, onChange, onExpandedChange, autofocus }: FieldEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  if (editableParam.options?.length > 0) {\n    return (\n      <Segment\n        autofocus={autofocus}\n        value={editableParam.value}\n        inputPlaceholder={editableParam.name}\n        className={styles.segment}\n        options={editableParam.options}\n        placeholder={' +' + editableParam.name}\n        onChange={(value) => {\n          onChange(value.value || '');\n        }}\n        onExpandedChange={onExpandedChange}\n        inputMinWidth={150}\n        allowCustomValue={true}\n        allowEmptyValue={true}\n      ></Segment>\n    );\n  } else {\n    return (\n      <SegmentInput\n        autofocus={autofocus}\n        className={styles.input}\n        value={editableParam.value || ''}\n        placeholder={' +' + editableParam.name}\n        inputPlaceholder={editableParam.name}\n        onChange={(value) => {\n          onChange(value.toString());\n        }}\n        onExpandedChange={onExpandedChange}\n        // input style\n        style={{ height: '25px', paddingTop: '2px', marginTop: '2px', paddingLeft: '4px', minWidth: '100px' }}\n      ></SegmentInput>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  segment: css({\n    margin: 0,\n    padding: 0,\n  }),\n  input: css`\n    margin: 0;\n    padding: 0;\n    input {\n      height: 25px;\n    },\n  `,\n});\n","import React, { Suspense } from 'react';\nimport { Icon, Tooltip } from '@grafana/ui';\nimport { FuncInstance } from '../gfunc';\n\nexport interface FunctionEditorControlsProps {\n  onMoveLeft: (func: FuncInstance) => void;\n  onMoveRight: (func: FuncInstance) => void;\n  onRemove: (func: FuncInstance) => void;\n}\n\nconst FunctionDescription = React.lazy(async () => {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return <div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} />;\n    },\n  };\n});\n\nconst FunctionHelpButton = (props: { description?: string; name: string }) => {\n  if (props.description) {\n    let tooltip = (\n      <Suspense fallback={<span>Loading description...</span>}>\n        <FunctionDescription description={props.description} />\n      </Suspense>\n    );\n    return (\n      <Tooltip content={tooltip} placement={'bottom-end'}>\n        <Icon className={props.description ? undefined : 'pointer'} name=\"question-circle\" />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Icon\n      className=\"pointer\"\n      name=\"question-circle\"\n      onClick={() => {\n        window.open(\n          'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + props.name,\n          '_blank'\n        );\n      }}\n    />\n  );\n};\n\nexport const FunctionEditorControls = (\n  props: FunctionEditorControlsProps & {\n    func: FuncInstance;\n  }\n) => {\n  const { func, onMoveLeft, onMoveRight, onRemove } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        width: '60px',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Icon name=\"arrow-left\" onClick={() => onMoveLeft(func)} />\n      <FunctionHelpButton name={func.def.name} description={func.def.description} />\n      <Icon name=\"times\" onClick={() => onRemove(func)} />\n      <Icon name=\"arrow-right\" onClick={() => onMoveRight(func)} />\n    </div>\n  );\n};\n","import React, { useRef } from 'react';\nimport { PopoverController, Popover, ClickOutsideWrapper, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { FunctionEditorControls, FunctionEditorControlsProps } from './FunctionEditorControls';\nimport { FuncInstance } from '../gfunc';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\ninterface FunctionEditorProps extends FunctionEditorControlsProps {\n  func: FuncInstance;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n    label: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.bodySmall.fontSize, // to match .gf-form-label\n      cursor: 'pointer',\n      display: 'inline-block',\n      paddingBottom: '2px',\n    }),\n  };\n};\n\nconst FunctionEditor: React.FC<FunctionEditorProps> = ({ onMoveLeft, onMoveRight, func, ...props }) => {\n  const triggerRef = useRef<HTMLSpanElement>(null);\n  const styles = useStyles2(getStyles);\n\n  const renderContent = ({ updatePopperPosition }: any) => (\n    <FunctionEditorControls\n      {...props}\n      func={func}\n      onMoveLeft={() => {\n        onMoveLeft(func);\n        updatePopperPosition();\n      }}\n      onMoveRight={() => {\n        onMoveRight(func);\n        updatePopperPosition();\n      }}\n    />\n  );\n\n  return (\n    <PopoverController content={renderContent} placement=\"top\" hideAfter={100}>\n      {(showPopper, hidePopper, popperProps) => {\n        return (\n          <>\n            {triggerRef.current && (\n              <Popover\n                {...popperProps}\n                referenceElement={triggerRef.current}\n                wrapperClassName=\"popper\"\n                className=\"popper__background\"\n                renderArrow={({ arrowProps, placement }) => (\n                  <div className=\"popper__arrow\" data-placement={placement} {...arrowProps} />\n                )}\n              />\n            )}\n            <ClickOutsideWrapper\n              onClick={() => {\n                if (popperProps.show) {\n                  hidePopper();\n                }\n              }}\n            >\n              <span ref={triggerRef} onClick={popperProps.show ? hidePopper : showPopper} className={styles.label}>\n                {func.def.unknown && (\n                  <Tooltip content={<TooltipContent />} placement=\"bottom\">\n                    <Icon data-testid=\"warning-icon\" name=\"exclamation-triangle\" size=\"xs\" className={styles.icon} />\n                  </Tooltip>\n                )}\n                {func.def.name}\n              </span>\n            </ClickOutsideWrapper>\n          </>\n        );\n      }}\n    </PopoverController>\n  );\n};\n\nconst TooltipContent = React.memo(() => {\n  return (\n    <span>\n      This function is not supported. Check your function for typos and{' '}\n      <a\n        target=\"_blank\"\n        className=\"external-link\"\n        rel=\"noreferrer noopener\"\n        href=\"https://graphite.readthedocs.io/en/latest/functions.html\"\n      >\n        read the docs\n      </a>{' '}\n      to see whether you need to upgrade your data source’s version to make this function available.\n    </span>\n  );\n});\nTooltipContent.displayName = 'FunctionEditorTooltipContent';\n\nexport { FunctionEditor };\n","import React, { useState } from 'react';\nimport { HorizontalGroup, InlineLabel, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { FuncInstance } from '../gfunc';\nimport { EditableParam, FunctionParamEditor } from './FunctionParamEditor';\nimport { actions } from '../state/actions';\nimport { FunctionEditor } from './FunctionEditor';\nimport { mapFuncInstanceToParams } from './helpers';\nimport { useDispatch } from '../state/context';\n\nexport type FunctionEditorProps = {\n  func: FuncInstance;\n};\n\n/**\n * Allows editing function params and removing/moving a function (note: editing function name is not supported)\n */\nexport function GraphiteFunctionEditor({ func }: FunctionEditorProps) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  // keep track of mouse over and isExpanded state to display buttons for adding optional/multiple params\n  // only when the user mouse over over the function editor OR any param editor is expanded.\n  const [mouseOver, setIsMouseOver] = useState(false);\n  const [expanded, setIsExpanded] = useState(false);\n\n  let params = mapFuncInstanceToParams(func);\n  params = params.filter((p: EditableParam, index: number) => {\n    // func.added is set for newly added functions - see autofocus below\n    return (index < func.def.params.length && !p.optional) || func.added || p.value || expanded || mouseOver;\n  });\n\n  return (\n    <div\n      className={cx(styles.container, { [styles.error]: func.def.unknown })}\n      onMouseOver={() => setIsMouseOver(true)}\n      onMouseLeave={() => setIsMouseOver(false)}\n    >\n      <HorizontalGroup spacing=\"none\">\n        <FunctionEditor\n          func={func}\n          onMoveLeft={() => {\n            dispatch(actions.moveFunction({ func, offset: -1 }));\n          }}\n          onMoveRight={() => {\n            dispatch(actions.moveFunction({ func, offset: 1 }));\n          }}\n          onRemove={() => {\n            dispatch(actions.removeFunction({ func }));\n          }}\n        />\n        <InlineLabel className={styles.label}>(</InlineLabel>\n        {params.map((editableParam: EditableParam, index: number) => {\n          return (\n            <React.Fragment key={index}>\n              <FunctionParamEditor\n                autofocus={index === 0 && func.added}\n                editableParam={editableParam}\n                onChange={(value) => {\n                  if (value !== '' || editableParam.optional) {\n                    dispatch(actions.updateFunctionParam({ func, index, value }));\n                  }\n                  setIsExpanded(false);\n                  setIsMouseOver(false);\n                }}\n                onExpandedChange={setIsExpanded}\n              />\n              {index !== params.length - 1 ? ',' : ''}\n            </React.Fragment>\n          );\n        })}\n        <InlineLabel className={styles.label}>)</InlineLabel>\n      </HorizontalGroup>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    backgroundColor: theme.colors.background.secondary,\n    borderRadius: theme.shape.borderRadius(),\n    marginRight: theme.spacing(0.5),\n    padding: `0 ${theme.spacing(1)}`,\n    height: `${theme.v1.spacing.formInputHeight}px`,\n  }),\n  error: css`\n    border: 1px solid ${theme.colors.error.main};\n  `,\n  label: css({\n    padding: 0,\n    margin: 0,\n  }),\n  button: css({\n    padding: theme.spacing(0.5),\n  }),\n});\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Button, Segment, useStyles2 } from '@grafana/ui';\nimport { FuncDefs } from '../gfunc';\nimport { actions } from '../state/actions';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { mapFuncDefsToSelectables } from './helpers';\nimport { useDispatch } from '../state/context';\n\ntype Props = {\n  funcDefs: FuncDefs;\n};\n\nexport function AddGraphiteFunction({ funcDefs }: Props) {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState<SelectableValue<string> | undefined>(undefined);\n  const styles = useStyles2(getStyles);\n\n  const options = useMemo(() => mapFuncDefsToSelectables(funcDefs), [funcDefs]);\n\n  // Note: actions.addFunction will add a component that will have a dropdown or input in auto-focus\n  // (the first param of the function). This auto-focus will cause onBlur() on AddGraphiteFunction's\n  // Segment component and trigger onChange once again. (why? we call onChange if the user dismissed\n  // the dropdown, see: SegmentSelect.onCloseMenu for more details). To avoid it we need to wait for\n  // the Segment to disappear first (hence useEffect) and then dispatch the action that will add new\n  // components.\n  useEffect(() => {\n    if (value?.value !== undefined) {\n      dispatch(actions.addFunction({ name: value.value }));\n      setValue(undefined);\n    }\n  }, [value, dispatch]);\n\n  return (\n    <Segment\n      Component={<Button icon=\"plus\" variant=\"secondary\" className={cx(styles.button)} aria-label=\"Add new function\" />}\n      options={options}\n      onChange={setValue}\n      inputMinWidth={150}\n    />\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import React from 'react';\nimport { FuncDefs, FuncInstance } from '../gfunc';\nimport { GraphiteFunctionEditor } from './GraphiteFunctionEditor';\nimport { AddGraphiteFunction } from './AddGraphiteFunction';\nimport { SegmentSection } from '@grafana/ui';\n\ntype Props = {\n  functions: FuncInstance[];\n  funcDefs: FuncDefs;\n};\n\nexport function FunctionsSection({ functions = [], funcDefs }: Props) {\n  return (\n    <SegmentSection label=\"Functions\" fill={true}>\n      {functions.map((func: FuncInstance, index: number) => {\n        return !func.hidden && <GraphiteFunctionEditor key={index} func={func} />;\n      })}\n      <AddGraphiteFunction funcDefs={funcDefs} />\n    </SegmentSection>\n  );\n}\n","import React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { actions } from '../state/actions';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { GraphiteQueryEditorContext, GraphiteQueryEditorProps, useDispatch, useGraphiteState } from '../state/context';\nimport { GraphiteTextEditor } from './GraphiteTextEditor';\nimport { SeriesSection } from './SeriesSection';\nimport { FunctionsSection } from './FunctionsSection';\nimport { css } from '@emotion/css';\n\nexport function GraphiteQueryEditor({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  range,\n  queries,\n}: GraphiteQueryEditorProps) {\n  return (\n    <GraphiteQueryEditorContext\n      datasource={datasource}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      query={query}\n      queries={queries}\n      range={range}\n    >\n      <GraphiteQueryEditorContent />\n    </GraphiteQueryEditorContext>\n  );\n}\n\nfunction GraphiteQueryEditorContent() {\n  const dispatch = useDispatch();\n  const state = useGraphiteState();\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.visualEditor}>\n        {state.target?.textEditor && <GraphiteTextEditor rawQuery={state.target.target} />}\n        {!state.target?.textEditor && (\n          <>\n            <SeriesSection state={state} />\n            <FunctionsSection functions={state.queryModel?.functions} funcDefs={state.funcDefs!} />\n          </>\n        )}\n      </div>\n      <Button\n        className={styles.toggleButton}\n        icon=\"pen\"\n        variant=\"secondary\"\n        aria-label=\"Toggle editor mode\"\n        onClick={() => {\n          dispatch(actions.toggleEditorMode());\n        }}\n      />\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n    `,\n    visualEditor: css`\n      flex-grow: 1;\n    `,\n    toggleButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import { GraphiteDatasource } from './datasource';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { MetricTankMetaInspector } from './components/MetricTankMetaInspector';\nimport { GraphiteQueryEditor } from './components/GraphiteQueryEditor';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(GraphiteDatasource)\n  .setQueryEditor(GraphiteQueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setMetadataInspector(MetricTankMetaInspector)\n  .setAnnotationQueryCtrl(AnnotationsQueryCtrl);\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n"],"names":["versionPattern","SemVersion","constructor","version","this","major","minor","patch","meta","match","exec","Number","isGtOrEq","compared","i","comparable","length","isValid","isNumber","isVersionGtOrEq","a","b","index","addFuncDef","funcDef","params","defaultParams","name","shortName","optionalSeriesRefArgs","type","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","options","fake","FuncInstance","def","withDefaultParams","slice","updateText","render","metricExp","replaceVariables","str","parameters","map","value","paramType","get","last","includes","valueInterpolated","isString","isFinite","toString","pop","unshift","join","_hasMultipleParamsInString","strValue","indexOf","updateParam","each","split","partVal","idx","trim","splice","text","getFuncDef","unknown","createFuncInstance","getFuncDefs","funcs","forEach","assign","filter","param","parseFuncDefs","rawDefs","funcDefs","funcName","group","description","replace","func","test","required","shift","rawParam","undefined","default","Infinity","push","suggestions","GraphiteType","toInteger","val","parseInt","toBooleanOrTimestamp","getRollupNotice","metaList","archiveIndex","parseSchemaRetentions","interval","severity","inspect","getRuntimeConsolidationNotice","runtimeNr","spec","vals","retention","chunkspan","numchunks","ready","GRAPHITE_VERSIONS","DEFAULT_GRAPHITE_VERSION","unicodeLetterTable","identifierStartTable","identifierPartTable","Lexer","expression","input","char","from","peek","charAt","skip","tokenize","list","token","next","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","pos","id","isUnicodeLetter","code","isHexDigit","readUnicodeEscapeSequence","bind","ch1","ch2","ch3","ch4","getIdentifierStart","chr","charCodeAt","getIdentifierPart","bad","isDecimalDigit","isOctalDigit","isIdentifierStart","ch","isMalformed","base","isPunctuator","quote","isUnclosed","jump","Parser","lexer","tokens","getAst","start","functionCall","metricExpression","e","message","curlyBraceSegment","curlySegment","consumeToken","errorMark","metricSegment","curly","parts","node","segments","segment","functionParameters","boolExpression","numericLiteral","seriesRefExpression","stringLiteral","concat","parseFloat","currentToken","matchToken","token1","token2","GraphiteQuery","datasource","target","templateSrv","scopedVars","parseTarget","removeTagValue","functions","tags","seriesByTagUsed","error","textEditor","astNode","parseTargetRecursive","err","console","checkOtherSegmentsIndex","getSegmentPathUpTo","arr","reduce","result","innerFunc","hidden","splitSeriesByTagParams","getSeriesByTagFuncIndex","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","addFunction","newFunc","removeFunction","without","moveFunction","offset","arrayMove","updateModelTarget","targets","wrapFunction","metricPath","updateRenderedTarget","refId","added","targetsByRefId","keyBy","nestedSeriesRefRegex","targetWithNestedQueries","t","refCount","count","countTargetRefs","updated","g1","targetFull","tagPattern","flatten","matches","tag","key","operator","findIndex","getSeriesByTagFunc","seriesByTagFuncIndex","addTag","newTagParam","renderTagString","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","compact","tagExpr","GRAPHITE_TAG_COMPARATORS","AbstractLabelOperator","GraphiteDatasource","DataSourceApi","instanceSettings","getTemplateSrv","super","data","series","isArray","s","title","y","datapoints","frame","toDataFrame","custom","requestMetaList","seriesMetaList","rollupIndicatorEnabled","rollupNotice","runtimeNotice","notices","stats","getRequestStats","basicAuth","url","jsonData","metricMappings","importConfiguration","loki","mappings","isMetricTank","graphiteType","Metrictank","supportsTags","cacheTimeout","withCredentials","funcDefsPromise","_seriesRefLetters","getQueryOptionsInfo","maxDataPoints","links","getImportQueryConfiguration","queries","query","exportToAbstractQuery","graphiteQuery","GraphiteQueryModel","labels","config","targetNodes","mapping","matchers","every","matcher","labelName","converted","labelMatchers","graphOptions","translateTime","range","raw","timezone","until","to","format","buildGraphiteParams","of","httpOptions","method","headers","addTracingHeaders","panelId","requestId","doGraphiteRequest","pipe","convertResponseToDataFrames","dashboardId","unit","endsWith","displayName","parseTags","tagString","interpolateVariablesInQueries","expandedQueries","getRef","annotationQuery","annotation","lastValueFrom","time","fields","values","events","then","results","when","what","Promise","reject","targetContainsTemplate","variableExists","date","roundUp","substring","dateMath","add","subtract","unix","metricFindQuery","optionalOptions","interpolatedQuery","getSearchFilterScopedVar","wildcardChar","allParams","expressions","p","limit","getTagValuesAutoComplete","getTagsAutoComplete","useExpand","requestMetricExpand","requestMetricFind","_map","metric","expandable","getTags","getTagValues","tagPrefix","expr","mapToTags","valuePrefix","getVersion","catchError","gfunc","waitForFuncDefsLoaded","resolve","status","fixedData","JSON","parse","testDatasource","rangeRaw","Authorization","getBackendSrv","fetch","throwError","startsWith","newMessage","reduceError","graphiteOptions","cleanOptions","targetValue","regex","intervalFormatFixRegex","hasTargets","fixIntervalFormat","nestedSeriesRegexReplacer","hide","encodeURIComponent","MappingsHelp","props","Alert","onRemove","onDismiss","MappingsConfiguration","setMappings","useState","className","showHelp","Button","variant","onClick","onRestoreHelp","InlineFieldRow","InlineField","label","Input","width","onChange","changeEvent","newMappings","onBlur","placeholder","size","_","Icon","icon","fromString","metricNode","Select","Switch","LegacyForms","SHOW_MAPPINGS_HELP_KEY","graphiteVersions","graphiteTypes","Object","entries","ConfigEditor","PureComponent","href","rel","state","showMappingsHelp","store","componentDidMount","updateDatasourcePluginJsonDataOption","currentGraphiteVersion","onOptionsChange","currentVersion","find","item","access","DataSourceHttpSettings","defaultUrl","dataSourceConfig","InlineFormLabel","tooltip","menuShouldPortal","onUpdateDatasourceJsonDataOptionSelect","renderTypeHelp","labelClass","checked","onUpdateDatasourceJsonDataOptionChecked","setState","MetricTankMetaInspector","renderMeta","styles","getStyles","buckets","normFunc","totalSeconds","acc","bucket","rangeUtil","metaItem","metaItemHeader","metaItemBody","step","stepHeading","stepDescription","lengthPercent","isActive","bucketInterval","cx","bucketRetention","bucketRetentionActive","style","flexGrow","seriesMetas","stringify","keys","stylesFactory","theme","borderColor","isDark","palette","gray25","gray85","background","dark1","white","headerBg","gray15","css","spacing","md","xs","typography","sm","colors","textWeak","lg","border","radius","blue85","blue95","greenBase","greenShade","init","createAction","timeRangeChanged","queriesChanged","queryChanged","segmentValueChanged","addNewTag","actions","tagChanged","unpause","updateFunctionParam","updateQuery","runQuery","toggleEditorMode","GRAPHITE_TAG_OPERATORS","TAG_PREFIX","async","queryModel","buildSegments","modifyLastSegment","clone","checkOtherSegments","fromIndex","path","handleMetricsAutoCompleteError","emptySegments","handleTargetChanged","oldTarget","paused","refresh","metricAutoCompleteErrorShown","dispatch","notifyApp","createErrorNotification","handleTagsAutoCompleteError","tagsAutoCompleteErrorShown","reducer","action","deps","payload","segmentOrString","segmentIndex","pause","tagParam","addSeriesByTagFunc","spliceSegments","newTag","smartlyHandleNewAliasByNode","DispatchContext","createContext","GraphiteStateContext","useDispatch","useContext","GraphiteQueryEditorContext","onRunQuery","children","needsRefresh","setNeedsRefresh","useMemo","createStore","previousRange","usePrevious","useEffect","Provider","GraphiteTextEditor","rawQuery","useCallback","QueryField","portalOrigin","mapStringsToSelectables","mapSegmentsToSelectables","createEditableParam","paramDef","additional","option","MAX_SUGGESTIONS","getAltSegments","prefix","altSegments","eachRight","getVariables","variable","remove","removeTaggedEntry","tagSegments","getTagsAsSegments","addAltTagSegments","getTagsSelectables","tagExpressions","altTags","tagsAsSegments","getTagValuesSelectables","tagKey","altValues","TagEditor","getTagsOptions","inputValue","debouncedGetTagsOptions","debounce","leading","getTagValueOptions","debouncedGetTagValueOptions","SegmentAsync","inputMinWidth","loadOptions","reloadOptionsOnChange","allowCustomValue","Segment","PlayButton","TagsSection","useStyles2","getTagsAsSegmentsOptions","getTagsAsSegmentsSelectables","debouncedGetTagsAsSegments","Component","button","MetricSegment","metricIndex","getAltSegmentsSelectables","debouncedLoadOptions","onSegmentChanged","selectableValue","onSegmentChangedDebounced","MetricsSection","SeriesSection","sectionContent","SegmentSection","fill","FunctionParamEditor","editableParam","onExpandedChange","autofocus","inputPlaceholder","allowEmptyValue","SegmentInput","height","paddingTop","marginTop","paddingLeft","minWidth","margin","padding","FunctionDescription","React","rst2html","dangerouslySetInnerHTML","__html","FunctionHelpButton","Suspense","fallback","Tooltip","content","placement","window","open","FunctionEditorControls","onMoveLeft","onMoveRight","display","justifyContent","fontWeight","fontWeightMedium","fontSize","bodySmall","cursor","paddingBottom","FunctionEditor","triggerRef","useRef","PopoverController","updatePopperPosition","hideAfter","showPopper","hidePopper","popperProps","current","Popover","referenceElement","wrapperClassName","renderArrow","arrowProps","ClickOutsideWrapper","show","ref","TooltipContent","GraphiteFunctionEditor","mouseOver","setIsMouseOver","expanded","setIsExpanded","mapFuncInstanceToParams","container","onMouseOver","onMouseLeave","HorizontalGroup","InlineLabel","backgroundColor","secondary","borderRadius","shape","marginRight","v1","formInputHeight","main","AddGraphiteFunction","setValue","categories","sortBy","mapFuncDefsToSelectables","FunctionsSection","GraphiteQueryEditorContent","visualEditor","toggleButton","AnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","setMetadataInspector","setAnnotationQueryCtrl"],"sourceRoot":""}