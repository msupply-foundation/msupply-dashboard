{"version":3,"file":"AlertingAdmin.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form } from '@grafana/ui';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from './state/actions';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from './utils/redux';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function Admin(): JSX.Element {\n  const dispatch = useDispatch();\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const { result: config, loading: isLoadingConfig, error: loadingError } =\n    (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e.message;\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </AlertingPageWrapper>\n  );\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","Admin","dispatch","useDispatch","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","isVanillaPrometheusAlertManagerDataSource","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","configJSON","JSON","stringify","pageId","current","onChange","Alert","severity","title","message","GRAFANA_RULES_SOURCE_NAME","Form","onSubmit","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","Field","disabled","label","invalid","TextArea","required","value","validate","v","e","id","rows","HorizontalGroup","Button","type","variant","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","AlertingPageWrapper","children","isLoading","navModel","getNavModel","useSelector","navIndex","isAlertManagerSource","getAlertManagerDataSources","find","ds","name","queryParams","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","undefined","storeSource"],"sourceRoot":""}