{"version":3,"file":"ServiceAccountsPage.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/state/selectors.ts","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx"],"sourcesContent":["import { ServiceAccountsState } from 'app/types';\n\nexport const getServiceAccounts = (state: ServiceAccountsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.serviceAccounts.filter((serviceaccount) => {\n    return regex.test(serviceaccount.login) || regex.test(serviceaccount.email) || regex.test(serviceaccount.name);\n  });\n};\n\nexport const getServiceAccountsSearchQuery = (state: ServiceAccountsState) => state.searchQuery;\nexport const getServiceAccountsSearchPage = (state: ServiceAccountsState) => state.searchPage;\n","import React, { memo, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useStyles2 } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState, ServiceAccountDTO } from 'app/types';\nimport { loadServiceAccounts, removeServiceAccount, updateServiceAccount } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getServiceAccounts, getServiceAccountsSearchPage, getServiceAccountsSearchQuery } from './state/selectors';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaTheme2 } from '@grafana/data';\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n    serviceAccounts: getServiceAccounts(state.serviceAccounts),\n    searchQuery: getServiceAccountsSearchQuery(state.serviceAccounts),\n    searchPage: getServiceAccountsSearchPage(state.serviceAccounts),\n    isLoading: state.serviceAccounts.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadServiceAccounts,\n  updateServiceAccount,\n  removeServiceAccount,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst ServiceAccountsListPage: React.FC<Props> = ({ loadServiceAccounts, navModel, serviceAccounts, isLoading }) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    loadServiceAccounts();\n  }, [loadServiceAccounts]);\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {isLoading ? (\n          <PageLoader />\n        ) : (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table form-inline filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Account</th>\n                    <th>ID</th>\n                    <th>Roles</th>\n                    <th>Tokens</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {serviceAccounts.map((serviceaccount: ServiceAccountDTO) => (\n                    <ServiceAccountListItem serviceaccount={serviceaccount} key={serviceaccount.userId} />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\ntype ServiceAccountListItemProps = {\n  serviceaccount: ServiceAccountDTO;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = memo(({ serviceaccount }: ServiceAccountListItemProps) => {\n  const editUrl = `org/serviceaccounts/${serviceaccount.userId}`;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <tr key={serviceaccount.userId}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceaccount.name)}>\n          <img\n            className=\"filter-table__avatar\"\n            src={serviceaccount.avatarUrl}\n            alt={`Avatar for user ${serviceaccount.name}`}\n          />\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a\n          className=\"ellipsis\"\n          href={editUrl}\n          title={serviceaccount.login}\n          aria-label={getServiceAccountsAriaLabel(serviceaccount.name)}\n        >\n          {serviceaccount.login}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a\n          className=\"ellipsis\"\n          href={editUrl}\n          title={serviceaccount.name}\n          aria-label={getServiceAccountsAriaLabel(serviceaccount.name)}\n        >\n          {serviceaccount.name}\n        </a>\n      </td>\n      <td className={cx('link-td', styles.iconRow)}>\n        <a\n          className=\"ellipsis\"\n          href={editUrl}\n          title={serviceaccount.name}\n          aria-label={getServiceAccountsAriaLabel(serviceaccount.name)}\n        >\n          {serviceaccount.role === 'None' ? (\n            <span className={styles.disabled}>Not assigned </span>\n          ) : (\n            serviceaccount.role\n          )}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a\n          className=\"ellipsis\"\n          href={editUrl}\n          title=\"tokens\"\n          aria-label={getServiceAccountsAriaLabel(serviceaccount.name)}\n        >\n          0\n        </a>\n      </td>\n    </tr>\n  );\n});\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n  };\n};\n\nexport default connector(ServiceAccountsListPage);\n"],"names":["getServiceAccounts","state","regex","RegExp","searchQuery","serviceAccounts","filter","serviceaccount","test","login","email","name","getServiceAccountsSearchQuery","getServiceAccountsSearchPage","searchPage","mapDispatchToProps","loadServiceAccounts","updateServiceAccount","removeServiceAccount","connector","connect","navModel","getNavModel","navIndex","isLoading","getServiceAccountsAriaLabel","ServiceAccountListItem","memo","editUrl","userId","styles","useStyles2","getStyles","className","href","src","avatarUrl","alt","title","cx","iconRow","role","disabled","displayName","theme","table","css","spacing","row","unitTooltip","unitItem","colors","text","link","useEffect","Page","PageLoader","map"],"sourceRoot":""}