{"version":3,"file":"NewDataSourcePage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Card/Card.tsx","webpack://grafana/./public/app/features/datasources/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/plugins/state/selectors.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from '@emotion/css';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div className=\"add-data-source-item-badge\">{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React, { FC, PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List, PluginSignatureBadge, FilterInput } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/PluginsErrorsInfo';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={(item) => item.id.toString()}\n        renderItem={(item) => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map((category) => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\" fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n              Cancel\n            </LinkButton>\n          </div>\n          {!searchQuery && <PluginsErrorsInfo />}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = (props) => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom && !plugin.unlicensed ? props.onClick : () => {};\n  // find first plugin info link\n  const learnMoreLink = plugin.info?.links?.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button disabled={plugin.unlicensed}>Select</Button>}\n        </>\n      }\n      labels={!isPhantom && <PluginSignatureBadge status={plugin.signature} />}\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nexport default connector(NewDataSourcePage);\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst mapStateToProps = (state: StoreState) => ({\n  errors: getAllPluginsErrors(state.plugins),\n});\n\nconst mapDispatchToProps = {\n  loadPluginsErrors,\n};\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PluginsErrorsInfoProps = ConnectedProps<typeof connector> & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(e) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nexport const PluginsErrorsInfo = connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected);\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter((item) => {\n    return (\n      regex.test(item.name) ||\n      regex.test(item.info.author.name) ||\n      regex.test(item.type) ||\n      regex.test(item.info.description)\n    );\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"names":["Card","logoUrl","title","description","labels","actions","onClick","ariaLabel","className","mainClassName","cx","src","mapDispatchToProps","addDataSource","loadDataSourcePlugins","setDataSourceTypeSearchQuery","connector","connect","state","navModel","getNavModel","plugins","getDataSourcePlugins","dataSources","searchQuery","dataSourceTypeSearchQuery","categories","isLoading","isLoadingDataSources","NewDataSourcePage","PureComponent","plugin","this","props","value","evt","stopPropagation","componentDidMount","renderPlugins","length","List","items","getItemKey","item","id","toString","renderItem","DataSourceTypeCard","onDataSourceTypeClicked","onLearnMoreClick","renderCategories","map","category","LinkButton","variant","href","target","rel","render","Page","FilterInput","onChange","onSearchQueryChange","placeholder","fill","icon","PluginsErrorsInfo","isPhantom","module","unlicensed","learnMoreLink","info","links","name","selectors","logos","small","url","Button","disabled","PluginSignatureBadge","status","signature","main","text","subTitle","node","mapStateToProps","errors","getAllPluginsErrors","loadPluginsErrors","children","theme","useTheme","loading","useAsync","async","loadPlugins","InfoBox","severity","urlTitle","css","e","spacing","sm","HorizontalGroup","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","PluginSignatureStatus","getPlugins","regex","RegExp","filter","test","author","type","getPluginsSearchQuery"],"sourceRoot":""}