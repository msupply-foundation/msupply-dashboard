{"version":3,"file":"AlertRuleListIndex.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/components/UnifiedAlertingPromotion.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditCloudGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { useLocalStorage } from 'react-use';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst UnifiedAlertingPromotion: FC<{}> = () => {\n  const [showUnifiedAlertingPromotion, setShowUnifiedAlertingPromotion] = useLocalStorage<boolean>(\n    LOCAL_STORAGE_KEY,\n    true\n  );\n\n  if (!showUnifiedAlertingPromotion) {\n    return null;\n  }\n\n  return (\n    <Alert\n      severity=\"info\"\n      title=\"Try out the Grafana 8 alerting!\"\n      onRemove={() => setShowUnifiedAlertingPromotion(false)}\n    >\n      <p>\n        You are using the legacy Grafana alerting.\n        <br />\n        While we have no plans of deprecating it any time soon, we invite you to give the improved Grafana 8 alerting a\n        try.\n      </p>\n      <p>\n        See{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n          What’s New with Grafana 8 alerting\n        </a>{' '}\n        to learn more about what&lsquo;s new in Grafana 8 alerting or learn{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n          how to enable the new Grafana 8 alerting feature\n        </a>\n        .\n      </p>\n    </Alert>\n  );\n};\n\nexport { UnifiedAlertingPromotion };\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\nimport { UnifiedAlertingPromotion } from './components/UnifiedAlertingPromotion';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  menuShouldPortal\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <UnifiedAlertingPromotion />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { CallToActionCard } from '@grafana/ui';\n\nexport const NoRulesSplash: FC = () => {\n  if (contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.ruleType && filters.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\n\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Groups',\n    value: 'group',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString, ruleType } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const clearDataSource = () => {\n    setQueryParams({ dataSource: null });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    setQueryParams({ ruleType });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n      ruleType: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputWidth}>\n        <Label>Search by data source</Label>\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          placeholder=\"All data sources\"\n          current={dataSource}\n          onChange={handleDataSourceChange}\n          onClear={clearDataSource}\n        />\n      </div>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <div className={styles.rowChild}>\n            <Label>\n              <Tooltip\n                content={\n                  <div>\n                    Filter rules and alerts using label querying, ex:\n                    <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" className={styles.tooltip} />\n              </Tooltip>\n              Search by label\n            </Label>\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>Rule type</Label>\n            <RadioButtonGroup\n              options={RuleTypeOptions}\n              value={ruleType as PromRuleType}\n              onChange={handleRuleTypeChange}\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] || 'group')}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString || ruleType) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      border-bottom: 1px solid ${theme.colors.border1};\n      padding-bottom: ${theme.spacing.sm};\n\n      & > div {\n        margin-bottom: ${theme.spacing.sm};\n      }\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n      margin-top: ${theme.spacing.sm};\n    `,\n    tooltip: css`\n      margin: 0 ${theme.spacing.xs};\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo } from 'react';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { durationValidationPattern } from '../../utils/time';\nimport { css } from '@emotion/css';\nimport { useDispatch } from 'react-redux';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: Props): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty } }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', {\n                  pattern: durationValidationPattern,\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button variant=\"secondary\" type=\"button\" disabled={loading} onClick={onClose} fill=\"outline\">\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n","import { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useState, useEffect } from 'react';\nimport { HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { ActionIcon } from './ActionIcon';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { RuleStats } from './RuleStats';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll }) => {\n  const { rulesSource } = namespace;\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"edit folder\"\n            key=\"edit\"\n            icon=\"pen\"\n            tooltip=\"edit folder\"\n            to={baseUrl + '/settings'}\n            target=\"__blank\"\n          />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (hasRuler(rulesSource)) {\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"edit rule group\"\n        data-testid=\"edit-group\"\n        key=\"edit\"\n        icon=\"pen\"\n        tooltip=\"edit rule group\"\n        onClick={() => setIsEditingGroup(true)}\n      />\n    );\n  }\n\n  const groupName = isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>{groupName}</h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal group={group} namespace={namespace} onClose={() => setIsEditingGroup(false)} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport pluralize from 'pluralize';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(\n    () => rulesDataSources.filter((ds) => rules[ds.name]?.loading),\n    [rules, rulesDataSources]\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespaces?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ))\n      )}\n      {namespaces?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useState } from 'react';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [promRequestErrors, rulerRequestErrors] = [promRuleRequests, rulerRuleRequests].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [promRuleRequests, rulerRuleRequests]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n","import { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2, LinkButton, withErrorBoundary, Button } from '@grafana/ui';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { css } from '@emotion/css';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useLocation } from 'react-router-dom';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { RuleStats } from './components/rules/RuleStats';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { getFiltersFromUrlParams } from './utils/misc';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const filters = getFiltersFromUrlParams(queryParams);\n    const filtersActive = Object.values(filters).some((filter) => filter !== undefined);\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        <RuleListErrors />\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && filtersActive && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              </div>\n              {(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useMemo } from 'react';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n    </>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n  const iconEl = (\n    <Icon\n      role=\"button\"\n      className={cx(useStyles(getStyle), className)}\n      onClick={onClick}\n      name={icon}\n      {...rest}\n      aria-label={ariaLabel}\n    />\n  );\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <GoTo url={to} label={ariaLabel} target={target}>\n          {iconEl}\n        </GoTo>\n      ) : (\n        iconEl\n      )}\n    </Tooltip>\n  );\n};\n\ninterface GoToProps {\n  url: string;\n  label?: string;\n  target?: string;\n}\n\nconst GoTo: FC<GoToProps> = ({ url, label, target, children }) => {\n  const absoluteUrl = url?.startsWith('http');\n\n  return absoluteUrl ? (\n    <a aria-label={label} href={url} target={target}>\n      {children}\n    </a>\n  ) : (\n    <Link aria-label={label} to={url} target={target}>\n      {children}\n    </Link>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { CombinedRule } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    promRule,\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances promRule={promRule} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { RuleDetails } from './RuleDetails';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { Annotation } from '../../utils/constants';\nimport { RuleState } from './RuleState';\nimport { RuleHealth } from './RuleHealth';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          const { rulesSource } = namespace;\n          return isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n","import { RulesSource } from 'app/types/unified-alerting';\nimport { useCallback } from 'react';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler(): (rulesSource: string | RulesSource) => boolean {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n  return useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","rule","search","onTogglePause","ruleUrl","url","panelId","renderText","useCallback","text","highlightClassName","textToHighlight","searchWords","Card","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","LinkButton","href","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","VerticalGroup","spacing","src","alt","UnifiedAlertingPromotion","showUnifiedAlertingPromotion","setShowUnifiedAlertingPromotion","useLocalStorage","Alert","severity","onRemove","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","navModel","getNavModel","navIndex","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","locationService","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Page","FilterInput","placeholder","onChange","onSearchQueryChange","htmlFor","Select","inputId","menuShouldPortal","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","async","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","data","AppEvents","error","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","NoRulesSplash","contextSrv","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","CallToActionCard","message","callToActionElement","reduceNamespaces","filters","namespaceAcc","namespace","groups","reduce","reduceGroups","length","push","groupAcc","group","ruleType","promRule","type","dataSource","isGrafanaRulerRule","rulerRule","isQueryingDataSource","queryString","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","PromRuleType","alerts","some","alert","alertState","isAlertingRule","grafana_alert","find","query","datasourceUid","ds","getDataSourceSrv","getInstanceSettings","ViewOptions","RuleTypeOptions","getStyles","theme","container","css","colors","border1","sm","inputWidth","flexRow","spaceBetween","rowChild","tooltip","xs","clearButton","setQueryParams","useQueryParams","filterKey","setFilterKey","useState","Math","floor","random","dataSourceKey","queryStringKey","getFiltersFromUrlParams","styles","useStyles","stateOptions","Object","entries","PromAlertingRuleState","key","alertStateToReadable","handleQueryStringChange","debounce","e","target","searchIcon","Label","DataSourcePicker","alerting","noDefault","dataSourceValue","onClear","cx","Tooltip","content","Input","prefix","defaultValue","RadioButtonGroup","String","view","fullWidth","setTimeout","StateColoredText","children","status","useStyles2","success","warning","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","useMemo","stats","calcRule","health","isRecordingRule","isRecordingRulerRule","forEach","statsComponents","pluralize","prev","curr","idx","Fragment","EditCloudGroupModal","onClose","loading","dispatched","useUnifiedAlertingSelector","updateLotexNamespaceAndGroup","initialAsyncRequestState","defaultValues","namespaceName","groupName","groupInterval","interval","unifiedAlerting","modal","Form","onSubmit","values","updateLotexNamespaceAndGroupAction","rulesSourceName","getRulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","register","errors","formState","isDirty","Field","invalid","required","pattern","durationValidationPattern","disabled","fill","JSON","stringify","RulesGroup","React","expandAll","isEditingGroup","setIsEditingGroup","isCollapsed","setIsCollapsed","hasRuler","useHasRuler","folderUID","namespace_uid","folder","useFolder","actionIcons","HorizontalGroup","Spinner","GRAFANA_RULES_SOURCE_NAME","baseUrl","kbn","canSave","ActionIcon","A","to","canAdmin","isCloudRulesSource","wrapper","header","CollapseToggle","collapseToggle","onToggle","placement","meta","dataSourceIcon","logos","small","heading","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","displayName","background","breakpoints","down","dataSourceOrigin","CloudRules","promRules","rulesDataSources","getRulesDataSources","dataSourcesLoading","sectionHeader","LoadingPlaceholder","loader","xl","GrafanaRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","showGroupColumn","RuleListErrors","expanded","setExpanded","closed","setClosed","promRuleRequests","rulerRuleRequests","rulerRules","promRequestErrors","rulerRequestErrors","requests","result","isRulerNotSupportedResponse","grafanaPromError","grafanaRulerError","uid","ErrorSummaryButton","count","moreButton","floatRight","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","ns","isGrafanaRulesSource","groupedRules","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","useLocation","setExpandAll","filtersActive","ViewComponent","fetchAllPromAndRulerRulesAction","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","haveResults","keys","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","statsContainer","expandAllButton","urlUtil","returnTo","pathname","style","border","medium","useSelector","DynamicTableWithGuidelines","renderExpandedContent","index","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","tooltipPlacement","rest","ariaLabel","iconEl","role","getStyle","GoTo","startsWith","Link","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","up","emptyMessage","wrapperClass","wrapperMargin","seenKeys","ruleIdx","columns","renderCell","isDeleting","isCreating","RuleState","RuleHealth","Annotation","useColumns","TableComponent","DynamicTable","cols","isExpandable","shape","borderRadius"],"sourceRoot":""}