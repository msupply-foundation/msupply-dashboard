{"version":3,"file":"ApiKeysPage.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/api-keys/state/selectors.ts","webpack://grafana/./public/app/features/api-keys/state/actions.ts","webpack://grafana/./public/app/features/api-keys/ApiKeysAddedModal.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysForm.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysActionBar.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysTable.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysController.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysPage.tsx"],"sourcesContent":["import { ApiKeysState } from 'app/types';\n\nexport const getApiKeysCount = (state: ApiKeysState) =>\n  state.includeExpired ? state.keysIncludingExpired.length : state.keys.length;\n\nexport const getApiKeys = (state: ApiKeysState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n  const keysToFilter = state.includeExpired ? state.keysIncludingExpired : state.keys;\n\n  return keysToFilter.filter((key) => {\n    return regex.test(key.name) || regex.test(key.role);\n  });\n};\n\nexport const getIncludeExpired = (state: ApiKeysState) => state.includeExpired;\n\nexport const getIncludeExpiredDisabled = (state: ApiKeysState) =>\n  state.keys.length === 0 && state.keysIncludingExpired.length > 0;\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport { ApiKey, ThunkResult } from 'app/types';\nimport { apiKeysLoaded, includeExpiredToggled, isFetching, setSearchQuery } from './reducers';\n\nexport function addApiKey(apiKey: ApiKey, openModal: (key: string) => void): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([\n      getBackendSrv().get('/api/auth/keys?includeExpired=false'),\n      getBackendSrv().get('/api/auth/keys?includeExpired=true'),\n    ]);\n    dispatch(apiKeysLoaded({ keys, keysIncludingExpired }));\n  };\n}\n\nexport function deleteApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys()));\n  };\n}\n\nexport function toggleIncludeExpired(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(includeExpiredToggled());\n  };\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Alert, Field, Modal, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport interface Props {\n  onDismiss: () => void;\n  apiKey: string;\n  rootPath: string;\n}\n\nexport function ApiKeysAddedModal({ onDismiss, apiKey, rootPath }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  return (\n    <Modal title=\"API Key Created\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <Field label=\"Key\">\n        <span className={styles.label}>{apiKey}</span>\n      </Field>\n\n      <Alert severity=\"info\" title=\"You will only be able to view this key here once!\">\n        It is not stored in this form, so be sure to copy it now.\n      </Alert>\n\n      <p className=\"text-muted\">You can authenticate a request using the Authorization HTTP header, example:</p>\n      <pre className={styles.small}>\n        curl -H &quot;Authorization: Bearer {apiKey}&quot; {rootPath}/api/dashboards/home\n      </pre>\n    </Modal>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    label: css`\n      padding: ${theme.spacing(1)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    small: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.bodySmall.fontWeight};\n    `,\n  };\n}\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from 'react';\nimport { EventsWithValidation, LegacyForms, ValidationEvents, Button, Select, InlineField } from '@grafana/ui';\nimport { NewApiKey, OrgRole } from '../../types';\nimport { rangeUtil, SelectableValue } from '@grafana/data';\nimport { SlideDown } from '../../core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nconst { Input } = LegacyForms;\nconst ROLE_OPTIONS: Array<SelectableValue<OrgRole>> = Object.keys(OrgRole).map((role) => ({\n  label: role,\n  value: role as OrgRole,\n}));\n\ninterface Props {\n  show: boolean;\n  onClose: () => void;\n  onKeyAdded: (apiKey: NewApiKey) => void;\n}\n\nfunction isValidInterval(value: string): boolean {\n  if (!value) {\n    return true;\n  }\n  try {\n    rangeUtil.intervalToSeconds(value);\n    return true;\n  } catch {}\n  return false;\n}\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: isValidInterval,\n      errorMessage: 'Not a valid duration',\n    },\n  ],\n};\n\nconst tooltipText =\n  'The API key life duration. For example, 1d if your key is going to last for one day. Supported units are: s,m,h,d,w,M,y';\n\nexport const ApiKeysForm: FC<Props> = ({ show, onClose, onKeyAdded }) => {\n  const [name, setName] = useState<string>('');\n  const [role, setRole] = useState<OrgRole>(OrgRole.Viewer);\n  const [secondsToLive, setSecondsToLive] = useState<string>('');\n  useEffect(() => {\n    setName('');\n    setRole(OrgRole.Viewer);\n    setSecondsToLive('');\n  }, [show]);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (isValidInterval(secondsToLive)) {\n      onKeyAdded({ name, role, secondsToLive });\n      onClose();\n    }\n  };\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  };\n  const onRoleChange = (role: SelectableValue<OrgRole>) => {\n    setRole(role.value!);\n  };\n  const onSecondsToLiveChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSecondsToLive(event.currentTarget.value);\n  };\n\n  return (\n    <SlideDown in={show}>\n      <div className=\"gf-form-inline cta-form\">\n        <CloseButton onClick={onClose} />\n        <form className=\"gf-form-group\" onSubmit={onSubmit}>\n          <h5>Add API Key</h5>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-21\">\n              <span className=\"gf-form-label\">Key name</span>\n              <Input type=\"text\" className=\"gf-form-input\" value={name} placeholder=\"Name\" onChange={onNameChange} />\n            </div>\n            <div className=\"gf-form\">\n              <InlineField label=\"Role\">\n                <Select\n                  inputId=\"role-select\"\n                  value={role}\n                  onChange={onRoleChange}\n                  options={ROLE_OPTIONS}\n                  menuShouldPortal\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form max-width-21\">\n              <InlineField tooltip={tooltipText} label=\"Time to live\">\n                <Input\n                  id=\"time-to-live-input\"\n                  type=\"text\"\n                  placeholder=\"1d\"\n                  validationEvents={timeRangeValidationEvents}\n                  value={secondsToLive}\n                  onChange={onSecondsToLiveChange}\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form\">\n              <Button>Add</Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </SlideDown>\n  );\n};\n","import React, { FC } from 'react';\nimport { Button, FilterInput } from '@grafana/ui';\n\ninterface Props {\n  searchQuery: string;\n  disabled: boolean;\n  onAddClick: () => void;\n  onSearchChange: (value: string) => void;\n}\n\nexport const ApiKeysActionBar: FC<Props> = ({ searchQuery, disabled, onAddClick, onSearchChange }) => {\n  return (\n    <div className=\"page-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput placeholder=\"Search keys\" value={searchQuery} onChange={onSearchChange} />\n      </div>\n      <Button className=\"pull-right\" onClick={onAddClick} disabled={disabled}>\n        Add API key\n      </Button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { DeleteButton, Icon, IconName, Tooltip, useTheme2 } from '@grafana/ui';\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\n\nimport { ApiKey } from '../../types';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  apiKeys: ApiKey[];\n  timeZone: TimeZone;\n  onDelete: (apiKey: ApiKey) => void;\n}\n\nexport const ApiKeysTable: FC<Props> = ({ apiKeys, timeZone, onDelete }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className=\"filter-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Expires</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      {apiKeys.length > 0 ? (\n        <tbody>\n          {apiKeys.map((key) => {\n            const isExpired = Boolean(key.expiration && Date.now() > new Date(key.expiration).getTime());\n            return (\n              <tr key={key.id} className={styles.tableRow(isExpired)}>\n                <td>{key.name}</td>\n                <td>{key.role}</td>\n                <td>\n                  {formatDate(key.expiration, timeZone)}\n                  {isExpired && (\n                    <span className={styles.tooltipContainer}>\n                      <Tooltip content=\"This API key has expired.\">\n                        <Icon name={'exclamation-triangle' as IconName} />\n                      </Tooltip>\n                    </span>\n                  )}\n                </td>\n                <td>\n                  <DeleteButton aria-label=\"Delete API key\" size=\"sm\" onConfirm={() => onDelete(key)} />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      ) : null}\n    </table>\n  );\n};\n\nfunction formatDate(expiration: string | undefined, timeZone: TimeZone): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (isExpired: boolean) => css`\n    color: ${isExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { FC, useCallback, useState } from 'react';\n\ninterface Api {\n  isAdding: boolean;\n  toggleIsAdding: () => void;\n}\n\ninterface Props {\n  children: (props: Api) => JSX.Element;\n}\n\nexport const ApiKeysController: FC<Props> = ({ children }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const toggleIsAdding = useCallback(() => {\n    setIsAdding(!isAdding);\n  }, [isAdding]);\n\n  return children({ isAdding, toggleIsAdding });\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n// Utils\nimport { ApiKey, NewApiKey, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getApiKeys, getApiKeysCount, getIncludeExpired, getIncludeExpiredDisabled } from './state/selectors';\nimport { addApiKey, deleteApiKey, loadApiKeys, toggleIncludeExpired } from './state/actions';\nimport Page from 'app/core/components/Page/Page';\nimport { ApiKeysAddedModal } from './ApiKeysAddedModal';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { InlineField, InlineSwitch, VerticalGroup } from '@grafana/ui';\nimport { rangeUtil } from '@grafana/data';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { setSearchQuery } from './state/reducers';\nimport { ApiKeysForm } from './ApiKeysForm';\nimport { ApiKeysActionBar } from './ApiKeysActionBar';\nimport { ApiKeysTable } from './ApiKeysTable';\nimport { ApiKeysController } from './ApiKeysController';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'apikeys'),\n    apiKeys: getApiKeys(state.apiKeys),\n    searchQuery: state.apiKeys.searchQuery,\n    apiKeysCount: getApiKeysCount(state.apiKeys),\n    hasFetched: state.apiKeys.hasFetched,\n    timeZone: getTimeZone(state.user),\n    includeExpired: getIncludeExpired(state.apiKeys),\n    includeExpiredDisabled: getIncludeExpiredDisabled(state.apiKeys),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadApiKeys,\n  deleteApiKey,\n  setSearchQuery,\n  toggleIncludeExpired,\n  addApiKey,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  isAdding: boolean;\n}\n\nexport class ApiKeysPageUnconnected extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.fetchApiKeys();\n  }\n\n  async fetchApiKeys() {\n    await this.props.loadApiKeys();\n  }\n\n  onDeleteApiKey = (key: ApiKey) => {\n    this.props.deleteApiKey(key.id!);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onIncludeExpiredChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.toggleIncludeExpired();\n  };\n\n  onAddApiKey = (newApiKey: NewApiKey) => {\n    const openModal = (apiKey: string) => {\n      const rootPath = window.location.origin + config.appSubUrl;\n\n      appEvents.publish(\n        new ShowModalReactEvent({\n          props: {\n            apiKey,\n            rootPath,\n          },\n          component: ApiKeysAddedModal,\n        })\n      );\n    };\n\n    const secondsToLive = newApiKey.secondsToLive;\n    try {\n      const secondsToLiveAsNumber = secondsToLive ? rangeUtil.intervalToSeconds(secondsToLive) : null;\n      const apiKey: ApiKey = {\n        ...newApiKey,\n        secondsToLive: secondsToLiveAsNumber,\n      };\n      this.props.addApiKey(apiKey, openModal);\n      this.setState((prevState: State) => {\n        return {\n          ...prevState,\n          isAdding: false,\n        };\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      apiKeysCount,\n      apiKeys,\n      searchQuery,\n      timeZone,\n      includeExpired,\n      includeExpiredDisabled,\n    } = this.props;\n\n    if (!hasFetched) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>{}</Page.Contents>\n        </Page>\n      );\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={false}>\n          <ApiKeysController>\n            {({ isAdding, toggleIsAdding }) => {\n              const showCTA = !isAdding && apiKeysCount === 0;\n              const showTable = apiKeysCount > 0;\n              return (\n                <>\n                  {showCTA ? (\n                    <EmptyListCTA\n                      title=\"You haven't added any API keys yet.\"\n                      buttonIcon=\"key-skeleton-alt\"\n                      onClick={toggleIsAdding}\n                      buttonTitle=\"New API key\"\n                      proTip=\"Remember, you can provide view-only API access to other applications.\"\n                    />\n                  ) : null}\n                  {showTable ? (\n                    <ApiKeysActionBar\n                      searchQuery={searchQuery}\n                      disabled={isAdding}\n                      onAddClick={toggleIsAdding}\n                      onSearchChange={this.onSearchQueryChange}\n                    />\n                  ) : null}\n                  <ApiKeysForm show={isAdding} onClose={toggleIsAdding} onKeyAdded={this.onAddApiKey} />\n                  {showTable ? (\n                    <VerticalGroup>\n                      <InlineField disabled={includeExpiredDisabled} label=\"Include expired keys\">\n                        <InlineSwitch id=\"showExpired\" value={includeExpired} onChange={this.onIncludeExpiredChange} />\n                      </InlineField>\n                      <ApiKeysTable apiKeys={apiKeys} timeZone={timeZone} onDelete={this.onDeleteApiKey} />\n                    </VerticalGroup>\n                  ) : null}\n                </>\n              );\n            }}\n          </ApiKeysController>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst ApiKeysPage = connector(ApiKeysPageUnconnected);\nexport default ApiKeysPage;\n"],"names":["getApiKeysCount","state","includeExpired","keysIncludingExpired","length","keys","getApiKeys","regex","RegExp","searchQuery","filter","key","test","name","role","getIncludeExpired","getIncludeExpiredDisabled","loadApiKeys","async","dispatch","isFetching","Promise","all","getBackendSrv","get","apiKeysLoaded","ApiKeysAddedModal","onDismiss","apiKey","rootPath","styles","useStyles2","getStyles","Modal","title","onClickBackdrop","isOpen","Field","label","className","Alert","severity","small","theme","css","spacing","colors","background","secondary","shape","borderRadius","typography","bodySmall","fontSize","fontWeight","Input","LegacyForms","ROLE_OPTIONS","Object","OrgRole","map","value","isValidInterval","rangeUtil","timeRangeValidationEvents","EventsWithValidation","rule","errorMessage","ApiKeysForm","show","onClose","onKeyAdded","setName","useState","setRole","secondsToLive","setSecondsToLive","useEffect","SlideDown","in","CloseButton","onClick","onSubmit","event","preventDefault","type","placeholder","onChange","currentTarget","InlineField","Select","inputId","options","menuShouldPortal","tooltip","id","validationEvents","Button","ApiKeysActionBar","disabled","onAddClick","onSearchChange","FilterInput","ApiKeysTable","apiKeys","timeZone","onDelete","useTheme2","style","width","isExpired","Boolean","expiration","Date","now","getTime","tableRow","formatDate","tooltipContainer","Tooltip","content","Icon","DeleteButton","size","onConfirm","dateTimeFormat","text","primary","ApiKeysController","children","isAdding","setIsAdding","toggleIsAdding","useCallback","mapDispatchToProps","deleteApiKey","delete","then","setSearchQuery","toggleIncludeExpired","includeExpiredToggled","addApiKey","openModal","result","post","connector","connect","navModel","getNavModel","navIndex","apiKeysCount","hasFetched","getTimeZone","user","includeExpiredDisabled","ApiKeysPageUnconnected","PureComponent","constructor","props","super","this","newApiKey","window","location","origin","config","appEvents","ShowModalReactEvent","component","secondsToLiveAsNumber","setState","prevState","err","console","error","componentDidMount","fetchApiKeys","render","Page","isLoading","showCTA","showTable","EmptyListCTA","buttonIcon","buttonTitle","proTip","onSearchQueryChange","onAddApiKey","VerticalGroup","InlineSwitch","onIncludeExpiredChange","onDeleteApiKey"],"sourceRoot":""}