{"version":3,"file":"DashboardImport.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/connectWithCleanUp.tsx","webpack://grafana/./public/app/features/manage-dashboards/utils/validation.ts","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack://grafana/./public/app/features/manage-dashboards/DashboardImportPage.tsx"],"sourcesContent":["import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, [dispatch]);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n","import validationSrv from '../services/ValidationSrv';\nimport { getBackendSrv } from '@grafana/runtime';\n\nexport const validateDashboardJson = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com ID';\n};\n\nexport const validateTitle = (newTitle: string, folderId: number) => {\n  return validationSrv\n    .validateNewDashboardName(folderId, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch((error) => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then((existingDashboard) => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same UID`;\n    })\n    .catch((error) => {\n      error.isHandled = true;\n      return true;\n    });\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormAPI,\n  FormsOnSubmit,\n  HorizontalGroup,\n  FormFieldErrors,\n  Input,\n  Field,\n  InputControl,\n  Legend,\n} from '@grafana/ui';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { DashboardInput, DashboardInputs, DataSourceInput, ImportDashboardDTO } from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props extends Pick<FormAPI<ImportDashboardDTO>, 'register' | 'errors' | 'control' | 'getValues' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderId: number;\n\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm: FC<Props> = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues(), {} as any);\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          {...register('title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.id),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <FolderPicker {...field} enableCreateNew initialFolderId={initialFolderId} />\n          )}\n          name=\"folder\"\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (UID)\"\n        description=\"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              disabled\n              {...register('uid', { validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input {...register('uid', { required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          const dataSourceOption = `dataSources[${index}]`;\n          const current = watchDataSources ?? [];\n          return (\n            <Field\n              label={input.label}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <InputControl\n                name={dataSourceOption as any}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={current[index]?.name}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input {...register(constantIndex as any, { required: true })} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <HorizontalGroup>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import React, { PureComponent } from 'react';\nimport { dateTimeFormat } from '@grafana/data';\nimport { Legend, Form } from '@grafana/ui';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ImportDashboardForm } from './ImportDashboardForm';\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardSource, ImportDashboardDTO } from '../state/reducers';\nimport { StoreState } from 'app/types';\nimport { locationService } from '@grafana/runtime';\n\nconst mapStateToProps = (state: StoreState) => {\n  const searchObj = locationService.getSearchObject();\n\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderId ? { id: Number(searchObj.folderId) } : { id: 0 },\n  };\n};\n\nconst mapDispatchToProps = {\n  clearLoadedDashboard,\n  importDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    this.props.importDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <div style={{ marginBottom: '24px' }}>\n            <div>\n              <Legend>\n                Importing dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, watch, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              watch={watch}\n              initialFolderId={folder.id}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nexport const ImportDashboardOverview = connector(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import React, { FormEvent, PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { AppEvents, GrafanaTheme2, NavModel } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, stylesFactory, withTheme2, Input, TextArea, Field, Form, FileUpload, Themeable2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\nimport { fetchGcomDashboard, importDashboardJson } from './state/actions';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps extends Themeable2 {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  isLoaded: boolean;\n}\n\ninterface DispatchProps {\n  fetchGcomDashboard: typeof fetchGcomDashboard;\n  importDashboardJson: typeof importDashboardJson;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass UnthemedDashboardImport extends PureComponent<Props> {\n  onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    const { importDashboardJson } = this.props;\n    const file = event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      const readerOnLoad = () => {\n        return (e: any) => {\n          let dashboard: any;\n          try {\n            dashboard = JSON.parse(e.target.result);\n          } catch (error) {\n            appEvents.emit(AppEvents.alertError, [\n              'Import failed',\n              'JSON -> JS Serialization failed: ' + error.message,\n            ]);\n            return;\n          }\n          importDashboardJson(dashboard);\n        };\n      };\n      reader.onload = readerOnLoad();\n      reader.readAsText(file);\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    this.props.importDashboardJson(JSON.parse(formData.dashboardJson));\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles(this.props.theme);\n\n    return (\n      <>\n        <div className={styles.option}>\n          <FileUpload accept=\"application/json\" onFileUpload={this.onFileUpload}>\n            Upload JSON file\n          </FileUpload>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field\n                label=\"Import via grafana.com\"\n                invalid={!!errors.gcomDashboard}\n                error={errors.gcomDashboard && errors.gcomDashboard.message}\n              >\n                <Input\n                  id=\"url-input\"\n                  placeholder=\"Grafana.com dashboard URL or ID\"\n                  type=\"text\"\n                  {...register('gcomDashboard', {\n                    required: 'A Grafana dashboard URL or ID is required',\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={<Button type=\"submit\">Load</Button>}\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Import via panel json\"\n                  invalid={!!errors.dashboardJson}\n                  error={errors.dashboardJson && errors.dashboardJson.message}\n                >\n                  <TextArea\n                    {...register('dashboardJson', {\n                      required: 'Need a dashboard JSON model',\n                      validate: validateDashboardJson,\n                    })}\n                    data-testid={selectors.components.DashboardImportPage.textarea}\n                    id=\"dashboard-json-textarea\"\n                    rows={10}\n                  />\n                </Field>\n                <Button type=\"submit\" data-testid={selectors.components.DashboardImportPage.submit}>\n                  Load\n                </Button>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { isLoaded, navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>{isLoaded ? <ImportDashboardOverview /> : this.renderImportForm()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst DashboardImportUnConnected = withTheme2(UnthemedDashboardImport);\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'import', undefined, true),\n  isLoaded: state.importDashboard.isLoaded,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, Props> = {\n  fetchGcomDashboard,\n  importDashboardJson,\n};\n\nexport const DashboardImportPage = connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => state.importDashboard\n)(DashboardImportUnConnected);\n\nexport default DashboardImportPage;\n\nDashboardImportPage.displayName = 'DashboardImport';\n\nconst importStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    option: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n  };\n});\n"],"names":["connectWithCleanUp","mapStateToProps","mapDispatchToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","props","dispatch","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics","validateDashboardJson","json","JSON","parse","error","validateGcomDashboard","gcomDashboard","match","exec","validateUid","value","getBackendSrv","get","then","existingDashboard","dashboard","title","meta","folderTitle","catch","isHandled","ImportDashboardForm","register","errors","control","getValues","uidReset","inputs","initialFolderId","onUidReset","onCancel","onSubmit","watch","isSubmitted","setSubmitted","useState","watchDataSources","uid","Legend","Field","label","invalid","message","Input","required","validate","async","await","newTitle","v","folderId","folder","id","validationSrv","type","selectors","InputControl","render","field","FolderPicker","enableCreateNew","name","description","disabled","addonAfter","Button","onClick","dataSources","map","input","index","dataSourceOption","current","DataSourcePicker","noDefault","placeholder","info","pluginId","rules","constants","constantIndex","defaultValue","HorizontalGroup","variant","getButtonVariant","getButtonText","clearLoadedDashboard","importDashboard","connector","state","searchObj","locationService","source","Number","ImportDashboardOverviewUnConnected","PureComponent","form","this","setState","DashboardSource","style","marginBottom","href","gnetId","className","target","rel","orgName","dateTimeFormat","updatedAt","Form","defaultValues","validateOnMount","validateFieldsOnMount","validateOn","ImportDashboardOverview","UnthemedDashboardImport","event","importDashboardJson","file","currentTarget","files","length","reader","FileReader","readerOnLoad","e","result","appEvents","AppEvents","onload","readAsText","formData","dashboardJson","dashboardId","fetchGcomDashboard","renderImportForm","styles","importStyles","theme","option","FileUpload","accept","onFileUpload","getGcomDashboard","getDashboardFromJson","TextArea","rows","isLoaded","navModel","Page","DashboardImportUnConnected","withTheme2","DashboardImportPage","getNavModel","navIndex","undefined","stylesFactory","css","spacing"],"sourceRoot":""}