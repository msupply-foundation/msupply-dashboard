{"version":3,"file":"UserInvitePage.e65e3aa10981aa98e7a1.js","mappings":"wxBAkBA,MAAMA,EAAQ,CACZ,CAAEC,MAAO,SAAUC,MAAOC,EAAAA,GAAAA,QAC1B,CAAEF,MAAO,SAAUC,MAAOC,EAAAA,GAAAA,QAC1B,CAAEF,MAAO,QAASC,MAAOC,EAAAA,GAAAA,QAGrBC,EAAWC,MAAAA,SCnBeA,OAAAA,IAC9B,UACQC,EAAAA,EAAAA,iBAAgBC,KAAK,mBAAoBC,GAC/C,MAAOC,GACPC,EAAAA,GAAAA,KAAeC,EAAAA,UAAAA,WAAsB,CAAC,6BAA8BF,EAAIG,YDgBpEC,CAAiBL,GACvBM,EAAAA,gBAAAA,KAAqB,gBAyDvB,EA9C8B,KAC5B,MAAMC,EAA2B,CAC/BC,KAAM,GACNC,MAAO,GACPC,KAAMf,EAAAA,GAAAA,OACNgB,WAAW,GAGb,OACE,SAAC,EAAAC,KAAD,CAAML,cAAeA,EAAeX,SAAUA,EAA9C,SACG,IAAmC,IAAlC,SAAEiB,EAAF,QAAYC,EAAZ,OAAqBC,GAAa,EAClC,OACE,iCACE,SAAC,EAAAC,MAAD,CACEC,UAAWF,EAAOG,aAClBC,MAASJ,EAAOG,aAAe,qCAAkCE,EACjE3B,MAAM,oBAHR,UAKE,SAAC,EAAA4B,MAAD,iBAAWR,EAAS,eAAgB,CAAES,UAAU,IAAhD,CAAyDC,YAAY,0BAEvE,SAAC,EAAAP,MAAD,CAAOC,UAAWF,EAAOP,KAAMf,MAAM,OAArC,UACE,SAAC,EAAA4B,MAAD,iBAAWR,EAAS,QAApB,CAA6BU,YAAY,mBAE3C,SAAC,EAAAP,MAAD,CAAOC,UAAWF,EAAOL,KAAMjB,MAAM,OAArC,UACE,SAAC,EAAA+B,aAAD,CACEC,OAAQ,YAAoBC,E,oIAApB,GAAGA,MAAH,UAAkC,SAAC,EAAAC,iBAAD,iBAAsBD,EAAtB,CAA6BE,QAASpC,MAChFsB,QAASA,EACTN,KAAK,YAGT,SAAC,EAAAQ,MAAD,CAAOvB,MAAM,oBAAb,UACE,SAAC,EAAAoC,OAAD,eAAQC,GAAG,qBAAwBjB,EAAS,kBAE9C,UAAC,EAAAkB,gBAAD,kBACE,SAAC,EAAAC,OAAD,CAAQC,KAAK,SAAb,sBACA,SAAC,EAAAC,WAAD,CAAYC,KAAMC,EAAAA,aAAAA,eAA2BC,EAAAA,EAAAA,MAAYC,UAAY,cAAeC,QAAQ,YAA5F,4B,yGE3DP,MAAMC,EAA4B,IAAkB,IAAjB,SAAEC,GAAe,EACzD,OACE,SAACC,EAAA,EAAD,CAAMD,SAAUA,EAAhB,UACE,UAACC,EAAA,WAAD,kBACE,eAAIC,UAAU,mBAAd,2BACA,iBAAKA,UAAU,QAAf,+EAEE,kBAAMA,UAAU,iBAAhB,cAAmCC,EAAAA,GAAAA,KAAAA,cAJvC,OAME,SAAC,EAAD,WAUR,GAAeC,EAAAA,EAAAA,UAJUC,IAAD,CACtBL,UAAUM,EAAAA,EAAAA,GAAYD,EAAME,SAAU,YAGxC,CAAwCR","sources":["webpack://grafana/./public/app/features/org/UserInviteForm.tsx","webpack://grafana/./public/app/features/org/api.ts","webpack://grafana/./public/app/features/org/UserInvitePage.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  HorizontalGroup,\n  Button,\n  LinkButton,\n  Input,\n  Switch,\n  RadioButtonGroup,\n  Form,\n  Field,\n  InputControl,\n} from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { OrgRole } from 'app/types';\nimport { locationService } from '@grafana/runtime';\nimport { locationUtil } from '@grafana/data';\nimport { userInviteSubmit } from './api';\n\nconst roles = [\n  { label: 'Viewer', value: OrgRole.Viewer },\n  { label: 'Editor', value: OrgRole.Editor },\n  { label: 'Admin', value: OrgRole.Admin },\n];\n\nconst onSubmit = async (formData: FormModel) => {\n  await userInviteSubmit(formData);\n  locationService.push('/org/users/');\n};\n\nexport interface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\nexport const UserInviteForm = () => {\n  const defaultValues: FormModel = {\n    name: '',\n    email: '',\n    role: OrgRole.Editor,\n    sendEmail: true,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <Field\n              invalid={!!errors.loginOrEmail}\n              error={!!errors.loginOrEmail ? 'Email or username is required' : undefined}\n              label=\"Email or username\"\n            >\n              <Input {...register('loginOrEmail', { required: true })} placeholder=\"email@example.com\" />\n            </Field>\n            <Field invalid={!!errors.name} label=\"Name\">\n              <Input {...register('name')} placeholder=\"(optional)\" />\n            </Field>\n            <Field invalid={!!errors.role} label=\"Role\">\n              <InputControl\n                render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={roles} />}\n                control={control}\n                name=\"role\"\n              />\n            </Field>\n            <Field label=\"Send invite email\">\n              <Switch id=\"send-email-switch\" {...register('sendEmail')} />\n            </Field>\n            <HorizontalGroup>\n              <Button type=\"submit\">Submit</Button>\n              <LinkButton href={locationUtil.assureBaseUrl(getConfig().appSubUrl + '/org/users')} variant=\"secondary\">\n                Back\n              </LinkButton>\n            </HorizontalGroup>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserInviteForm;\n","import { getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { FormModel } from './UserInviteForm';\nimport { AppEvents } from '@grafana/data';\n\nexport const userInviteSubmit = async (formData: FormModel) => {\n  try {\n    await getBackendSrv().post('/api/org/invites', formData);\n  } catch (err) {\n    appEvents.emit(AppEvents.alertError, ['Failed to send invitation.', err.message]);\n  }\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport UserInviteForm from './UserInviteForm';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\nimport Page from 'app/core/components/Page/Page';\nimport { NavModel } from '@grafana/data';\n\ninterface Props {\n  navModel: NavModel;\n}\n\nexport const UserInvitePage: FC<Props> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Invite user</h3>\n        <div className=\"p-b-2\">\n          Send invitation or add existing Grafana user to the organization.\n          <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n        </div>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'users'),\n});\n\nexport default connect(mapStateToProps)(UserInvitePage);\n"],"names":["roles","label","value","OrgRole","onSubmit","async","getBackendSrv","post","formData","err","appEvents","AppEvents","message","userInviteSubmit","locationService","defaultValues","name","email","role","sendEmail","Form","register","control","errors","Field","invalid","loginOrEmail","error","undefined","Input","required","placeholder","InputControl","render","field","RadioButtonGroup","options","Switch","id","HorizontalGroup","Button","type","LinkButton","href","locationUtil","getConfig","appSubUrl","variant","UserInvitePage","navModel","Page","className","contextSrv","connect","state","getNavModel","navIndex"],"sourceRoot":""}