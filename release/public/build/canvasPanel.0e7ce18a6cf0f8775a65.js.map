{"version":3,"file":"canvasPanel.0e7ce18a6cf0f8775a65.js","mappings":"ojBAoBO,MAAMA,EAAoDC,EAAAA,MAC/D,EAAGC,GAAAA,EAAIC,MAAAA,EAAOC,SAAAA,EAAUC,UAAAA,EAAWC,cAAAA,EAAeC,YAAAA,EAAaC,UAAAA,EAAWC,WAAAA,EAAYC,SAAAA,GAAW,MAAY,QAC3G,MAAMC,GAAsC,IAAlBL,GAEnBM,EAAYC,IAAiBC,EAAAA,EAAAA,GAAgBC,EAAyBb,GAAK,CAChFc,WAAYL,KAIPK,EAAYC,IAAiBC,EAAAA,EAAAA,UAAQ,UAACN,MAAAA,OAAD,EAACA,EAAYI,kBAAb,QAA2BL,GACjEQ,GAASC,EAAAA,EAAAA,YAAWC,IAE1BC,EAAAA,EAAAA,YAAU,MACHN,GAAcX,GAAaA,EAAY,GAC1CY,GAAc,KAEf,CAACZ,EAAWW,IAEf,MAAMO,GAAWC,EAAAA,EAAAA,cAAY,KAC3BX,EAAc,CAAEG,YAAaA,IAC7BC,GAAeD,KACd,CAACH,EAAeI,EAAeD,IAE7BT,IACHA,EAAc,SAAsBS,GAClC,OAAIA,QAA6BS,IAAfhB,GAA2C,IAAfA,EACrCN,EAGT,OACE,4BACGA,EADH,KACU,SAAC,EAAAuB,QAAD,CAASC,MAAOlB,UAMhC,MAAMmB,GAAYC,EAAAA,EAAAA,IAChB,CACE,CAACV,EAAOW,MAAM,EACd,CAACX,EAAOY,mBAAoBrB,GAAYM,GAE1CR,EACA,iBAGIwB,GAAeH,EAAAA,EAAAA,IAAGV,EAAOc,OAAQ,CACrC,CAACd,EAAOe,gBAAiBlB,EACzB,CAACG,EAAOgB,cAAezB,IAGnB0B,GAAaP,EAAAA,EAAAA,IAAGV,EAAOkB,KAAM,CACjC,CAAClB,EAAOmB,YAAa5B,IAGvB,OACE,iBACEF,UAAWoB,EACX,cAAY,mBACZ,aAAYW,EAAAA,GAAAA,WAAAA,aAAAA,MAAwCrC,GAHtD,WAKE,iBAAKM,UAAWwB,EAAcQ,QAASjB,EAAU,aAAYgB,EAAAA,GAAAA,WAAAA,aAAAA,OAAyCrC,GAAtG,WACE,gBAAKM,WAAWqB,EAAAA,EAAAA,IAAGV,EAAOsB,OAAQ,+BAAlC,UACE,SAAC,EAAAC,KAAD,CAAMC,KAAM3B,EAAa,aAAe,mBAE1C,gBAAKR,UAAWW,EAAOhB,MAAOyC,KAAK,UAAnC,SACGrC,EAAYS,QAGhBA,IAAc,gBAAKR,UAAW4B,EAAhB,SAA6BhC,UAM9CiB,EAAawB,IACV,CACLf,IAAKgB,EAAAA,GAAI;8BACiBD,EAAME,OAAOC,OAAOC;MAE9ClB,kBAAmBe,EAAAA,GAAI;uBACJD,EAAMK,QAAQ;MAEjCT,OAAQK,EAAAA,GAAI;eACDD,EAAME,OAAOI,KAAKC;sBACXP,EAAMK,QAAQ;MAEhC/C,MAAO2C,EAAAA,GAAI;;;MAIXb,OAAQa,EAAAA,GAAI;;;;iBAICD,EAAMK,QAAQ;eAChBL,EAAME,OAAOI,KAAKE;qBACZR,EAAMS,WAAWC;;;sBAGhBV,EAAME,OAAOS,UAAUX,EAAME,OAAOU,WAAWJ,QAAS;;MAG1EnB,eAAgBY,EAAAA,GAAI;eACTD,EAAME,OAAOI,KAAKE;MAE7BlB,aAAcW,EAAAA,GAAI;iBACLD,EAAMK,QAAQ,GAAK,EAAG,GAAK;MAExCb,KAAMS,EAAAA,GAAI;iBACGD,EAAMK,QAAQ,EAAG,EAAG,EAAG;MAEpCZ,WAAYQ,EAAAA,GAAI;;;;;;;;;;sBAUED,EAAME,OAAOC,OAAOC;;QAMpClC,EAA4Bb,GAAwB,GAAEwD,EAAAA,kBAAiDxD,M,sZCjItG,MAAMyD,EAKXC,YAAmBC,GAA2C,eAJzB,IAIyB,oBAHhB,IAGgB,6BAA3CA,MAAAA,EAEnBC,QAAQC,GAGN,OAFAA,EAAKC,OAASC,KACdA,KAAKC,MAAMC,KAAKJ,GACTE,KAGTG,YAAYC,GAIV,OAHAA,EAASR,MAAMnD,UAAW,EAC1B2D,EAASL,OAASC,KAClBA,KAAKK,WAAWH,KAAKE,GACdJ,KAGTM,OAAOC,GACL,OAAIP,KAAKJ,MAAMY,aACNR,KAAKJ,MAAMY,gBAIlB,UAAC,IAAD,iBAAgDR,KAAKJ,MAArD,WACGI,KAAKC,MAAMQ,KAAKX,GAASA,EAAKQ,WAC9BN,KAAKK,WAAWI,KAAKL,GAAaA,EAASE,cAFpBN,KAAKJ,MAAM1D,U,uWC1BpC,MAAMwE,EAGXf,YAAmBC,G,iBAA6B,G,EAAA,Y,EAAA,M,sFAAA,KAA7BA,MAAAA,EAEnBe,SAASJ,GACP,MAAM,MAAErE,EAAF,YAAS0E,GAAgBZ,KAAKJ,MAEpC,IAAKW,EAEH,OAAIP,KAAKD,OAAOH,MAAM1D,QAAUA,EACvB,KAGFA,EAGT,MAAMmE,EAAgC,GAUtC,OARIL,KAAKD,OAAOA,QACdM,EAAWH,KAAKF,KAAKa,cAAcb,KAAKD,OAAOA,OAAOH,MAAM1D,MAAOqE,IAGjEP,KAAKD,OAAOH,MAAM1D,QAAUA,GAC9BmE,EAAWH,KAAKF,KAAKa,cAAcb,KAAKD,OAAOH,MAAM1D,MAAOqE,KAI5D,SAAC,EAAAO,MAAD,CAAOF,YAAaA,GAAeZ,KAAKa,cAAcD,EAAaL,GAAcH,SAAUC,EAA3F,SACGL,KAAKa,cAAc3E,EAAOqE,KAKjCM,cAAcE,EAAcC,GAC1B,OACE,SAAC,IAAD,CAAaC,gBAAiBF,EAAMG,YAAa,CAACF,GAAQG,mBAAoB,8BAIlFb,OAAOC,GACL,MAAM,MAAErE,EAAF,YAAS0E,EAAT,OAAsBN,EAAtB,OAA8Bc,EAA9B,UAAsCC,GAAcrB,KAAKJ,MACzD0B,EAAO,GAAEtB,KAAKD,OAAOH,MAAM3D,MAAMC,IAEvC,OAAIkF,IAAWA,IACN,KAGLC,EACKf,KAIP,SAAC,EAAAiB,MAAD,CACEC,MAAOxB,KAAKW,SAASJ,GACrBK,YAAaA,EAEb,aAAYtC,EAAAA,GAAAA,WAAAA,YAAAA,YAAAA,WAAwDgD,GAJtE,SAMGhB,KAHIgB,M,8iBChEN,SAASG,EAAwB7B,GACtC,MAAM,OAAE8B,EAAF,MAAUC,EAAV,sBAAiBC,EAAjB,qBAAwCC,EAAxC,KAA8DC,EAA9D,UAAoEC,GAAcnC,EAClFoC,EAAiBL,EAAMM,aACvBC,EAAqBP,EAAMQ,YAC3BC,EAA+D,GAE/DC,EAAsC,CAC1CP,MAAMA,MAAAA,OAAA,EAAAA,EAAMQ,SAAU,GACtBC,iBAAkBZ,EAAMY,iBACxBC,QAASR,EACTS,SAAUV,EAAUW,OACpBC,eAAiBC,GACRd,GAAOe,EAAAA,EAAAA,IAAgCf,EAAKQ,OAAQM,GAAS,IAIlEE,EAA0BC,IAA4D,MAC1F,MAAMC,EAAY,QAAI,EAAAD,GAAiBA,EAAc,UAAnC,QAA2C,GAAErB,EAAOuB,KAAKvE,OACrE0B,EAAWgC,EAAcY,GAE/B,OAAI5C,IAIIgC,EAAcY,GAAgB,IAAItD,EAAAA,EAA8B,CACtExD,MAAO8G,EACP/G,GAAI+G,MAKRE,EACExB,EAAOyB,cAAcC,OACrBN,GACA,CAACO,EAAc3F,KACb,MAAM4F,GAAaC,EAAAA,EAAAA,IAAmBlB,EAAQG,QAASa,EAAM3F,GAC7DkE,EAAsB0B,KAExBjB,GAMF,IAAK,MAAMmB,KAAe9B,EAAO+B,oBAAoBL,OAAQ,CAC3D,GACEI,EAAYE,UACZF,EAAYpC,SACXoC,EAAYpC,OAAOc,EAAmByB,SAASC,OAAQ9B,MAAAA,OAAvD,EAAuDA,EAAMQ,QAE9D,SAGF,GAAIkB,EAAYK,iBACd,SAGF,MAAMzD,EAAW0C,EAAuBU,EAAYpD,UAC9C0D,EAASN,EAAYO,OAErBJ,EAAWzB,EAAmByB,SAC9BjG,EAAQ8F,EAAYE,SACtBC,EAASC,QACPI,EAAAA,EAAAA,KAAUL,EAASC,OAAQJ,EAAYH,WACvC7F,GACFwG,EAAAA,EAAAA,KAAUL,EAAUH,EAAYH,MAEhCG,EAAYS,gBACd7D,EAASR,MAAMpD,WAAagH,EAAYS,cAAcvG,IAGxD0C,EAASP,QACP,IAAIa,EAAAA,EAA0B,CAC5BxE,MAAOsH,EAAY9E,KACnBkC,YAAa4C,EAAY5C,YACzBN,OAAQ,WAON,OAAO,SAACwD,EAAD,CAAQpG,MAAOA,EAAOwG,SANXC,IAChBtC,GACEuC,EAAAA,EAAAA,IAA8BlC,EAAoBsB,EAAYH,KAAMc,EAAGX,EAAYE,YAItC5D,KAAM0D,EAAanB,QAASA,QAMrF,OAAOgC,OAAOC,OAAOlC,GAQhB,SAASc,EACdC,EACAL,EACAyB,EACAlC,GAEA,IAAK,MAAMmC,KAAgBrB,EAAe,CACxC,GAAIqB,EAAapD,SAAWoD,EAAapD,OAAOiB,EAAQG,QAASH,EAAQP,MACvE,SAGF,MAAM1B,EAAW0C,EAAuB0B,EAAapE,UAC/C0D,EAASU,EAAaT,OAI5B3D,EAASP,QACP,IAAIa,EAAAA,EAA0B,CAC5BxE,MAAOsI,EAAa9F,KACpBkC,YAAa4D,EAAa5D,YAC1BN,OAAQ,WACN,OACE,SAACwD,EAAD,CACEpG,OAAOsG,EAAAA,EAAAA,KAAU3B,EAAQG,QAASgC,EAAanB,MAC/Ca,SAAWxG,IACT6G,EAAeC,EAAanB,KAAM3F,IAEpCoC,KAAM0E,EACNnC,QAASA,W,iRCjIhB,SAASoC,EAAmBC,EAAmBC,EAAeC,EAAgBjD,GACnF,GAAI+C,IAASG,EAAAA,GAAAA,KACX,MAAO,CAAEF,MAAAA,EAAOC,OAAAA,GAElB,MAIME,GADYC,OAAOC,WAFJ,GAEoD,EAApBC,EAAAA,IAAyBC,EAAAA,GACpDvD,EAAMwD,QAAQC,EAClCC,EAAUC,EAAAA,GAAmB3D,EAAMwD,QAAQI,EAL5B,GAMfC,EAAQC,KAAKC,IAAIf,EAAQG,EAAQF,EAASS,GAEhD,OAAIP,GAAUH,GAASU,GAAWT,EACzB,CACLD,MAAOG,EACPF,OAAQS,GAIL,CACLV,MAAOG,EAASU,EAChBZ,OAAQS,EAAUG,GAIf,SAASG,EAAkBjE,GAChC,OAAsC,KAA/BA,MAAAA,OAAA,EAAAA,EAAQuB,KAAK2C,eAGf,MAAMxB,EAAgC,CAC3CyB,EACAnH,EACAhB,EACAgG,KAEA,IAAIC,EAAW,OAAH,UAAQkC,EAAOlC,UAC3B,MAAMmC,EAAkB,MAATpI,GAA2B,KAAVA,EAkBhC,OAhBIgG,EACEC,EAASC,OAETD,EAASC,OADPkC,GACgBC,EAAAA,EAAAA,MAAKpC,EAASC,OAAQlF,GAEtB6E,EAAmBI,EAASC,OAAQlF,EAAMhB,GAEpDoI,IACVnC,EAASC,OAASL,EAAmBI,EAASC,OAAQlF,EAAMhB,IAG9DiG,EADSmC,GACEC,EAAAA,EAAAA,MAAKpC,EAAUjF,GAEf6E,EAAmBI,EAAUjF,EAAMhB,GAGhD,iBACKmI,EADL,CAEElC,SAAAA,KAIG,SAASJ,EAAqCf,EAAYa,EAAyB3F,GACxF,MAAMsI,EAASC,MAAMC,QAAQ7C,GAA0BA,EAAlBA,EAAK8C,MAAM,KAE1C7E,EAAM0E,EAAMI,QAClB,GAAI9E,EAAI+E,SAAS,KAAM,CACrB,MAAMC,EAAMhF,EAAIiF,YAAY,KACtBC,GAASlF,EAAImF,UAAUH,EAAM,EAAGhF,EAAIoF,OAAS,GAC7CC,EAAUrF,EAAIsF,OAAO,EAAGN,GAC9B,IAAIO,EAAWrE,EAAgCmE,GAC/C,MAAMG,EAAMb,MAAMC,QAAQW,GAAW,IAAIA,GAAW,GASpD,OARIb,EAAMU,SACRG,EAAUC,EAAIN,GACC,MAAXK,GAAsC,iBAAZA,IAC5BA,EAAU,IAEZnJ,EAAQ6F,EAAmBsD,EAASb,EAAOtI,IAE7CoJ,EAAIN,GAAS9I,EACb,iBAAY8E,EAAZ,CAAqB,CAACmE,GAAUG,IAGlC,IAAKd,EAAMU,OACT,wBAAYlE,EAAZ,CAAqB,CAAClB,GAAM5D,IAG9B,IAAImJ,EAAWrE,EAAgClB,GAM/C,OAJe,MAAXuF,GAAsC,iBAAZA,IAC5BA,EAAU,IAGZ,iBAAYrE,EAAZ,CAAqB,CAAClB,GAAMiC,EAAmBsD,EAASb,EAAOtI,O,qdC9E1D,IAAKqJ,G,SAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,QAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA,K,mPCWZ,MAAMC,EAAqBnI,EAAAA,GAAI;;;;EA6BxB,MAAMoI,EAAoD,CAC/DhL,GAAI,OACJyC,KAAM,OACNkC,YAAa,mBAEbsG,QA5BK,SAAqBtH,GAC1B,MAAM,MAAE+E,EAAF,OAASC,EAAT,KAAiB9C,GAASlC,EAChC,GAAKkC,MAAAA,IAAAA,EAAMuB,KACT,OAAO,KAGT,MAAM8D,EAA0B,CAC9BC,KAAMtF,MAAAA,OAAF,EAAEA,EAAMsF,KACZC,OAAQvF,MAAAA,OAAF,EAAEA,EAAMwF,YACdC,YAAazF,MAAAA,OAAF,EAAEA,EAAMuF,QAGrB,OACE,SAAC,IAAD,CACEG,IAAK1F,EAAKuB,KACVsB,MAAOA,EACPC,OAAQA,EACR6C,MAAON,EACP5K,UAAW4K,EAASI,YAAcP,OAAqBxJ,KAY3DkK,cAAe,CACbrE,KAAM,CACJqB,KAAMiD,EAAAA,GAAAA,MACNC,MAAO,yCAETR,KAAM,CAAEQ,MAAO,YAGjBC,YAAa,CACXlD,MAAO,GACPC,OAAQ,IAIVkD,YAAa,CAACC,EAAuBC,KAAoB,MACvD,IAAI3E,EACA2E,EAAI3E,OACNA,EAAO0E,EAAIE,YAAYD,EAAI3E,MAAM3F,SAE9B2F,IAAS6E,EAAAA,EAAAA,UAAS7E,KACrBA,GAAO8E,EAAAA,EAAAA,IAAuB,0CAGhC,MAAMrG,EAAiB,CACrBuB,KAAAA,EACA+D,KAAMY,EAAIZ,KAAOW,EAAIK,SAASJ,EAAIZ,MAAM1J,QAAU,QAIxB,MADxB,UAAAsK,EAAIX,cAAJ,SAAY1C,OAASqD,EAAIX,OAAOgB,QAC9BL,EAAIX,OAAO1C,MAAQ,IACrB7C,EAAKuF,OAAL,UAAcW,EAAIX,cAAlB,aAAc,EAAY1C,MAC1B7C,EAAKwF,YAAcS,EAAIK,SAASJ,EAAIX,OAAOgB,OAAO3K,UAGtD,OAAOoE,GAITwG,kBAAoBC,IAClBA,EACGC,gBAAgB,CACfvM,GAAI,eACJoH,KAAM,cACN3E,KAAM,WACNqF,OAAQ0E,EAAAA,GACRC,SAAU,CACRC,aAAc,UAGjBH,gBAAgB,CACfvM,GAAI,cACJoH,KAAM,cACN3E,KAAM,kBACNqF,OAAQ6E,EAAAA,GACRF,SAAU,GACVG,aAAc,CAEZjB,MAAO,UAGVkB,eAAe,CACdzF,KAAM,sBACN3E,KAAM,SACNmK,aAAc,EACdH,SAAU,CACRhD,IAAK,EACLqD,IAAK,MAGRP,gBAAgB,CACfvM,GAAI,sBACJoH,KAAM,sBACN3E,KAAM,oBACNqF,OAAQ6E,EAAAA,GACRF,SAAU,GACVG,aAAc,CAEZjB,MAAO,QAETxG,OAAS4G,IAAD,eAASgB,QAAO,UAAChB,EAAInC,cAAL,iBAAC,EAAYwB,cAAb,aAAC,EAAoB1C,Y,qJCrI9C,IAAKsE,EAMAC,G,SANAD,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,Q,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,OAAAA,SAAAA,EAAAA,OAAAA,S,CAAAA,IAAAA,EAAAA,KAsBZ,MAAMC,UAAuBC,EAAAA,cAC3B9I,SACE,MAAM,KAAEwB,GAAS9B,KAAKJ,MAChB1C,EAASE,EAAUyI,EAAAA,GAAAA,OAAe/D,GACxC,OACE,gBAAKvF,UAAWW,EAAOmM,UAAvB,UACE,iBAAM9M,UAAWW,EAAOoM,KAAxB,SAA+BxH,MAAAA,OAA/B,EAA+BA,EAAM5C,UAK7C,MAAM9B,GAAYmM,EAAAA,EAAAA,gBAAc,CAAC3K,EAAsBkD,KAAvB,CAC9BuH,UAAWxK,EAAAA,GAAI;;;;;IAMfyK,KAAMzK,EAAAA,GAAI;;sBAEUiD,EAAK0H;kBACT1H,EAAK2H;iBACN3H,MAAAA,OAJN,EAIMA,EAAM4H;aACV5H,MAAAA,OALF,EAKEA,EAAMuG;QAGNsB,EAA6D,CACxE1N,GAAI,WACJyC,KAAM,OACNkC,YAAa,WAEbsG,QAASiC,EAETzB,cAAe,CACb+B,MAAOR,EAAMW,KACbJ,OAAQN,EAAOW,QAGjBhC,YAAa,CACXlD,MAAO,IACPC,OAAQ,KAIVkD,YAAa,CAACC,EAAuBC,KAAuB,QAC1D,MAAMlG,EAAoB,CACxB5C,KAAM8I,EAAI9I,KAAO6I,EAAI+B,QAAQ9B,EAAI9I,MAAMxB,QAAU,GACjD+L,MAAK,UAAEzB,EAAIyB,aAAN,QAAeR,EAAMc,OAC1BP,OAAM,UAAExB,EAAIwB,cAAN,QAAgBN,EAAOW,OAC7BH,KAAM1B,EAAI0B,MAKZ,OAHI1B,EAAIK,QACNvG,EAAKuG,MAAQN,EAAIK,SAASJ,EAAIK,OAAO3K,SAEhCoE,GAITwG,kBAAoBC,IAClBA,EACGC,gBAAgB,CACfvM,GAAI,eACJoH,KAAM,cACN3E,KAAM,OACNqF,OAAQiG,EAAAA,IAETxB,gBAAgB,CACfvM,GAAI,eACJoH,KAAM,eACN3E,KAAM,aACNqF,OAAQ6E,EAAAA,EACRF,SAAU,GACVG,aAAc,KAEfoB,SAAS,CACR5G,KAAM,eACN3E,KAAM,aACNgK,SAAU,CACRlG,QAAS,CACP,CAAE9E,MAAOuL,EAAMW,KAAMpI,MAAO,QAC5B,CAAE9D,MAAOuL,EAAMc,OAAQvI,MAAO,UAC9B,CAAE9D,MAAOuL,EAAMiB,MAAO1I,MAAO,WAGjCqH,aAAcI,EAAMW,OAErBK,SAAS,CACR5G,KAAM,gBACN3E,KAAM,iBACNgK,SAAU,CACRlG,QAAS,CACP,CAAE9E,MAAOwL,EAAOiB,IAAK3I,MAAO,OAC5B,CAAE9D,MAAOwL,EAAOW,OAAQrI,MAAO,UAC/B,CAAE9D,MAAOwL,EAAOkB,OAAQ5I,MAAO,YAGnCqH,aAAcK,EAAOW,SAEtBQ,eAAe,CACdhH,KAAM,cACN3E,KAAM,YACNgK,SAAU,CACR4B,YAAa,YCzIVC,EAAsD,CACjEC,KAAMvD,EAAShL,GACf4J,OAAQ,OAAF,UAAOoB,EAASS,eACtB+C,UAAW,OAAF,UAAOxD,EAASY,cAGd6C,EAAwB,IAAIC,EAAAA,UAA4B,IAAM,CACzE1D,EACA0C,K,uDCLF,MAAMiB,UAAwBxB,EAAAA,cAC5B9I,SACE,MAAM,OAAEuF,GAAW7F,KAAKJ,MACxB,OACE,kCACE,yCACA,yBAAMiL,KAAKC,UAAUjF,EAAQ,KAAM,SAMpC,MAAMkF,EAAkD,CAC7D9O,GAAI,YACJyC,KAAM,YACNkC,YAAa,yDAEb8G,cAAe,GAEfR,QAAS0D,EAET/C,YAAa,CACXlD,MAAO,IACPC,OAAQ,M,wHCpBZ,IAAIoG,EAAU,IAEP,MAAMC,EAWXtL,YAAmBG,EAAgC0C,EAAsCzC,GAAqB,aAV/FiL,KAU+F,eARtG,GAQsG,eAPvF,IAOuF,eAJtG,KAIsG,gBAHrG,KAGqG,2BAA3FlL,KAAAA,EAA2F,KAA3D0C,QAAAA,EAA2D,KAArBzC,OAAAA,EAClFyC,IACHxC,KAAKwC,QAAU,CAAEgI,KAAM1K,EAAK7D,KAKhCiP,WAAWvG,EAAeC,GACxB5E,KAAK2E,MAAQA,EACb3E,KAAK4E,OAASA,EAGd5E,KAAKyH,MAAL,iBACKzH,KAAKyH,MADV,CAEE9C,MAAAA,EACAC,OAAAA,IAIJuG,WAAWpD,GAAuB,MAC5B/H,KAAKF,KAAKgI,cACZ9H,KAAK8B,KAAO9B,KAAKF,KAAKgI,YAAYC,EAAK/H,KAAKwC,QAAQqD,QACpD7F,KAAKoL,SAGP,MAAM,WAAE5L,EAAF,OAAcT,GAAWiB,KAAKwC,QAC9B3D,EAAqB,GAC3B,GAAIW,EAAY,CACd,GAAIA,EAAW6I,MAAO,CACpB,MAAMA,EAAQN,EAAIK,SAAS5I,EAAW6I,OACtCxJ,EAAIwM,gBAAkBhD,EAAM3K,QAE9B,GAAI8B,EAAW8L,MAAO,CACpB,MAAMA,EAAQvD,EAAIE,YAAYzI,EAAW8L,OACzC,GAAIA,EAAO,CACT,MAAMnH,EAAImH,EAAM5N,QAChB,GAAIyG,EAEF,OADAtF,EAAI0M,gBAAmB,QAAOpH,MAC9B,UAAQ3E,EAAWkK,YAAnB,QAA2B3C,EAAoByE,SAC7C,KAAKzE,EAAoByE,QACvB3M,EAAI4M,eAAiB,UACrB5M,EAAI6M,iBAAmB,YACvB,MACF,KAAK3E,EAAoB4E,MACvB9M,EAAI4M,eAAiB,QACrB5M,EAAI6M,iBAAmB,YACvB,MACF,KAAK3E,EAAoB6E,SACvB/M,EAAI6M,iBAAmB,YACvB,MACF,KAAK3E,EAAoB8E,KACvBhN,EAAI6M,iBAAmB,SACvB,MACF,KAAK3E,EAAoB+E,KACvBjN,EAAI4M,eAAiB,eAQjC,GAAI1M,GAAUA,EAAOsJ,OAAStJ,EAAO4F,MAAO,CAC1C,MAAM0D,EAAQN,EAAIK,SAASrJ,EAAOsJ,OAClCxJ,EAAIkN,YAAchN,EAAO4F,MACzB9F,EAAImN,YAAc,QAClBnN,EAAIoN,YAAc5D,EAAM3K,QAGpBmB,EAAI0M,kBACN1M,EAAIqN,iBAAmB,eAI3BrN,EAAI8F,MAAQ3E,KAAK2E,MACjB9F,EAAI+F,OAAS5E,KAAK4E,OAElB5E,KAAKyH,MAAQ5I,EAIfsN,MAAMC,GACJA,EAAQpM,MAIVkE,SAAS1B,GAC4B,MAA/BxC,KAAKF,KAAK7D,KAAOuG,EAAQgI,OAC3BxK,KAAKF,KAAL,UAAY4K,EAAsB2B,YAAY7J,EAAQgI,aAAtD,QAA+DO,GAGjE/K,KAAKoL,QACLpL,KAAKwC,QAAL,iBAAoBA,GACpB,IAAI8J,EAAOtM,KAAKD,OAChB,KAAOuM,GACLA,EAAKlB,QACLkB,EAAOA,EAAKvM,OAIhBwM,eACE,wBAAYvM,KAAKwC,SAGnBlC,SACE,MAAM,KAAER,GAASE,KACjB,OACE,gBAAuCyH,MAAOzH,KAAKyH,MAAnD,UACE,SAAC3H,EAAKoH,QAAN,CAAcrB,OAAQ7F,KAAKwC,QAAQqD,OAAQlB,MAAO3E,KAAK2E,MAAOC,OAAQ5E,KAAK4E,OAAQ9C,KAAM9B,KAAK8B,QADrF,GAAE9B,KAAKwM,OAAOxM,KAAKoL,U,MC5H7B,MAAMqB,EAAoC,CAC/CxQ,GAAI,QACJyC,KAAM,QACNkC,YAAa,QAEb8G,cAAe,GAGfR,QAAS,IACP,OAAO,sCAIJ,MAAMwF,UAAmBzB,EAG9BtL,YAAmB6C,EAAoCzC,G,UACrD4M,MAAMF,EAAgBjK,EAASzC,G,EAHG,I,EAEwC,c,EAAA,M,sFAAA,KAAzDyC,QAAAA,EAAyD,KAArBzC,OAAAA,EAIrD,IAAI,SAAE6M,GAAa5M,KAAKwC,QACnBoK,IACH5M,KAAKwC,QAAQoK,SAAWA,EAAW,IAGrC,IAAK,MAAMC,KAAKD,EACd,GAAe,UAAXC,EAAErC,KACJxK,KAAK4M,SAAS1M,KAAK,IAAIwM,EAAWG,EAAyB7M,WACtD,OACL,MAAMF,EAAI,UAAG4K,EAAsB2B,YAAYQ,EAAErC,aAAvC,QAAgDO,EAC1D/K,KAAK4M,SAAS1M,KAAK,IAAI+K,EAAanL,EAAM+M,EAAG9M,KAMnDmL,WAAWvG,EAAeC,GACxB+H,MAAMzB,WAAWvG,EAAOC,GAGxB,IAAK,MAAMkI,KAAQ9M,KAAK4M,SACtBE,EAAK5B,WAAWlL,KAAK2E,MAAO3E,KAAK4E,QAIrCuG,WAAWpD,GACT4E,MAAMxB,WAAWpD,GACjB,IAAK,MAAM+E,KAAQ9M,KAAK4M,SACtBE,EAAK3B,WAAWpD,GAIpBzH,SACE,OACE,gBAAuCmH,MAAOzH,KAAKyH,MAAnD,SACGzH,KAAK4M,SAASnM,KAAK0D,GAAMA,EAAE7D,YADnB,GAAEN,KAAKwM,OAAOxM,KAAKoL,SAOlCe,MAAMC,GACJO,MAAMR,MAAMC,GACZ,IAAK,MAAMW,KAAK/M,KAAK4M,SACnBR,EAAQW,GAIZR,eACE,wBACKvM,KAAKwC,QADV,CAEEoK,SAAU5M,KAAK4M,SAASnM,KAAK0D,GAAMA,EAAEoI,oB,wHCvDpC,MAAMS,EAYXrN,YAAYqI,EAAgCiF,GAA2C,sCAVtE,IAAIC,KAUkE,gBAT9E9P,EAAUyI,EAAAA,GAAAA,SASoE,kBARnE,IAAIsH,EAAAA,OAAwC3P,IAQuB,eAP/E,GAO+E,eAL/E,GAK+E,gBAJ9E,GAI8E,eAHhE,IAGgE,uCA0B3D,CAC1B4K,SAAWC,IAAgC+E,EAAAA,EAAAA,IAA0BpN,KAAK8B,KAAMuG,GAChFgF,SAAW7H,IAAgC8H,EAAAA,EAAAA,IAA0BtN,KAAK8B,KAAM0D,GAChFsE,QAAU5K,IAA8BqO,EAAAA,EAAAA,IAAyBvN,KAAK8B,KAAM5C,GAC5E+I,YAAcuF,IAAiCC,EAAAA,EAAAA,IAA6BzN,KAAK8B,KAAM0L,KA9BF,KAA3CP,OAAAA,EAC1CjN,KAAK0N,KAAO1N,KAAK2N,KAAK3F,GAGxB2F,KAAK3F,GAmBH,OAlBA4F,QAAQC,IAAI,OAAQ7F,EAAKhI,MACzBA,KAAK0N,KAAO,IAAIhB,EACd1E,MAAAA,EAAAA,EAAO,CACLwC,KAAM,QACNoC,SAAU,CAACrC,KAKfvK,KAAK8N,OAAOC,QACZ/N,KAAK0N,KAAKvB,OAAOhI,IACfnE,KAAK8N,OAAOE,IAAI7J,EAAEqI,IAAKrI,GAGL,UAAdA,EAAErE,KAAK7D,IACT+D,KAAKiO,SAASC,KAAK/J,MAGhBnE,KAAK0N,KAUdvC,WAAWrJ,GACT9B,KAAK8B,KAAOA,EACZ9B,KAAK0N,KAAKvC,WAAWnL,KAAKqC,SAG5B6I,WAAWvG,EAAeC,GACxB5E,KAAK2E,MAAQA,EACb3E,KAAK4E,OAASA,EACd5E,KAAKyH,MAAQ,CAAE9C,MAAAA,EAAOC,OAAAA,GACtB5E,KAAK0N,KAAKxC,WAAWvG,EAAOC,GAG9BV,SAASiK,EAAanG,GACpB,MAAM8E,EAAO9M,KAAK8N,OAAOM,IAAID,GAC7B,IAAKrB,EACH,MAAM,IAAIuB,MAAM,sBAAwBF,EAAM,OAAS,IAAInO,KAAK8N,OAAOQ,SAEzEtO,KAAKoL,QACL0B,EAAK5I,SAAS8D,GACd8E,EAAK3B,WAAWnL,KAAKqC,SACrBrC,KAAKuO,OAGPA,OACEvO,KAAKiN,OAAOjN,KAAK0N,KAAKnB,gBAGxBjM,SACE,OACE,gBAAsB/D,UAAWyD,KAAK9C,OAAOsR,KAAM/G,MAAOzH,KAAKyH,MAA/D,SACGzH,KAAK0N,KAAKpN,UADHN,KAAKoL,QAOrB,MAAMhO,GAAYmM,EAAAA,EAAAA,gBAAe3K,IAAD,CAC9B4P,KAAM3P,EAAAA,GAAI;;;IAKV4P,QAAS5P,EAAAA,GAAI;;;;gIC/FR,MAAM6P,EAAW,IAAIvB,EAAAA,EAAqB,GAE1C,MAAMwB,UAAoBC,EAAAA,UAK/BjP,YAAYC,GACV+M,MAAM/M,GADkB,qCAHX,IAAIiP,EAAAA,IAGO,sBAFZ,GAEY,wBAgCTnB,IACf,MAAM,gBAAEoB,EAAF,QAAmBtM,GAAYxC,KAAKJ,MAC1CkP,EAAgB,OAAD,UACVtM,EADU,CAEbkL,KAAAA,KAEF1N,KAAK+O,SAAS,CAAEC,QAAShP,KAAKiP,MAAMD,QAAU,OApC9ChP,KAAKiP,MAAQ,CACXD,QAAS,GAKXhP,KAAKkP,MAAQ,IAAIlC,EAAMhN,KAAKJ,MAAM4C,QAAQkL,KAAM1N,KAAKmP,eACrDnP,KAAKkP,MAAMhE,WAAWtL,EAAM+E,MAAO/E,EAAMgF,QACzC5E,KAAKkP,MAAM/D,WAAWvL,EAAMkC,MAC5B4M,EAASR,KAAKlO,KAAKkP,OAEnBlP,KAAKoP,KAAKC,IACRrP,KAAKJ,MAAM6C,SAAS6M,UAAUC,EAAAA,IAAuBC,IAC/CxP,KAAKJ,MAAM3D,KAAOuT,EAAIC,UACxBzP,KAAK0P,aAAc,OAM3BC,oBACEjB,EAASR,KAAKlO,KAAKkP,OAGrBU,uBACE5P,KAAKoP,KAAKS,cAeZC,sBAAsBC,GACpB,MAAM,MAAEpL,EAAF,OAASC,EAAT,KAAiB9C,EAAjB,cAAuBkO,GAAkBhQ,KAAKJ,MACpD,IAAIqQ,GAAU,EAwBd,OAtBItL,IAAUoL,EAAUpL,OAASC,IAAWmL,EAAUnL,SACpD5E,KAAKkP,MAAMhE,WAAW6E,EAAUpL,MAAOoL,EAAUnL,QACjDqL,GAAU,GAERnO,IAASiO,EAAUjO,OACrB9B,KAAKkP,MAAM/D,WAAW4E,EAAUjO,MAChCmO,GAAU,GAIRjQ,KAAK0P,aAAe1P,KAAKJ,MAAM4C,UAAYuN,EAAUvN,UACvDxC,KAAK0P,aAAc,EACnB1P,KAAKkP,MAAMvB,KAAKoC,EAAUvN,QAAQkL,MAClC1N,KAAKkP,MAAMhE,WAAW6E,EAAUpL,MAAOoL,EAAUnL,QACjD5E,KAAKkP,MAAM/D,WAAW4E,EAAUjO,MAChCmO,GAAU,GAGRD,IAAkBD,EAAUC,gBAC9BC,GAAU,GAGLA,EAGT3P,SACE,OAAON,KAAKkP,MAAM5O,U,uQCxEf,MAAM4P,EAAoD,EAAG1N,QAAAA,EAAS0B,SAAAA,EAAUpC,KAAAA,EAAMqO,OAAAA,MAE3F,MAAMC,GAAaC,EAAAA,EAAAA,UAAQ,IAClB3F,EAAsB4F,cAC3B9N,MAAAA,GAAAA,EAASgI,KACL,CAAChI,EAAQgI,MACT,CAACD,EAA8BC,MACnC2F,IAED,CAAC3N,MAAAA,OAAD,EAACA,EAASgI,KAAM2F,IAGbI,GAAuBF,EAAAA,EAAAA,UAAQ,KACnC,MAAMG,EAAQ9F,EAAsB2B,YAAY7J,MAAAA,OAAlC,EAAkCA,EAASgI,MACzD,IAAKgG,IAAUA,EAAMlI,kBACnB,OAAO,KAGT,MAAMC,EAAU,IAAIkI,EAAAA,0BAOpB,OANID,EAAMlI,mBACRkI,EAAMlI,kBAAkBC,GCtCvB,SAA8BA,GACnCA,EACGC,gBAAgB,CACfvM,GAAI,mBACJoH,KAAM,mBACN3E,KAAM,mBACNqF,OAAQ6E,EAAAA,GACRF,SAAU,GACVG,aAAc,CAEZjB,MAAO,MAGVY,gBAAgB,CACfvM,GAAI,mBACJoH,KAAM,mBACN3E,KAAM,mBACNqF,OAAQ0E,EAAAA,GACRC,SAAU,CACRC,aAAc,WAGjBsB,SAAS,CACR5G,KAAM,kBACN3E,KAAM,uBACNgK,SAAU,CACRlG,QAAS,CACP,CAAE9E,MAAOqJ,EAAoB6E,SAAUpK,MAAO,YAC9C,CAAE9D,MAAOqJ,EAAoByE,QAAShK,MAAO,WAC7C,CAAE9D,MAAOqJ,EAAoB4E,MAAOnK,MAAO,SAC3C,CAAE9D,MAAOqJ,EAAoB+E,KAAMtK,MAAO,QAC1C,CAAE9D,MAAOqJ,EAAoB8E,KAAMrK,MAAO,UAG9CqH,aAAc9B,EAAoB4E,QDOpC+E,CAAqBnI,GCHlB,SAA0BA,GAC/BA,EAAQO,eAAe,CACrBzF,KAAM,eACN3E,KAAM,eACNmK,aAAc,EACdH,SAAU,CACRhD,IAAK,EACLqD,IAAK,MAITR,EAAQC,gBAAgB,CACtBvM,GAAI,eACJoH,KAAM,eACN3E,KAAM,eACNqF,OAAQ6E,EAAAA,GACRF,SAAU,GACVG,aAAc,CAEZjB,MAAO,IAETxG,OAAS4G,IAAD,aAASgB,QAAO,UAAChB,EAAIjJ,cAAL,aAAC,EAAY4F,UDjBrCgM,CAAiBpI,GACVA,IACN,CAAC/F,MAAAA,OAAD,EAACA,EAASgI,OAGPoG,GAAeP,EAAAA,EAAAA,UAAQ,KAC3B,MAAMG,EAAQ9F,EAAsB2B,YAAY7J,MAAAA,OAAlC,EAAkCA,EAASgI,MACzD,IAAK+F,IAAyBC,EAC5B,OAAO,KAGT,MAAMpQ,EAAW,IAAIV,EAAAA,EAA8B,CACjDzD,GAAI,uBACJC,MAAO,yBAGHmG,EAAsC,CAC1CP,KAAAA,EACAU,QAASA,GAGLR,EAAiB,OAAH,UAAQQ,EAAR,CAAiBgI,KAAMgG,EAAMvU,GAAI4J,OAAQ,OAAF,UAAO2K,EAAM9I,cAAkBlF,MAAAA,OAA/B,EAA+BA,EAASqD,YAG9FrD,GAAYgO,EAAM9I,gBAAkBlF,EAAQqD,SAC/C3B,EAASlC,GAGX,MAAM6O,EAAMN,EAAqBO,cAgBjC,OAbA5N,EAAAA,EAAAA,GACE2N,EAAIzN,QAGHL,GAAkB3C,IAGnB,CAACiD,EAAc3F,KACbwG,GAASX,EAAAA,EAAAA,IAAmBvB,EAAgBqB,EAAM3F,MAEpD2E,IAIA,uCACE,mBACCjC,EAASH,MAAMQ,KAAKX,GAASA,EAAKQ,gBAGtC,CAACiQ,EAAsBrM,EAAUpC,EAAMU,IAE1C,OACE,4BACE,SAAC,EAAAuO,OAAD,CACEC,kBAAgB,EAChBxO,QAAS4N,EAAW5N,QACpB9E,MAAO0S,EAAWvJ,QAClB3C,SAAWC,IAAM,MACf,MAAMqM,EAAQ9F,EAAsB2B,YAAYlI,EAAEzG,OAC7C8S,EAKLtM,EAAS,OAAD,UACH1B,EADG,CAENgI,KAAMgG,EAAMvU,GACZ4J,QAAQoL,EAAAA,EAAAA,WAAS,UAACT,EAAM9I,qBAAP,QAAwB,OAPzCkG,QAAQsD,KAAK,uBAAwB/M,MAY1CyM,M,0HE9GA,MAAMO,EAAwF,EAAG9O,QAAAA,MAAc,MACpH,MAAM6M,GAAQkC,EAAAA,EAAAA,GAAc1C,GACtBT,GAAWmD,EAAAA,EAAAA,GAAa,UAAClC,MAAAA,OAAD,EAACA,EAAOjB,gBAAR,SAAoBoD,EAAAA,EAAAA,SAAG7T,IAErD,OAAKyQ,GAKH,SAACiC,EAAD,CACE1N,QAASyL,EAASzL,QAClBV,KAAMO,EAAQP,KACdoC,SAAW8D,IACTkH,EAAOhL,SAAS+J,EAASzB,IAAKxE,MARlC,OAAO,mDCDEsJ,GANejN,OAAOkN,OAAO,CAAC,EAAG,IAMG,CAC/C7D,KAAO,CACLd,SAAU,CAAC,OAAD,UAEHrC,OCXE7I,GAAS,IAAI8P,EAAAA,YAA0B7C,GACjD8C,eACAC,iBACAC,iBAAiBpJ,IAChBA,EAAQC,gBAAgB,CACtBpI,SAAU,CAAC,oBACXnE,GAAI,OACJoH,KAAM,OACN3E,KAAM,mBACNqF,OAAQoN,EACRtI,aAAcyI,EAAoB5D,W,qLCNxC,QARA,SAAuBkE,EAAaC,GAChC,IAAIC,GAAK,IAAA7U,UAAS4U,GAAenU,EAAQoU,EAAG,GAAIC,EAASD,EAAG,GAK5D,OAJA,QAA0B,WACtB,IAAIE,EAAIJ,EAAYtC,UAAUyC,GAC9B,OAAO,WAAc,OAAOC,EAAEnC,iBAC/B,CAAC+B,IACGlU","sources":["webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPaneCategory.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPaneItemDescriptor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getVizualizationOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/utils.ts","webpack://grafana/./public/app/features/canvas/types.ts","webpack://grafana/./public/app/features/canvas/elements/icon.tsx","webpack://grafana/./public/app/features/canvas/elements/textBox.tsx","webpack://grafana/./public/app/features/canvas/registry.ts","webpack://grafana/./public/app/features/canvas/elements/notFound.tsx","webpack://grafana/./public/app/features/canvas/runtime/element.tsx","webpack://grafana/./public/app/features/canvas/runtime/group.tsx","webpack://grafana/./public/app/features/canvas/runtime/scene.tsx","webpack://grafana/./public/app/plugins/panel/canvas/CanvasPanel.tsx","webpack://grafana/./public/app/plugins/panel/canvas/editor/ElementEditor.tsx","webpack://grafana/./public/app/plugins/panel/canvas/editor/options.ts","webpack://grafana/./public/app/plugins/panel/canvas/editor/SelectedElementEditor.tsx","webpack://grafana/./public/app/plugins/panel/canvas/models.gen.ts","webpack://grafana/./public/app/plugins/panel/canvas/module.tsx","webpack://grafana/./node_modules/react-use/esm/useObservable.js"],"sourcesContent":["import React, { FC, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Counter, Icon, useStyles2 } from '@grafana/ui';\nimport { PANEL_EDITOR_UI_STATE_STORAGE_KEY } from './state/reducers';\nimport { useLocalStorage } from 'react-use';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface OptionsPaneCategoryProps {\n  id: string;\n  title?: string;\n  renderTitle?: (isExpanded: boolean) => React.ReactNode;\n  isOpenDefault?: boolean;\n  itemsCount?: number;\n  forceOpen?: number;\n  className?: string;\n  isNested?: boolean;\n  children: ReactNode;\n}\n\nexport const OptionsPaneCategory: FC<OptionsPaneCategoryProps> = React.memo(\n  ({ id, title, children, forceOpen, isOpenDefault, renderTitle, className, itemsCount, isNested = false }) => {\n    const initialIsExpanded = isOpenDefault !== false;\n\n    const [savedState, setSavedState] = useLocalStorage(getOptionGroupStorageKey(id), {\n      isExpanded: initialIsExpanded,\n    });\n\n    // `savedState` can be undefined by typescript, so we have to handle that case\n    const [isExpanded, setIsExpanded] = useState(savedState?.isExpanded ?? initialIsExpanded);\n    const styles = useStyles2(getStyles);\n\n    useEffect(() => {\n      if (!isExpanded && forceOpen && forceOpen > 0) {\n        setIsExpanded(true);\n      }\n    }, [forceOpen, isExpanded]);\n\n    const onToggle = useCallback(() => {\n      setSavedState({ isExpanded: !isExpanded });\n      setIsExpanded(!isExpanded);\n    }, [setSavedState, setIsExpanded, isExpanded]);\n\n    if (!renderTitle) {\n      renderTitle = function defaultTitle(isExpanded: boolean) {\n        if (isExpanded || itemsCount === undefined || itemsCount === 0) {\n          return title;\n        }\n\n        return (\n          <span>\n            {title} <Counter value={itemsCount} />\n          </span>\n        );\n      };\n    }\n\n    const boxStyles = cx(\n      {\n        [styles.box]: true,\n        [styles.boxNestedExpanded]: isNested && isExpanded,\n      },\n      className,\n      'options-group'\n    );\n\n    const headerStyles = cx(styles.header, {\n      [styles.headerExpanded]: isExpanded,\n      [styles.headerNested]: isNested,\n    });\n\n    const bodyStyles = cx(styles.body, {\n      [styles.bodyNested]: isNested,\n    });\n\n    return (\n      <div\n        className={boxStyles}\n        data-testid=\"options-category\"\n        aria-label={selectors.components.OptionsGroup.group(id)}\n      >\n        <div className={headerStyles} onClick={onToggle} aria-label={selectors.components.OptionsGroup.toggle(id)}>\n          <div className={cx(styles.toggle, 'editor-options-group-toggle')}>\n            <Icon name={isExpanded ? 'angle-down' : 'angle-right'} />\n          </div>\n          <div className={styles.title} role=\"heading\">\n            {renderTitle(isExpanded)}\n          </div>\n        </div>\n        {isExpanded && <div className={bodyStyles}>{children}</div>}\n      </div>\n    );\n  }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    box: css`\n      border-top: 1px solid ${theme.colors.border.weak};\n    `,\n    boxNestedExpanded: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    toggle: css`\n      color: ${theme.colors.text.secondary};\n      margin-right: ${theme.spacing(1)};\n    `,\n    title: css`\n      flex-grow: 1;\n      overflow: hidden;\n    `,\n    header: css`\n      display: flex;\n      cursor: pointer;\n      align-items: baseline;\n      padding: ${theme.spacing(1)};\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightMedium};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.primary, 0.03)};\n      }\n    `,\n    headerExpanded: css`\n      color: ${theme.colors.text.primary};\n    `,\n    headerNested: css`\n      padding: ${theme.spacing(0.5, 0, 0.5, 0)};\n    `,\n    body: css`\n      padding: ${theme.spacing(1, 2, 1, 4)};\n    `,\n    bodyNested: css`\n      position: relative;\n      padding-right: 0;\n      &:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 8px;\n        width: 1px;\n        height: 100%;\n        background: ${theme.colors.border.weak};\n      }\n    `,\n  };\n};\n\nconst getOptionGroupStorageKey = (id: string): string => `${PANEL_EDITOR_UI_STATE_STORAGE_KEY}.optionGroup[${id}]`;\n","import React from 'react';\nimport { OptionsPaneCategory } from './OptionsPaneCategory';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\n\nexport interface OptionsPaneCategoryDescriptorProps {\n  id: string;\n  title: string;\n  renderTitle?: (isExpanded: boolean) => React.ReactNode;\n  isOpenDefault?: boolean;\n  forceOpen?: number;\n  className?: string;\n  isNested?: boolean;\n  itemsCount?: number;\n  customRender?: () => React.ReactNode;\n}\n/**\n * This is not a real React component but an intermediary to enable deep option search without traversing a React node tree.\n */\n\nexport class OptionsPaneCategoryDescriptor {\n  items: OptionsPaneItemDescriptor[] = [];\n  categories: OptionsPaneCategoryDescriptor[] = [];\n  parent?: OptionsPaneCategoryDescriptor;\n\n  constructor(public props: OptionsPaneCategoryDescriptorProps) {}\n\n  addItem(item: OptionsPaneItemDescriptor) {\n    item.parent = this;\n    this.items.push(item);\n    return this;\n  }\n\n  addCategory(category: OptionsPaneCategoryDescriptor) {\n    category.props.isNested = true;\n    category.parent = this;\n    this.categories.push(category);\n    return this;\n  }\n\n  render(searchQuery?: string) {\n    if (this.props.customRender) {\n      return this.props.customRender();\n    }\n\n    return (\n      <OptionsPaneCategory key={this.props.title} {...this.props}>\n        {this.items.map((item) => item.render())}\n        {this.categories.map((category) => category.render())}\n      </OptionsPaneCategory>\n    );\n  }\n}\n","import { selectors } from '@grafana/e2e-selectors';\nimport { Field, Label } from '@grafana/ui';\nimport React, { ReactNode } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\n\nexport interface OptionsPaneItemProps {\n  title: string;\n  value?: any;\n  description?: string;\n  popularRank?: number;\n  render: () => React.ReactNode;\n  skipField?: boolean;\n  showIf?: () => boolean;\n}\n\n/**\n * This is not a real React component but an intermediary to enable deep option search without traversing a React node tree.\n */\nexport class OptionsPaneItemDescriptor {\n  parent!: OptionsPaneCategoryDescriptor;\n\n  constructor(public props: OptionsPaneItemProps) {}\n\n  getLabel(searchQuery?: string): ReactNode {\n    const { title, description } = this.props;\n\n    if (!searchQuery) {\n      // Do not render label for categories with only one child\n      if (this.parent.props.title === title) {\n        return null;\n      }\n\n      return title;\n    }\n\n    const categories: React.ReactNode[] = [];\n\n    if (this.parent.parent) {\n      categories.push(this.highlightWord(this.parent.parent.props.title, searchQuery));\n    }\n\n    if (this.parent.props.title !== title) {\n      categories.push(this.highlightWord(this.parent.props.title, searchQuery));\n    }\n\n    return (\n      <Label description={description && this.highlightWord(description, searchQuery)} category={categories}>\n        {this.highlightWord(title, searchQuery)}\n      </Label>\n    );\n  }\n\n  highlightWord(word: string, query: string) {\n    return (\n      <Highlighter textToHighlight={word} searchWords={[query]} highlightClassName={'search-fragment-highlight'} />\n    );\n  }\n\n  render(searchQuery?: string) {\n    const { title, description, render, showIf, skipField } = this.props;\n    const key = `${this.parent.props.id} ${title}`;\n\n    if (showIf && !showIf()) {\n      return null;\n    }\n\n    if (skipField) {\n      return render();\n    }\n\n    return (\n      <Field\n        label={this.getLabel(searchQuery)}\n        description={description}\n        key={key}\n        aria-label={selectors.components.PanelEditor.OptionsPane.fieldLabel(key)}\n      >\n        {render() as React.ReactElement}\n      </Field>\n    );\n  }\n}\n","import React from 'react';\nimport { PanelOptionsEditorItem, StandardEditorContext, VariableSuggestionsScope } from '@grafana/data';\nimport { get as lodashGet } from 'lodash';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\nimport { OptionPaneRenderProps } from './types';\nimport { updateDefaultFieldConfigValue, setOptionImmutably } from './utils';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\n\ntype categoryGetter = (categoryNames?: string[]) => OptionsPaneCategoryDescriptor;\n\nexport function getVizualizationOptions(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor[] {\n  const { plugin, panel, onPanelOptionsChanged, onFieldConfigsChange, data, dashboard } = props;\n  const currentOptions = panel.getOptions();\n  const currentFieldConfig = panel.fieldConfig;\n  const categoryIndex: Record<string, OptionsPaneCategoryDescriptor> = {};\n\n  const context: StandardEditorContext<any> = {\n    data: data?.series || [],\n    replaceVariables: panel.replaceVariables,\n    options: currentOptions,\n    eventBus: dashboard.events,\n    getSuggestions: (scope?: VariableSuggestionsScope) => {\n      return data ? getDataLinksVariableSuggestions(data.series, scope) : [];\n    },\n  };\n\n  const getOptionsPaneCategory = (categoryNames?: string[]): OptionsPaneCategoryDescriptor => {\n    const categoryName = (categoryNames && categoryNames[0]) ?? `${plugin.meta.name}`;\n    const category = categoryIndex[categoryName];\n\n    if (category) {\n      return category;\n    }\n\n    return (categoryIndex[categoryName] = new OptionsPaneCategoryDescriptor({\n      title: categoryName,\n      id: categoryName,\n    }));\n  };\n\n  // Load the options into categories\n  fillOptionsPaneItems(\n    plugin.optionEditors.list(),\n    getOptionsPaneCategory,\n    (path: string, value: any) => {\n      const newOptions = setOptionImmutably(context.options, path, value);\n      onPanelOptionsChanged(newOptions);\n    },\n    context\n  );\n\n  /**\n   * Field options\n   */\n  for (const fieldOption of plugin.fieldConfigRegistry.list()) {\n    if (\n      fieldOption.isCustom &&\n      fieldOption.showIf &&\n      !fieldOption.showIf(currentFieldConfig.defaults.custom, data?.series)\n    ) {\n      continue;\n    }\n\n    if (fieldOption.hideFromDefaults) {\n      continue;\n    }\n\n    const category = getOptionsPaneCategory(fieldOption.category);\n    const Editor = fieldOption.editor;\n\n    const defaults = currentFieldConfig.defaults;\n    const value = fieldOption.isCustom\n      ? defaults.custom\n        ? lodashGet(defaults.custom, fieldOption.path)\n        : undefined\n      : lodashGet(defaults, fieldOption.path);\n\n    if (fieldOption.getItemsCount) {\n      category.props.itemsCount = fieldOption.getItemsCount(value);\n    }\n\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: fieldOption.name,\n        description: fieldOption.description,\n        render: function renderEditor() {\n          const onChange = (v: any) => {\n            onFieldConfigsChange(\n              updateDefaultFieldConfigValue(currentFieldConfig, fieldOption.path, v, fieldOption.isCustom)\n            );\n          };\n\n          return <Editor value={value} onChange={onChange} item={fieldOption} context={context} />;\n        },\n      })\n    );\n  }\n\n  return Object.values(categoryIndex);\n}\n\n/**\n * This will iterate all options panes and add register them with the configured categories\n *\n * @internal\n */\nexport function fillOptionsPaneItems(\n  optionEditors: PanelOptionsEditorItem[],\n  getOptionsPaneCategory: categoryGetter,\n  onValueChanged: (path: string, value: any) => void,\n  context: StandardEditorContext<any>\n) {\n  for (const pluginOption of optionEditors) {\n    if (pluginOption.showIf && !pluginOption.showIf(context.options, context.data)) {\n      continue;\n    }\n\n    const category = getOptionsPaneCategory(pluginOption.category);\n    const Editor = pluginOption.editor;\n\n    // TODO? can some options recursivly call: fillOptionsPaneItems?\n\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: pluginOption.name,\n        description: pluginOption.description,\n        render: function renderEditor() {\n          return (\n            <Editor\n              value={lodashGet(context.options, pluginOption.path)}\n              onChange={(value: any) => {\n                onValueChanged(pluginOption.path, value);\n              }}\n              item={pluginOption}\n              context={context}\n            />\n          );\n        },\n      })\n    );\n  }\n}\n","import { omit } from 'lodash';\nimport { FieldConfigSource, PanelPlugin } from '@grafana/data';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DisplayMode } from './types';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\n\nexport function calculatePanelSize(mode: DisplayMode, width: number, height: number, panel: PanelModel) {\n  if (mode === DisplayMode.Fill) {\n    return { width, height };\n  }\n  const panelPadding = 8 * 6;\n  const sidebarWidth = 60;\n\n  const colWidth = (window.innerWidth - sidebarWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h + panelPadding;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight,\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale,\n  };\n}\n\nexport function supportsDataQuery(plugin: PanelPlugin | undefined | null): boolean {\n  return plugin?.meta.skipDataQuery === false;\n}\n\nexport const updateDefaultFieldConfigValue = (\n  config: FieldConfigSource,\n  name: string,\n  value: any,\n  isCustom?: boolean\n) => {\n  let defaults = { ...config.defaults };\n  const remove = value == null || value === '';\n\n  if (isCustom) {\n    if (defaults.custom) {\n      if (remove) {\n        defaults.custom = omit(defaults.custom, name);\n      } else {\n        defaults.custom = setOptionImmutably(defaults.custom, name, value);\n      }\n    } else if (!remove) {\n      defaults.custom = setOptionImmutably(defaults.custom, name, value);\n    }\n  } else if (remove) {\n    defaults = omit(defaults, name);\n  } else {\n    defaults = setOptionImmutably(defaults, name, value);\n  }\n\n  return {\n    ...config,\n    defaults,\n  };\n};\n\nexport function setOptionImmutably<T extends object>(options: T, path: string | string[], value: any): T {\n  const splat = !Array.isArray(path) ? path.split('.') : path;\n\n  const key = splat.shift()!;\n  if (key.endsWith(']')) {\n    const idx = key.lastIndexOf('[');\n    const index = +key.substring(idx + 1, key.length - 1);\n    const propKey = key.substr(0, idx);\n    let current = (options as Record<string, any>)[propKey];\n    const arr = Array.isArray(current) ? [...current] : [];\n    if (splat.length) {\n      current = arr[index];\n      if (current == null || typeof current !== 'object') {\n        current = {};\n      }\n      value = setOptionImmutably(current, splat, value);\n    }\n    arr[index] = value;\n    return { ...options, [propKey]: arr };\n  }\n\n  if (!splat.length) {\n    return { ...options, [key]: value };\n  }\n\n  let current = (options as Record<string, any>)[key];\n\n  if (current == null || typeof current !== 'object') {\n    current = {};\n  }\n\n  return { ...options, [key]: setOptionImmutably(current, splat, value) };\n}\n","import { ColorDimensionConfig, ResourceDimensionConfig } from 'app/features/dimensions/types';\n\nexport interface Placement {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n\n  width?: number;\n  height?: number;\n}\n\nexport interface Anchor {\n  top?: boolean;\n  left?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n}\n\nexport enum BackgroundImageSize {\n  Original = 'original',\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ColorDimensionConfig;\n  image?: ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ColorDimensionConfig;\n  width?: number;\n}\n","import React, { CSSProperties } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport {\n  ColorDimensionConfig,\n  ResourceDimensionConfig,\n  ResourceDimensionMode,\n  getPublicOrAbsoluteUrl,\n} from 'app/features/dimensions';\nimport { ColorDimensionEditor, ResourceDimensionEditor } from 'app/features/dimensions/editors';\nimport SVG from 'react-inlinesvg';\nimport { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport { LineConfig } from '../types';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\ninterface IconConfig {\n  path?: ResourceDimensionConfig;\n  fill?: ColorDimensionConfig;\n  stroke?: LineConfig;\n}\n\ninterface IconData {\n  path: string;\n  fill: string;\n  strokeColor?: string;\n  stroke?: number;\n}\n\n// When a stoke is defined, we want the path to be in page units\nconst svgStrokePathClass = css`\n  path {\n    vector-effect: non-scaling-stroke;\n  }\n`;\n\nexport function IconDisplay(props: CanvasElementProps) {\n  const { width, height, data } = props;\n  if (!data?.path) {\n    return null;\n  }\n\n  const svgStyle: CSSProperties = {\n    fill: data?.fill,\n    stroke: data?.strokeColor,\n    strokeWidth: data?.stroke,\n  };\n\n  return (\n    <SVG\n      src={data.path}\n      width={width}\n      height={height}\n      style={svgStyle}\n      className={svgStyle.strokeWidth ? svgStrokePathClass : undefined}\n    />\n  );\n}\n\nexport const iconItem: CanvasElementItem<IconConfig, IconData> = {\n  id: 'icon',\n  name: 'Icon',\n  description: 'SVG Icon display',\n\n  display: IconDisplay,\n\n  defaultConfig: {\n    path: {\n      mode: ResourceDimensionMode.Fixed,\n      fixed: 'img/icons/unicons/question-circle.svg',\n    },\n    fill: { fixed: '#FFF899' },\n  },\n\n  defaultSize: {\n    width: 50,\n    height: 50,\n  },\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: IconConfig) => {\n    let path: string | undefined = undefined;\n    if (cfg.path) {\n      path = ctx.getResource(cfg.path).value();\n    }\n    if (!path || !isString(path)) {\n      path = getPublicOrAbsoluteUrl('img/icons/unicons/question-circle.svg');\n    }\n\n    const data: IconData = {\n      path,\n      fill: cfg.fill ? ctx.getColor(cfg.fill).value() : '#CCC',\n    };\n\n    if (cfg.stroke?.width && cfg.stroke.color) {\n      if (cfg.stroke.width > 0) {\n        data.stroke = cfg.stroke?.width;\n        data.strokeColor = ctx.getColor(cfg.stroke.color).value();\n      }\n    }\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    builder\n      .addCustomEditor({\n        id: 'iconSelector',\n        path: 'config.path',\n        name: 'SVG Path',\n        editor: ResourceDimensionEditor,\n        settings: {\n          resourceType: 'icon',\n        },\n      })\n      .addCustomEditor({\n        id: 'config.fill',\n        path: 'config.fill',\n        name: 'Icon fill color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n      })\n      .addSliderInput({\n        path: 'config.stroke.width',\n        name: 'Stroke',\n        defaultValue: 0,\n        settings: {\n          min: 0,\n          max: 10,\n        },\n      })\n      .addCustomEditor({\n        id: 'config.stroke.color',\n        path: 'config.stroke.color',\n        name: 'Icon Stroke color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n        showIf: (cfg) => Boolean(cfg.config?.stroke?.width),\n      });\n  },\n};\n","import React, { PureComponent } from 'react';\nimport { ColorDimensionEditor } from 'app/features/dimensions/editors/ColorDimensionEditor';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { ColorDimensionConfig, TextDimensionConfig } from 'app/features/dimensions/types';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport { css } from '@emotion/css';\nimport { stylesFactory } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\nexport enum Align {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\n\nexport enum VAlign {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\ninterface TextBoxData {\n  text?: string;\n  color?: string;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\ninterface TextBoxConfig {\n  text?: TextDimensionConfig;\n  color?: ColorDimensionConfig;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\nclass TextBoxDisplay extends PureComponent<CanvasElementProps<TextBoxConfig, TextBoxData>> {\n  render() {\n    const { data } = this.props;\n    const styles = getStyles(config.theme2, data);\n    return (\n      <div className={styles.container}>\n        <span className={styles.span}>{data?.text}</span>\n      </div>\n    );\n  }\n}\nconst getStyles = stylesFactory((theme: GrafanaTheme2, data) => ({\n  container: css`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    display: table;\n  `,\n  span: css`\n    display: table-cell;\n    vertical-align: ${data.valign};\n    text-align: ${data.align};\n    font-size: ${data?.size}px;\n    color: ${data?.color};\n  `,\n}));\nexport const textBoxItem: CanvasElementItem<TextBoxConfig, TextBoxData> = {\n  id: 'text-box',\n  name: 'Text',\n  description: 'Text box',\n\n  display: TextBoxDisplay,\n\n  defaultConfig: {\n    align: Align.Left,\n    valign: VAlign.Middle,\n  },\n\n  defaultSize: {\n    width: 240,\n    height: 160,\n  },\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: TextBoxConfig) => {\n    const data: TextBoxData = {\n      text: cfg.text ? ctx.getText(cfg.text).value() : '',\n      align: cfg.align ?? Align.Center,\n      valign: cfg.valign ?? VAlign.Middle,\n      size: cfg.size,\n    };\n    if (cfg.color) {\n      data.color = ctx.getColor(cfg.color).value();\n    }\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    builder\n      .addCustomEditor({\n        id: 'textSelector',\n        path: 'config.text',\n        name: 'Text',\n        editor: TextDimensionEditor,\n      })\n      .addCustomEditor({\n        id: 'config.color',\n        path: 'config.color',\n        name: 'Text color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {},\n      })\n      .addRadio({\n        path: 'config.align',\n        name: 'Align text',\n        settings: {\n          options: [\n            { value: Align.Left, label: 'Left' },\n            { value: Align.Center, label: 'Center' },\n            { value: Align.Right, label: 'Right' },\n          ],\n        },\n        defaultValue: Align.Left,\n      })\n      .addRadio({\n        path: 'config.valign',\n        name: 'Vertical align',\n        settings: {\n          options: [\n            { value: VAlign.Top, label: 'Top' },\n            { value: VAlign.Middle, label: 'Middle' },\n            { value: VAlign.Bottom, label: 'Bottom' },\n          ],\n        },\n        defaultValue: VAlign.Middle,\n      })\n      .addNumberInput({\n        path: 'config.size',\n        name: 'Text size',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n  },\n};\n","import { Registry } from '@grafana/data';\nimport { CanvasElementItem, CanvasElementOptions } from './element';\nimport { iconItem } from './elements/icon';\nimport { textBoxItem } from './elements/textBox';\n\nexport const DEFAULT_CANVAS_ELEMENT_CONFIG: CanvasElementOptions = {\n  type: iconItem.id,\n  config: { ...iconItem.defaultConfig },\n  placement: { ...iconItem.defaultSize },\n};\n\nexport const canvasElementRegistry = new Registry<CanvasElementItem>(() => [\n  iconItem, // default for now\n  textBoxItem,\n]);\n","import React, { PureComponent } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\n\ninterface NotFoundConfig {\n  orig?: any;\n}\n\nclass NotFoundDisplay extends PureComponent<CanvasElementProps<NotFoundConfig>> {\n  render() {\n    const { config } = this.props;\n    return (\n      <div>\n        <h3>NOT FOUND:</h3>\n        <pre>{JSON.stringify(config, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport const notFoundItem: CanvasElementItem<NotFoundConfig> = {\n  id: 'not-found',\n  name: 'Not found',\n  description: 'Display when element type is not found in the registry',\n\n  defaultConfig: {},\n\n  display: NotFoundDisplay,\n\n  defaultSize: {\n    width: 100,\n    height: 100,\n  },\n};\n","import React, { CSSProperties } from 'react';\nimport {\n  BackgroundImageSize,\n  CanvasElementItem,\n  CanvasElementOptions,\n  canvasElementRegistry,\n} from 'app/features/canvas';\nimport { DimensionContext } from 'app/features/dimensions';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { GroupState } from './group';\n\nlet counter = 100;\n\nexport class ElementState {\n  readonly UID = counter++;\n\n  revId = 0;\n  style: CSSProperties = {};\n\n  // Calculated\n  width = 100;\n  height = 100;\n  data?: any; // depends on the type\n\n  constructor(public item: CanvasElementItem, public options: CanvasElementOptions, public parent?: GroupState) {\n    if (!options) {\n      this.options = { type: item.id };\n    }\n  }\n\n  // The parent size, need to set our own size based on offsets\n  updateSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    // Update the CSS position\n    this.style = {\n      ...this.style,\n      width,\n      height,\n    };\n  }\n\n  updateData(ctx: DimensionContext) {\n    if (this.item.prepareData) {\n      this.data = this.item.prepareData(ctx, this.options.config);\n      this.revId++; // rerender\n    }\n\n    const { background, border } = this.options;\n    const css: CSSProperties = {};\n    if (background) {\n      if (background.color) {\n        const color = ctx.getColor(background.color);\n        css.backgroundColor = color.value();\n      }\n      if (background.image) {\n        const image = ctx.getResource(background.image);\n        if (image) {\n          const v = image.value();\n          if (v) {\n            css.backgroundImage = `url(\"${v}\")`;\n            switch (background.size ?? BackgroundImageSize.Contain) {\n              case BackgroundImageSize.Contain:\n                css.backgroundSize = 'contain';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Cover:\n                css.backgroundSize = 'cover';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Original:\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Tile:\n                css.backgroundRepeat = 'repeat';\n                break;\n              case BackgroundImageSize.Fill:\n                css.backgroundSize = '100% 100%';\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    if (border && border.color && border.width) {\n      const color = ctx.getColor(border.color);\n      css.borderWidth = border.width;\n      css.borderStyle = 'solid';\n      css.borderColor = color.value();\n\n      // Move the image to inside the border\n      if (css.backgroundImage) {\n        css.backgroundOrigin = 'padding-box';\n      }\n    }\n\n    css.width = this.width;\n    css.height = this.height;\n\n    this.style = css;\n  }\n\n  /** Recursivly visit all nodes */\n  visit(visitor: (v: ElementState) => void) {\n    visitor(this);\n  }\n\n  // Something changed\n  onChange(options: CanvasElementOptions) {\n    if (this.item.id !== options.type) {\n      this.item = canvasElementRegistry.getIfExists(options.type) ?? notFoundItem;\n    }\n\n    this.revId++;\n    this.options = { ...options };\n    let trav = this.parent;\n    while (trav) {\n      trav.revId++;\n      trav = trav.parent;\n    }\n  }\n\n  getSaveModel() {\n    return { ...this.options };\n  }\n\n  render() {\n    const { item } = this;\n    return (\n      <div key={`${this.UID}/${this.revId}`} style={this.style}>\n        <item.display config={this.options.config} width={this.width} height={this.height} data={this.data} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CanvasGroupOptions, canvasElementRegistry } from 'app/features/canvas';\nimport { DimensionContext } from 'app/features/dimensions';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { ElementState } from './element';\nimport { CanvasElementItem } from '../element';\n\nexport const groupItemDummy: CanvasElementItem = {\n  id: 'group',\n  name: 'Group',\n  description: 'Group',\n\n  defaultConfig: {},\n\n  // eslint-disable-next-line react/display-name\n  display: () => {\n    return <div>GROUP!</div>;\n  },\n};\n\nexport class GroupState extends ElementState {\n  readonly elements: ElementState[] = [];\n\n  constructor(public options: CanvasGroupOptions, public parent?: GroupState) {\n    super(groupItemDummy, options, parent);\n\n    // mutate options object\n    let { elements } = this.options;\n    if (!elements) {\n      this.options.elements = elements = [];\n    }\n\n    for (const c of elements) {\n      if (c.type === 'group') {\n        this.elements.push(new GroupState(c as CanvasGroupOptions, this));\n      } else {\n        const item = canvasElementRegistry.getIfExists(c.type) ?? notFoundItem;\n        this.elements.push(new ElementState(item, c, parent));\n      }\n    }\n  }\n\n  // The parent size, need to set our own size based on offsets\n  updateSize(width: number, height: number) {\n    super.updateSize(width, height);\n\n    // Update children with calculated size\n    for (const elem of this.elements) {\n      elem.updateSize(this.width, this.height);\n    }\n  }\n\n  updateData(ctx: DimensionContext) {\n    super.updateData(ctx);\n    for (const elem of this.elements) {\n      elem.updateData(ctx);\n    }\n  }\n\n  render() {\n    return (\n      <div key={`${this.UID}/${this.revId}`} style={this.style}>\n        {this.elements.map((v) => v.render())}\n      </div>\n    );\n  }\n\n  /** Recursivly visit all nodes */\n  visit(visitor: (v: ElementState) => void) {\n    super.visit(visitor);\n    for (const e of this.elements) {\n      visitor(e);\n    }\n  }\n\n  getSaveModel() {\n    return {\n      ...this.options,\n      elements: this.elements.map((v) => v.getSaveModel()),\n    };\n  }\n}\n","import React, { CSSProperties } from 'react';\nimport { css } from '@emotion/css';\nimport { config } from 'app/core/config';\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { CanvasElementOptions, CanvasGroupOptions, DEFAULT_CANVAS_ELEMENT_CONFIG } from 'app/features/canvas';\nimport {\n  ColorDimensionConfig,\n  ResourceDimensionConfig,\n  ScaleDimensionConfig,\n  TextDimensionConfig,\n  DimensionContext,\n} from 'app/features/dimensions';\nimport {\n  getColorDimensionFromData,\n  getScaleDimensionFromData,\n  getResourceDimensionFromData,\n  getTextDimensionFromData,\n} from 'app/features/dimensions/utils';\nimport { ReplaySubject } from 'rxjs';\nimport { GroupState } from './group';\nimport { ElementState } from './element';\n\nexport class Scene {\n  private root: GroupState;\n  private lookup = new Map<number, ElementState>();\n  styles = getStyles(config.theme2);\n  readonly selected = new ReplaySubject<ElementState | undefined>(undefined);\n  revId = 0;\n\n  width = 0;\n  height = 0;\n  style: CSSProperties = {};\n  data?: PanelData;\n\n  constructor(cfg: CanvasGroupOptions, public onSave: (cfg: CanvasGroupOptions) => void) {\n    this.root = this.load(cfg);\n  }\n\n  load(cfg: CanvasGroupOptions) {\n    console.log('LOAD', cfg, this);\n    this.root = new GroupState(\n      cfg ?? {\n        type: 'group',\n        elements: [DEFAULT_CANVAS_ELEMENT_CONFIG],\n      }\n    );\n\n    // Build the scene registry\n    this.lookup.clear();\n    this.root.visit((v) => {\n      this.lookup.set(v.UID, v);\n\n      // HACK! select the first/only item\n      if (v.item.id !== 'group') {\n        this.selected.next(v);\n      }\n    });\n    return this.root;\n  }\n\n  context: DimensionContext = {\n    getColor: (color: ColorDimensionConfig) => getColorDimensionFromData(this.data, color),\n    getScale: (scale: ScaleDimensionConfig) => getScaleDimensionFromData(this.data, scale),\n    getText: (text: TextDimensionConfig) => getTextDimensionFromData(this.data, text),\n    getResource: (res: ResourceDimensionConfig) => getResourceDimensionFromData(this.data, res),\n  };\n\n  updateData(data: PanelData) {\n    this.data = data;\n    this.root.updateData(this.context);\n  }\n\n  updateSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.style = { width, height };\n    this.root.updateSize(width, height);\n  }\n\n  onChange(uid: number, cfg: CanvasElementOptions) {\n    const elem = this.lookup.get(uid);\n    if (!elem) {\n      throw new Error('element not found: ' + uid + ' // ' + [...this.lookup.keys()]);\n    }\n    this.revId++;\n    elem.onChange(cfg);\n    elem.updateData(this.context); // Refresh any data that may have changed\n    this.save();\n  }\n\n  save() {\n    this.onSave(this.root.getSaveModel());\n  }\n\n  render() {\n    return (\n      <div key={this.revId} className={this.styles.wrap} style={this.style}>\n        {this.root.render()}\n      </div>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  wrap: css`\n    overflow: hidden;\n    position: relative;\n  `,\n\n  toolbar: css`\n    position: absolute;\n    bottom: 0;\n    margin: 10px;\n  `,\n}));\n","import { Component } from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { PanelOptions } from './models.gen';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { PanelEditExitedEvent } from 'app/types/events';\nimport { CanvasGroupOptions } from 'app/features/canvas';\nimport { Scene } from 'app/features/canvas/runtime/scene';\n\ninterface Props extends PanelProps<PanelOptions> {}\n\ninterface State {\n  refresh: number;\n}\n\n// Used to pass the scene to the editor functions\nexport const theScene = new ReplaySubject<Scene>(1);\n\nexport class CanvasPanel extends Component<Props, State> {\n  readonly scene: Scene;\n  private subs = new Subscription();\n  needsReload = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      refresh: 0,\n    };\n\n    // Only the initial options are ever used.\n    // later changs are all controled by the scene\n    this.scene = new Scene(this.props.options.root, this.onUpdateScene);\n    this.scene.updateSize(props.width, props.height);\n    this.scene.updateData(props.data);\n    theScene.next(this.scene); // used in the editors\n\n    this.subs.add(\n      this.props.eventBus.subscribe(PanelEditExitedEvent, (evt) => {\n        if (this.props.id === evt.payload) {\n          this.needsReload = true;\n        }\n      })\n    );\n  }\n\n  componentDidMount() {\n    theScene.next(this.scene);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  // NOTE, all changes to the scene flow through this function\n  // even the editor gets current state from the same scene instance!\n  onUpdateScene = (root: CanvasGroupOptions) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      root,\n    });\n    this.setState({ refresh: this.state.refresh + 1 });\n    // console.log('send changes', root);\n  };\n\n  shouldComponentUpdate(nextProps: Props) {\n    const { width, height, data, renderCounter } = this.props;\n    let changed = false;\n\n    if (width !== nextProps.width || height !== nextProps.height) {\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      changed = true;\n    }\n    if (data !== nextProps.data) {\n      this.scene.updateData(nextProps.data);\n      changed = true;\n    }\n\n    // After editing, the options are valid, but the scene was in a different panel\n    if (this.needsReload && this.props.options !== nextProps.options) {\n      this.needsReload = false;\n      this.scene.load(nextProps.options.root);\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      this.scene.updateData(nextProps.data);\n      changed = true;\n    }\n\n    if (renderCounter !== nextProps.renderCounter) {\n      changed = true;\n    }\n\n    return changed;\n  }\n\n  render() {\n    return this.scene.render();\n  }\n}\n","import React, { FC, useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { DataFrame, PanelOptionsEditorBuilder, StandardEditorContext } from '@grafana/data';\nimport { OptionsPaneCategoryDescriptor } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { fillOptionsPaneItems } from 'app/features/dashboard/components/PanelEditor/getVizualizationOptions';\nimport { cloneDeep } from 'lodash';\nimport { addBackgroundOptions, addBorderOptions } from './options';\nimport {\n  CanvasElementItem,\n  CanvasElementOptions,\n  canvasElementRegistry,\n  DEFAULT_CANVAS_ELEMENT_CONFIG,\n} from 'app/features/canvas';\n\nexport interface CanvasElementEditorProps<TConfig = any> {\n  options?: CanvasElementOptions<TConfig>;\n  data: DataFrame[]; // All results\n  onChange: (options: CanvasElementOptions<TConfig>) => void;\n  filter?: (item: CanvasElementItem) => boolean;\n}\n\nexport const CanvasElementEditor: FC<CanvasElementEditorProps> = ({ options, onChange, data, filter }) => {\n  // all basemaps\n  const layerTypes = useMemo(() => {\n    return canvasElementRegistry.selectOptions(\n      options?.type // the selected value\n        ? [options.type] // as an array\n        : [DEFAULT_CANVAS_ELEMENT_CONFIG.type],\n      filter\n    );\n  }, [options?.type, filter]);\n\n  // The options change with each layer type\n  const optionsEditorBuilder = useMemo(() => {\n    const layer = canvasElementRegistry.getIfExists(options?.type);\n    if (!layer || !layer.registerOptionsUI) {\n      return null;\n    }\n\n    const builder = new PanelOptionsEditorBuilder<CanvasElementOptions>();\n    if (layer.registerOptionsUI) {\n      layer.registerOptionsUI(builder);\n    }\n\n    addBackgroundOptions(builder);\n    addBorderOptions(builder);\n    return builder;\n  }, [options?.type]);\n\n  // The react componnets\n  const layerOptions = useMemo(() => {\n    const layer = canvasElementRegistry.getIfExists(options?.type);\n    if (!optionsEditorBuilder || !layer) {\n      return null;\n    }\n\n    const category = new OptionsPaneCategoryDescriptor({\n      id: 'CanvasElement config',\n      title: 'CanvasElement config',\n    });\n\n    const context: StandardEditorContext<any> = {\n      data,\n      options: options,\n    };\n\n    const currentOptions = { ...options, type: layer.id, config: { ...layer.defaultConfig, ...options?.config } };\n\n    // Update the panel options if not set\n    if (!options || (layer.defaultConfig && !options.config)) {\n      onChange(currentOptions as any);\n    }\n\n    const reg = optionsEditorBuilder.getRegistry();\n\n    // Load the options into categories\n    fillOptionsPaneItems(\n      reg.list(),\n\n      // Always use the same category\n      (categoryNames) => category,\n\n      // Custom upate function\n      (path: string, value: any) => {\n        onChange(setOptionImmutably(currentOptions, path, value) as any);\n      },\n      context\n    );\n\n    return (\n      <>\n        <br />\n        {category.items.map((item) => item.render())}\n      </>\n    );\n  }, [optionsEditorBuilder, onChange, data, options]);\n\n  return (\n    <div>\n      <Select\n        menuShouldPortal\n        options={layerTypes.options}\n        value={layerTypes.current}\n        onChange={(v) => {\n          const layer = canvasElementRegistry.getIfExists(v.value);\n          if (!layer) {\n            console.warn('layer does not exist', v);\n            return;\n          }\n\n          onChange({\n            ...options, // keep current options\n            type: layer.id,\n            config: cloneDeep(layer.defaultConfig ?? {}),\n          });\n        }}\n      />\n\n      {layerOptions}\n    </div>\n  );\n};\n","import { PanelOptionsEditorBuilder } from '@grafana/data';\nimport { BackgroundImageSize } from 'app/features/canvas';\nimport { ColorDimensionEditor, ResourceDimensionEditor } from 'app/features/dimensions/editors';\n\nexport function addBackgroundOptions(builder: PanelOptionsEditorBuilder<any>) {\n  builder\n    .addCustomEditor({\n      id: 'background.color',\n      path: 'background.color',\n      name: 'Background Color',\n      editor: ColorDimensionEditor,\n      settings: {},\n      defaultValue: {\n        // Configured values\n        fixed: '',\n      },\n    })\n    .addCustomEditor({\n      id: 'background.image',\n      path: 'background.image',\n      name: 'Background Image',\n      editor: ResourceDimensionEditor,\n      settings: {\n        resourceType: 'image',\n      },\n    })\n    .addRadio({\n      path: 'background.size',\n      name: 'Backround image size',\n      settings: {\n        options: [\n          { value: BackgroundImageSize.Original, label: 'Original' },\n          { value: BackgroundImageSize.Contain, label: 'Contain' },\n          { value: BackgroundImageSize.Cover, label: 'Cover' },\n          { value: BackgroundImageSize.Fill, label: 'Fill' },\n          { value: BackgroundImageSize.Tile, label: 'Tile' },\n        ],\n      },\n      defaultValue: BackgroundImageSize.Cover,\n    });\n}\n\nexport function addBorderOptions(builder: PanelOptionsEditorBuilder<any>) {\n  builder.addSliderInput({\n    path: 'border.width',\n    name: 'Border Width',\n    defaultValue: 2,\n    settings: {\n      min: 0,\n      max: 20,\n    },\n  });\n\n  builder.addCustomEditor({\n    id: 'border.color',\n    path: 'border.color',\n    name: 'Border Color',\n    editor: ColorDimensionEditor,\n    settings: {},\n    defaultValue: {\n      // Configured values\n      fixed: '',\n    },\n    showIf: (cfg) => Boolean(cfg.border?.width),\n  });\n}\n","import React, { FC } from 'react';\nimport { StandardEditorProps } from '@grafana/data';\nimport { PanelOptions } from '../models.gen';\nimport { CanvasElementEditor } from './ElementEditor';\nimport { theScene } from '../CanvasPanel';\nimport { useObservable } from 'react-use';\nimport { of } from 'rxjs';\nimport { CanvasGroupOptions } from 'app/features/canvas';\n\nexport const SelectedElementEditor: FC<StandardEditorProps<CanvasGroupOptions, any, PanelOptions>> = ({ context }) => {\n  const scene = useObservable(theScene);\n  const selected = useObservable(scene?.selected ?? of(undefined));\n\n  if (!selected) {\n    return <div>No item is selected</div>;\n  }\n\n  return (\n    <CanvasElementEditor\n      options={selected.options}\n      data={context.data}\n      onChange={(cfg) => {\n        scene!.onChange(selected.UID, cfg);\n      }}\n    />\n  );\n};\n","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { CanvasGroupOptions, DEFAULT_CANVAS_ELEMENT_CONFIG } from 'app/features/canvas';\n\nexport const modelVersion = Object.freeze([1, 0]);\n\nexport interface PanelOptions {\n  root: CanvasGroupOptions;\n}\n\nexport const defaultPanelOptions: PanelOptions = {\n  root: ({\n    elements: [\n      {\n        ...DEFAULT_CANVAS_ELEMENT_CONFIG,\n      },\n    ],\n  } as unknown) as CanvasGroupOptions,\n};\n","import { PanelPlugin } from '@grafana/data';\n\nimport { CanvasPanel } from './CanvasPanel';\nimport { SelectedElementEditor } from './editor/SelectedElementEditor';\nimport { defaultPanelOptions, PanelOptions } from './models.gen';\n\nexport const plugin = new PanelPlugin<PanelOptions>(CanvasPanel)\n  .setNoPadding() // extend to panel edges\n  .useFieldConfig()\n  .setPanelOptions((builder) => {\n    builder.addCustomEditor({\n      category: ['Selected Element'],\n      id: 'root',\n      path: 'root', // multiple elements may edit root!\n      name: 'Selected Element',\n      editor: SelectedElementEditor,\n      defaultValue: defaultPanelOptions.root,\n    });\n  });\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n"],"names":["OptionsPaneCategory","React","id","title","children","forceOpen","isOpenDefault","renderTitle","className","itemsCount","isNested","initialIsExpanded","savedState","setSavedState","useLocalStorage","getOptionGroupStorageKey","isExpanded","setIsExpanded","useState","styles","useStyles2","getStyles","useEffect","onToggle","useCallback","undefined","Counter","value","boxStyles","cx","box","boxNestedExpanded","headerStyles","header","headerExpanded","headerNested","bodyStyles","body","bodyNested","selectors","onClick","toggle","Icon","name","role","theme","css","colors","border","weak","spacing","text","secondary","primary","typography","fontWeightMedium","emphasize","background","PANEL_EDITOR_UI_STATE_STORAGE_KEY","OptionsPaneCategoryDescriptor","constructor","props","addItem","item","parent","this","items","push","addCategory","category","categories","render","searchQuery","customRender","map","OptionsPaneItemDescriptor","getLabel","description","highlightWord","Label","word","query","textToHighlight","searchWords","highlightClassName","showIf","skipField","key","Field","label","getVizualizationOptions","plugin","panel","onPanelOptionsChanged","onFieldConfigsChange","data","dashboard","currentOptions","getOptions","currentFieldConfig","fieldConfig","categoryIndex","context","series","replaceVariables","options","eventBus","events","getSuggestions","scope","getDataLinksVariableSuggestions","getOptionsPaneCategory","categoryNames","categoryName","meta","fillOptionsPaneItems","optionEditors","list","path","newOptions","setOptionImmutably","fieldOption","fieldConfigRegistry","isCustom","defaults","custom","hideFromDefaults","Editor","editor","lodashGet","getItemsCount","onChange","v","updateDefaultFieldConfigValue","Object","values","onValueChanged","pluginOption","calculatePanelSize","mode","width","height","DisplayMode","pWidth","window","innerWidth","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","gridPos","w","pHeight","GRID_CELL_HEIGHT","h","scale","Math","min","supportsDataQuery","skipDataQuery","config","remove","omit","splat","Array","isArray","split","shift","endsWith","idx","lastIndexOf","index","substring","length","propKey","substr","current","arr","BackgroundImageSize","svgStrokePathClass","iconItem","display","svgStyle","fill","stroke","strokeColor","strokeWidth","src","style","defaultConfig","ResourceDimensionMode","fixed","defaultSize","prepareData","ctx","cfg","getResource","isString","getPublicOrAbsoluteUrl","getColor","color","registerOptionsUI","builder","addCustomEditor","ResourceDimensionEditor","settings","resourceType","ColorDimensionEditor","defaultValue","addSliderInput","max","Boolean","Align","VAlign","TextBoxDisplay","PureComponent","container","span","stylesFactory","valign","align","size","textBoxItem","Left","Middle","getText","Center","TextDimensionEditor","addRadio","Right","Top","Bottom","addNumberInput","placeholder","DEFAULT_CANVAS_ELEMENT_CONFIG","type","placement","canvasElementRegistry","Registry","NotFoundDisplay","JSON","stringify","notFoundItem","counter","ElementState","updateSize","updateData","revId","backgroundColor","image","backgroundImage","Contain","backgroundSize","backgroundRepeat","Cover","Original","Tile","Fill","borderWidth","borderStyle","borderColor","backgroundOrigin","visit","visitor","getIfExists","trav","getSaveModel","UID","groupItemDummy","GroupState","super","elements","c","elem","e","Scene","onSave","Map","ReplaySubject","getColorDimensionFromData","getScale","getScaleDimensionFromData","getTextDimensionFromData","res","getResourceDimensionFromData","root","load","console","log","lookup","clear","set","selected","next","uid","get","Error","keys","save","wrap","toolbar","theScene","CanvasPanel","Component","Subscription","onOptionsChange","setState","refresh","state","scene","onUpdateScene","subs","add","subscribe","PanelEditExitedEvent","evt","payload","needsReload","componentDidMount","componentWillUnmount","unsubscribe","shouldComponentUpdate","nextProps","renderCounter","changed","CanvasElementEditor","filter","layerTypes","useMemo","selectOptions","optionsEditorBuilder","layer","PanelOptionsEditorBuilder","addBackgroundOptions","addBorderOptions","layerOptions","reg","getRegistry","Select","menuShouldPortal","cloneDeep","warn","SelectedElementEditor","useObservable","of","defaultPanelOptions","freeze","PanelPlugin","setNoPadding","useFieldConfig","setPanelOptions","observable$","initialValue","_a","update","s"],"sourceRoot":""}