{"version":3,"file":"cloudMonitoringPlugin.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["import { isString } from 'lodash';\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery, MetricDescriptor, MetricFindQueryTypes, MetricKind, ValueTypes } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { VariableQueryField } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\nimport CloudMonitoringDatasource from '../datasource';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices,\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\n\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  EditorMode,\n  Filter,\n  MetricDescriptor,\n  QueryType,\n  PostResponse,\n  Aggregation,\n} from './types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasource: this.getRef(),\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<PostResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries,\n          },\n        })\n        .pipe(\n          map(({ data }) => {\n            const dataQueryResponse = toDataQueryResponse({\n              data: data,\n            });\n            const df: any = [];\n            if (dataQueryResponse.data.length !== 0) {\n              for (let i = 0; i < dataQueryResponse.data.length; i++) {\n                for (let j = 0; j < dataQueryResponse.data[i].fields[0].values.length; j++) {\n                  df.push({\n                    annotation: annotation,\n                    time: Date.parse(dataQueryResponse.data[i].fields[0].values.get(j)),\n                    title: dataQueryResponse.data[i].fields[1].values.get(j),\n                    tags: [],\n                    text: dataQueryResponse.data[i].fields[3].values.get(j),\n                  });\n                }\n              }\n            }\n            return df;\n          })\n        )\n    );\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasource: this.getRef(),\n      refId,\n      intervalMs: this.intervalMs,\n      type: 'timeSeriesQuery',\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, aggregation?: Aggregation) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n            crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return getBackendSrv().fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`\n    ) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types';\nimport { ConnectionConfig } from '@grafana/google-sdk';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return (\n      <>\n        <ConnectionConfig {...this.props}></ConnectionConfig>\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { CloudMonitoringQuery } from '../types';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <label>Patterns</label>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation || {};\n    this.annotation.target = $scope.ctrl.annotation.target || {};\n\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"names":["CloudMonitoringMetricFindQuery","constructor","datasource","query","projectName","this","getDefaultProject","selectedQueryType","MetricFindQueryTypes","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","error","console","getProjects","map","s","text","label","value","expandable","metricDescriptors","getMetricTypes","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","toFindQueryResult","labelKey","labels","getLabels","groupBys","crossSeriesReducer","interpolatedKey","hasOwnProperty","descriptor","find","m","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","SELECTORS","ALIGNMENT_PERIODS","x","isString","CloudMonitoringVariableQueryEditor","PureComponent","props","super","queryTypes","metricTypes","services","sloServices","projects","loading","queryModel","state","onChange","refId","Object","assign","defaults","some","getTemplateSrv","length","setState","onPropsChange","queryType","metricType","onLabelKeyChange","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","l","renderQueryTypeSwitch","variableOptionGroup","expanded","options","getVariables","v","name","allowCustomValue","onProjectChange","onServiceChange","onMetricTypeChange","render","className","onQueryTypeChange","CloudMonitoringVariableSupport","CustomVariableSupport","metricFindQuery","bind","request","executeObservable","from","execute","targets","ensureGCEDefaultProject","pipe","mergeMap","data","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","authenticationType","jsonData","variables","intervalMs","t","migrateQuery","annotation","queries","getRef","view","perSeriesAligner","target","scopedVars","title","filters","interpolateFilters","lastValueFrom","getBackendSrv","fetch","url","method","range","valueOf","toString","to","dataQueryResponse","toDataQueryResponse","df","i","j","fields","values","push","time","Date","parse","get","tags","applyTemplateVariables","metricQuery","sloQuery","interpolateProps","interpolateGroupBys","editorMode","aggregation","QueryType","timeRange","f","meta","custom","filter","p","reduce","acc","key","Set","add","fromEntries","entries","Array","of","results","getResource","defaultProject","gceDefaultProject","getGCEDefaultProject","serviceId","Promise","resolve","hide","rest","object","filterQuery","selectorName","sloId","EditorMode","interpolateVariablesInQueries","completeFilter","chunk","operator","condition","item","flatten","isArray","join","interpolatedGroupBys","forEach","gb","interpolated","split","concat","ConfigEditor","ConnectionConfig","CloudMonitoringCheatSheet","css","CloudMonitoringAnnotationsQueryCtrl","$scope","ctrl","onQueryChange","plugin","DataSourcePlugin","setQueryEditorHelp","setQueryEditor","QueryEditor","setConfigEditor","setAnnotationQueryCtrl","setVariableQueryEditor"],"sourceRoot":""}