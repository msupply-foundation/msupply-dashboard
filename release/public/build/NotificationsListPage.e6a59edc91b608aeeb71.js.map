{"version":3,"sources":["webpack:///./public/app/features/alerting/NotificationsListPage.tsx","webpack:///./public/app/core/hooks/useNavModel.ts","webpack:///./node_modules/react-use/esm/useAsyncFn.js","webpack:///./node_modules/react-use/esm/useMountedState.js"],"names":["deleteNotification","id","getBackendSrv","delete","getNotifications","get","NotificationsListPage","navIndex","navModel","useSelector","state","getNavModel","useState","notifications","setNotifications","useAsyncFn","fetchNotifications","useEffect","then","res","Page","Contents","error","length","className","icon","href","style","minWidth","width","map","notification","key","name","type","justify","isDefault","disabled","variant","size","onClick","filter","notify","loading","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","fn","deps","initialState","lastCallId","_a","set","isMounted","args","_i","arguments","callId","current","apply","value","useMountedState","mountedRef"],"mappings":"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","file":"NotificationsListPage.e6a59edc91b608aeeb71.js","sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { useAsyncFn } from 'react-use';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport { AlertNotification } from 'app/types/alerting';\n\nconst deleteNotification = async (id: number) => {\n  return await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n};\n\nconst getNotifications = async () => {\n  return await getBackendSrv().get(`/api/alert-notifications`);\n};\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then(res => {\n      setNotifications(res);\n    });\n  }, []);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map(notification => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                            setNotifications(notifications.filter(notify => notify.id !== notification.id));\n                            fetchNotifications();\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n","import { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { getNavModel } from '../selectors/navModel';\nimport { NavModel } from '../core';\n\nexport const useNavModel = (id: string): NavModel => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  return getNavModel(navIndex, id);\n};\n","/* eslint-disable */\nimport { useCallback, useState, useRef } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n    if (deps === void 0) { deps = []; }\n    if (initialState === void 0) { initialState = { loading: false }; }\n    var lastCallId = useRef(0);\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var isMounted = useMountedState();\n    var callback = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var callId = ++lastCallId.current;\n        set({ loading: true });\n        return fn.apply(void 0, args).then(function (value) {\n            isMounted() && callId === lastCallId.current && set({ value: value, loading: false });\n            return value;\n        }, function (error) {\n            isMounted() && callId === lastCallId.current && set({ error: error, loading: false });\n            return error;\n        });\n    }, deps);\n    return [state, callback];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    });\n    return get;\n}\n"],"sourceRoot":""}