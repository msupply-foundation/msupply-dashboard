{"version":3,"file":"lokiPlugin.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/add_label_to_query.ts","webpack://grafana/./.yarn/cache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/parse.js","webpack://grafana/./.yarn/cache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/sha1.js","webpack://grafana/./.yarn/cache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/v5.js","webpack://grafana/./.yarn/cache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/v35.js","webpack://grafana/./public/app/plugins/datasource/loki/query_utils.ts","webpack://grafana/./public/app/plugins/datasource/loki/result_transformer.ts","webpack://grafana/./.yarn/cache/rxjs-npm-7.5.1-ce59cbb6a3-78e3eecb16.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/WebSocketSubject.js","webpack://grafana/./public/app/plugins/datasource/loki/live_streams.ts","webpack://grafana/./.yarn/cache/rxjs-npm-7.5.1-ce59cbb6a3-78e3eecb16.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/webSocket.js","webpack://grafana/./public/app/plugins/datasource/loki/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/loki/datasource.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiExploreQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operations.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/LokiQueryModeller.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplaind.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/LokiAnnotationsQueryCtrl.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts"],"sourcesContent":["import { chain, isEqual } from 'lodash';\nimport { LOKI_KEYWORDS } from './syntax';\nimport { PROM_KEYWORDS, OPERATORS, LOGICAL_OPERATORS } from 'app/plugins/datasource/prometheus/promql';\n\nconst builtInWords = [...PROM_KEYWORDS, ...OPERATORS, ...LOGICAL_OPERATORS, ...LOKI_KEYWORDS];\n\n// We want to extract all possible metrics and also keywords\nconst metricsAndKeywordsRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\]{=!\",])/g;\n\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  value: string | number,\n  operator?: string,\n  hasNoMetrics?: boolean\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n\n  query = query.replace(metricsAndKeywordsRegexp, (match, word, offset) => {\n    const isMetric = isWordMetric(query, word, offset, previousWord, hasNoMetrics);\n    previousWord = word;\n\n    return isMetric ? `${word}{}` : word;\n  });\n\n  //This is a RegExp for stream selector - e.g. {job=\"grafana\"}\n  const selectorRegexp = /(\\$)?{([^{]*)}/g;\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  let match = selectorRegexp.exec(query);\n  /* \n    There are 2 possible false positive scenarios: \n    \n    1. We match Grafana's variables with ${ syntax - such as${__rate_s}. To filter these out we could use negative lookbehind,\n    but Safari browser currently doesn't support it. Therefore we need to hack this by creating 2 matching groups. \n    (\\$) is for the Grafana's variables and if we match it, we know this is not a stream selector and we don't want to add label.\n\n    2. Log queries can include {{.label}} syntax when line_format is used. We need to filter these out by checking\n    if match starts with \"{.\"\n  */\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    lastIndex = match.index + match[2].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n\n    // Filtering our false positives\n    if (match[0].startsWith('{.') || match[1]) {\n      parts.push(prefix);\n      parts.push(match[0]);\n    } else {\n      // If we didn't match first group, we are inside selector and we want to add labels\n      const selector = match[2];\n      const selectorWithLabel = addLabelToSelector(selector, key, transformedValue, operator);\n      parts.push(prefix, selectorWithLabel);\n    }\n\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = chain(parsedLabels)\n    .uniqWith(isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nfunction isWordMetric(query: string, word: string, offset: number, previousWord: string, hasNoMetrics?: boolean) {\n  const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n  // Handle \"sum by (key) (metric)\"\n  const previousWordIsKeyWord = previousWord && OPERATORS.indexOf(previousWord) > -1;\n  // Check for colon as as \"word boundary\" symbol\n  const isColonBounded = word.endsWith(':');\n  // Check for words that start with \" which means that they are not metrics\n  const startsWithQuote = query[offset - 1] === '\"';\n  // Check for template variables\n  const isTemplateVariable = query[offset - 1] === '$';\n  // Check for time units\n  const isTimeUnit = ['s', 'm', 'h', 'd', 'w'].includes(word) && Boolean(Number(query[offset - 1]));\n\n  if (\n    !hasNoMetrics &&\n    !insideSelector &&\n    !isColonBounded &&\n    !previousWordIsKeyWord &&\n    !startsWithQuote &&\n    !isTemplateVariable &&\n    !isTimeUnit &&\n    builtInWords.indexOf(word) === -1\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default addLabelToQuery;\n","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import { escapeRegExp } from 'lodash';\nimport { PIPE_PARSERS } from './syntax';\n\nexport function formatQuery(selector: string | undefined): string {\n  return `${selector || ''}`.trim();\n}\n\n/**\n * Returns search terms from a LogQL query.\n * E.g., `{} |= foo |=bar != baz` returns `['foo', 'bar']`.\n */\nexport function getHighlighterExpressionsFromQuery(input: string): string[] {\n  let expression = input;\n  const results = [];\n\n  // Consume filter expression from left to right\n  while (expression) {\n    const filterStart = expression.search(/\\|=|\\|~|!=|!~/);\n    // Nothing more to search\n    if (filterStart === -1) {\n      break;\n    }\n    // Drop terms for negative filters\n    const filterOperator = expression.substr(filterStart, 2);\n    const skip = expression.substr(filterStart).search(/!=|!~/) === 0;\n    expression = expression.substr(filterStart + 2);\n    if (skip) {\n      continue;\n    }\n    // Check if there is more chained\n    const filterEnd = expression.search(/\\|=|\\|~|!=|!~/);\n    let filterTerm;\n    if (filterEnd === -1) {\n      filterTerm = expression.trim();\n    } else {\n      filterTerm = expression.substr(0, filterEnd).trim();\n      expression = expression.substr(filterEnd);\n    }\n\n    const quotedTerm = filterTerm.match(/\"(.*?)\"/);\n    const backtickedTerm = filterTerm.match(/`(.*?)`/);\n    const term = quotedTerm || backtickedTerm;\n\n    if (term) {\n      const unwrappedFilterTerm = term[1];\n      const regexOperator = filterOperator === '|~';\n\n      // Only filter expressions with |~ operator are treated as regular expressions\n      if (regexOperator) {\n        // When using backticks, Loki doesn't require to escape special characters and we can just push regular expression to highlights array\n        // When using quotes, we have extra backslash escaping and we need to replace \\\\ with \\\n        results.push(backtickedTerm ? unwrappedFilterTerm : unwrappedFilterTerm.replace(/\\\\\\\\/g, '\\\\'));\n      } else {\n        // We need to escape this string so it is not matched as regular expression\n        results.push(escapeRegExp(unwrappedFilterTerm));\n      }\n    } else {\n      return results;\n    }\n  }\n\n  return results;\n}\n\nexport function queryHasPipeParser(expr: string): boolean {\n  const parsers = PIPE_PARSERS.map((parser) => `${parser.label}`).join('|');\n  const regexp = new RegExp(`\\\\\\|\\\\\\s?(${parsers})`);\n  return regexp.test(expr);\n}\n\nexport function addParsedLabelToQuery(expr: string, key: string, value: string | number, operator: string) {\n  return expr + ` | ${key}${operator}\"${value.toString()}\"`;\n}\n","import { capitalize, groupBy, isEmpty } from 'lodash';\nimport { v5 as uuidv5 } from 'uuid';\nimport { of } from 'rxjs';\n\nimport {\n  FieldType,\n  TimeSeries,\n  Labels,\n  DataFrame,\n  ArrayVector,\n  MutableDataFrame,\n  findUniqueLabels,\n  DataFrameView,\n  DataLink,\n  Field,\n  QueryResultMetaStat,\n  QueryResultMeta,\n  TimeSeriesValue,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { getTemplateSrv, getDataSourceSrv } from '@grafana/runtime';\nimport TableModel from 'app/core/table_model';\nimport { formatQuery, getHighlighterExpressionsFromQuery } from './query_utils';\nimport {\n  LokiRangeQueryRequest,\n  LokiResponse,\n  LokiMatrixResult,\n  LokiVectorResult,\n  TransformerOptions,\n  LokiResultType,\n  LokiStreamResult,\n  LokiTailResponse,\n  LokiQuery,\n  LokiOptions,\n  DerivedFieldConfig,\n  LokiStreamResponse,\n  LokiStats,\n} from './types';\nimport { renderLegendFormat } from '../prometheus/legend';\n\nconst UUID_NAMESPACE = '6ec946da-0f49-47a8-983a-1d76d17e7c92';\n\n/**\n * Transforms LokiStreamResult structure into a dataFrame. Used when doing standard queries and newer version of Loki.\n */\nexport function lokiStreamResultToDataFrame(stream: LokiStreamResult, reverse?: boolean, refId?: string): DataFrame {\n  const labels: Labels = stream.stream;\n  const labelsString = Object.entries(labels)\n    .map(([key, val]) => `${key}=\"${val}\"`)\n    .sort()\n    .join('');\n\n  const times = new ArrayVector<string>([]);\n  const timesNs = new ArrayVector<string>([]);\n  const lines = new ArrayVector<string>([]);\n  const uids = new ArrayVector<string>([]);\n\n  // We need to store and track all used uids to ensure that uids are unique\n  const usedUids: { string?: number } = {};\n\n  for (const [ts, line] of stream.values) {\n    // num ns epoch in string, we convert it to iso string here so it matches old format\n    times.add(new Date(parseInt(ts.substr(0, ts.length - 6), 10)).toISOString());\n    timesNs.add(ts);\n    lines.add(line);\n    uids.add(createUid(ts, labelsString, line, usedUids, refId));\n  }\n\n  return constructDataFrame(times, timesNs, lines, uids, labels, reverse, refId);\n}\n\n/**\n * Constructs dataFrame with supplied fields and other data. Also makes sure it is properly reversed if needed.\n */\nfunction constructDataFrame(\n  times: ArrayVector<string>,\n  timesNs: ArrayVector<string>,\n  lines: ArrayVector<string>,\n  uids: ArrayVector<string>,\n  labels: Labels,\n  reverse?: boolean,\n  refId?: string\n) {\n  const dataFrame = {\n    refId,\n    fields: [\n      { name: 'ts', type: FieldType.time, config: { displayName: 'Time' }, values: times }, // Time\n      { name: 'line', type: FieldType.string, config: {}, values: lines, labels }, // Line - needs to be the first field with string type\n      { name: 'id', type: FieldType.string, config: {}, values: uids },\n      { name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' }, values: timesNs }, // Time\n    ],\n    length: times.length,\n  };\n\n  if (reverse) {\n    const mutableDataFrame = new MutableDataFrame(dataFrame);\n    mutableDataFrame.reverse();\n    return mutableDataFrame;\n  }\n\n  return dataFrame;\n}\n\n/**\n * Transform LokiResponse data and appends it to MutableDataFrame. Used for streaming where the dataFrame can be\n * a CircularDataFrame creating a fixed size rolling buffer.\n * TODO: Probably could be unified with the logStreamToDataFrame function.\n * @param response\n * @param data Needs to have ts, line, labels, id as fields\n */\nexport function appendResponseToBufferedData(response: LokiTailResponse, data: MutableDataFrame) {\n  // Should we do anything with: response.dropped_entries?\n\n  const streams: LokiStreamResult[] = response.streams;\n  if (!streams || !streams.length) {\n    return;\n  }\n\n  let baseLabels: Labels = {};\n  for (const f of data.fields) {\n    if (f.type === FieldType.string) {\n      if (f.labels) {\n        baseLabels = f.labels;\n      }\n      break;\n    }\n  }\n\n  const tsField = data.fields[0];\n  const tsNsField = data.fields[1];\n  const lineField = data.fields[2];\n  const labelsField = data.fields[3];\n  const idField = data.fields[4];\n\n  // We are comparing used ids only within the received stream. This could be a problem if the same line + labels + nanosecond timestamp came in 2 separate batches.\n  // As this is very unlikely, and the result would only affect live-tailing css animation we have decided to not compare all received uids from data param as this would slow down processing.\n  const usedUids: { string?: number } = {};\n\n  for (const stream of streams) {\n    // Find unique labels\n    const unique = findUniqueLabels(stream.stream, baseLabels);\n    const allLabelsString = Object.entries(stream.stream)\n      .map(([key, val]) => `${key}=\"${val}\"`)\n      .sort()\n      .join('');\n\n    // Add each line\n    for (const [ts, line] of stream.values) {\n      tsField.values.add(new Date(parseInt(ts.substr(0, ts.length - 6), 10)).toISOString());\n      tsNsField.values.add(ts);\n      lineField.values.add(line);\n      labelsField.values.add(unique);\n      idField.values.add(createUid(ts, allLabelsString, line, usedUids, data.refId));\n    }\n  }\n}\n\nfunction createUid(ts: string, labelsString: string, line: string, usedUids: any, refId?: string): string {\n  // Generate id as hashed nanosecond timestamp, labels and line (this does not have to be unique)\n  let id = uuidv5(`${ts}_${labelsString}_${line}`, UUID_NAMESPACE);\n\n  // Check if generated id is unique\n  // If not and we've already used it, append it's count after it\n  if (id in usedUids) {\n    // Increase the count\n    const newCount = usedUids[id] + 1;\n    usedUids[id] = newCount;\n    // Append count to generated id to make it unique\n    id = `${id}_${newCount}`;\n  } else {\n    // If id is unique and wasn't used, add it to usedUids and start count at 0\n    usedUids[id] = 0;\n  }\n  // Return unique id\n  if (refId) {\n    return `${id}_${refId}`;\n  }\n  return id;\n}\n\nfunction lokiMatrixToTimeSeries(matrixResult: LokiMatrixResult, options: TransformerOptions): TimeSeries {\n  const name = createMetricLabel(matrixResult.metric, options);\n  return {\n    target: name,\n    title: name,\n    datapoints: lokiPointsToTimeseriesPoints(matrixResult.values),\n    tags: matrixResult.metric,\n    meta: options.meta,\n    refId: options.refId,\n  };\n}\n\nexport function lokiPointsToTimeseriesPoints(data: Array<[number, string]>): TimeSeriesValue[][] {\n  const datapoints: TimeSeriesValue[][] = [];\n\n  for (const [time, value] of data) {\n    let datapointValue: TimeSeriesValue = parseFloat(value);\n\n    if (isNaN(datapointValue)) {\n      datapointValue = null;\n    }\n\n    const timestamp = time * 1000;\n\n    datapoints.push([datapointValue, timestamp]);\n  }\n\n  return datapoints;\n}\n\nexport function lokiResultsToTableModel(\n  lokiResults: Array<LokiMatrixResult | LokiVectorResult>,\n  resultCount: number,\n  refId: string,\n  meta: QueryResultMeta,\n  valueWithRefId?: boolean\n): TableModel {\n  if (!lokiResults || lokiResults.length === 0) {\n    return new TableModel();\n  }\n\n  // Collect all labels across all metrics\n  const metricLabels: Set<string> = new Set<string>(\n    lokiResults.reduce((acc, cur) => acc.concat(Object.keys(cur.metric)), [] as string[])\n  );\n\n  // Sort metric labels, create columns for them and record their index\n  const sortedLabels = [...metricLabels.values()].sort();\n  const table = new TableModel();\n  table.refId = refId;\n  table.meta = meta;\n  table.columns = [\n    { text: 'Time', type: FieldType.time },\n    ...sortedLabels.map((label) => ({ text: label, filterable: true, type: FieldType.string })),\n    { text: resultCount > 1 || valueWithRefId ? `Value #${refId}` : 'Value', type: FieldType.number },\n  ];\n\n  // Populate rows, set value to empty string when label not present.\n  lokiResults.forEach((series) => {\n    const newSeries: LokiMatrixResult = {\n      metric: series.metric,\n      values: (series as LokiVectorResult).value\n        ? [(series as LokiVectorResult).value]\n        : (series as LokiMatrixResult).values,\n    };\n\n    if (!newSeries.values) {\n      return;\n    }\n\n    if (!newSeries.metric) {\n      table.rows.concat(newSeries.values.map(([a, b]) => [a * 1000, parseFloat(b)]));\n    } else {\n      table.rows.push(\n        ...newSeries.values.map(([a, b]) => [\n          a * 1000,\n          ...sortedLabels.map((label) => newSeries.metric[label] || ''),\n          parseFloat(b),\n        ])\n      );\n    }\n  });\n\n  return table;\n}\n\nexport function createMetricLabel(labelData: { [key: string]: string }, options?: TransformerOptions) {\n  let label =\n    options === undefined || isEmpty(options.legendFormat)\n      ? getOriginalMetricName(labelData)\n      : renderLegendFormat(getTemplateSrv().replace(options.legendFormat ?? '', options.scopedVars), labelData);\n\n  if (!label && options) {\n    label = options.query;\n  }\n  return label;\n}\n\nfunction getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nexport function decamelize(s: string): string {\n  return s.replace(/[A-Z]/g, (m) => ` ${m.toLowerCase()}`);\n}\n\n// Turn loki stats { metric: value } into meta stat { title: metric, value: value }\nfunction lokiStatsToMetaStat(stats: LokiStats | undefined): QueryResultMetaStat[] {\n  const result: QueryResultMetaStat[] = [];\n\n  if (!stats) {\n    return result;\n  }\n\n  for (const section in stats) {\n    const values = stats[section];\n    for (const label in values) {\n      const value = values[label];\n      let unit;\n      if (/time/i.test(label) && value) {\n        unit = 's';\n      } else if (/bytes.*persecond/i.test(label)) {\n        unit = 'Bps';\n      } else if (/bytes/i.test(label)) {\n        unit = 'decbytes';\n      }\n      const title = `${capitalize(section)}: ${decamelize(label)}`;\n      result.push({ displayName: title, value, unit });\n    }\n  }\n\n  return result;\n}\n\nexport function lokiStreamsToDataFrames(\n  response: LokiStreamResponse,\n  target: { refId: string; expr?: string },\n  limit: number,\n  config: LokiOptions,\n  reverse = false\n): DataFrame[] {\n  const data = limit > 0 ? response.data.result : [];\n  const stats: QueryResultMetaStat[] = lokiStatsToMetaStat(response.data.stats);\n  // Use custom mechanism to identify which stat we want to promote to label\n  const custom = {\n    lokiQueryStatKey: 'Summary: total bytes processed',\n  };\n\n  const meta: QueryResultMeta = {\n    searchWords: getHighlighterExpressionsFromQuery(formatQuery(target.expr)),\n    limit,\n    stats,\n    custom,\n    preferredVisualisationType: 'logs',\n  };\n\n  const series: DataFrame[] = data.map((stream) => {\n    const dataFrame = lokiStreamResultToDataFrame(stream, reverse, target.refId);\n    enhanceDataFrame(dataFrame, config);\n\n    if (meta.custom && dataFrame.fields.some((f) => f.labels && Object.keys(f.labels).some((l) => l === '__error__'))) {\n      meta.custom.error = 'Error when parsing some of the logs';\n    }\n\n    return {\n      ...dataFrame,\n      refId: target.refId,\n      meta,\n    };\n  });\n\n  if (stats.length && !data.length) {\n    return [\n      {\n        fields: [],\n        length: 0,\n        refId: target.refId,\n        meta,\n      },\n    ];\n  }\n\n  return series;\n}\n\n/**\n * Adds new fields and DataLinks to DataFrame based on DataSource instance config.\n */\nexport const enhanceDataFrame = (dataFrame: DataFrame, config: LokiOptions | null): void => {\n  if (!config) {\n    return;\n  }\n\n  const derivedFields = config.derivedFields ?? [];\n  if (!derivedFields.length) {\n    return;\n  }\n  const derivedFieldsGrouped = groupBy(derivedFields, 'name');\n\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig);\n\n  const view = new DataFrameView(dataFrame);\n  view.forEach((row: { line: string }) => {\n    for (const field of newFields) {\n      const logMatch = row.line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.add(logMatch && logMatch[1]);\n    }\n  });\n\n  dataFrame.fields = [...dataFrame.fields, ...newFields];\n};\n\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs: DerivedFieldConfig[]): Field<any, ArrayVector> {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const dataLinks = derivedFieldConfigs.reduce((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n\n      acc.push({\n        // Will be filled out later\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: { query: derivedFieldConfig.url },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url,\n      });\n    }\n    return acc;\n  }, [] as DataLink[]);\n\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks,\n    },\n    // We are adding values later on\n    values: new ArrayVector<string>([]),\n  };\n}\n\nfunction rangeQueryResponseToTimeSeries(\n  response: LokiResponse,\n  query: LokiRangeQueryRequest,\n  target: LokiQuery,\n  responseListLength: number,\n  scopedVars: ScopedVars\n): TimeSeries[] {\n  /** Show results of Loki metric queries only in graph */\n  const meta: QueryResultMeta = {\n    preferredVisualisationType: 'graph',\n  };\n  const transformerOptions: TransformerOptions = {\n    format: target.format,\n    legendFormat: target.legendFormat ?? '',\n    start: query.start!,\n    end: query.end!,\n    step: query.step!,\n    query: query.query,\n    responseListLength,\n    refId: target.refId,\n    meta,\n    valueWithRefId: target.valueWithRefId,\n    scopedVars,\n  };\n\n  switch (response.data.resultType) {\n    case LokiResultType.Vector:\n      return response.data.result.map((vecResult) =>\n        lokiMatrixToTimeSeries({ metric: vecResult.metric, values: [vecResult.value] }, transformerOptions)\n      );\n    case LokiResultType.Matrix:\n      return response.data.result.map((matrixResult) => lokiMatrixToTimeSeries(matrixResult, transformerOptions));\n    default:\n      return [];\n  }\n}\n\nexport function rangeQueryResponseToDataFrames(\n  response: LokiResponse,\n  query: LokiRangeQueryRequest,\n  target: LokiQuery,\n  responseListLength: number,\n  scopedVars: ScopedVars\n): DataFrame[] {\n  const series = rangeQueryResponseToTimeSeries(response, query, target, responseListLength, scopedVars);\n  const frames = series.map((s) => toDataFrame(s));\n\n  const { step } = query;\n\n  if (step != null) {\n    const intervalMs = step * 1000;\n\n    frames.forEach((frame) => {\n      frame.fields.forEach((field) => {\n        if (field.type === FieldType.time) {\n          field.config.interval = intervalMs;\n        }\n      });\n    });\n  }\n\n  return frames;\n}\n\nexport function processRangeQueryResponse(\n  response: LokiResponse,\n  target: LokiQuery,\n  query: LokiRangeQueryRequest,\n  responseListLength: number,\n  limit: number,\n  config: LokiOptions,\n  scopedVars: ScopedVars,\n  reverse = false\n) {\n  switch (response.data.resultType) {\n    case LokiResultType.Stream:\n      return of({\n        data: lokiStreamsToDataFrames(response as LokiStreamResponse, target, limit, config, reverse),\n        key: `${target.refId}_log`,\n      });\n\n    case LokiResultType.Vector:\n    case LokiResultType.Matrix:\n      return of({\n        data: rangeQueryResponseToDataFrames(\n          response,\n          query,\n          {\n            ...target,\n            format: 'time_series',\n          },\n          responseListLength,\n          scopedVars\n        ),\n        key: target.refId,\n      });\n    default:\n      throw new Error(`Unknown result type \"${(response.data as any).resultType}\".`);\n  }\n}\n","import { __assign, __extends } from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: function (e) { return JSON.parse(e.data); },\n    serializer: function (value) { return JSON.stringify(value); },\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = _super.call(this) || this;\n        _this._socket = null;\n        if (urlConfigOrSource instanceof Observable) {\n            _this.destination = destination;\n            _this.source = urlConfigOrSource;\n        }\n        else {\n            var config = (_this._config = __assign({}, DEFAULT_WEBSOCKET_CONFIG));\n            _this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (var key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            var subscription = self.subscribe(function (x) {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (evt) {\n            var _socket = _this._socket;\n            if (!_socket) {\n                socket.close();\n                _this._resetState();\n                return;\n            }\n            var openObserver = _this._config.openObserver;\n            if (openObserver) {\n                openObserver.next(evt);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) {\n                if (socket.readyState === 1) {\n                    try {\n                        var serializer = _this._config.serializer;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        _this.destination.error(e);\n                    }\n                }\n            }, function (err) {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (err && err.code) {\n                    socket.close(err.code, err.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            if (socket === _this._socket) {\n                _this._resetState();\n            }\n            var closeObserver = _this._config.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            try {\n                var deserializer = _this._config.deserializer;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(function () {\n            var _socket = _this._socket;\n            if (_this._output.observers.length === 0) {\n                if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n                    _socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscriber;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _socket = this._socket;\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n            _socket.close();\n        }\n        this._resetState();\n        _super.prototype.unsubscribe.call(this);\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\nexport { WebSocketSubject };\n//# sourceMappingURL=WebSocketSubject.js.map","import { DataFrame, FieldType, parseLabels, KeyValue, CircularDataFrame } from '@grafana/data';\nimport { Observable, throwError, timer } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { LokiTailResponse } from './types';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { appendResponseToBufferedData } from './result_transformer';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LokiLiveTarget {\n  query: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LokiLiveTarget, retryInterval = 5000): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({ capacity: target.size });\n    data.addField({ name: 'ts', type: FieldType.time, config: { displayName: 'Time' } });\n    data.addField({ name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' } });\n    data.addField({ name: 'line', type: FieldType.string }).labels = parseLabels(target.query);\n    data.addField({ name: 'labels', type: FieldType.other }); // The labels for each line\n    data.addField({ name: 'id', type: FieldType.string });\n    data.meta = { ...data.meta, preferredVisualisationType: 'logs' };\n    data.refId = target.refId;\n\n    stream = webSocket<LokiTailResponse>(target.url).pipe(\n      map((response: LokiTailResponse) => {\n        appendResponseToBufferedData(response, data);\n        return [data];\n      }),\n      retryWhen((attempts: Observable<any>) =>\n        attempts.pipe(\n          mergeMap((error, i) => {\n            const retryAttempt = i + 1;\n            // Code 1006 is used to indicate that a connection was closed abnormally.\n            // Added hard limit of 30 on number of retries.\n            // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n            if (error.code === 1006 && retryAttempt < 30) {\n              if (retryAttempt > 10) {\n                // If more than 10 times retried, consol.warn, but keep reconnecting\n                console.warn(\n                  `Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`\n                );\n              }\n              // Retry every 5s\n              return timer(retryInterval);\n            }\n            return throwError(error);\n          })\n        )\n      ),\n      finalize(() => {\n        delete this.streams[target.url];\n      })\n    );\n    this.streams[target.url] = stream;\n\n    return stream;\n  }\n}\n","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map","// Libraries\nimport { chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\n\n// Services & Utils\nimport {\n  extractLabelMatchers,\n  parseSelector,\n  processLabels,\n  toPromLikeExpr,\n} from 'app/plugins/datasource/prometheus/language_utils';\nimport syntax, { FUNCTIONS, PIPE_PARSERS, PIPE_OPERATORS } from './syntax';\n\n// Types\nimport { LokiQuery, LokiQueryType } from './types';\nimport { dateTime, AbsoluteTimeRange, LanguageProvider, HistoryItem, AbstractQuery } from '@grafana/data';\n\nimport LokiDatasource from './datasource';\nimport { CompletionItem, TypeaheadInput, TypeaheadOutput, CompletionItemGroup } from '@grafana/ui';\nimport Prism, { Grammar } from 'prismjs';\n\nconst DEFAULT_KEYS = ['job', 'namespace'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 10;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\nconst NS_IN_MS = 1000000;\n\n// When changing RATE_RANGES, check if Prometheus/PromQL ranges should be changed too\n// @see public/app/plugins/datasource/prometheus/promql.ts\nconst RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__range', sortValue: '$__range' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const LABEL_REFRESH_INTERVAL = 1000 * 30; // 30sec\n\nconst wrapLabel = (label: string) => ({ label, filterText: `\\\"${label}\\\"` });\n\nexport type LokiHistoryItem = HistoryItem<LokiQuery>;\n\ntype TypeaheadContext = {\n  history?: LokiHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: LokiHistoryItem[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query.expr === item.label);\n  let hint = `Queried ${historyForItem.length} times in the last 24h.`;\n  const recent = historyForItem[0];\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nexport default class LokiLanguageProvider extends LanguageProvider {\n  labelKeys: string[];\n  labelFetchTs: number;\n  started = false;\n  datasource: LokiDatasource;\n  lookupsDisabled = false; // Dynamically set to true for big/slow instances\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private seriesCache = new LRU<string, Record<string, string[]>>(10);\n  private labelsCache = new LRU<string, string[]>(10);\n\n  constructor(datasource: LokiDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.labelKeys = [];\n    this.labelFetchTs = 0;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%\\|]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = async (url: string, params?: any): Promise<any> => {\n    try {\n      return await this.datasource.metadataRequest(url, params);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Initialise the language provider by fetching set of labels. Without this initialisation the provider would return\n   * just a set of hardcoded default labels on provideCompletionItems or a recent queries from history.\n   */\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchLabels().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { wrapperClasses, value, prefix, text } = input;\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value?.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^['\"~=\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for {|} and {foo=|}\n      return await this.getLabelCompletionItems(input);\n    } else if (wrapperClasses.includes('context-pipe')) {\n      return this.getPipeCompletionItem();\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  }\n\n  getBeginningCompletionItems = (context?: TypeaheadContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems(context?: TypeaheadContext): TypeaheadOutput {\n    const history = context?.history;\n    const suggestions = [];\n\n    if (history?.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        prefixMatch: true,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  }\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      prefixMatch: true,\n      label: 'Functions',\n      items: FUNCTIONS.map((suggestion) => ({ ...suggestion, kind: 'function' })),\n    });\n\n    return { suggestions };\n  };\n\n  getPipeCompletionItem = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      label: 'Operators',\n      items: PIPE_OPERATORS.map((suggestion) => ({ ...suggestion, kind: 'operators' })),\n    });\n\n    suggestions.push({\n      label: 'Parsers',\n      items: PIPE_PARSERS.map((suggestion) => ({ ...suggestion, kind: 'parsers' })),\n    });\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  async getLabelCompletionItems({ text, wrapperClasses, labelKey, value }: TypeaheadInput): Promise<TypeaheadOutput> {\n    let context = 'context-labels';\n    const suggestions: CompletionItemGroup[] = [];\n    if (!value) {\n      return { context, suggestions: [] };\n    }\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    if (!labelKey && selector === EMPTY_SELECTOR) {\n      // start task gets all labels\n      await this.start();\n      const allLabels = this.getLabelKeys();\n      return { context, suggestions: [{ label: `Labels`, items: allLabels.map(wrapLabel) }] };\n    }\n\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let labelValues;\n    // Query labels for selector\n    if (selector) {\n      if (selector === EMPTY_SELECTOR && labelKey) {\n        const labelValuesForKey = await this.getLabelValues(labelKey);\n        labelValues = { [labelKey]: labelValuesForKey };\n      } else {\n        labelValues = await this.getSeriesLabels(selector);\n      }\n    }\n\n    if (!labelValues) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { context, suggestions };\n    }\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && labelValues[labelKey]) {\n        context = 'context-label-values';\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"`,\n          // Filter to prevent previously selected values from being repeatedly suggested\n          items: labelValues[labelKey].map(wrapLabel).filter(({ filterText }) => filterText !== text),\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = labelValues ? Object.keys(labelValues) : DEFAULT_KEYS;\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const newSuggestion: CompletionItemGroup = { label: `Labels`, items: newItems };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): LokiQuery {\n    return {\n      refId: labelBasedQuery.refId,\n      expr: toPromLikeExpr(labelBasedQuery),\n      queryType: LokiQueryType.Range,\n    };\n  }\n\n  exportToAbstractQuery(query: LokiQuery): AbstractQuery {\n    const lokiQuery = query.expr;\n    if (!lokiQuery || lokiQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(lokiQuery, syntax);\n    return {\n      refId: query.refId,\n      labelMatchers: extractLabelMatchers(tokens),\n    };\n  }\n\n  async getSeriesLabels(selector: string) {\n    if (this.lookupsDisabled) {\n      return undefined;\n    }\n    try {\n      return await this.fetchSeriesLabels(selector);\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/loki/api/v1/label';\n    const timeRange = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, timeRange);\n    if (Array.isArray(res)) {\n      const labels = res\n        .slice()\n        .sort()\n        .filter((label) => label !== '__name__');\n      this.labelKeys = labels;\n    }\n\n    return [];\n  }\n\n  async refreshLogLabels(forceRefresh?: boolean) {\n    if ((this.labelKeys && Date.now().valueOf() - this.labelFetchTs > LABEL_REFRESH_INTERVAL) || forceRefresh) {\n      await this.fetchLabels();\n    }\n  }\n\n  /**\n   * Fetch labels for a selector. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   */\n  fetchSeriesLabels = async (match: string): Promise<Record<string, string[]>> => {\n    const url = '/loki/api/v1/series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n\n    const cacheKey = this.generateCacheKey(url, start, end, match);\n    let value = this.seriesCache.get(cacheKey);\n    if (!value) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.seriesCache.set(cacheKey, {});\n      const params = { 'match[]': match, start, end };\n      const data = await this.request(url, params);\n      const { values } = processLabels(data);\n      value = values;\n      this.seriesCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/loki/api/v1/series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n    const params = { 'match[]': match, start, end };\n    return await this.request(url, params);\n  };\n\n  // Cache key is a bit different here. We round up to a minute the intervals.\n  // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n  // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n  // when user does not the newest values for a minute if already cached.\n  generateCacheKey(url: string, start: number, end: number, param: string): string {\n    return [url, this.roundTime(start), this.roundTime(end), param].join();\n  }\n\n  // Round nanos epoch to nearest 5 minute interval\n  roundTime(nanos: number): number {\n    return nanos ? Math.floor(nanos / NS_IN_MS / 1000 / 60 / 5) : 0;\n  }\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  async fetchLabelValues(key: string): Promise<string[]> {\n    const url = `/loki/api/v1/label/${key}/values`;\n    const rangeParams = this.datasource.getTimeRangeParams();\n    const { start, end } = rangeParams;\n\n    const cacheKey = this.generateCacheKey(url, start, end, key);\n    const params = { start, end };\n\n    let labelValues = this.labelsCache.get(cacheKey);\n    if (!labelValues) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.labelsCache.set(cacheKey, []);\n      const res = await this.request(url, params);\n      if (Array.isArray(res)) {\n        labelValues = res.slice().sort();\n        this.labelsCache.set(cacheKey, labelValues);\n      }\n    }\n\n    return labelValues ?? [];\n  }\n}\n","// Libraries\nimport { cloneDeep, isEmpty, map as lodashMap } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport Prism from 'prismjs';\n\n// Types\nimport {\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  DataFrame,\n  DataFrameView,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  DataSourceWithLogsVolumeSupport,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateMath,\n  DateTime,\n  FieldCache,\n  AbstractQuery,\n  FieldType,\n  getLogLevelFromKey,\n  Labels,\n  LoadingState,\n  LogLevel,\n  LogRowModel,\n  QueryResultMeta,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchError, getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { addLabelToQuery } from './add_label_to_query';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { convertToWebSocketUrl } from 'app/core/utils/explore';\nimport {\n  lokiResultsToTableModel,\n  lokiStreamResultToDataFrame,\n  lokiStreamsToDataFrames,\n  processRangeQueryResponse,\n} from './result_transformer';\nimport { addParsedLabelToQuery, queryHasPipeParser } from './query_utils';\n\nimport {\n  LokiOptions,\n  LokiQuery,\n  LokiQueryType,\n  LokiRangeQueryRequest,\n  LokiResultType,\n  LokiStreamResponse,\n  LokiStreamResult,\n} from './types';\nimport { LiveStreams, LokiLiveTarget } from './live_streams';\nimport LanguageProvider from './language_provider';\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport syntax from './syntax';\nimport { DEFAULT_RESOLUTION } from './components/LokiOptionFields';\nimport { queryLogsVolume } from 'app/core/logs_model';\nimport config from 'app/core/config';\nimport { renderLegendFormat } from '../prometheus/legend';\n\nexport type RangeQueryOptions = DataQueryRequest<LokiQuery> | AnnotationQueryRequest<LokiQuery>;\nexport const DEFAULT_MAX_LINES = 1000;\nexport const LOKI_ENDPOINT = '/loki/api/v1';\nconst NS_IN_MS = 1000000;\n\nconst RANGE_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query_range`;\nconst INSTANT_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query`;\n\nconst DEFAULT_QUERY_PARAMS: Partial<LokiRangeQueryRequest> = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_MAX_LINES,\n  query: '',\n};\n\nexport class LokiDatasource\n  extends DataSourceApi<LokiQuery, LokiOptions>\n  implements\n    DataSourceWithLogsContextSupport,\n    DataSourceWithLogsVolumeSupport<LokiQuery>,\n    DataSourceWithQueryImportSupport<LokiQuery>,\n    DataSourceWithQueryExportSupport<LokiQuery>\n{\n  private streams = new LiveStreams();\n  languageProvider: LanguageProvider;\n  maxLines: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<LokiOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n\n    this.languageProvider = new LanguageProvider(this);\n    const settingsData = instanceSettings.jsonData || {};\n    this.maxLines = parseInt(settingsData.maxLines ?? '0', 10) || DEFAULT_MAX_LINES;\n  }\n\n  _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    if (this.instanceSettings.withCredentials || this.instanceSettings.basicAuth) {\n      options = { ...options, withCredentials: true };\n      if (this.instanceSettings.basicAuth) {\n        options.headers = { ...options.headers, Authorization: this.instanceSettings.basicAuth };\n      }\n    }\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<Record<string, any>>(req);\n  }\n\n  getLogsVolumeDataProvider(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> | undefined {\n    if (!config.featureToggles.fullRangeLogsVolume) {\n      return undefined;\n    }\n\n    const isLogsVolumeAvailable = request.targets.some((target) => target.expr && !isMetricsQuery(target.expr));\n    if (!isLogsVolumeAvailable) {\n      return undefined;\n    }\n\n    const logsVolumeRequest = cloneDeep(request);\n    logsVolumeRequest.targets = logsVolumeRequest.targets\n      .filter((target) => target.expr && !isMetricsQuery(target.expr))\n      .map((target) => {\n        return {\n          ...target,\n          instant: false,\n          volumeQuery: true,\n          expr: `sum by (level) (count_over_time(${target.expr}[$__interval]))`,\n        };\n      });\n\n    return queryLogsVolume(this, logsVolumeRequest, {\n      extractLevel,\n      range: request.range,\n      targets: request.targets,\n    });\n  }\n\n  query(options: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const scopedVars = {\n      ...options.scopedVars,\n      ...this.getRangeScopedVars(options.range),\n    };\n    const filteredTargets = options.targets\n      .filter((target) => target.expr && !target.hide)\n      .map((target) => {\n        const expr = this.addAdHocFilters(target.expr);\n        return {\n          ...target,\n          expr: this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr),\n        };\n      });\n\n    for (const target of filteredTargets) {\n      if (target.instant || target.queryType === LokiQueryType.Instant) {\n        subQueries.push(this.runInstantQuery(target, options, filteredTargets.length));\n      } else {\n        subQueries.push(this.runRangeQuery(target, options, filteredTargets.length));\n      }\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(subQueries)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...subQueries);\n  }\n\n  runInstantQuery = (\n    target: LokiQuery,\n    options: DataQueryRequest<LokiQuery>,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    const timeNs = this.getTime(options.range.to, true);\n    const queryLimit = isMetricsQuery(target.expr) ? options.maxDataPoints : target.maxLines;\n    const query = {\n      query: target.expr,\n      time: `${timeNs + (1e9 - (timeNs % 1e9))}`,\n      limit: Math.min(queryLimit || Infinity, this.maxLines),\n    };\n\n    /** Used only for results of metrics instant queries */\n    const meta: QueryResultMeta = {\n      preferredVisualisationType: 'table',\n    };\n\n    return this._request(INSTANT_QUERY_ENDPOINT, query).pipe(\n      map((response) => {\n        if (response.data.data.resultType === LokiResultType.Stream) {\n          return {\n            data: response.data\n              ? lokiStreamsToDataFrames(\n                  response.data as LokiStreamResponse,\n                  target,\n                  query.limit,\n                  this.instanceSettings.jsonData\n                )\n              : [],\n            key: `${target.refId}_instant`,\n          };\n        }\n\n        return {\n          data: [lokiResultsToTableModel(response.data.data.result, responseListLength, target.refId, meta, true)],\n          key: `${target.refId}_instant`,\n        };\n      }),\n      catchError((err) => throwError(() => this.processError(err, target)))\n    );\n  };\n\n  createRangeQuery(target: LokiQuery, options: RangeQueryOptions, limit: number): LokiRangeQueryRequest {\n    const query = target.expr;\n    let range: { start?: number; end?: number; step?: number } = {};\n    if (options.range) {\n      const startNs = this.getTime(options.range.from, false);\n      const endNs = this.getTime(options.range.to, true);\n      const rangeMs = Math.ceil((endNs - startNs) / 1e6);\n\n      const resolution = target.resolution || (DEFAULT_RESOLUTION.value as number);\n\n      const adjustedInterval =\n        this.adjustInterval((options as DataQueryRequest<LokiQuery>).intervalMs || 1000, resolution, rangeMs) / 1000;\n      // We want to ceil to 3 decimal places\n      const step = Math.ceil(adjustedInterval * 1000) / 1000;\n\n      range = {\n        start: startNs,\n        end: endNs,\n        step,\n      };\n    }\n\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...range,\n      query,\n      limit,\n    };\n  }\n\n  /**\n   * Attempts to send a query to /loki/api/v1/query_range\n   */\n  runRangeQuery = (\n    target: LokiQuery,\n    options: RangeQueryOptions,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    // For metric query we use maxDataPoints from the request options which should be something like width of the\n    // visualisation in pixels. In case of logs request we either use lines limit defined in the query target or\n    // global limit defined for the data source which ever is lower.\n    let maxDataPoints = isMetricsQuery(target.expr)\n      ? // We fallback to maxLines here because maxDataPoints is defined as possibly undefined. Not sure that can\n        // actually happen both Dashboards and Explore should send some value here. If not maxLines does not make that\n        // much sense but nor any other arbitrary value.\n        (options as DataQueryRequest<LokiQuery>).maxDataPoints || this.maxLines\n      : // If user wants maxLines 0 we still fallback to data source limit. I think that makes sense as why would anyone\n        // want to do a query and not see any results?\n        target.maxLines || this.maxLines;\n\n    if ((options as DataQueryRequest<LokiQuery>).liveStreaming) {\n      return this.runLiveQuery(target, maxDataPoints);\n    }\n    const query = this.createRangeQuery(target, options, maxDataPoints);\n\n    const headers = target.volumeQuery ? { 'X-Query-Tags': 'Source=logvolhist' } : undefined;\n\n    return this._request(RANGE_QUERY_ENDPOINT, query, { headers }).pipe(\n      catchError((err) => throwError(() => this.processError(err, target))),\n      switchMap((response) =>\n        processRangeQueryResponse(\n          response.data,\n          target,\n          query,\n          responseListLength,\n          maxDataPoints,\n          this.instanceSettings.jsonData,\n          (options as DataQueryRequest<LokiQuery>).scopedVars,\n          (options as DataQueryRequest<LokiQuery>).reverse\n        )\n      )\n    );\n  };\n\n  createLiveTarget(target: LokiQuery, maxDataPoints: number): LokiLiveTarget {\n    const query = target.expr;\n    const baseUrl = this.instanceSettings.url;\n    const params = serializeParams({ query });\n\n    return {\n      query,\n      url: convertToWebSocketUrl(`${baseUrl}/loki/api/v1/tail?${params}`),\n      refId: target.refId,\n      size: maxDataPoints,\n    };\n  }\n\n  /**\n   * Runs live queries which in this case means creating a websocket and listening on it for new logs.\n   * This returns a bit different dataFrame than runQueries as it returns single dataframe even if there are multiple\n   * Loki streams, sets only common labels on dataframe.labels and has additional dataframe.fields.labels for unique\n   * labels per row.\n   */\n  runLiveQuery = (target: LokiQuery, maxDataPoints: number): Observable<DataQueryResponse> => {\n    const liveTarget = this.createLiveTarget(target, maxDataPoints);\n\n    return this.streams.getStream(liveTarget).pipe(\n      map((data) => ({\n        data: data || [],\n        key: `loki-${liveTarget.refId}`,\n        state: LoadingState.Streaming,\n      })),\n      catchError((err: any) => {\n        return throwError(() => `Live tailing was stopped due to following error: ${err.reason}`);\n      })\n    );\n  };\n\n  getRangeScopedVars(range: TimeRange = this.timeSrv.timeRange()) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  interpolateVariablesInQueries(queries: LokiQuery[], scopedVars: ScopedVars): LokiQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => ({\n        ...query,\n        datasource: this.getRef(),\n        expr: this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr),\n      }));\n    }\n\n    return expandedQueries;\n  }\n\n  getQueryDisplayText(query: LokiQuery) {\n    return query.expr;\n  }\n\n  getTimeRangeParams() {\n    const timeRange = this.timeSrv.timeRange();\n    return { start: timeRange.from.valueOf() * NS_IN_MS, end: timeRange.to.valueOf() * NS_IN_MS };\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<LokiQuery[]> {\n    await this.languageProvider.start();\n    const existingKeys = this.languageProvider.labelKeys;\n\n    if (existingKeys && existingKeys.length) {\n      abstractQueries = abstractQueries.map((abstractQuery) => {\n        abstractQuery.labelMatchers = abstractQuery.labelMatchers.filter((labelMatcher) => {\n          return existingKeys.includes(labelMatcher.name);\n        });\n        return abstractQuery;\n      });\n    }\n\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: LokiQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  async metadataRequest(url: string, params?: Record<string, string | number>) {\n    const res = await lastValueFrom(this._request(url, params, { hideFromInspector: true }));\n    return res.data.data || res.data.values || [];\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const interpolated = this.templateSrv.replace(query, {}, this.interpolateQueryExpr);\n    return await this.processMetricFindQuery(interpolated);\n  }\n\n  async processMetricFindQuery(query: string) {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n\n    const labelNames = query.match(labelNamesRegex);\n    if (labelNames) {\n      return await this.labelNamesQuery();\n    }\n\n    const labelValues = query.match(labelValuesRegex);\n    if (labelValues) {\n      // If we have query expr, use /series endpoint\n      if (labelValues[1]) {\n        return await this.labelValuesSeriesQuery(labelValues[1], labelValues[2]);\n      }\n      return await this.labelValuesQuery(labelValues[2]);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async labelNamesQuery() {\n    const url = `${LOKI_ENDPOINT}/label`;\n    const params = this.getTimeRangeParams();\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  async labelValuesQuery(label: string) {\n    const params = this.getTimeRangeParams();\n    const url = `${LOKI_ENDPOINT}/label/${label}/values`;\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  async labelValuesSeriesQuery(expr: string, label: string) {\n    const timeParams = this.getTimeRangeParams();\n    const params = {\n      ...timeParams,\n      'match[]': expr,\n    };\n    const url = `${LOKI_ENDPOINT}/series`;\n    const streams = new Set();\n    const result = await this.metadataRequest(url, params);\n    result.forEach((stream: { [key: string]: string }) => {\n      if (stream[label]) {\n        streams.add({ text: stream[label] });\n      }\n    });\n\n    return Array.from(streams);\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filtters functionality\n  async getTagKeys() {\n    return await this.labelNamesQuery();\n  }\n\n  async getTagValues(options: any = {}) {\n    return await this.labelValuesQuery(options.key);\n  }\n\n  interpolateQueryExpr(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return lokiRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return lokiSpecialRegexEscape(value);\n    }\n\n    const escapedValues = lodashMap(value, lokiSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  modifyQuery(query: LokiQuery, action: any): LokiQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        expression = this.addLabelToQuery(expression, action.key, action.value, '=');\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        expression = this.addLabelToQuery(expression, action.key, action.value, '!=');\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getTime(date: string | DateTime, roundUp: boolean) {\n    if (typeof date === 'string') {\n      date = dateMath.parse(date, roundUp)!;\n    }\n\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  getLogRowContext = (row: LogRowModel, options?: RowContextOptions): Promise<{ data: DataFrame[] }> => {\n    const target = this.prepareLogRowContextQueryTarget(\n      row,\n      (options && options.limit) || 10,\n      (options && options.direction) || 'BACKWARD'\n    );\n\n    const reverse = options && options.direction === 'FORWARD';\n    return lastValueFrom(\n      this._request(RANGE_QUERY_ENDPOINT, target).pipe(\n        catchError((err) => {\n          const error: DataQueryError = {\n            message: 'Error during context query. Please check JS console logs.',\n            status: err.status,\n            statusText: err.statusText,\n          };\n          throw error;\n        }),\n        switchMap((res) =>\n          of({\n            data: res.data\n              ? res.data.data.result.map((stream: LokiStreamResult) => lokiStreamResultToDataFrame(stream, reverse))\n              : [],\n          })\n        )\n      )\n    );\n  };\n\n  prepareLogRowContextQueryTarget = (row: LogRowModel, limit: number, direction: 'BACKWARD' | 'FORWARD') => {\n    const labels = this.languageProvider.getLabelKeys();\n    const query = Object.keys(row.labels)\n      .map((label: string) => {\n        if (labels.includes(label)) {\n          // escape backslashes in label as users can't escape them by themselves\n          return `${label}=\"${row.labels[label].replace(/\\\\/g, '\\\\\\\\')}\"`;\n        }\n        return '';\n      })\n      // Filter empty strings\n      .filter((label) => !!label)\n      .join(',');\n\n    const contextTimeBuffer = 2 * 60 * 60 * 1000; // 2h buffer\n    const commonTargetOptions = {\n      limit,\n      query: `{${query}}`,\n      expr: `{${query}}`,\n      direction,\n    };\n\n    const fieldCache = new FieldCache(row.dataFrame);\n    const nsField = fieldCache.getFieldByName('tsNs')!;\n    const nsTimestamp = nsField.values.get(row.rowIndex);\n\n    if (direction === 'BACKWARD') {\n      return {\n        ...commonTargetOptions,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        start: row.timeEpochMs - contextTimeBuffer + '000000',\n        end: nsTimestamp,\n        direction,\n      };\n    } else {\n      return {\n        ...commonTargetOptions,\n        // start param in Loki API is inclusive so we'll have to filter out the row that this request is based from\n        // and any other that were logged in the same ns but before the row. Right now these rows will be lost\n        // because the are before but came it he response that should return only rows after.\n        start: nsTimestamp,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        end: row.timeEpochMs + contextTimeBuffer + '000000',\n      };\n    }\n  };\n\n  testDatasource() {\n    // Consider only last 10 minutes otherwise request takes too long\n    const startMs = Date.now() - 10 * 60 * 1000;\n    const start = `${startMs}000000`; // API expects nanoseconds\n    return lastValueFrom(\n      this._request(`${LOKI_ENDPOINT}/label`, { start }).pipe(\n        map((res) => {\n          const values: any[] = res?.data?.data || res?.data?.values || [];\n          const testResult =\n            values.length > 0\n              ? { status: 'success', message: 'Data source connected and labels found.' }\n              : {\n                  status: 'error',\n                  message:\n                    'Data source connected, but no labels received. Verify that Loki and Promtail is configured properly.',\n                };\n          return testResult;\n        }),\n        catchError((err: any) => {\n          let message = 'Loki: ';\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Cannot connect to Loki';\n          }\n\n          if (err.status) {\n            message += `. ${err.status}`;\n          }\n\n          if (err.data && err.data.message) {\n            message += `. ${err.data.message}`;\n          } else if (err.data) {\n            message += `. ${err.data}`;\n          }\n          return of({ status: 'error', message: message });\n        })\n      )\n    );\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const {\n      expr,\n      maxLines,\n      instant,\n      stepInterval,\n      tagKeys = '',\n      titleFormat = '',\n      textFormat = '',\n    } = options.annotation;\n\n    if (!expr) {\n      return [];\n    }\n\n    const interpolatedExpr = this.templateSrv.replace(expr, {}, this.interpolateQueryExpr);\n    const query = {\n      refId: `annotation-${options.annotation.name}`,\n      expr: interpolatedExpr,\n      maxLines,\n      instant,\n      stepInterval,\n      queryType: instant ? LokiQueryType.Instant : LokiQueryType.Range,\n    };\n    const { data } = instant\n      ? await lastValueFrom(this.runInstantQuery(query, options as any))\n      : await lastValueFrom(this.runRangeQuery(query, options as any));\n\n    const annotations: AnnotationEvent[] = [];\n    const splitKeys: string[] = tagKeys.split(',').filter((v: string) => v !== '');\n\n    for (const frame of data) {\n      const labels: { [key: string]: string } = {};\n      for (const field of frame.fields) {\n        if (field.labels) {\n          for (const [key, value] of Object.entries(field.labels)) {\n            labels[key] = String(value).trim();\n          }\n        }\n      }\n\n      const tags: string[] = [\n        ...new Set(\n          Object.entries(labels).reduce((acc: string[], [key, val]) => {\n            if (val === '') {\n              return acc;\n            }\n            if (splitKeys.length && !splitKeys.includes(key)) {\n              return acc;\n            }\n            acc.push.apply(acc, [val]);\n            return acc;\n          }, [])\n        ),\n      ];\n\n      const view = new DataFrameView<{ ts: string; line: string }>(frame);\n\n      view.forEach((row) => {\n        annotations.push({\n          time: new Date(row.ts).valueOf(),\n          title: renderLegendFormat(titleFormat, labels),\n          text: renderLegendFormat(textFormat, labels) || row.line,\n          tags,\n        });\n      });\n    }\n\n    return annotations;\n  }\n\n  showContextToggle(row?: LogRowModel): boolean {\n    return (row && row.searchWords && row.searchWords.length > 0) === true;\n  }\n\n  processError(err: FetchError, target: LokiQuery) {\n    let error = cloneDeep(err);\n    if (err.data.message.includes('escape') && target.expr.includes('\\\\')) {\n      error.data.message = `Error: ${err.data.message}. Make sure that all special characters are escaped with \\\\. For more information on escaping of special characters visit LogQL documentation at https://grafana.com/docs/loki/latest/logql/.`;\n    }\n    return error;\n  }\n\n  adjustInterval(dynamicInterval: number, resolution: number, range: number) {\n    // Loki will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    let safeInterval = range / 11000;\n    if (safeInterval > 1) {\n      safeInterval = Math.ceil(safeInterval);\n    }\n\n    let adjustedInterval = Math.max(resolution * dynamicInterval, safeInterval);\n    return adjustedInterval;\n  }\n\n  addAdHocFilters(queryExpr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    let expr = queryExpr;\n\n    expr = adhocFilters.reduce((acc: string, filter: { key?: any; operator?: any; value?: any }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = lokiRegularEscape(value);\n      }\n\n      return this.addLabelToQuery(acc, key, value, operator, true);\n    }, expr);\n\n    return expr;\n  }\n\n  addLabelToQuery(\n    queryExpr: string,\n    key: string,\n    value: string | number,\n    operator: string,\n    // Override to make sure that we use label as actual label and not parsed label\n    notParsedLabelOverride?: boolean\n  ) {\n    if (queryHasPipeParser(queryExpr) && !isMetricsQuery(queryExpr) && !notParsedLabelOverride) {\n      // If query has parser, we treat all labels as parsed and use | key=\"value\" syntax\n      return addParsedLabelToQuery(queryExpr, key, value, operator);\n    } else {\n      return addLabelToQuery(queryExpr, key, value, operator, true);\n    }\n  }\n}\n\nexport function lokiRegularEscape(value: any) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function lokiSpecialRegexEscape(value: any) {\n  if (typeof value === 'string') {\n    return lokiRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()|]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\n/**\n * Checks if the query expression uses function and so should return a time series instead of logs.\n * Sometimes important to know that before we actually do the query.\n */\nexport function isMetricsQuery(query: string): boolean {\n  const tokens = Prism.tokenize(query, syntax);\n  return tokens.some((t) => {\n    // Not sure in which cases it can be string maybe if nothing matched which means it should not be a function\n    return typeof t !== 'string' && t.type === 'function';\n  });\n}\n\nfunction extractLevel(dataFrame: DataFrame): LogLevel {\n  let valueField;\n  try {\n    valueField = new FieldCache(dataFrame).getFirstFieldOfType(FieldType.number);\n  } catch {}\n  return valueField?.labels ? getLogLevelFromLabels(valueField.labels) : LogLevel.unknown;\n}\n\nfunction getLogLevelFromLabels(labels: Labels): LogLevel {\n  const labelNames = ['level', 'lvl', 'loglevel'];\n  let levelLabel;\n  for (let labelName of labelNames) {\n    if (labelName in labels) {\n      levelLabel = labelName;\n      break;\n    }\n  }\n  return levelLabel ? getLogLevelFromKey(labels[levelLabel]) : LogLevel.unknown;\n}\n\nexport default LokiDatasource;\n","import React, { PureComponent } from 'react';\nimport { shuffle } from 'lodash';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport LokiLanguageProvider from '../language_provider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, filters out logs that don’t contain the word \"metrics\" and parses each log line to extract more labels and filters with them.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: NodeJS.Timeout;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n\n    return (\n      <div className=\"cheat-sheet-item__example\" key={expr} onClick={(e) => onClickExample({ refId: 'A', expr })}>\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Log browser, or alternatively you can write a stream selector into\n            the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React from 'react';\n\n// Types\nimport { InlineFormLabel } from '@grafana/ui';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditor(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, range } = props;\n\n  const onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const nextQuery = { ...query, legendFormat: e.currentTarget.value };\n    onChange(nextQuery);\n  };\n\n  const legendField = (\n    <div className=\"gf-form-inline\">\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          width={6}\n          tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname. The legend only applies to metric queries.\"\n        >\n          Legend\n        </InlineFormLabel>\n        <input\n          type=\"text\"\n          className=\"gf-form-input\"\n          placeholder=\"legend format\"\n          value={query.legendFormat || ''}\n          onChange={onLegendChange}\n          onBlur={onRunQuery}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      data-testid={testIds.editor}\n      range={range}\n      ExtraFieldElement={\n        <>\n          <LokiOptionFields\n            lineLimitValue={query?.maxLines?.toString() || ''}\n            resolution={query?.resolution || 1}\n            query={query}\n            onRunQuery={onRunQuery}\n            onChange={onChange}\n            runOnBlur={true}\n          />\n          {legendField}\n        </>\n      }\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import React from 'react';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","// Libraries\nimport React, { memo } from 'react';\n\n// Types\nimport { QueryEditorProps } from '@grafana/data';\nimport { LokiDatasource } from '../datasource';\nimport { LokiQuery, LokiOptions } from '../types';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\n\ntype Props = QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions>;\n\nexport const LokiExploreQueryEditor = memo((props: Props) => {\n  const { query, data, datasource, history, onChange, onRunQuery, range } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onBlur={() => {}}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      range={range}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <LokiOptionFields\n          lineLimitValue={query?.maxLines?.toString() || ''}\n          resolution={query.resolution || 1}\n          query={query}\n          onRunQuery={onRunQuery}\n          onChange={onChange}\n        />\n      }\n    />\n  );\n});\n\nLokiExploreQueryEditor.displayName = 'LokiExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'loki-editor-explore',\n};\n","import { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport interface LokiVisualQueryBinary {\n  operator: string;\n  vectorMatches?: string;\n  query: LokiVisualQuery;\n}\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Rate = 'rate',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  Unwrap = 'unwrap',\n}\n\nexport function getDefaultEmptyQuery(): LokiVisualQuery {\n  return {\n    labels: [],\n    operations: [{ id: '__line_contains', params: [''] }],\n  };\n}\n","import {\n  functionRendererLeft,\n  getPromAndLokiOperationDisplayName,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { FUNCTIONS } from '../syntax';\nimport { LokiOperationId, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefintions(): QueryBuilderOperationDef[] {\n  const list: QueryBuilderOperationDef[] = [\n    createRangeOperation(LokiOperationId.Rate),\n    createRangeOperation(LokiOperationId.CountOverTime),\n    createRangeOperation(LokiOperationId.SumOverTime),\n    createRangeOperation(LokiOperationId.BytesRate),\n    createRangeOperation(LokiOperationId.BytesOverTime),\n    createRangeOperation(LokiOperationId.AbsentOverTime),\n    createAggregationOperation(LokiOperationId.Sum),\n    createAggregationOperation(LokiOperationId.Avg),\n    createAggregationOperation(LokiOperationId.Min),\n    createAggregationOperation(LokiOperationId.Max),\n    {\n      id: LokiOperationId.Json,\n      name: 'Json',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n    },\n    {\n      id: LokiOperationId.Logfmt,\n      name: 'Logfmt',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract all keys and values from a [logfmt](https://grafana.com/docs/loki/latest/logql/log_queries/#logfmt) formatted log line as labels. The extracted lables can be used in label filter expressions and used as values for a range aggregation via the unwrap operation. `,\n    },\n    {\n      id: LokiOperationId.LineContains,\n      name: 'Line contains',\n      params: [{ name: 'String', type: 'string' }],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      renderer: getLineFilterRenderer('|='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineContainsNot,\n      name: 'Line does not contain',\n      params: [{ name: 'String', type: 'string' }],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      renderer: getLineFilterRenderer('!='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegex,\n      name: 'Line contains regex match',\n      params: [{ name: 'Regex', type: 'string' }],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      renderer: getLineFilterRenderer('|~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that match regex \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegexNot,\n      name: 'Line does not match regex',\n      params: [{ name: 'Regex', type: 'string' }],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      renderer: getLineFilterRenderer('!~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not match regex \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LabelFilter,\n      name: 'Label filter expression',\n      params: [\n        { name: 'Label', type: 'string' },\n        { name: 'Operator', type: 'string', options: ['=', '!=', '>', '<', '>=', '<='] },\n        { name: 'Value', type: 'string' },\n      ],\n      defaultParams: ['', '=', ''],\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      renderer: labelFilterRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Label expression filter allows filtering using original and extracted labels.`,\n    },\n    {\n      id: LokiOperationId.LabelFilterNoErrors,\n      name: 'No pipeline errors',\n      params: [],\n      defaultParams: [],\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      renderer: (model, def, innerExpr) => `${innerExpr} | __error__=\"\"`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Filter out all formatting and parsing errors.`,\n    },\n    {\n      id: LokiOperationId.Unwrap,\n      name: 'Unwrap',\n      params: [{ name: 'Identifier', type: 'string' }],\n      defaultParams: [''],\n      category: LokiVisualQueryOperationCategory.Formats,\n      renderer: (op, def, innerExpr) => `${innerExpr} | unwrap ${op.params[0]}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) =>\n        `Use the extracted label \\`${op.params[0]}\\` as sample values instead of log lines for the subsequent range aggregation.`,\n    },\n  ];\n\n  return list;\n}\n\nfunction createRangeOperation(name: string): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef()],\n    defaultParams: ['auto'],\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addLokiOperation,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === 'auto' || op.params[0] === '$__interval') {\n        return `${opDocs} \\`$__interval\\` is variable that will be replaced with a calculated interval based on **Max data points**,  **Min interval** and query time range. You find these options you find under **Query options** at the right of the data source select dropdown.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nfunction createAggregationOperation(name: string): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [],\n    defaultParams: [],\n    alternativesKey: 'plain aggregation',\n    category: LokiVisualQueryOperationCategory.Aggregations,\n    renderer: functionRendererLeft,\n    addOperationHandler: addLokiOperation,\n    explainHandler: (op, def) => {\n      const opDocs = FUNCTIONS.find((x) => x.insertText === op.id);\n      return `${opDocs?.documentation}.`;\n    },\n  };\n}\n\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range vector',\n    type: 'string',\n    options: ['auto', '$__interval', '$__range', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? 'auto';\n\n  if (rangeVector === 'auto') {\n    rangeVector = '$__interval';\n  }\n\n  return `${def.id}(${innerExpr} [${rangeVector}])`;\n}\n\nfunction getLineFilterRenderer(operation: string) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    if (model.params[0] === '') {\n      return innerExpr;\n    }\n    return `${innerExpr} ${operation} \\`${model.params[0]}\\``;\n  };\n}\n\nfunction labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  if (model.params[0] === '') {\n    return innerExpr;\n  }\n\n  if (model.params[1] === '<' || model.params[1] === '>') {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]}${model.params[1]}\"${model.params[2]}\"`;\n}\n\nfunction pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return `${innerExpr} | ${model.id}`;\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    return condition(queryModeller.getOperationDef(x.id));\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions: {\n      const rangeVectorFunction = operations.find((x) => {\n        return isRangeVectorFunction(modeller.getOperationDef(x.id));\n      });\n\n      // If we are adding a function but we have not range vector function yet add one\n      if (!rangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: 'rate', params: ['auto'] });\n      }\n\n      operations.push(newOperation);\n      break;\n    }\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // Add range functions after any formats, line filters and label filters\n      const placeToInsert = getIndexOfOrLast(operations, modeller, (x) => {\n        return (\n          x.category !== LokiVisualQueryOperationCategory.Formats &&\n          x.category !== LokiVisualQueryOperationCategory.LineFilters &&\n          x.category !== LokiVisualQueryOperationCategory.LabelFilters\n        );\n      });\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.Formats:\n    case LokiVisualQueryOperationCategory.LineFilters: {\n      const placeToInsert = getIndexOfOrLast(operations, modeller, (x) => {\n        return x.category !== LokiVisualQueryOperationCategory.LineFilters;\n      });\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n    }\n    case LokiVisualQueryOperationCategory.LabelFilters: {\n      const placeToInsert = getIndexOfOrLast(operations, modeller, (x) => {\n        return (\n          x.category !== LokiVisualQueryOperationCategory.LineFilters &&\n          x.category !== LokiVisualQueryOperationCategory.Formats\n        );\n      });\n      operations.splice(placeToInsert, 0, newOperation);\n    }\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n","import { LokiAndPromQueryModellerBase } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter } from '../../prometheus/querybuilder/shared/types';\nimport { getOperationDefintions } from './operations';\nimport { LokiOperationId, LokiQueryPattern, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport class LokiQueryModeller extends LokiAndPromQueryModellerBase<LokiVisualQuery> {\n  constructor() {\n    super(getOperationDefintions);\n\n    this.setOperationCategories([\n      LokiVisualQueryOperationCategory.Aggregations,\n      LokiVisualQueryOperationCategory.RangeFunctions,\n      LokiVisualQueryOperationCategory.Formats,\n      //LokiVisualQueryOperationCategory.Functions,\n      LokiVisualQueryOperationCategory.LabelFilters,\n      LokiVisualQueryOperationCategory.LineFilters,\n    ]);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '{}';\n    }\n\n    return super.renderLabels(labels);\n  }\n\n  renderQuery(query: LokiVisualQuery) {\n    let queryString = `${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n    return queryString;\n  }\n\n  getQueryPatterns(): LokiQueryPattern[] {\n    return [\n      {\n        name: 'Log query and label filter',\n        operations: [\n          { id: LokiOperationId.LineMatchesRegex, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LabelFilter, params: ['', '=', ''] },\n        ],\n      },\n      {\n        name: 'Time series query on value inside log line',\n        operations: [\n          { id: LokiOperationId.LineMatchesRegex, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.Unwrap, params: [''] },\n          { id: LokiOperationId.SumOverTime, params: ['auto'] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n    ];\n  }\n}\n\nexport const lokiQueryModeller = new LokiQueryModeller();\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { useTheme2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport Prism from 'prismjs';\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\n\nexport interface Props {\n  query: LokiVisualQuery;\n}\n\nexport function QueryPreview({ query }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const hightlighted = Prism.highlight(lokiQueryModeller.renderQuery(query), lokiGrammar, 'lokiql');\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Query text\">\n        <div\n          className={cx(styles.editorField, 'prism-syntax-highlight')}\n          aria-label=\"selector\"\n          dangerouslySetInnerHTML={{ __html: hightlighted }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      padding: theme.spacing(0.25, 1),\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { LokiDatasource } from '../../datasource';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { QueryBuilderLabelFilter } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { DataSourceApi } from '@grafana/data';\nimport { EditorRow, EditorRows } from '@grafana/experimental';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n  nested?: boolean;\n}\n\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, nested, onChange, onRunQuery }) => {\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<any> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    return await datasource.languageProvider.fetchSeriesLabels(expr);\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      return await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n    return result[forLabel.label] ?? [];\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={onGetLabelNames}\n          onGetLabelValues={onGetLabelValues}\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n        />\n      </EditorRow>\n      <EditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n        />\n      </EditorRow>\n      {!nested && (\n        <EditorRow>\n          <QueryPreview query={query} />\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { Stack } from '@grafana/experimental';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  nested?: boolean;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query, nested }) => {\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox stepNumber={1} title={`${lokiQueryModeller.renderLabels(query.labels)}`}>\n        Fetch all log lines matching label filters.\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery> stepNumber={2} queryModeller={lokiQueryModeller} query={query} />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { EditorHeader, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\nimport React, { SyntheticEvent, useCallback, useState } from 'react';\nimport { LokiQueryEditor } from '../../components/LokiQueryEditor';\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { LokiQueryType } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { getDefaultEmptyQuery, LokiVisualQuery } from '../types';\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplaind';\n\nexport const LokiQueryEditorSelector = React.memo<LokiQueryEditorProps>((props) => {\n  const { query, onChange, onRunQuery, data } = props;\n  const styles = useStyles2(getStyles);\n  const [visualQuery, setVisualQuery] = useState<LokiVisualQuery>(query.visualQuery ?? getDefaultEmptyQuery());\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      onChange({ ...query, editorMode: newMetricEditorMode });\n    },\n    [onChange, query]\n  );\n\n  const onChangeViewModel = (updatedQuery: LokiVisualQuery) => {\n    setVisualQuery(updatedQuery);\n\n    onChange({\n      ...query,\n      expr: lokiQueryModeller.renderQuery(updatedQuery),\n      visualQuery: updatedQuery,\n      editorMode: QueryEditorMode.Builder,\n    });\n  };\n\n  const onInstantChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({ ...query, queryType: event.currentTarget.checked ? LokiQueryType.Instant : LokiQueryType.Range });\n    onRunQuery();\n  };\n\n  // If no expr (ie new query) then default to builder\n  const editorMode = query.editorMode ?? (query.expr ? QueryEditorMode.Code : QueryEditorMode.Builder);\n\n  return (\n    <>\n      <EditorHeader>\n        <FlexItem grow={1} />\n        <Button\n          className={styles.runQuery}\n          variant=\"secondary\"\n          size=\"sm\"\n          fill=\"outline\"\n          onClick={onRunQuery}\n          icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n          disabled={data?.state === LoadingState.Loading}\n        >\n          Run query\n        </Button>\n        <QueryHeaderSwitch\n          label=\"Instant\"\n          value={query.queryType === LokiQueryType.Instant}\n          onChange={onInstantChange}\n        />\n        <InlineSelect\n          value={null}\n          placeholder=\"Query patterns\"\n          allowCustomValue\n          onChange={({ value }) => {\n            onChangeViewModel({\n              ...visualQuery,\n              operations: value?.operations!,\n            });\n          }}\n          options={lokiQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n        />\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      {editorMode === QueryEditorMode.Code && <LokiQueryEditor {...props} />}\n      {editorMode === QueryEditorMode.Builder && (\n        <LokiQueryBuilder\n          datasource={props.datasource}\n          query={visualQuery}\n          onChange={onChangeViewModel}\n          onRunQuery={props.onRunQuery}\n        />\n      )}\n      {editorMode === QueryEditorMode.Explain && <LokiQueryBuilderExplained query={visualQuery} />}\n    </>\n  );\n});\n\nLokiQueryEditorSelector.displayName = 'LokiQueryEditorSelector';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    runQuery: css({\n      color: theme.colors.text.secondary,\n    }),\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import React, { memo } from 'react';\nimport { CoreApp } from '@grafana/data';\nimport { LokiQueryEditorProps } from './types';\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiExploreQueryEditor } from './LokiExploreQueryEditor';\nimport { LokiQueryEditorSelector } from '../querybuilder/components/LokiQueryEditorSelector';\nimport { config } from '@grafana/runtime';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    case CoreApp.Explore:\n      if (config.featureToggles.lokiQueryBuilder) {\n        return <LokiQueryEditorSelector {...props} />;\n      }\n      return <LokiExploreQueryEditor {...props} />;\n    default:\n      if (config.featureToggles.lokiQueryBuilder) {\n        return <LokiQueryEditorSelector {...props} />;\n      }\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n","import { LokiQuery } from './types';\n/**\n * Just a simple wrapper for a react component that is actually implementing the query editor.\n */\nexport class LokiAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(query: LokiQuery) {\n    this.annotation.expr = query.expr;\n    this.annotation.maxLines = query.maxLines;\n    this.annotation.instant = query.instant;\n  }\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={(event) => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, DataLinkInput, stylesFactory, LegacyForms } from '@grafana/ui';\nimport { VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { DerivedFieldConfig } from '../types';\nimport { usePrevious } from 'react-use';\n\nconst { Switch, FormField } = LegacyForms;\n\nconst getStyles = stylesFactory(() => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  urlField: css`\n    flex: 1;\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n}));\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.row}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={5}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant=\"destructive\"\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n          className={css`\n            margin-left: 8px;\n          `}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label when this derived field is found in a log.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              })\n            }\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { DerivedFieldConfig } from '../types';\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: any = field.value;\n          if (field.error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: any;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        return {\n          name: field.name,\n          value: value || '<no match>',\n          href: link && link.href,\n        } as DebugField;\n      } catch (error) {\n        return {\n          name: field.name,\n          error,\n        } as DebugField;\n      }\n    });\n}\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DerivedFieldConfig } from '../types';\nimport { DerivedField } from './DerivedField';\nimport { DebugSection } from './DebugSection';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DerivedField\n                className={styles.derivedField}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1, newField);\n                  onChange(newDerivedFields);\n                }}\n                onDelete={() => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1);\n                  onChange(newDerivedFields);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Exact string captured by the regular expression',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...(value || []), { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value && value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings } from '@grafana/ui';\nimport { LokiOptions } from '../types';\nimport { MaxLinesField } from './MaxLinesField';\nimport { DerivedFields } from './DerivedFields';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <AlertingSettings<LokiOptions>\n        alertmanagerDataSources={alertmanagers}\n        options={options}\n        onOptionsChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport Datasource from './datasource';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { LokiAnnotationsQueryCtrl } from './LokiAnnotationsQueryCtrl';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(Datasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet)\n  .setAnnotationQueryCtrl(LokiAnnotationsQueryCtrl);\n"],"names":["builtInWords","PROM_KEYWORDS","OPERATORS","LOGICAL_OPERATORS","LOKI_KEYWORDS","metricsAndKeywordsRegexp","addLabelToQuery","query","key","value","operator","hasNoMetrics","Error","transformedValue","Infinity","toString","previousWord","replace","match","word","offset","isMetric","insideSelector","text","position","openChar","closeChar","nextSelectorStart","slice","indexOf","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","isColonBounded","endsWith","startsWithQuote","isTemplateVariable","isTimeUnit","includes","Boolean","Number","isWordMetric","selectorRegexp","parts","lastIndex","suffix","exec","prefix","index","length","startsWith","push","selectorWithLabel","addLabelToSelector","join","labelRegexp","selector","labelKey","labelValue","labelOperator","parsedLabels","operatorForLabelKey","chain","uniqWith","isEqual","compact","sortBy","map","uuid","validate","TypeError","v","arr","Uint8Array","parseInt","f","s","x","y","z","ROTL","n","v5","name","version","hashfunc","generateUUID","namespace","buf","str","unescape","encodeURIComponent","bytes","i","charCodeAt","stringToBytes","set","stringify","err","DNS","URL","v35","K","H","msg","Array","isArray","prototype","call","l","N","Math","ceil","M","_i","Uint32Array","j","pow","floor","_i2","W","t","_t","a","b","c","d","e","_t2","T","formatQuery","trim","getHighlighterExpressionsFromQuery","input","expression","results","filterStart","search","filterOperator","substr","skip","filterEnd","filterTerm","quotedTerm","backtickedTerm","term","unwrappedFilterTerm","escapeRegExp","lokiStreamResultToDataFrame","stream","reverse","refId","labels","labelsString","Object","entries","val","sort","times","ArrayVector","timesNs","lines","uids","usedUids","ts","line","values","add","Date","toISOString","createUid","dataFrame","fields","type","FieldType","config","displayName","mutableDataFrame","MutableDataFrame","constructDataFrame","id","uuidv5","newCount","lokiMatrixToTimeSeries","matrixResult","options","labelData","label","undefined","isEmpty","legendFormat","metricName","__name__","labelPart","getOriginalMetricName","renderLegendFormat","getTemplateSrv","scopedVars","createMetricLabel","metric","target","title","datapoints","lokiPointsToTimeseriesPoints","tags","meta","data","time","datapointValue","parseFloat","isNaN","timestamp","lokiResultsToTableModel","lokiResults","resultCount","valueWithRefId","TableModel","sortedLabels","Set","reduce","acc","cur","concat","keys","table","columns","filterable","forEach","series","newSeries","rows","lokiStatsToMetaStat","stats","result","section","unit","test","capitalize","m","toLowerCase","lokiStreamsToDataFrames","response","limit","custom","lokiQueryStatKey","searchWords","expr","preferredVisualisationType","enhanceDataFrame","some","error","derivedFields","derivedFieldsGrouped","groupBy","newFields","fieldFromDerivedFieldConfig","DataFrameView","row","field","logMatch","matcherRegex","derivedFieldConfigs","dataSourceSrv","getDataSourceSrv","dataLinks","derivedFieldConfig","datasourceUid","dsSettings","getInstanceSettings","urlDisplayLabel","url","internal","datasourceName","links","rangeQueryResponseToDataFrames","responseListLength","transformerOptions","format","start","end","step","resultType","LokiResultType","vecResult","rangeQueryResponseToTimeSeries","frames","toDataFrame","intervalMs","frame","interval","processRangeQueryResponse","of","DEFAULT_WEBSOCKET_CONFIG","deserializer","JSON","parse","serializer","WebSocketSubject","_super","urlConfigOrSource","destination","_this","this","_socket","Observable","source","_config","__assign","_output","Subject","hasOwnProperty","WebSocketCtor","WebSocket","ReplaySubject","__extends","lift","sock","_resetState","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","subscription","subscribe","complete","unsubscribe","_connectSocket","_a","protocol","binaryType","socket","Subscription","readyState","close","onopen","evt","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","LiveStreams","getStream","retryInterval","streams","CircularDataFrame","capacity","size","addField","parseLabels","pipe","baseLabels","tsField","tsNsField","lineField","labelsField","idField","unique","findUniqueLabels","allLabelsString","appendResponseToBufferedData","retryWhen","attempts","mergeMap","retryAttempt","console","warn","timer","throwError","finalize","DEFAULT_KEYS","EMPTY_SELECTOR","RATE_RANGES","sortValue","wrapLabel","filterText","LokiLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","LRU","async","params","metadataRequest","startTask","fetchLabels","then","started","context","suggestions","getEmptyCompletionItems","getTermCompletionItems","prefixMatch","items","FUNCTIONS","suggestion","kind","PIPE_OPERATORS","PIPE_PARSERS","getTimeRangeParams","cacheKey","generateCacheKey","seriesCache","get","request","processLabels","labelKeys","labelFetchTs","assign","getSyntax","syntax","getLabelKeys","wrapperClasses","emptyResult","empty","document","selectedLines","getTextsAtRange","selection","currentLine","first","getText","nextCharacter","anchor","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","getPipeCompletionItem","getBeginningCompletionItems","history","historyItems","h","filter","uniq","take","item","cutoffTs","now","historyForItem","hint","recent","dateTime","fromNow","documentation","addHistoryMetadata","skipSort","anchorBlock","cursorOffset","isValueStart","parsedSelector","parseSelector","existingKeys","labelValues","getLabelValues","getSeriesLabels","possibleKeys","difference","newSuggestion","importFromAbstractQuery","labelBasedQuery","toPromLikeExpr","queryType","LokiQueryType","exportToAbstractQuery","lokiQuery","labelMatchers","tokens","Prism","extractLabelMatchers","lookupsDisabled","fetchSeriesLabels","timeRange","valueOf","res","forceRefresh","param","roundTime","nanos","fetchLabelValues","rangeParams","labelsCache","NS_IN_MS","RANGE_QUERY_ENDPOINT","INSTANT_QUERY_ENDPOINT","DEFAULT_QUERY_PARAMS","direction","LokiDatasource","DataSourceApi","instanceSettings","templateSrv","timeSrv","getTimeSrv","timeNs","getTime","range","to","queryLimit","isMetricsQuery","maxDataPoints","maxLines","min","_request","jsonData","catchError","processError","liveStreaming","runLiveQuery","createRangeQuery","headers","volumeQuery","switchMap","liveTarget","createLiveTarget","state","LoadingState","prepareLogRowContextQueryTarget","lastValueFrom","message","status","statusText","languageProvider","contextTimeBuffer","commonTargetOptions","nsTimestamp","FieldCache","getFieldByName","rowIndex","timeEpochMs","settingsData","apiUrl","baseUrl","serializeParams","withCredentials","basicAuth","Authorization","req","getBackendSrv","fetch","getLogsVolumeDataProvider","targets","logsVolumeRequest","cloneDeep","instant","queryLogsVolume","extractLevel","subQueries","getRangeScopedVars","filteredTargets","hide","addAdHocFilters","interpolateQueryExpr","runInstantQuery","runRangeQuery","merge","startNs","from","endNs","rangeMs","resolution","DEFAULT_RESOLUTION","adjustedInterval","adjustInterval","convertToWebSocketUrl","msRange","diff","sRange","round","__range_ms","__range_s","__range","interpolateVariablesInQueries","queries","expandedQueries","getRef","getQueryDisplayText","abstractQueries","abstractQuery","labelMatcher","hideFromInspector","Promise","resolve","interpolated","processMetricFindQuery","labelNamesQuery","labelValuesSeriesQuery","labelValuesQuery","timeParams","variable","multi","includeAll","lokiRegularEscape","lokiSpecialRegexEscape","lodashMap","modifyQuery","action","date","roundUp","dateMath","testDatasource","stepInterval","tagKeys","titleFormat","textFormat","annotation","interpolatedExpr","annotations","splitKeys","split","String","apply","showContextToggle","dynamicInterval","safeInterval","max","queryExpr","getAdhocFilters","notParsedLabelOverride","parsers","parser","RegExp","queryHasPipeParser","addParsedLabelToQuery","valueField","getFirstFieldOfType","labelNames","levelLabel","labelName","getLogLevelFromKey","LogLevel","getLogLevelFromLabels","DEFAULT_EXAMPLES","PREFERRED_LABELS","LOGQL_EXAMPLES","LokiCheatSheet","PureComponent","userExamples","provider","props","preferredLabel","find","shuffle","setState","scheduleUserLabelChecking","componentDidMount","componentWillUnmount","clearTimeout","userLabelTimer","setTimeout","checkUserLabels","renderExpression","onClickExample","className","onClick","render","hasUserExamples","example","href","LokiQueryEditor","onChange","onRunQuery","legendField","InlineFormLabel","width","tooltip","placeholder","nextQuery","currentTarget","onBlur","LokiQueryField","testIds","editor","ExtraFieldElement","LokiOptionFields","lineLimitValue","runOnBlur","LokiQueryEditorForAlerting","LokiExploreQueryEditor","memo","LokiVisualQueryOperationCategory","LokiOperationId","getOperationDefintions","createRangeOperation","Rate","CountOverTime","SumOverTime","BytesRate","BytesOverTime","AbsentOverTime","createAggregationOperation","Sum","Avg","Min","Max","Json","defaultParams","alternativesKey","category","Formats","renderer","pipelineRenderer","addOperationHandler","addLokiOperation","Logfmt","explainHandler","LineContains","LineFilters","getLineFilterRenderer","op","LineContainsNot","LineMatchesRegex","LineMatchesRegexNot","LabelFilter","LabelFilters","labelFilterRenderer","LabelFilterNoErrors","model","def","innerExpr","Unwrap","getPromAndLokiOperationDisplayName","RangeFunctions","operationWithRangeVectorRenderer","opDocs","insertText","Aggregations","functionRendererLeft","rangeVector","operation","getIndexOfOrLast","operations","queryModeller","condition","findIndex","getOperationDef","modeller","newOperation","Functions","rangeVectorFunction","isRangeVectorFunction","placeToInsert","splice","LokiQueryModeller","LokiAndPromQueryModellerBase","setOperationCategories","renderLabels","renderQuery","queryString","renderOperations","renderBinaryQueries","binaryQueries","getQueryPatterns","lokiQueryModeller","QueryPreview","theme","useTheme2","styles","getStyles","hightlighted","lokiGrammar","EditorFieldGroup","EditorField","cx","editorField","dangerouslySetInnerHTML","__html","css","padding","spacing","fontFamily","typography","fontFamilyMonospace","fontSize","bodySmall","LokiQueryBuilder","React","nested","EditorRows","EditorRow","onGetLabelNames","labelsToConsider","forLabel","refreshLogLabels","onGetLabelValues","labelsFilters","OperationList","LokiQueryBuilderExplained","Stack","gap","OperationExplainedBox","stepNumber","OperationListExplained","LokiQueryEditorSelector","useStyles2","visualQuery","setVisualQuery","useState","onEditorModeChange","useCallback","newMetricEditorMode","editorMode","onChangeViewModel","updatedQuery","QueryEditorMode","EditorHeader","FlexItem","grow","Button","runQuery","variant","fill","icon","disabled","QueryHeaderSwitch","event","checked","InlineSelect","allowCustomValue","QueryEditorModeToggle","mode","Space","color","colors","secondary","switchLabel","LokiQueryEditorByApp","app","CoreApp","LokiAnnotationsQueryCtrl","$scope","ctrl","onQueryChange","bind","FormField","LegacyForms","MaxLinesField","labelWidth","inputWidth","inputEl","spellCheck","Switch","stylesFactory","nameField","regexField","urlField","urlDisplayLabelField","DerivedField","onDelete","showInternalLink","setShowInternalLink","previousUid","usePrevious","useEffect","handleChange","preventDefault","DataLinkInput","newValue","DataSourcePicker","tracing","ds","uid","current","DebugSection","debugText","setDebugText","debugFields","testMatch","link","getFieldLinksForExplore","makeDebugFields","DebugFields","DerivedFields","infoText","derivedField","showDebug","setShowDebug","newField","newDerivedFields","DataLinkBuiltInVars","origin","VariableOrigin","makeJsonUpdater","setMaxLines","setDerivedFields","plugin","DataSourcePlugin","Datasource","setQueryEditor","setConfigEditor","onOptionsChange","alertmanagers","getAllAlertmanagerDataSources","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","AlertingSettings","alertmanagerDataSources","setQueryEditorHelp","setAnnotationQueryCtrl"],"sourceRoot":""}