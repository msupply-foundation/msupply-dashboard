{"version":3,"sources":["webpack:///./public/app/core/components/TraceToLogsSettings.tsx","webpack:///./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack:///./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack:///./public/app/plugins/datasource/zipkin/datasource.ts","webpack:///./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack:///./public/app/plugins/datasource/zipkin/module.ts","webpack:///./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack:///./public/app/core/utils/tracing.ts","webpack:///./node_modules/react-use/esm/useMount.js"],"names":["TraceToLogsSettings","options","onOptionsChange","styles","useStyles","getStyles","className","css","width","infoText","tooltip","label","labelWidth","pluginId","current","jsonData","tracesToLogs","datasourceUid","noDefault","onChange","ds","updateDatasourcePluginJsonDataOption","uid","tags","theme","spacing","md","colors","textSemiWeak","transformResponse","zSpans","spanRows","map","transformSpan","frame","MutableDataFrame","fields","name","type","FieldType","string","other","number","meta","preferredVisualisationType","span","add","row","traceID","traceId","spanID","id","parentSpanID","parentId","operationName","serviceName","localEndpoint","remoteEndpoint","serviceTags","startTime","timestamp","duration","logs","annotations","transformAnnotation","Object","keys","reduce","acc","key","push","value","kind","annotation","endpoint","valueToTag","ipv4","ipv6","port","filter","identity","createGraphFrames","data","nodes","edges","spans","traceDuration","traceEndTime","traceStartTime","Infinity","findTraceDuration","spanMap","makeSpanMap","index","length","parentIds","ranges","children","c","childrenDuration","getNonOverlappingDuration","selfDuration","stats","getStats","Fields","title","subTitle","mainStat","main","secondaryStat","secondary","color","target","source","convertTraceToGraph","nodesFrame","edgesFrame","makeFrames","node","edge","ZipkinDatasource","DataSourceApi","constructor","instanceSettings","super","query","targets","this","request","encodeURIComponent","pipe","responseToDataQueryResponse","of","emptyDataQueryResponse","url","params","hideFromInspector","toPromise","metadataRequest","status","message","getQueryDisplayText","apiUrl","serializeParams","req","getBackendSrv","fetch","response","trace","values","noTracesFoundOptions","isLeaf","noTracesOptions","plugin","DataSourcePlugin","setConfigEditor","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField","onRunQuery","datasource","serviceOptions","servicesOptions","useAsyncFn","async","services","sort","service","error","dispatch","notifyApp","createErrorNotification","useMount","useServices","onLoadOptions","allOptions","isMounted","useMountedState","setAllOptions","useState","fetchSpans","state","spanOptions","fromPairs","undefined","fetchTraces","spanName","search","traces","newTraces","rootSpan","find","Math","floor","useCallback","selectedOptions","useLoadOptions","onSelectTrace","cascaderOptions","useMemo","traceName","useMapToCascaderOptions","loadData","aria-label","selectors","components","QueryField","container","style","e","currentTarget","a","b","range","tail","slice","prevStart","prevEnd","start","end","getSpan","toFixedNoTrailingZeros","n","parseFloat","toFixed","config","displayName","mode","fn"],"mappings":"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","file":"zipkinPlugin.17511e2bf08b06f121f8.js","sourcesContent":["import { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, TagsInput, useStyles } from '@grafana/ui';\nimport React from 'react';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs let&apos;s you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            pluginId=\"loki\"\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n          label=\"Tags\"\n          labelWidth={26}\n        >\n          <TagsInput\n            tags={options.jsonData.tracesToLogs?.tags}\n            width={40}\n            onChange={(tags) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: options.jsonData.tracesToLogs?.datasourceUid,\n                tags: tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","import { identity } from 'lodash';\nimport { ZipkinAnnotation, ZipkinSpan } from '../types';\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\nimport { ZipkinSpan } from '../types';\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import {\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { apiPrefix } from './constants';\nimport { ZipkinSpan } from './types';\nimport { transformResponse } from './utils/transforms';\nimport { createGraphFrames } from './utils/graphTransform';\n\nexport interface ZipkinQuery extends DataQuery {\n  query: string;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const traceId = options.targets[0]?.query;\n    if (traceId) {\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(traceId)}`).pipe(\n        map(responseToDataQueryResponse)\n      );\n    } else {\n      return of(emptyDataQueryResponse);\n    }\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await this.request(url, params, { hideFromInspector: true }).toPromise();\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }): DataQueryResponse {\n  return {\n    data: response?.data ? [transformResponse(response?.data), ...createGraphFrames(response?.data)] : [],\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n      },\n    }),\n  ],\n};\n","import { ExploreQueryFieldProps } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource, ZipkinQuery } from './datasource';\nimport { ZipkinSpan } from './types';\nimport { dispatch } from 'app/store/store';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\n\ntype Props = ExploreQueryFieldProps<ZipkinDatasource, ZipkinQuery>;\n\nexport const QueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const serviceOptions = useServices(datasource);\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <div className=\"gf-form-inline gf-form-inline--nowrap\">\n        <div className=\"gf-form flex-shrink-0\">\n          <ButtonCascader options={cascaderOptions} onChange={onSelectTrace} loadData={onLoadOptions}>\n            Traces\n          </ButtonCascader>\n        </div>\n        <div className=\"gf-form gf-form--grow flex-shrink-1\">\n          <div className=\"slate-query-field__wrapper\">\n            <div className=\"slate-query-field\" aria-label={selectors.components.QueryField.container}>\n              <input\n                style={{ width: '100%' }}\n                value={query.query || ''}\n                onChange={(e) =>\n                  onChange({\n                    ...query,\n                    query: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', error)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ZipkinDatasource } from './datasource';\nimport { QueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(QueryField);\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(\n  getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined\n): { [id: string]: { span: T; children: string[] } } {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"sourceRoot":""}