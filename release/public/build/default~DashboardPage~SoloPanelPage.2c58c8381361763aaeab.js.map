{"version":3,"sources":["webpack:///./public/app/features/dashboard/state/analyticsProcessor.ts","webpack:///./public/app/features/dashboard/state/initDashboard.ts","webpack:///./public/app/features/dashboard/components/Inspector/types.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack:///./public/app/features/dashboard/utils/getPanelMenu.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack:///./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx"],"names":["emitDashboardViewEvent","dashboard","eventData","dashboardId","id","dashboardName","title","dashboardUid","uid","folderName","meta","folderTitle","eventName","MetaAnalyticsEventName","DashboardView","reportMetaAnalytics","redirectToNewUrl","slug","dispatch","currentPath","backendSrv","getDashboardBySlug","res","newUrl","url","indexOf","replace","locationUtil","stripBaseFromUrl","updateLocation","path","partial","fetchDashboard","args","getState","routeInfo","DashboardRouteInfo","Home","Normal","New","get","dashDTO","redirectUri","canSave","canShare","canStar","urlType","urlSlug","location","loaderSrv","$injector","loadDashboard","urlUid","fixUrl","dashboardUrl","getNewDashboardModelData","urlFolderId","message","cancelled","dashboardInitFailed","error","console","initDashboard","dashboardInitFetching","setTimeout","getModel","dashboardInitSlow","dashboardInitServices","DashboardModel","storeState","query","orgId","user","timeSrv","annotationsSrv","keybindingSrv","unsavedChangesSrv","dashboardSrv","init","modifiedQueries","panelId","queries","fromExplore","initVariablesTransaction","templating","transaction","initPhase","DashboardInitPhase","Services","processRepeats","updateSubmenuVisibility","queryParams","autofitpanels","autoFitPanels","window","innerHeight","kiosk","$scope","setupDashboardBindings","err","notifyApp","createErrorNotification","updateQueriesWhenComingFromExplore","setCurrent","dashboardWatcher","watch","leave","dashboardInitCompleted","data","isNew","folderId","panels","type","gridPos","x","y","w","h","parseInt","originPanelId","panelArrId","findIndex","panel","targets","clearDashboardQueriesToUpdateOnLoad","InspectTab","InfoMode","PanelHeaderCorner","getTimeSrv","getInfoMode","props","Error","description","Info","links","length","Links","getInfoContent","markdown","interpolatedMarkdown","getTemplateSrv","scopedVars","markedInterpolatedMarkdown","renderMarkdown","getLinks","replaceVariables","className","dangerouslySetInnerHTML","__html","map","link","idx","key","href","target","onClickError","getLocationSrv","update","inspect","inspectTab","infoMode","content","onClick","theme","toLowerCase","ariaLabel","selectors","components","Panels","Panel","headerCornerInfo","placement","aria-label","this","renderCornerType","Component","PanelHeaderMenu","renderItems","menu","isSubMenu","role","menuItem","PanelHeaderMenuItem","text","iconClassName","shortcut","subMenu","items","PureComponent","getPanelMenu","angularComponent","onInspectPanel","tab","isEditing","push","event","preventDefault","store","viewPanel","canEditPanel","editPanel","sharePanel","contextSrv","hasAccessToExplore","plugin","skipDataQuery","openInNewWindow","ctrlKey","metaKey","open","config","appSubUrl","undefined","navigateToExplore","getDataSourceSrv","getExploreUrl","inspectMenu","e","canEdit","isViewing","duplicatePanel","copyPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","click","$eval","removePanel","PanelHeader","clickCoordinates","state","panelMenuOpen","menuItems","eventToClickCoordinates","Math","floor","clientX","clientY","onMouseDown","isClick","onMenuToggle","stopPropagation","setState","closeMenu","onCancelQuery","getQueryRunner","cancelQuery","openInspect","renderNotice","notice","iconName","severity","name","style","marginRight","rel","LoadingState","Loading","Streaming","styles","getStyles","streamIndicator","alertState","panelHeaderClass","classNames","notices","series","renderLoadingState","getPanelLinksSupplier","Object","values","size","parent","document","request","timeInfo","stylesFactory","css","colors","textFaint","loadSnapshotData","getProcessedDataFrames","snapshotData","timeRange","getDefaultTimeRange","Done","applyFieldOverrides","fieldConfig","defaults","overrides","fieldConfigRegistry","timeZone","getTimezone","PanelChrome","subs","Subscription","onRefresh","isInView","width","timeData","applyPanelTimeOverrides","wantsQueryExecution","run","datasource","timezone","maxDataPoints","minInterval","interval","cacheTimeout","transformations","onRender","refreshWhenInView","stateUpdate","renderCounter","onOptionsChange","options","updateOptions","onFieldConfigChange","updateFieldConfig","onPanelError","errorMessage","onChangeTimeRange","setTime","from","toUtc","to","isFirstLoad","NotStarted","add","events","subscribe","RefreshEvent","RenderEvent","panelInitialized","hasPanelSnapshot","getData","withTransforms","withFieldConfig","next","onDataUpdate","unsubscribe","prevProps","prevState","resendLastResult","snapshot","frame","toDataFrameDTO","loadingState","pluginMeta","height","shouldSignalRenderingCompleted","profiler","renderingCompleted","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","panelOptions","getOptions","transparent","eventBus","hasTitle","containerClassNames","containerByTitle","renderPanel","PanelChromeAngularUnconnected","element","onPanelRenderEvent","payload","alert","forceUpdate","loadAngularPanel","queryRunner","onPanelDataUpdate","cleanUpAngularPanel","scopeProps","getInnerPanelHeight","getInnerPanelWidth","render","setPanelAngularComponent","loader","getAngularLoader","load","destroy","ref","mapDispatchToProps","PanelChromeAngular","connect","initDashboardPanel","DashboardPanel","panelState","connector","specialPanels","onMouseEnter","setPanelFocus","onMouseLeave","isLazy","angularPanelCtrl","panelWrapperClass"],"mappings":"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","file":"default~DashboardPage~SoloPanelPage.2c58c8381361763aaeab.js","sourcesContent":["import { DashboardModel } from './DashboardModel';\nimport { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { AnnotationsSrv } from 'app/features/annotations/annotations_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\n// Actions\nimport { notifyApp, updateLocation } from 'app/core/actions';\nimport {\n  clearDashboardQueriesToUpdateOnLoad,\n  dashboardInitCompleted,\n  dashboardInitFailed,\n  dashboardInitFetching,\n  dashboardInitServices,\n  dashboardInitSlow,\n} from './reducers';\n// Types\nimport {\n  DashboardDTO,\n  DashboardRouteInfo,\n  StoreState,\n  ThunkDispatch,\n  ThunkResult,\n  DashboardInitPhase,\n} from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { DataQuery, locationUtil } from '@grafana/data';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\n\nexport interface InitDashboardArgs {\n  $injector: any;\n  $scope: any;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string;\n  routeInfo: DashboardRouteInfo;\n  fixUrl: boolean;\n}\n\nasync function redirectToNewUrl(slug: string, dispatch: ThunkDispatch, currentPath: string) {\n  const res = await backendSrv.getDashboardBySlug(slug);\n\n  if (res) {\n    let newUrl = res.meta.url;\n\n    // fix solo route urls\n    if (currentPath.indexOf('dashboard-solo') !== -1) {\n      newUrl = newUrl.replace('/d/', '/d-solo/');\n    }\n\n    const url = locationUtil.stripBaseFromUrl(newUrl);\n    dispatch(updateLocation({ path: url, partial: true, replace: true }));\n  }\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  try {\n    switch (args.routeInfo) {\n      case DashboardRouteInfo.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          dispatch(updateLocation({ path: newUrl, replace: true }));\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRouteInfo.Normal: {\n        // for old db routes we redirect\n        if (args.urlType === 'db') {\n          redirectToNewUrl(args.urlSlug!, dispatch, getState().location.path);\n          return null;\n        }\n\n        const loaderSrv: DashboardLoaderSrv = args.$injector.get('dashboardLoaderSrv');\n        const dashDTO: DashboardDTO = await loaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = getState().location.path;\n\n          if (dashboardUrl !== currentPath) {\n            // replace url to not create additional history items and then return so that initDashboard below isn't executed multiple times.\n            dispatch(updateLocation({ path: dashboardUrl, partial: true, replace: true }));\n            return null;\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRouteInfo.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeInfo };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // Detect slow loading / initializing and set state flag\n    // This is in order to not show loading indication for fast loading dashboards as it creates blinking/flashing\n    setTimeout(() => {\n      if (getState().dashboard.getModel() === null) {\n        dispatch(dashboardInitSlow());\n      }\n    }, 500);\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    if (!storeState.location.query.orgId) {\n      dispatch(updateLocation({ query: { orgId: storeState.user.orgId }, partial: true, replace: true }));\n    }\n\n    // init services\n    const timeSrv: TimeSrv = args.$injector.get('timeSrv');\n    const annotationsSrv: AnnotationsSrv = args.$injector.get('annotationsSrv');\n    const keybindingSrv: KeybindingSrv = args.$injector.get('keybindingSrv');\n    const unsavedChangesSrv = args.$injector.get('unsavedChangesSrv');\n    const dashboardSrv: DashboardSrv = args.$injector.get('dashboardSrv');\n\n    timeSrv.init(dashboard);\n    annotationsSrv.init(dashboard);\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      dashboard.meta.fromExplore = !!(panelId && queries);\n    }\n\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(args.urlUid!, dashboard));\n\n    if (getState().templating.transaction.uid !== args.urlUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n      dashboard.updateSubmenuVisibility();\n\n      // handle auto fix experimental feature\n      const queryParams = getState().location.query;\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      // init unsaved changes tracking\n      unsavedChangesSrv.init(dashboard, args.$scope);\n      keybindingSrv.setupDashboardBindings(args.$scope, dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.error(err);\n    }\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      updateQueriesWhenComingFromExplore(dispatch, dashboard, panelId, queries);\n    }\n\n    // legacy srv state\n    dashboardSrv.setCurrent(dashboard);\n\n    // send open dashboard event\n    if (args.routeInfo !== DashboardRouteInfo.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nfunction getNewDashboardModelData(urlFolderId?: string): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nfunction updateQueriesWhenComingFromExplore(\n  dispatch: ThunkDispatch,\n  dashboard: DashboardModel,\n  originPanelId: number,\n  queries: DataQuery[]\n) {\n  const panelArrId = dashboard.panels.findIndex((panel) => panel.id === originPanelId);\n\n  if (panelArrId > -1) {\n    dashboard.panels[panelArrId].targets = queries;\n  }\n\n  // Clear update state now that we're done\n  dispatch(clearDashboardQueriesToUpdateOnLoad());\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n}\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getLocationSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from '../../components/Inspector/types';\nimport { selectors } from '@grafana/e2e-selectors';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    getLocationSrv().update({ partial: true, query: { inspect: this.props.panel.id, inspectTab: InspectTab.Error } });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme}>\n        <div className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </div>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { PureComponent } from 'react';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import { updateLocation } from 'app/core/actions';\nimport { store } from 'app/store/store';\nimport { AngularComponent, getDataSourceSrv, getLocationSrv } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\nimport { copyPanel, duplicatePanel, removePanel, sharePanel } from 'app/features/dashboard/utils/panel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelCtrl } from '../../panel/panel_ctrl';\nimport config from 'app/core/config';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          viewPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          editPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    getLocationSrv().update({\n      partial: true,\n      query: {\n        inspect: panel.id,\n        inspectTab: tab,\n      },\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { DataLink, LoadingState, PanelData, PanelMenuItem, QueryResultMetaNotice } from '@grafana/data';\nimport { AngularComponent, config } from '@grafana/runtime';\nimport { ClickOutsideWrapper, Icon, IconName, Tooltip, stylesFactory } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\n\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { getPanelMenu } from 'app/features/dashboard/utils/getPanelMenu';\nimport { updateLocation } from 'app/core/actions';\nimport { css } from 'emotion';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  angularComponent?: AngularComponent | null;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n  updateLocation: typeof updateLocation;\n}\n\ninterface ClickCoordinates {\n  x: number;\n  y: number;\n}\n\ninterface State {\n  panelMenuOpen: boolean;\n  menuItems: PanelMenuItem[];\n}\n\nexport class PanelHeader extends PureComponent<Props, State> {\n  clickCoordinates: ClickCoordinates = { x: 0, y: 0 };\n\n  state: State = {\n    panelMenuOpen: false,\n    menuItems: [],\n  };\n\n  eventToClickCoordinates = (event: React.MouseEvent<HTMLDivElement>) => {\n    return {\n      x: Math.floor(event.clientX),\n      y: Math.floor(event.clientY),\n    };\n  };\n\n  onMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    this.clickCoordinates = this.eventToClickCoordinates(event);\n  };\n\n  isClick = (clickCoordinates: ClickCoordinates) => {\n    return clickCoordinates.x === this.clickCoordinates.x && clickCoordinates.y === this.clickCoordinates.y;\n  };\n\n  onMenuToggle = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.isClick(this.eventToClickCoordinates(event))) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    const { dashboard, panel, angularComponent } = this.props;\n    const menuItems = getPanelMenu(dashboard, panel, angularComponent);\n\n    this.setState({\n      panelMenuOpen: !this.state.panelMenuOpen,\n      menuItems,\n    });\n  };\n\n  closeMenu = () => {\n    this.setState({\n      panelMenuOpen: false,\n    });\n  };\n\n  onCancelQuery = () => {\n    this.props.panel.getQueryRunner().cancelQuery();\n  };\n\n  renderLoadingState(state: LoadingState): JSX.Element | null {\n    if (state === LoadingState.Loading) {\n      return (\n        <div className=\"panel-loading\" onClick={this.onCancelQuery}>\n          <Tooltip content=\"Cancel query\">\n            <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n          </Tooltip>\n        </div>\n      );\n    }\n\n    if (state === LoadingState.Streaming) {\n      const styles = getStyles();\n\n      return (\n        <div className=\"panel-loading\" onClick={this.onCancelQuery}>\n          <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  openInspect = (e: React.SyntheticEvent, tab: string) => {\n    const { updateLocation, panel } = this.props;\n\n    e.stopPropagation();\n\n    updateLocation({\n      query: { inspect: panel.id, inspectTab: tab },\n      partial: true,\n    });\n  };\n\n  // This will show one icon for each severity\n  renderNotice = (notice: QueryResultMetaNotice) => {\n    let iconName: IconName = 'info-circle';\n    if (notice.severity === 'error' || notice.severity === 'warning') {\n      iconName = 'exclamation-triangle';\n    }\n\n    return (\n      <Tooltip content={notice.text} key={notice.severity}>\n        {notice.inspect ? (\n          <div className=\"panel-info-notice pointer\" onClick={(e) => this.openInspect(e, notice.inspect!)}>\n            <Icon name={iconName} style={{ marginRight: '8px' }} />\n          </div>\n        ) : (\n          <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n            <Icon name={iconName} style={{ marginRight: '8px' }} />\n          </a>\n        )}\n      </Tooltip>\n    );\n  };\n\n  render() {\n    const { panel, error, isViewing, isEditing, data, alertState } = this.props;\n    const { menuItems } = this.state;\n    const title = panel.replaceVariables(panel.title, {}, 'text');\n\n    const panelHeaderClass = classNames({\n      'panel-header': true,\n      'grid-drag-handle': !(isViewing || isEditing),\n    });\n\n    // dedupe on severity\n    const notices: Record<string, QueryResultMetaNotice> = {};\n\n    for (const series of data.series) {\n      if (series.meta && series.meta.notices) {\n        for (const notice of series.meta.notices) {\n          notices[notice.severity] = notice;\n        }\n      }\n    }\n\n    return (\n      <>\n        {this.renderLoadingState(data.state)}\n        <div className={panelHeaderClass}>\n          <PanelHeaderCorner\n            panel={panel}\n            title={panel.title}\n            description={panel.description}\n            scopedVars={panel.scopedVars}\n            links={getPanelLinksSupplier(panel)}\n            error={error}\n          />\n          <div\n            className=\"panel-title-container\"\n            onClick={this.onMenuToggle}\n            onMouseDown={this.onMouseDown}\n            aria-label={selectors.components.Panels.Panel.title(title)}\n          >\n            <div className=\"panel-title\">\n              {Object.values(notices).map(this.renderNotice)}\n              {alertState && (\n                <Icon\n                  name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                  className=\"icon-gf panel-alert-icon\"\n                  style={{ marginRight: '4px' }}\n                  size=\"sm\"\n                />\n              )}\n              <span className=\"panel-title-text\">{title}</span>\n              <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n              {this.state.panelMenuOpen && (\n                <ClickOutsideWrapper onClick={this.closeMenu} parent={document}>\n                  <PanelHeaderMenu items={menuItems} />\n                </ClickOutsideWrapper>\n              )}\n              {data.request && data.request.timeInfo && (\n                <span className=\"panel-time-info\">\n                  <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory(() => {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${config.theme.colors.textFaint};\n      box-shadow: 0 0 2px ${config.theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n});\n","import { applyFieldOverrides, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DashboardModel, PanelModel } from '../state';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n\n  return {\n    timeRange: getDefaultTimeRange(),\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme,\n      timeZone: dashboard.getTimezone(),\n    }),\n  };\n}\n","// Libraries\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { ErrorBoundary } from '@grafana/ui';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport config from 'app/core/config';\nimport { updateLocation } from 'app/core/actions';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport {\n  AbsoluteTimeRange,\n  FieldConfigSource,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\nimport { RefreshEvent, RenderEvent } from 'app/types/events';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  updateLocation: typeof updateLocation;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  data: PanelData;\n}\n\nexport class PanelChrome extends Component<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView } = this.props;\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n  }\n\n  shouldComponentUpdate(prevProps: Props, prevState: State) {\n    const { plugin, panel } = this.props;\n\n    // If plugin changed we need to process fieldOverrides again\n    // We do this by asking panel query runner to resend last result\n    if (prevProps.plugin !== plugin) {\n      panel.getQueryRunner().resendLastResult();\n      return false;\n    }\n\n    return true;\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    if (!this.props.isInView) {\n      // Ignore events when not visible.\n      // The call will be repeated when the panel comes into view\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (this.props.dashboard.snapshot) {\n          this.props.panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      panel.getQueryRunner().run({\n        datasource: panel.datasource,\n        queries: panel.targets,\n        panelId: panel.id,\n        dashboardId: this.props.dashboard.id,\n        timezone: this.props.dashboard.getTimezone(),\n        timeRange: timeData.timeRange,\n        timeInfo: timeData.timeInfo,\n        maxDataPoints: panel.maxDataPoints || width,\n        minInterval: panel.interval,\n        scopedVars: panel.scopedVars,\n        cacheTimeout: panel.cacheTimeout,\n        transformations: panel.transformations,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.onRender();\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (message: string) => {\n    if (this.state.errorMessage !== message) {\n      this.setState({ errorMessage: message });\n    }\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data, isFirstLoad } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (isFirstLoad && (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = data.timeRange || this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            title={panel.title}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panelOptions}\n            fieldConfig={panel.fieldConfig}\n            transparent={panel.transparent}\n            width={panelWidth}\n            height={innerPanelHeight}\n            renderCounter={renderCounter}\n            replaceVariables={panel.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onFieldConfigChange={this.onFieldConfigChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n            eventBus={dashboard.events}\n          />\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, updateLocation } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          data={data}\n          updateLocation={updateLocation}\n        />\n        <ErrorBoundary>\n          {({ error }) => {\n            if (error) {\n              this.onPanelError(error.message || DEFAULT_PLUGIN_ERROR);\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { setPanelAngularComponent } from '../state/reducers';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { updateLocation } from 'app/core/actions';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { RenderEvent } from 'app/types/events';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n  updateLocation: typeof updateLocation;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n  alertState?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onPanelRenderEvent));\n  }\n\n  onPanelRenderEvent = (event: RenderEvent) => {\n    const { alertState } = this.state;\n    // graph sends these old render events with payloads\n    const payload = event.payload;\n\n    if (payload && payload.alertState && this.props.panel.alert) {\n      this.setState({ alertState: payload.alertState });\n    } else if (payload && payload.alertState && !this.props.panel.alert) {\n      // when user deletes alert in panel editor the source panel needs to refresh as this is in the mutable state and\n      // will not automatically re render\n      this.setState({ alertState: undefined });\n    } else if (payload && alertState) {\n      this.setState({ alertState: undefined });\n    } else {\n      // only needed for detecting title updates right now fix before 7.0\n      this.forceUpdate();\n    }\n  };\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularPanel();\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.cleanUpAngularPanel();\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      panelId: panel.id,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  cleanUpAngularPanel() {\n    const { angularComponent, setPanelAngularComponent, panel } = this.props;\n\n    if (angularComponent) {\n      angularComponent.destroy();\n    }\n\n    setPanelAngularComponent({ panelId: panel.id, angularComponent: null });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin, angularComponent, updateLocation } = this.props;\n    const { errorMessage, data, alertState } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          angularComponent={angularComponent}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          updateLocation={updateLocation}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: state.dashboard.panels[props.panel.id].angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent, updateLocation };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Components\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\n// Actions\nimport { initDashboardPanel } from '../state/actions';\nimport { updateLocation } from 'app/core/reducers/location';\n\n// Types\nimport { PanelModel, DashboardModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { PanelPlugin } from '@grafana/data';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  isInView: boolean;\n}\n\nexport interface State {\n  isLazy: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.dashboard.panels[props.panel.id];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nconst mapDispatchToProps = { initDashboardPanel, updateLocation };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props, State> {\n  specialPanels: { [key: string]: Function } = {};\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLazy: !props.isInView,\n    };\n  }\n\n  componentDidMount() {\n    this.props.initDashboardPanel(this.props.panel);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isLazy && this.props.isInView) {\n      this.setState({ isLazy: false });\n    }\n  }\n\n  onMouseEnter = () => {\n    this.props.dashboard.setPanelFocus(this.props.panel.id);\n  };\n\n  onMouseLeave = () => {\n    this.props.dashboard.setPanelFocus(0);\n  };\n\n  renderPanel(plugin: PanelPlugin) {\n    const { dashboard, panel, isViewing, isInView, isEditing, updateLocation } = this.props;\n\n    return (\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n\n          if (plugin.angularPanelCtrl) {\n            return (\n              <PanelChromeAngular\n                plugin={plugin}\n                panel={panel}\n                dashboard={dashboard}\n                isViewing={isViewing}\n                isEditing={isEditing}\n                isInView={isInView}\n                width={width}\n                height={height}\n              />\n            );\n          }\n\n          return (\n            <PanelChrome\n              plugin={plugin}\n              panel={panel}\n              dashboard={dashboard}\n              isViewing={isViewing}\n              isEditing={isEditing}\n              isInView={isInView}\n              width={width}\n              height={height}\n              updateLocation={updateLocation}\n            />\n          );\n        }}\n      </AutoSizer>\n    );\n  }\n\n  render() {\n    const { isViewing, plugin } = this.props;\n    const { isLazy } = this.state;\n\n    // if we have not loaded plugin exports yet, wait\n    if (!plugin) {\n      return null;\n    }\n\n    // If we are lazy state don't render anything\n    if (isLazy) {\n      return null;\n    }\n\n    const panelWrapperClass = classNames({\n      'panel-wrapper': true,\n      'panel-wrapper--view': isViewing,\n    });\n\n    return (\n      <div className={panelWrapperClass} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\n        {this.renderPanel(plugin)}\n      </div>\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n"],"sourceRoot":""}