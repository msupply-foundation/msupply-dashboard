{"version":3,"file":"UserProfileEditPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditForm.tsx","webpack://grafana/./public/app/features/profile/UserTeams.tsx","webpack://grafana/./public/app/features/profile/UserOrganizations.tsx","webpack://grafana/./public/app/features/profile/UserSessions.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditPage.tsx","webpack://grafana/./public/app/features/profile/api.ts","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./node_modules/react-use/esm/useMount.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding the dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                aria-label=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport { UserDTO } from 'app/types';\nimport config from 'app/core/config';\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label=\"Edit profile\">\n            <Field label=\"Name\" invalid={!!errors.name} error=\"Name is required\" disabled={disableLoginForm}>\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder=\"Name\"\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"Email\" invalid={!!errors.email} error=\"Email is required\" disabled={disableLoginForm}>\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder=\"Email\"\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"Username\" disabled={disableLoginForm}>\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder=\"Username\"\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <div className=\"gf-form-button-row\">\n              <Button variant=\"primary\" disabled={isSavingUser} aria-label=\"Edit user profile save button\">\n                Save\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import React, { PureComponent } from 'react';\nimport { Team } from 'app/types';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React, { PureComponent } from 'react';\nimport { UserDTO, UserOrg } from 'app/types';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Organizations</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User organizations table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Role</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          Current\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          Select\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React, { PureComponent } from 'react';\nimport { UserSession } from 'app/types';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport class UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading sessions...\" />;\n    }\n\n    return (\n      <div>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\" aria-label=\"User sessions table\">\n                <thead>\n                  <tr>\n                    <th>Last seen</th>\n                    <th>Logged on</th>\n                    <th>IP address</th>\n                    <th>Browser &amp; OS</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{session.createdAt}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button size=\"sm\" variant=\"destructive\" onClick={() => revokeUserSession(session.id)}>\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserSessions;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\n\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport Page from 'app/core/components/Page/Page';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { UserTeams } from './UserTeams';\nimport UserOrganizations from './UserOrganizations';\nimport UserSessions from './UserSessions';\n\nexport interface OwnProps {\n  navModel: NavModel;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    navModel: getNavModel(state.navIndex, 'profile-settings'),\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  navModel,\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(UserProfileEditPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from './types';\nimport { Team, UserDTO, UserOrg, UserSession } from '../../types';\n\nasync function changePassword(payload: ChangePasswordFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser(): Promise<UserDTO> {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams(): Promise<Team[]> {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs(): Promise<UserOrg[]> {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions(): Promise<UserSession[]> {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId: number): Promise<void> {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId,\n  });\n}\n\nasync function setUserOrg(org: UserOrg): Promise<void> {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload: ProfileUpdateFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile,\n};\n","import { config } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\nimport { ThunkResult, UserOrg } from '../../../types';\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\nimport { api } from '../api';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["themes","value","label","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","id","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","styles","getStyles","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Tooltip","content","Icon","name","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","Button","variant","stylesFactory","css","disableLoginForm","config","user","isSavingUser","updateProfile","data","validateOn","register","errors","invalid","error","disabled","Input","required","defaultValue","suffix","InputSuffix","email","login","UserTeams","isLoading","teams","LoadingPlaceholder","text","map","team","index","src","avatarUrl","memberCount","UserOrganizations","orgs","org","role","orgId","size","onClick","setUserOrg","UserSessions","sessions","revokeUserSession","session","isActive","seenAt","createdAt","clientIp","browser","os","osVersion","mapDispatchToProps","initUserProfilePage","changeUserOrg","updateUserProfile","UserProfileEditPage","navModel","orgsAreLoading","sessionsAreLoading","teamsAreLoading","isUpdating","useMount","Page","VerticalGroup","spacing","connect","userState","getNavModel","navIndex","api","changePassword","payload","getBackendSrv","put","err","console","tokenId","post","authTokenId","loadUser","get","loadSessions","loadOrgs","loadTeams","dispatch","setUpdating","updating","initLoadTeams","teamsLoaded","initLoadOrgs","orgsLoaded","initLoadSessions","sessionsLoaded","userLoaded","userSessionRevoked","href","fn"],"sourceRoot":""}