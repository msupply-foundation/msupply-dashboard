{"version":3,"file":"AppRootPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./node_modules/react-reverse-portal/dist/web/index.js","webpack://grafana/./public/app/features/plugins/AppRootPage.tsx"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = 'html';\nvar ELEMENT_TYPE_SVG = 'svg';\n// ReactDOM can handle several different namespaces, but they're not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error(\"Unrecognized element type \\\"\" + elementType + \"\\\" for validateElementType.\");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement('div');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, 'g');\n    }\n    else {\n        throw new Error(\"Invalid element type \\\"\" + elementType + \"\\\" for createPortalNode: must be \\\"html\\\" or \\\"svg\\\".\");\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode's elementType needs to match\n            // the elementType it's being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error(\"Invalid element type for portal: \\\"\" + elementType + \"\\\" portalNodes must be used with \" + elementType + \" elements, but OutPortal is within <\" + newParent.tagName + \">.\");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren't currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return ReactDOM.createPortal(React.Children.map(children, function (child) {\n            if (!React.isValidElement(child))\n                return child;\n            return React.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(React.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = React.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we're switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return React.createElement(\"div\", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(React.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\nexport { createHtmlPortalNode, createSvgPortalNode, InPortal, OutPortal, };\n//# sourceMappingURL=index.js.map","// Libraries\nimport React, { Component } from 'react';\nimport { AppEvents, AppPlugin, AppPluginMeta, KeyValue, NavModel, PluginType } from '@grafana/data';\nimport { createHtmlPortalNode, InPortal, OutPortal, HtmlPortalNode } from 'react-reverse-portal';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin } from './plugin_loader';\nimport { getNotFoundNav, getWarningNav, getExceptionNav } from 'app/core/nav_model_srv';\nimport { appEvents } from 'app/core/core';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\ninterface RouteParams {\n  pluginId: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<RouteParams> {}\n\ninterface State {\n  loading: boolean;\n  portalNode: HtmlPortalNode;\n  plugin?: AppPlugin | null;\n  nav?: NavModel;\n}\n\nexport function getAppPluginPageError(meta: AppPluginMeta) {\n  if (!meta) {\n    return 'Unknown Plugin';\n  }\n  if (meta.type !== PluginType.app) {\n    return 'Plugin must be an app';\n  }\n  if (!meta.enabled) {\n    return 'Application Not Enabled';\n  }\n  return null;\n}\n\nclass AppRootPage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      portalNode: createHtmlPortalNode(),\n    };\n  }\n\n  shouldComponentUpdate(nextProps: Props) {\n    return nextProps.location.pathname.startsWith('/a/');\n  }\n  async loadPluginSettings() {\n    const { params } = this.props.match;\n    try {\n      const app = await getPluginSettings(params.pluginId).then((info) => {\n        const error = getAppPluginPageError(info);\n        if (error) {\n          appEvents.emit(AppEvents.alertError, [error]);\n          this.setState({ nav: getWarningNav(error) });\n          return null;\n        }\n        return importAppPlugin(info);\n      });\n      this.setState({ plugin: app, loading: false, nav: undefined });\n    } catch (err) {\n      this.setState({\n        plugin: null,\n        loading: false,\n        nav: process.env.NODE_ENV === 'development' ? getExceptionNav(err) : getNotFoundNav(),\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.loadPluginSettings();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { params } = this.props.match;\n\n    if (prevProps.match.params.pluginId !== params.pluginId) {\n      this.setState({\n        loading: true,\n      });\n      this.loadPluginSettings();\n    }\n  }\n\n  onNavChanged = (nav: NavModel) => {\n    this.setState({ nav });\n  };\n\n  render() {\n    const { loading, plugin, nav, portalNode } = this.state;\n\n    if (plugin && !plugin.root) {\n      // TODO? redirect to plugin page?\n      return <div>No Root App</div>;\n    }\n\n    return (\n      <>\n        <InPortal node={portalNode}>\n          {plugin && plugin.root && (\n            <plugin.root\n              meta={plugin.meta}\n              basename={this.props.match.url}\n              onNavChanged={this.onNavChanged}\n              query={this.props.queryParams as KeyValue}\n              path={this.props.location.pathname}\n            />\n          )}\n        </InPortal>\n        {nav ? (\n          <Page navModel={nav}>\n            <Page.Contents isLoading={loading}>\n              <OutPortal node={portalNode} />\n            </Page.Contents>\n          </Page>\n        ) : (\n          <Page>\n            <OutPortal node={portalNode} />\n            {loading && <PageLoader />}\n          </Page>\n        )}\n      </>\n    );\n  }\n}\n\nexport default AppRootPage;\n"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","ELEMENT_TYPE_HTML","ELEMENT_TYPE_SVG","createPortalNode","elementType","parent","lastPlaceholder","element","initialProps","document","createElement","Error","createElementNS","portalNode","setPortalProps","props","getInitialPortalProps","mount","newParent","newPlaceholder","unmount","domElement","HTMLElement","SVGElement","validateElementType","tagName","replaceChild","expectedPlaceholder","undefined","InPortal","_super","_this","call","addPropsChannel","assign","node","setState","nodeProps","state","componentDidMount","componentDidUpdate","render","_a","children","child","OutPortal","placeholderNode","passPropsThroughPortal","propsForTarget","currentPortalNode","placeholder","current","parentNode","componentWillUnmount","ref","createHtmlPortalNode","bind","getAppPluginPageError","meta","type","PluginType","enabled","AppRootPage","Component","super","nav","loading","shouldComponentUpdate","nextProps","location","pathname","startsWith","params","match","app","getPluginSettings","pluginId","then","info","error","appEvents","AppEvents","getWarningNav","importAppPlugin","plugin","err","getNotFoundNav","loadPluginSettings","prevProps","root","basename","url","onNavChanged","query","queryParams","path","Page","navModel","isLoading","PageLoader"],"sourceRoot":""}