{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["ButtonRow","isReadOnly","onDelete","onSubmit","onTest","className","type","disabled","onClick","event","aria-label","selectors","pages","DataSource","saveAndTest","delete","href","config","appSubUrl","buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","enterprise","find","info","links","push","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","datasources","defaultDatasource","init","endsWith","parseInt","slice","PluginStateinfo","props","text","state","PluginState","alpha","beta","getPluginStateInfoText","css","PluginSettings","onModelChanged","onModelChange","scopeProps","ctrl","datasourceMeta","current","_","cloneDeep","bind","this","element","components","ConfigEditor","loader","getAngularLoader","component","load","prevProps","digest","destroy","ref","React","createElement","onOptionsChange","PureComponent","pluginMeta","meta","navModel","img","subTitle","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","secureJsonFields","child","indexOf","Input","LegacyForms","Switch","BasicSettings","onDefaultChange","onNameChange","style","marginRight","tooltip","value","placeholder","onChange","target","required","label","checked","DataSourceSettingsPage","evt","preventDefault","appEvents","emit","CoreEvents","showConfirmModal","yesText","onConfirm","confirmDelete","loadError","showDelete","msg","toString","data","isString","nav","Contents","p","body","query","setDataSourceName","setIsDefault","testingStatus","renderIsReadOnlyMessage","status","alert","alertMessage","renderLoadError","isLoading","hasDataSource","renderConfigPageBody","renderSettings","mapDispatchToProps","hot","connectWithCleanUp","getRouteParamsId","location","getNavModel","navIndex","getDataSources","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics"],"mappings":"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","file":"DataSourceSettingsPage.be7fa34b3aa92fa71cc6.js","sourcesContent":["import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter(c => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration & data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration & data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration & data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={event => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\nimport { Icon } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel, UrlQueryMap } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'trash-alt',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, testingStatus, plugin } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <div className={`alert-${testingStatus.status} alert`} aria-label={selectors.pages.DataSource.alert}>\n              <div className=\"alert-icon\">\n                {testingStatus.status === 'error' ? <Icon name=\"exclamation-triangle\" /> : <Icon name=\"check\" />}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label={selectors.pages.DataSource.alertMessage}>\n                  {testingStatus.message}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}