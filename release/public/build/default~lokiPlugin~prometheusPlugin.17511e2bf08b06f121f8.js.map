{"version":3,"sources":["webpack:///./public/app/plugins/datasource/prometheus/language_provider.ts","webpack:///./node_modules/lru-cache/node_modules/yallist/iterator.js","webpack:///./node_modules/lru-cache/node_modules/yallist/yallist.js","webpack:///./node_modules/lru-cache/index.js","webpack:///./public/app/plugins/datasource/prometheus/language_utils.ts","webpack:///./public/app/plugins/datasource/prometheus/add_label_to_query.ts","webpack:///./public/app/plugins/datasource/prometheus/promql.ts"],"names":["DEFAULT_KEYS","SUGGESTIONS_LIMIT","wrapLabel","label","setFunctionKind","suggestion","kind","PREFIX_DELIMITER_REGEX","PromQlLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","histogramMetrics","timeRange","metrics","metricsMetadata","startTask","labelKeys","labelFetchTs","labelsCache","LRU","request","async","url","defaultValue","params","this","metadataRequest","data","error","console","start","lookupsDisabled","fetchLabels","fetchLabelValues","fixSummariesMetadata","processHistogramMetrics","values","processHistogramLabels","slice","sort","provideCompletionItems","prefix","text","value","labelKey","wrapperClasses","context","history","emptyResult","suggestions","empty","document","length","selectedLines","getTextsAtRange","selection","currentLine","size","first","getText","nextCharacter","anchor","offset","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","match","isNextOperand","includes","getRangeCompletionItems","getLabelCompletionItems","getAggregationCompletionItems","getEmptyCompletionItems","getBeginningCompletionItems","getTermCompletionItems","historyItems","chain","map","h","query","expr","filter","uniq","take","item","cutoffTs","Date","now","historyForItem","ts","count","recent","hint","dateTime","fromNow","documentation","addHistoryMetadata","push","searchFunctionType","SearchFunctionType","Prefix","skipSort","items","FUNCTIONS","limitInfo","addLimitInfo","limitSuggestions","m","metric","metadata","type","help","toUpperCase","addMetricsMetadata","Fuzzy","queryOffset","queryText","getBlocks","reduce","block","blockText","anchorBlock","key","openParensAggregationIndex","lastIndexOf","openParensSelectorIndex","closeParensSelectorIndex","indexOf","closeParensAggregationIndex","result","selectorString","replace","selector","parseSelector","series","getSeries","Object","keys","line","cursorOffset","suffix","substr","isValueStart","isValueEnd","isPreValue","parsedSelector","containsMetric","existingKeys","warn","possibleKeys","difference","newItems","newSuggestion","getTimeRangeParams","fetchSeriesLabels","name","withName","range","urlParams","cacheKey","URLSearchParams","roundSecToMin","parseInt","toString","end","get","processLabels","set","fetchSeries","fetchDefaultSeries","once","Promise","all","acc","i","assign","cleanText","s","split","pop","trimLeft","PromqlSyntax","getLabelKeys","RATE_RANGES","valueOf","res","Array","isArray","module","exports","Yallist","prototype","Symbol","iterator","walker","head","next","list","self","tail","forEach","arguments","l","insert","node","inserted","Node","prev","unshift","create","removeNode","Error","unshiftNode","pushNode","shift","fn","thisp","call","forEachReverse","n","getReverse","mapReverse","initial","TypeError","reduceReverse","toArray","arr","toArrayReverse","from","to","ret","sliceReverse","splice","deleteCount","reverse","p","require","er","MAX","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","doUse","hit","isStale","del","maxAge","diff","trim","delete","Entry","forEachStep","undefined","options","max","Infinity","lc","stale","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","allowStale","mA","lC","rforEach","k","Map","dump","v","e","dumpLru","len","has","peek","load","expiresAt","prune","labels","resultSet","Set","regexp","RegExp","index","test","add","__name__","valueSet","rest","valueArray","selectorRegexp","labelRegexp","prefixOpen","prefixClose","suffixClose","suffixOpenIndex","suffixOpen","operator","labelOffset","valueStart","valueEnd","metricMatch","cleanSelector","join","expandRecordingRules","mapping","ruleNames","rulesRegex","queryArray","pre","post","invalidLabelsRegex","invalidLabelsRegexp","indexOfRegexMatch","exprBeforeRegexMatch","exprAfterRegexMatch","arrayOfLabelObjects","Boolean","obj","addLabelToQuery","addLabelsToExpression","summaryMetadata","syntheticMetadata","roundMsToMin","milliseconds","seconds","Math","floor","keywords","builtInWords","metricsAndKeywordsRegexp","hasNoMetrics","transformedValue","previousWord","word","isMetric","insideSelector","position","openChar","closeChar","nextSelectorStart","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","isColonBounded","endsWith","startsWithQuote","isTemplateVariable","isTimeUnit","Number","isWordMetric","exec","parts","lastIndex","selectorWithLabel","addLabelToSelector","labelValue","labelOperator","parsedLabels","operatorForLabelKey","uniqWith","isEqual","compact","sortBy","sortValue","insertText","detail","tokenizer","comment","pattern","lookbehind","inside","alias","punctuation","greedy","function","f","number"],"mappings":"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","file":"default~lokiPlugin~prometheusPlugin.17511e2bf08b06f121f8.js","sourcesContent":["import { once, chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\nimport { Value } from 'slate';\n\nimport { dateTime, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItem, CompletionItemGroup, SearchFunctionType, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport {\n  addLimitInfo,\n  fixSummariesMetadata,\n  limitSuggestions,\n  parseSelector,\n  processHistogramLabels,\n  processLabels,\n  roundSecToMin,\n} from './language_utils';\nimport PromqlSyntax, { FUNCTIONS, RATE_RANGES } from './promql';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 5;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst wrapLabel = (label: string): CompletionItem => ({ label });\n\nconst setFunctionKind = (suggestion: CompletionItem): CompletionItem => {\n  suggestion.kind = 'function';\n  return suggestion;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: any[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query === item.label);\n  const count = historyForItem.length;\n  const recent = historyForItem[0];\n  let hint = `Queried ${count} times in the last 24h.`;\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nfunction addMetricsMetadata(metric: string, metadata?: PromMetricsMetadata): CompletionItem {\n  const item: CompletionItem = { label: metric };\n  if (metadata && metadata[metric]) {\n    const { type, help } = metadata[metric][0];\n    item.documentation = `${type.toUpperCase()}: ${help}`;\n  }\n  return item;\n}\n\nconst PREFIX_DELIMITER_REGEX = /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange?: { start: number; end: number };\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[];\n  labelFetchTs: number;\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private labelsCache = new LRU<string, Record<string, string[]>>(10);\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = { start: 0, end: 0 };\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}): Promise<any> => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params);\n      return res.data.data;\n    } catch (error) {\n      console.error(error);\n    }\n\n    return defaultValue;\n  };\n\n  start = async (): Promise<any[]> => {\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    // TODO #33976: make those requests parallel\n    await this.fetchLabels();\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    this.metricsMetadata = fixSummariesMetadata(await this.request('/api/v1/metadata', {}));\n    this.processHistogramMetrics(this.metrics);\n\n    return [];\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  processHistogramMetrics = (data: string[]) => {\n    const { values } = processHistogramLabels(data);\n\n    if (values && values['__name__']) {\n      this.histogramMetrics = values['__name__'].slice().sort();\n    }\n  };\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: { history: Array<HistoryItem<PromQuery>> } = { history: [] }\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^[\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for metric{|} and metric{foo=|}, as well as metric-independent label queries like {|}\n      return this.getLabelCompletionItems({ prefix, text, value, labelKey, wrapperClasses });\n    } else if (wrapperClasses.includes('context-aggregation')) {\n      // Suggestions for sum(metric) by (|)\n      return this.getAggregationCompletionItems(value);\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  };\n\n  getBeginningCompletionItems = (context: { history: Array<HistoryItem<PromQuery>> }): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems = (context: { history: Array<HistoryItem<PromQuery>> }): TypeaheadOutput => {\n    const { history } = context;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (history && history.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        searchFunctionType: SearchFunctionType.Prefix,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const { metrics, metricsMetadata } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    suggestions.push({\n      searchFunctionType: SearchFunctionType.Prefix,\n      label: 'Functions',\n      items: FUNCTIONS.map(setFunctionKind),\n    });\n\n    if (metrics && metrics.length) {\n      const limitInfo = addLimitInfo(metrics);\n      suggestions.push({\n        label: `Metrics${limitInfo}`,\n        items: limitSuggestions(metrics).map((m) => addMetricsMetadata(m, metricsMetadata)),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  getAggregationCompletionItems = async (value: Value): Promise<TypeaheadOutput> => {\n    const suggestions: CompletionItemGroup[] = [];\n\n    // Stitch all query lines together to support multi-line queries\n    let queryOffset;\n    const queryText = value.document.getBlocks().reduce((text: string, block) => {\n      if (!block) {\n        return text;\n      }\n\n      const blockText = block?.getText();\n\n      if (value.anchorBlock.key === block.key) {\n        // Newline characters are not accounted for but this is irrelevant\n        // for the purpose of extracting the selector string\n        queryOffset = value.selection.anchor.offset + text.length;\n      }\n\n      return text + blockText;\n    }, '');\n\n    // Try search for selector part on the left-hand side, such as `sum (m) by (l)`\n    const openParensAggregationIndex = queryText.lastIndexOf('(', queryOffset);\n    let openParensSelectorIndex = queryText.lastIndexOf('(', openParensAggregationIndex - 1);\n    let closeParensSelectorIndex = queryText.indexOf(')', openParensSelectorIndex);\n\n    // Try search for selector part of an alternate aggregation clause, such as `sum by (l) (m)`\n    if (openParensSelectorIndex === -1) {\n      const closeParensAggregationIndex = queryText.indexOf(')', queryOffset);\n      closeParensSelectorIndex = queryText.indexOf(')', closeParensAggregationIndex + 1);\n      openParensSelectorIndex = queryText.lastIndexOf('(', closeParensSelectorIndex);\n    }\n\n    const result = {\n      suggestions,\n      context: 'context-aggregation',\n    };\n\n    // Suggestions are useless for alternative aggregation clauses without a selector in context\n    if (openParensSelectorIndex === -1) {\n      return result;\n    }\n\n    // Range vector syntax not accounted for by subsequent parse so discard it if present\n    const selectorString = queryText\n      .slice(openParensSelectorIndex + 1, closeParensSelectorIndex)\n      .replace(/\\[[^\\]]+\\]$/, '');\n\n    const selector = parseSelector(selectorString, selectorString.length - 2).selector;\n\n    const series = await this.getSeries(selector);\n    const labelKeys = Object.keys(series);\n    if (labelKeys.length > 0) {\n      const limitInfo = addLimitInfo(labelKeys);\n      suggestions.push({\n        label: `Labels${limitInfo}`,\n        items: labelKeys.map(wrapLabel),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n    return result;\n  };\n\n  getLabelCompletionItems = async ({\n    text,\n    wrapperClasses,\n    labelKey,\n    value,\n  }: TypeaheadInput): Promise<TypeaheadOutput> => {\n    if (!value) {\n      return { suggestions: [] };\n    }\n\n    const suggestions: CompletionItemGroup[] = [];\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const suffix = line.substr(cursorOffset);\n    const prefix = line.substr(0, cursorOffset);\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n    const isValueEnd = suffix.match(/^\"?[,}]|$/);\n    // Detect cursor in front of value, e.g., {key=|\"}\n    const isPreValue = prefix.match(/(=|=~|!=|!~)$/) && suffix.match(/^\"/);\n\n    // Don't suggest anything at the beginning or inside a value\n    const isValueEmpty = isValueStart && isValueEnd;\n    const hasValuePrefix = isValueEnd && !isValueStart;\n    if ((!isValueEmpty && !hasValuePrefix) || isPreValue) {\n      return { suggestions };\n    }\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    const containsMetric = selector.includes('__name__=');\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let series: Record<string, string[]> = {};\n    // Query labels for selector\n    if (selector) {\n      series = await this.getSeries(selector, !containsMetric);\n    }\n\n    if (Object.keys(series).length === 0) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { suggestions };\n    }\n\n    let context: string | undefined;\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && series[labelKey]) {\n        context = 'context-label-values';\n        const limitInfo = addLimitInfo(series[labelKey]);\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"${limitInfo}`,\n          items: series[labelKey].map(wrapLabel),\n          searchFunctionType: SearchFunctionType.Fuzzy,\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = series ? Object.keys(series) : containsMetric ? null : DEFAULT_KEYS;\n\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          context = 'context-labels';\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const limitInfo = addLimitInfo(newItems);\n          const newSuggestion: CompletionItemGroup = {\n            label: `Labels${limitInfo}`,\n            items: newItems,\n            searchFunctionType: SearchFunctionType.Fuzzy,\n          };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  };\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getTimeRangeParams();\n    const url = `/api/v1/label/${key}/values`;\n    return await this.request(url, [], params);\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/api/v1/labels';\n    const params = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, [], params);\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  }\n\n  /**\n   * Fetch labels for a series. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const range = this.datasource.getTimeRangeParams();\n    const urlParams = {\n      ...range,\n      'match[]': name,\n    };\n    const url = `/api/v1/series`;\n    // Cache key is a bit different here. We add the `withName` param and also round up to a minute the intervals.\n    // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n    // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n    // when user does not the newest values for a minute if already cached.\n    const cacheParams = new URLSearchParams({\n      'match[]': name,\n      start: roundSecToMin(parseInt(range.start, 10)).toString(),\n      end: roundSecToMin(parseInt(range.end, 10)).toString(),\n      withName: withName ? 'true' : 'false',\n    });\n\n    const cacheKey = `/api/v1/series?${cacheParams.toString()}`;\n    let value = this.labelsCache.get(cacheKey);\n    if (!value) {\n      const data = await this.request(url, [], urlParams);\n      const { values } = processLabels(data, withName);\n      value = values;\n      this.labelsCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams();\n    const params = { ...range, match };\n    return await this.request(url, {}, params);\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 2; i < arguments.length; i++) {\n    walker = insert(this, walker, arguments[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","import { PromMetricsMetadata } from './types';\nimport { addLabelToQuery } from './add_label_to_query';\nimport { SUGGESTIONS_LIMIT } from './language_provider';\n\nexport const processHistogramLabels = (labels: string[]) => {\n  const resultSet: Set<string> = new Set();\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < labels.length; index++) {\n    const label = labels[index];\n    const isHistogramValue = regexp.test(label);\n    if (isHistogramValue) {\n      resultSet.add(label);\n    }\n  }\n  const result = [...resultSet];\n\n  return { values: { __name__: result } };\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  // For processing we are going to use sets as they have significantly better performance than arrays\n  // After we process labels, we will convert sets to arrays and return object with label values in arrays\n  const valueSet: { [key: string]: Set<string> } = {};\n  labels.forEach((label) => {\n    const { __name__, ...rest } = label;\n    if (withName) {\n      valueSet['__name__'] = valueSet['__name__'] || new Set();\n      if (!valueSet['__name__'].has(__name__)) {\n        valueSet['__name__'].add(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach((key) => {\n      if (!valueSet[key]) {\n        valueSet[key] = new Set();\n      }\n      if (!valueSet[key].has(rest[key])) {\n        valueSet[key].add(rest[key]);\n      }\n    });\n  });\n\n  // valueArray that we are going to return in the object\n  const valueArray: { [key: string]: string[] } = {};\n  limitSuggestions(Object.keys(valueSet)).forEach((key) => {\n    valueArray[key] = limitSuggestions(Array.from(valueSet[key]));\n  });\n\n  return { values: valueArray, keys: Object.keys(valueArray) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?(\\}|$)/;\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")/g;\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: any[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (label, key, operator, value) => {\n    const labelOffset = query.indexOf(label);\n    const valueStart = labelOffset + key.length + operator.length + 1;\n    const valueEnd = labelOffset + key.length + operator.length + value.length - 1;\n    // Skip label if cursor is in value\n    if (cursorOffset < valueStart || cursorOffset > valueEnd) {\n      labels[key] = { value, operator };\n    }\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const ruleNames = Object.keys(mapping);\n  const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n  const expandedQuery = query.replace(rulesRegex, (match, pre, name, post) => `${pre}${mapping[name]}${post}`);\n\n  // Split query into array, so if query uses operators, we can correctly add labels to each individual part.\n  const queryArray = expandedQuery.split(/(\\+|\\-|\\*|\\/|\\%|\\^)/);\n\n  // Regex that matches occurrences of ){ or }{ or ]{ which is a sign of incorrecly added labels.\n  const invalidLabelsRegex = /(\\)\\{|\\}\\{|\\]\\{)/;\n  const correctlyExpandedQueryArray = queryArray.map((query) => {\n    return addLabelsToExpression(query, invalidLabelsRegex);\n  });\n\n  return correctlyExpandedQueryArray.join('');\n}\n\nfunction addLabelsToExpression(expr: string, invalidLabelsRegexp: RegExp) {\n  const match = expr.match(invalidLabelsRegexp);\n  if (!match) {\n    return expr;\n  }\n\n  // Split query into 2 parts - before the invalidLabelsRegex match and after.\n  const indexOfRegexMatch = match.index ?? 0;\n  const exprBeforeRegexMatch = expr.substr(0, indexOfRegexMatch + 1);\n  const exprAfterRegexMatch = expr.substr(indexOfRegexMatch + 1);\n\n  // Create arrayOfLabelObjects with label objects that have key, operator and value.\n  const arrayOfLabelObjects: Array<{ key: string; operator: string; value: string }> = [];\n  exprAfterRegexMatch.replace(labelRegexp, (label, key, operator, value) => {\n    arrayOfLabelObjects.push({ key, operator, value });\n    return '';\n  });\n\n  // Loop trough all of the label objects and add them to query.\n  // As a starting point we have valid query without the labels.\n  let result = exprBeforeRegexMatch;\n  arrayOfLabelObjects.filter(Boolean).forEach((obj) => {\n    // Remove extra set of quotes from obj.value\n    const value = obj.value.substr(1, obj.value.length - 2);\n    result = addLabelToQuery(result, obj.key, value, obj.operator);\n  });\n\n  return result;\n}\n\n/**\n * Adds metadata for synthetic metrics for which the API does not provide metadata.\n * See https://github.com/grafana/grafana/issues/22337 for details.\n *\n * @param metadata HELP and TYPE metadata from /api/v1/metadata\n */\nexport function fixSummariesMetadata(metadata: PromMetricsMetadata): PromMetricsMetadata {\n  if (!metadata) {\n    return metadata;\n  }\n  const summaryMetadata: PromMetricsMetadata = {};\n  for (const metric in metadata) {\n    const item = metadata[metric][0];\n    if (item.type === 'histogram') {\n      summaryMetadata[`${metric}_bucket`] = [\n        {\n          type: 'counter',\n          help: `Cumulative counters for the observation buckets (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_count`] = [\n        {\n          type: 'counter',\n          help: `Count of events that have been observed for the histogram metric (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_sum`] = [\n        {\n          type: 'counter',\n          help: `Total sum of all observed values for the histogram metric (${item.help})`,\n        },\n      ];\n    }\n    if (item.type === 'summary') {\n      summaryMetadata[`${metric}_count`] = [\n        {\n          type: 'counter',\n          help: `Count of events that have been observed for the base metric (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_sum`] = [\n        {\n          type: 'counter',\n          help: `Total sum of all observed values for the base metric (${item.help})`,\n        },\n      ];\n    }\n  }\n  // Synthetic series\n  const syntheticMetadata: PromMetricsMetadata = {};\n  syntheticMetadata['ALERTS'] = [\n    {\n      type: 'counter',\n      help:\n        'Time series showing pending and firing alerts. The sample value is set to 1 as long as the alert is in the indicated active (pending or firing) state.',\n    },\n  ];\n\n  return { ...metadata, ...summaryMetadata, ...syntheticMetadata };\n}\n\nexport function roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nexport function roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function limitSuggestions(items: string[]) {\n  return items.slice(0, SUGGESTIONS_LIMIT);\n}\n\nexport function addLimitInfo(items: any[] | undefined): string {\n  return items && items.length >= SUGGESTIONS_LIMIT ? `, limited to the first ${SUGGESTIONS_LIMIT} received items` : '';\n}\n","import { chain, isEqual } from 'lodash';\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right|bool';\nconst logicalOperators = 'or|and|unless';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  logicalOperators,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\n// We want to extract all possible metrics and also keywords\nconst metricsAndKeywordsRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\]{=!\",])/g;\n// Safari currently doesn't support negative lookbehind. When it does, we should refactor this.\n// We are creating 2 matching groups. (\\$) is for the Grafana's variables such as ${__rate_s}. We want to ignore\n// ${__rate_s} and not add variable to it.\nconst selectorRegexp = /(\\$)?{([^{]*)}/g;\n\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  value: string | number,\n  operator?: string,\n  hasNoMetrics?: boolean\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n\n  query = query.replace(metricsAndKeywordsRegexp, (match, word, offset) => {\n    const isMetric = isWordMetric(query, word, offset, previousWord, hasNoMetrics);\n    previousWord = word;\n\n    return isMetric ? `${word}{}` : word;\n  });\n\n  // Adding label to existing selectors\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    lastIndex = match.index + match[2].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    // If we matched 1st group, we know it is Grafana's variable and we don't want to add labels\n    if (match[1]) {\n      parts.push(prefix);\n      parts.push(match[0]);\n    } else {\n      // If we didn't match first group, we are inside selector and we want to add labels\n      const selector = match[2];\n      const selectorWithLabel = addLabelToSelector(selector, key, transformedValue, operator);\n      parts.push(prefix, selectorWithLabel);\n    }\n\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = chain(parsedLabels)\n    .uniqWith(isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nfunction isWordMetric(query: string, word: string, offset: number, previousWord: string, hasNoMetrics?: boolean) {\n  const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n  // Handle \"sum by (key) (metric)\"\n  const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n  // Check for colon as as \"word boundary\" symbol\n  const isColonBounded = word.endsWith(':');\n  // Check for words that start with \" which means that they are not metrics\n  const startsWithQuote = query[offset - 1] === '\"';\n  // Check for template variables\n  const isTemplateVariable = query[offset - 1] === '$';\n  // Check for time units\n  const isTimeUnit = ['s', 'm', 'h', 'd', 'w'].includes(word) && Boolean(Number(query[offset - 1]));\n\n  if (\n    !hasNoMetrics &&\n    !insideSelector &&\n    !isColonBounded &&\n    !previousWordIsKeyWord &&\n    !startsWithQuote &&\n    !isTemplateVariable &&\n    !isTimeUnit &&\n    builtInWords.indexOf(word) === -1\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default addLabelToQuery;\n","import { Grammar } from 'prismjs';\nimport { CompletionItem } from '@grafana/ui';\n\n// When changing RATE_RANGES, check if Loki/LogQL ranges should be changed too\n// @see public/app/plugins/datasource/loki/language_provider.ts\nexport const RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__rate_interval', sortValue: '$__rate_interval' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const OPERATORS = ['by', 'group_left', 'group_right', 'ignoring', 'on', 'offset', 'without'];\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'count_values',\n    insertText: 'count_values',\n    documentation: 'Count number of elements with the same value',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n  {\n    label: 'quantile',\n    insertText: 'quantile',\n    documentation: 'Calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions',\n  },\n];\n\nexport const FUNCTIONS = [\n  ...AGGREGATION_OPERATORS,\n  {\n    insertText: 'abs',\n    label: 'abs',\n    detail: 'abs(v instant-vector)',\n    documentation: 'Returns the input vector with all sample values converted to their absolute value.',\n  },\n  {\n    insertText: 'absent',\n    label: 'absent',\n    detail: 'absent(v instant-vector)',\n    documentation:\n      'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.',\n  },\n  {\n    insertText: 'ceil',\n    label: 'ceil',\n    detail: 'ceil(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` up to the nearest integer.',\n  },\n  {\n    insertText: 'changes',\n    label: 'changes',\n    detail: 'changes(v range-vector)',\n    documentation:\n      'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.',\n  },\n  {\n    insertText: 'clamp_max',\n    label: 'clamp_max',\n    detail: 'clamp_max(v instant-vector, max scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_min',\n    label: 'clamp_min',\n    detail: 'clamp_min(v instant-vector, min scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.',\n  },\n  {\n    insertText: 'count_scalar',\n    label: 'count_scalar',\n    detail: 'count_scalar(v instant-vector)',\n    documentation:\n      'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.',\n  },\n  {\n    insertText: 'day_of_month',\n    label: 'day_of_month',\n    detail: 'day_of_month(v=vector(time()) instant-vector)',\n    documentation: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.',\n  },\n  {\n    insertText: 'day_of_week',\n    label: 'day_of_week',\n    detail: 'day_of_week(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.',\n  },\n  {\n    insertText: 'days_in_month',\n    label: 'days_in_month',\n    detail: 'days_in_month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.',\n  },\n  {\n    insertText: 'delta',\n    label: 'delta',\n    detail: 'delta(v range-vector)',\n    documentation:\n      'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.',\n  },\n  {\n    insertText: 'deriv',\n    label: 'deriv',\n    detail: 'deriv(v range-vector)',\n    documentation:\n      'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'drop_common_labels',\n    label: 'drop_common_labels',\n    detail: 'drop_common_labels(instant-vector)',\n    documentation: 'Drops all labels that have the same name and value across all series in the input vector.',\n  },\n  {\n    insertText: 'exp',\n    label: 'exp',\n    detail: 'exp(v instant-vector)',\n    documentation:\n      'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`',\n  },\n  {\n    insertText: 'floor',\n    label: 'floor',\n    detail: 'floor(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` down to the nearest integer.',\n  },\n  {\n    insertText: 'histogram_quantile',\n    label: 'histogram_quantile',\n    detail: 'histogram_quantile(φ float, b instant-vector)',\n    documentation:\n      'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.',\n  },\n  {\n    insertText: 'holt_winters',\n    label: 'holt_winters',\n    detail: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    documentation:\n      'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.',\n  },\n  {\n    insertText: 'hour',\n    label: 'hour',\n    detail: 'hour(v=vector(time()) instant-vector)',\n    documentation: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.',\n  },\n  {\n    insertText: 'idelta',\n    label: 'idelta',\n    detail: 'idelta(v range-vector)',\n    documentation:\n      'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.',\n  },\n  {\n    insertText: 'increase',\n    label: 'increase',\n    detail: 'increase(v range-vector)',\n    documentation:\n      'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.',\n  },\n  {\n    insertText: 'irate',\n    label: 'irate',\n    detail: 'irate(v range-vector)',\n    documentation:\n      'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.',\n  },\n  {\n    insertText: 'label_replace',\n    label: 'label_replace',\n    detail: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    documentation:\n      \"For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn't match then the timeseries is returned unchanged.\",\n  },\n  {\n    insertText: 'ln',\n    label: 'ln',\n    detail: 'ln(v instant-vector)',\n    documentation:\n      'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`',\n  },\n  {\n    insertText: 'log2',\n    label: 'log2',\n    detail: 'log2(v instant-vector)',\n    documentation:\n      'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'log10',\n    label: 'log10',\n    detail: 'log10(v instant-vector)',\n    documentation:\n      'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'minute',\n    label: 'minute',\n    detail: 'minute(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.',\n  },\n  {\n    insertText: 'month',\n    label: 'month',\n    detail: 'month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.',\n  },\n  {\n    insertText: 'predict_linear',\n    label: 'predict_linear',\n    detail: 'predict_linear(v range-vector, t scalar)',\n    documentation:\n      'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n  {\n    insertText: 'resets',\n    label: 'resets',\n    detail: 'resets(v range-vector)',\n    documentation:\n      'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.',\n  },\n  {\n    insertText: 'round',\n    label: 'round',\n    detail: 'round(v instant-vector, to_nearest=1 scalar)',\n    documentation:\n      'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.',\n  },\n  {\n    insertText: 'scalar',\n    label: 'scalar',\n    detail: 'scalar(v instant-vector)',\n    documentation:\n      'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.',\n  },\n  {\n    insertText: 'sort',\n    label: 'sort',\n    detail: 'sort(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in ascending order.',\n  },\n  {\n    insertText: 'sort_desc',\n    label: 'sort_desc',\n    detail: 'sort_desc(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in descending order.',\n  },\n  {\n    insertText: 'sqrt',\n    label: 'sqrt',\n    detail: 'sqrt(v instant-vector)',\n    documentation: 'Calculates the square root of all elements in `v`.',\n  },\n  {\n    insertText: 'time',\n    label: 'time',\n    detail: 'time()',\n    documentation:\n      'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.',\n  },\n  {\n    insertText: 'vector',\n    label: 'vector',\n    detail: 'vector(s scalar)',\n    documentation: 'Returns the scalar `s` as a vector with no labels.',\n  },\n  {\n    insertText: 'year',\n    label: 'year',\n    detail: 'year(v=vector(time()) instant-vector)',\n    documentation: 'Returns the year for each of the given times in UTC.',\n  },\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average value of all points in the specified interval.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation: 'The population standard deviation of the values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation: 'The population standard variance of the values in the specified interval.',\n  },\n];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((by|without)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:${OPERATORS.join('|')})\\\\b`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n\nexport default tokenizer;\n"],"sourceRoot":""}