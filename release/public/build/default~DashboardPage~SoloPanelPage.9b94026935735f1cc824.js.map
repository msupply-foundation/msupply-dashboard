{"version":3,"sources":["webpack:///./public/app/features/inspector/types.ts","webpack:///./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack:///./public/app/features/dashboard/state/initDashboard.ts","webpack:///./public/app/features/dashboard/state/analyticsProcessor.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuTrigger.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack:///./public/app/features/dashboard/utils/getPanelMenu.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack:///./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx"],"names":["InspectTab","isHideSeriesOverride","isSystemOverrideWithRef","seriesVisibilityConfigFactory","label","mode","fieldConfig","data","overrides","displayName","currentIndex","findIndex","SeriesVisibilityChangeMode","ToggleSelection","override","createOverride","getDisplayNames","overridesCopy","Array","from","current","splice","existing","getExistingDisplayNames","length","createExtendedOverride","allFieldsAreExcluded","names","ByNamesMatcherMode","exclude","property","id","value","viz","legend","tooltip","__systemRef","matcher","FieldMatcherID","byNames","options","prefix","undefined","readOnly","properties","find","p","index","name","push","rule","isArray","excludeName","unique","Set","frame","field","fields","type","FieldType","number","getFieldDisplayName","add","async","fetchDashboard","args","dispatch","getState","routeName","DashboardRoutes","Home","dashDTO","backendSrv","get","redirectUri","newUrl","locationUtil","stripBaseFromUrl","locationService","replace","meta","canSave","canShare","canStar","Normal","dashboardLoaderSrv","loadDashboard","urlType","urlSlug","urlUid","fixUrl","url","dashboardUrl","currentPath","getLocation","pathname","console","log","New","urlFolderId","isNew","folderId","dashboard","title","panels","gridPos","x","y","w","h","parseInt","getNewDashboardModelData","message","err","cancelled","dashboardInitFailed","error","initDashboard","dashboardInitFetching","setTimeout","getModel","dashboardInitSlow","dashboardInitServices","DashboardModel","storeState","queryParams","getSearchObject","orgId","partial","user","timeSrv","getTimeSrv","getDashboardSrv","setCurrent","init","createDashboardQueryRunner","run","range","timeRange","modifiedQueries","panelId","queries","fromExplore","initVariablesTransaction","templating","transaction","uid","initPhase","DashboardInitPhase","Services","processRepeats","autofitpanels","autoFitPanels","window","innerHeight","kiosk","keybindingSrv","setupDashboardBindings","notifyApp","createErrorNotification","originPanelId","panelArrId","panel","targets","clearDashboardQueriesToUpdateOnLoad","updateQueriesWhenComingFromExplore","eventData","dashboardId","dashboardName","dashboardUid","folderName","folderTitle","eventName","MetaAnalyticsEventName","DashboardView","reportMetaAnalytics","emitDashboardViewEvent","dashboardWatcher","watch","leave","dashboardInitCompleted","InfoMode","PanelHeaderCorner","Component","this","props","Error","description","Info","links","Links","markdown","interpolatedMarkdown","getTemplateSrv","scopedVars","markedInterpolatedMarkdown","renderMarkdown","getLinks","replaceVariables","className","dangerouslySetInnerHTML","__html","map","link","idx","href","target","getLocationSrv","update","query","inspect","inspectTab","renderCornerType","infoMode","content","onClick","theme","toLowerCase","ariaLabel","selectors","components","Panels","Panel","headerCornerInfo","placement","aria-label","render","getInfoMode","onClickError","getInfoContent","PanelHeaderNotice","notice","iconName","severity","text","e","style","marginRight","rel","PanelHeaderNotices","frames","openInspect","useCallback","tab","stopPropagation","notices","Object","values","PanelHeaderMenuTrigger","children","divProps","clickCoordinates","setClickCoordinates","useState","panelMenuOpen","setPanelMenuOpen","onMenuToggle","event","clicked","eventToClickCoordinates","onMouseDown","closeMenu","Math","floor","clientX","clientY","PanelHeaderLoadingIndicator","state","styles","useStyles","getStyles","LoadingState","Loading","Streaming","streamIndicator","css","colors","textFaint","PanelHeaderMenuProvider","items","setItems","angularComponent","useSelector","useEffect","onViewPanel","preventDefault","viewPanel","onEditPanel","editPanel","onAddLibraryPanel","addLibraryPanel","onUnlinkLibraryPanel","unlinkLibraryPanel","onInspectPanel","onMore","onDuplicatePanel","duplicatePanel","onCopyPanel","copyPanel","onRemovePanel","removePanel","onNavigateToExplore","openInNewWindow","ctrlKey","metaKey","open","config","appSubUrl","store","navigateToExplore","getDataSourceSrv","getExploreUrl","menu","isEditing","iconClassName","shortcut","canEditPanel","sharePanel","contextSrv","hasAccessToExplore","plugin","skipDataQuery","inspectMenu","canEdit","subMenu","isViewing","isPanelModelLibraryPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","click","$eval","getPanelMenu","PanelHeaderMenu","PureComponent","isSubMenu","role","menuItem","PanelHeaderMenuItem","renderItems","PanelHeaderMenuWrapper","show","onClose","parent","document","PanelHeader","alertState","getDisplayTitle","cx","useStyles2","panelStyles","getQueryRunner","cancelQuery","getPanelLinksSupplier","series","libraryPanel","size","titleText","request","timeInfo","typography","fontWeightMedium","body","fontSize","primary","color","byName","createProperty","FieldColorModeId","Fixed","fixedColor","PanelChrome","constructor","super","Subscription","onlyLocal","onFieldConfigChange","propertyIndex","propertiesCopy","changeSeriesColorConfigFactory","isInView","width","setState","refreshWhenInView","timeData","applyPanelTimeOverrides","wantsQueryExecution","runAllPanelQueries","getTimezone","renderCounter","stateUpdate","updateOptions","updateFieldConfig","errorMessage","isRegion","to","anno","time","timeEnd","tags","saveAnnotation","getDashboardQueryRunner","context","eventBus","publish","AnnotationChangeEvent","deleteAnnotation","updateAnnotation","setTime","toUtc","events","newScopedBus","eventFilter","isFirstLoad","sync","DashboardCursorSync","Off","graphTooltip","onSeriesColorChange","onToggleSeriesVisibility","onSeriesVisibilityChange","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","canAddAnnotations","Boolean","canMakeEditable","getInitialPanelDataState","NotStarted","getDefaultTimeRange","componentDidMount","subs","subscribe","RefreshEvent","onRefresh","RenderEvent","onRender","panelInitialized","hasPanelSnapshot","loadSnapshotData","getData","withTransforms","withFieldConfig","next","onDataUpdate","componentWillUnmount","unsubscribe","componentDidUpdate","prevProps","s","shouldComponentUpdate","prevState","resendLastResult","Done","snapshot","snapshotData","toDataFrameDTO","shouldSignalRenderingCompleted","loadingState","pluginMeta","skipFirstRender","renderPanel","height","profiler","renderingCompleted","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","classNames","panelOptions","getOptions","timeZone","transparent","onOptionsChange","onChangeTimeRange","hasTitle","featureToggles","ngalert","containerClassNames","containerByTitle","onPanelError","PanelChromeAngularUnconnected","loadAngularPanel","queryRunner","onPanelDataUpdate","cleanUpAngularPanel","scopeProps","getInnerPanelHeight","getInnerPanelWidth","setPanelAngularComponent","element","loader","getAngularLoader","load","destroy","alert","ref","mapDispatchToProps","PanelChromeAngular","connect","initDashboardPanel","connector","panelState","DashboardPanelUnconnected","isLazy","angularPanelCtrl","DashboardPanel"],"mappings":"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","file":"default~DashboardPage~SoloPanelPage.9b94026935735f1cc824.js","sourcesContent":["export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Actions = 'actions', // ALPHA!\n}\n","import {\n  ByNamesMatcherMode,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const existing = getExistingDisplayNames(current);\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return names;\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n","// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\n// Actions\nimport { notifyApp } from 'app/core/actions';\nimport {\n  clearDashboardQueriesToUpdateOnLoad,\n  dashboardInitCompleted,\n  dashboardInitFailed,\n  dashboardInitFetching,\n  dashboardInitServices,\n  dashboardInitSlow,\n} from './reducers';\n// Types\nimport { DashboardDTO, DashboardInitPhase, DashboardRoutes, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { DataQuery, locationUtil } from '@grafana/data';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { locationService } from '@grafana/runtime';\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string | null;\n  routeName?: string;\n  fixUrl: boolean;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // Detect slow loading / initializing and set state flag\n    // This is in order to not show loading indication for fast loading dashboards as it creates blinking/flashing\n    setTimeout(() => {\n      if (getState().dashboard.getModel() === null) {\n        dispatch(dashboardInitSlow());\n      }\n    }, 500);\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      dashboard.meta.fromExplore = !!(panelId && queries);\n    }\n\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(args.urlUid!, dashboard));\n\n    if (getState().templating.transaction.uid !== args.urlUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.error(err);\n    }\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      updateQueriesWhenComingFromExplore(dispatch, dashboard, panelId, queries);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nfunction getNewDashboardModelData(urlFolderId?: string | null): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nfunction updateQueriesWhenComingFromExplore(\n  dispatch: ThunkDispatch,\n  dashboard: DashboardModel,\n  originPanelId: number,\n  queries: DataQuery[]\n) {\n  const panelArrId = dashboard.panels.findIndex((panel) => panel.id === originPanelId);\n\n  if (panelArrId > -1) {\n    dashboard.panels[panelArrId].targets = queries;\n  }\n\n  // Clear update state now that we're done\n  dispatch(clearDashboardQueriesToUpdateOnLoad());\n}\n","import { DashboardModel } from './DashboardModel';\nimport { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getLocationSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { selectors } from '@grafana/e2e-selectors';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    getLocationSrv().update({ partial: true, query: { inspect: this.props.panel.id, inspectTab: InspectTab.Error } });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme}>\n        <div className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </div>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { FC } from 'react';\nimport { QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, Tooltip } from '@grafana/ui';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice: FC<Props> = ({ notice, onClick }) => {\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'info-circle';\n\n  return (\n    <Tooltip content={notice.text} key={notice.severity}>\n      {notice.inspect ? (\n        <div className=\"panel-info-notice pointer\" onClick={(e) => onClick(e, notice.inspect!)}>\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </div>\n      ) : (\n        <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </a>\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\nimport { locationService } from '@grafana/runtime';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices: FC<Props> = ({ frames, panelId }) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import React, { FC, HTMLAttributes, MouseEvent, ReactElement, useCallback, useState } from 'react';\nimport { CartesianCoords2D } from '@grafana/data';\n\ninterface PanelHeaderMenuTriggerApi {\n  panelMenuOpen: boolean;\n  closeMenu: () => void;\n}\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  children: (props: PanelHeaderMenuTriggerApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuTrigger: FC<Props> = ({ children, ...divProps }) => {\n  const [clickCoordinates, setClickCoordinates] = useState<CartesianCoords2D>({ x: 0, y: 0 });\n  const [panelMenuOpen, setPanelMenuOpen] = useState<boolean>(false);\n  const onMenuToggle = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      if (!isClick(clickCoordinates, eventToClickCoordinates(event))) {\n        return;\n      }\n\n      event.stopPropagation();\n\n      setPanelMenuOpen(!panelMenuOpen);\n    },\n    [clickCoordinates, panelMenuOpen, setPanelMenuOpen]\n  );\n  const onMouseDown = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      setClickCoordinates(eventToClickCoordinates(event));\n    },\n    [setClickCoordinates]\n  );\n\n  return (\n    <header {...divProps} className=\"panel-title-container\" onClick={onMenuToggle} onMouseDown={onMouseDown}>\n      {children({ panelMenuOpen, closeMenu: () => setPanelMenuOpen(false) })}\n    </header>\n  );\n};\n\nfunction isClick(current: CartesianCoords2D, clicked: CartesianCoords2D): boolean {\n  return clicked.x === current.x && clicked.y === current.y;\n}\n\nfunction eventToClickCoordinates(event: MouseEvent<HTMLDivElement>): CartesianCoords2D {\n  return {\n    x: Math.floor(event.clientX),\n    y: Math.floor(event.clientY),\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator: FC<Props> = ({ state, onClick }) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n","import { FC, ReactElement, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { PanelMenuItem } from '@grafana/data';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { StoreState } from '../../../../types';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuProvider: FC<Props> = ({ panel, dashboard, children }) => {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector(\n    (state: StoreState) => state.dashboard.panels[panel.id]?.angularComponent || null\n  );\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, setItems]);\n\n  return children({ items });\n};\n","import { store } from 'app/store/store';\nimport { AngularComponent, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelCtrl } from '../../panel/panel_ctrl';\nimport config from 'app/core/config';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n\n    if (isPanelModelLibraryPanel(panel)) {\n      subMenu.push({\n        text: 'Unlink library panel',\n        onClick: onUnlinkLibraryPanel,\n      });\n    } else {\n      subMenu.push({\n        text: 'Create library panel',\n        onClick: onAddLibraryPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { PureComponent } from 'react';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import React, { FC } from 'react';\nimport { ClickOutsideWrapper } from '@grafana/ui';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  show: boolean;\n  onClose: () => void;\n}\n\nexport const PanelHeaderMenuWrapper: FC<Props> = ({ show, onClose, panel, dashboard }) => {\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <ClickOutsideWrapper onClick={onClose} parent={document}>\n      <PanelHeaderMenuProvider panel={panel} dashboard={dashboard}>\n        {({ items }) => {\n          return <PanelHeaderMenu items={items} />;\n        }}\n      </PanelHeaderMenuProvider>\n    </ClickOutsideWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { cx, css } from '@emotion/css';\nimport { DataLink, GrafanaTheme2, PanelData } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\nimport { PanelHeaderMenuTrigger } from './PanelHeaderMenuTrigger';\nimport { PanelHeaderLoadingIndicator } from './PanelHeaderLoadingIndicator';\nimport { PanelHeaderMenuWrapper } from './PanelHeaderMenuWrapper';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n}\n\nexport const PanelHeader: FC<Props> = ({ panel, error, isViewing, isEditing, data, alertState, dashboard }) => {\n  const onCancelQuery = () => panel.getQueryRunner().cancelQuery();\n  const title = panel.getDisplayTitle();\n  const className = cx('panel-header', !(isViewing || isEditing) ? 'grid-drag-handle' : '');\n  const styles = useStyles2(panelStyles);\n\n  return (\n    <>\n      <PanelHeaderLoadingIndicator state={data.state} onClick={onCancelQuery} />\n      <PanelHeaderCorner\n        panel={panel}\n        title={panel.title}\n        description={panel.description}\n        scopedVars={panel.scopedVars}\n        links={getPanelLinksSupplier(panel)}\n        error={error}\n      />\n      <div className={className}>\n        <PanelHeaderMenuTrigger aria-label={selectors.components.Panels.Panel.title(title)}>\n          {({ closeMenu, panelMenuOpen }) => {\n            return (\n              <div className=\"panel-title\">\n                <PanelHeaderNotices frames={data.series} panelId={panel.id} />\n                {panel.libraryPanel && <Icon name=\"library-panel\" style={{ marginRight: '4px' }} />}\n                {alertState ? (\n                  <Icon\n                    name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                    className=\"icon-gf panel-alert-icon\"\n                    style={{ marginRight: '4px' }}\n                    size=\"sm\"\n                  />\n                ) : null}\n                <h2 className={styles.titleText}>{title}</h2>\n                <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n                <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} show={panelMenuOpen} onClose={closeMenu} />\n                {data.request && data.request.timeInfo && (\n                  <span className=\"panel-time-info\">\n                    <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                  </span>\n                )}\n              </div>\n            );\n          }}\n        </PanelHeaderMenuTrigger>\n      </div>\n    </>\n  );\n};\n\nconst panelStyles = (theme: GrafanaTheme2) => {\n  return {\n    titleText: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 38px);\n      cursor: pointer;\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.body.fontSize};\n      margin: 0;\n\n      &:hover {\n        color: ${theme.colors.text.primary};\n      }\n      .panel-has-alert & {\n        max-width: calc(100% - 54px);\n      }\n    `,\n  };\n};\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","// Libraries\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { ErrorBoundary, PanelContextProvider, PanelContext, SeriesVisibilityChangeMode } from '@grafana/ui';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  DashboardCursorSync,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\nimport { RefreshEvent, RenderEvent } from 'app/types/events';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  context: PanelContext;\n  data: PanelData;\n}\n\nexport class PanelChrome extends Component<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      context: {\n        sync: props.isEditing ? DashboardCursorSync.Off : props.dashboard.graphTooltip,\n        eventBus,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        canAddAnnotations: () => Boolean(props.dashboard.meta.canEdit || props.dashboard.meta.canMakeEditable),\n      },\n      data: this.getInitialPanelDataState(),\n    };\n  }\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, isEditing } = this.props;\n\n    if (prevProps.dashboard.graphTooltip !== this.props.dashboard.graphTooltip) {\n      this.setState((s) => {\n        return {\n          context: { ...s.context, sync: isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip },\n        };\n      });\n    }\n\n    if (isEditing !== prevProps.isEditing) {\n      this.setState((s) => {\n        return {\n          context: { ...s.context, sync: isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip },\n        };\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n  }\n\n  shouldComponentUpdate(prevProps: Props, prevState: State) {\n    const { plugin, panel } = this.props;\n\n    // If plugin changed we need to process fieldOverrides again\n    // We do this by asking panel query runner to resend last result\n    if (prevProps.plugin !== plugin) {\n      panel.getQueryRunner().resendLastResult();\n      return false;\n    }\n\n    return true;\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      if (this.state.refreshWhenInView) {\n        this.setState({ refreshWhenInView: false });\n      }\n      panel.runAllPanelQueries(this.props.dashboard.id, this.props.dashboard.getTimezone(), timeData, width);\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (message: string) => {\n    if (this.state.errorMessage !== message) {\n      this.setState({ errorMessage: message });\n    }\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = data.timeRange || this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelContextProvider value={this.state.context}>\n            <PanelComponent\n              id={panel.id}\n              data={data}\n              title={panel.title}\n              timeRange={timeRange}\n              timeZone={this.props.dashboard.getTimezone()}\n              options={panelOptions}\n              fieldConfig={panel.fieldConfig}\n              transparent={panel.transparent}\n              width={panelWidth}\n              height={innerPanelHeight}\n              renderCounter={renderCounter}\n              replaceVariables={panel.replaceVariables}\n              onOptionsChange={this.onOptionsChange}\n              onFieldConfigChange={this.onFieldConfigChange}\n              onChangeTimeRange={this.onChangeTimeRange}\n              eventBus={dashboard.events}\n            />\n          </PanelContextProvider>\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    let alertState = config.featureToggles.ngalert ? undefined : data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    return (\n      <section\n        className={containerClassNames}\n        aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n      >\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          alertState={alertState}\n          data={data}\n        />\n        <ErrorBoundary>\n          {({ error }) => {\n            if (error) {\n              this.onPanelError(error.message || DEFAULT_PLUGIN_ERROR);\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </section>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { setPanelAngularComponent } from '../state/reducers';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularPanel();\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.cleanUpAngularPanel();\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      panelId: panel.id,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  cleanUpAngularPanel() {\n    const { angularComponent, setPanelAngularComponent, panel } = this.props;\n\n    if (angularComponent) {\n      angularComponent.destroy();\n    }\n\n    setPanelAngularComponent({ panelId: panel.id, angularComponent: null });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    let alertState = config.featureToggles.ngalert ? undefined : data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: state.dashboard.panels[props.panel.id].angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Components\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\n// Actions\nimport { initDashboardPanel } from '../state/actions';\n\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { PanelPlugin } from '@grafana/data';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\nexport interface State {\n  isLazy: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.dashboard.panels[props.panel.id];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nconst mapDispatchToProps = { initDashboardPanel };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props, State> {\n  specialPanels: { [key: string]: Function } = {};\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLazy: !props.isInView,\n    };\n  }\n\n  componentDidMount() {\n    this.props.initDashboardPanel(this.props.panel);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isLazy && this.props.isInView) {\n      this.setState({ isLazy: false });\n    }\n  }\n\n  renderPanel(plugin: PanelPlugin) {\n    const { dashboard, panel, isViewing, isInView, isEditing, width, height } = this.props;\n\n    if (plugin.angularPanelCtrl) {\n      return (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      );\n    }\n\n    return (\n      <PanelChrome\n        plugin={plugin}\n        panel={panel}\n        dashboard={dashboard}\n        isViewing={isViewing}\n        isEditing={isEditing}\n        isInView={isInView}\n        width={width}\n        height={height}\n      />\n    );\n  }\n\n  render() {\n    const { plugin } = this.props;\n    const { isLazy } = this.state;\n\n    // If we have not loaded plugin exports yet, wait\n    if (!plugin) {\n      return null;\n    }\n\n    // If we are lazy state don't render anything\n    if (isLazy) {\n      return null;\n    }\n\n    return this.renderPanel(plugin);\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n"],"sourceRoot":""}