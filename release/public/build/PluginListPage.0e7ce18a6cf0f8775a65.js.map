{"version":3,"file":"PluginListPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/plugins/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/PluginList.tsx","webpack://grafana/./public/app/features/plugins/PluginListPage.tsx","webpack://grafana/./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Page.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemRow.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemCard.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/components/HorizontalGroup.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts","webpack://grafana/./public/app/features/plugins/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/data';\nimport { PluginSignatureBadge } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = (props) => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\" aria-label={selectors.pages.PluginsList.listItem}>\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          <div className=\"card-item-badge\">\n            <PluginSignatureBadge status={plugin.signature} />\n          </div>\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { FC } from 'react';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  plugins: PluginMeta[];\n}\n\nconst PluginList: FC<Props> = (props) => {\n  const { plugins } = props;\n\n  return (\n    <section className=\"card-section card-list-layout-list\">\n      <ol className=\"card-list\" aria-label={selectors.pages.PluginsList.list}>\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { StoreState } from 'app/types';\nimport { setPluginsSearchQuery } from './state/reducers';\nimport { useAsync } from 'react-use';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { PluginsErrorsInfo } from './PluginsErrorsInfo';\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'plugins'),\n  plugins: getPlugins(state.plugins),\n  searchQuery: getPluginsSearchQuery(state.plugins),\n  hasFetched: state.plugins.hasFetched,\n});\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const PluginListPage: React.FC<Props> = ({\n  hasFetched,\n  navModel,\n  plugins,\n  setPluginsSearchQuery,\n  searchQuery,\n  loadPlugins,\n}) => {\n  useAsync(async () => {\n    loadPlugins();\n  }, [loadPlugins]);\n\n  let actionTarget: string | undefined = '_blank';\n  const linkButton = {\n    href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n    title: 'Find more plugins on Grafana.com',\n  };\n\n  return (\n    <Page navModel={navModel} aria-label={selectors.pages.PluginsList.page}>\n      <Page.Contents isLoading={!hasFetched}>\n        <>\n          <PageActionBar\n            searchQuery={searchQuery}\n            setSearchQuery={(query) => setPluginsSearchQuery(query)}\n            linkButton={linkButton}\n            placeholder=\"Search by name, author, description or type\"\n            target={actionTarget}\n          />\n          <PluginsErrorsInfo />\n          {hasFetched && plugins && <PluginList plugins={plugins} />}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginListPage);\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst mapStateToProps = (state: StoreState) => ({\n  errors: getAllPluginsErrors(state.plugins),\n});\n\nconst mapDispatchToProps = {\n  loadPluginsErrors,\n};\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PluginsErrorsInfoProps = ConnectedProps<typeof connector> & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(e) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nexport const PluginsErrorsInfo = connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected);\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import React from 'react';\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    default:\n      return `Plugin disabled due to unkown error: ${error}`;\n  }\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\nimport { Badge, Button, HorizontalGroup, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\nimport { CatalogPlugin } from '../../types';\nimport { getBadgeColor } from './sharedStyles';\nimport { config } from '@grafana/runtime';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  const onClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    ev.preventDefault();\n    window.open(\n      `https://grafana.com/grafana/plugins/${plugin.id}?utm_source=grafana_catalog_learn_more`,\n      '_blank',\n      'noopener,noreferrer'\n    );\n  };\n\n  if (config.licenseInfo?.hasValidLicense) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <HorizontalGroup>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge icon=\"lock\" aria-label=\"lock icon\" text=\"Enterprise\" color=\"blue\" className={customBadgeStyles} />\n      <Button size=\"sm\" fill=\"text\" icon=\"external-link-alt\" onClick={onClick}>\n        Learn more\n      </Button>\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (plugin.hasUpdate && !plugin.isCore) {\n    return (\n      <Tooltip content={plugin.version}>\n        <p className={styles.hasUpdate}>Update available!</p>\n      </Tooltip>\n    );\n  }\n\n  return null;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const Page: React.FC = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className=\"page-container\">\n      <div className={styles}>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) =>\n  css`\n    margin-bottom: ${theme.spacing(3)};\n  `;\n","import React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  // @ts-ignore - react doesn't know about loading attr.\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import React from 'react';\nimport { HorizontalGroup, PluginSignatureBadge } from '@grafana/ui';\nimport { CatalogPlugin } from '../types';\nimport { PluginEnterpriseBadge, PluginDisabledBadge, PluginInstalledBadge, PluginUpdateAvailableBadge } from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  if (plugin.isEnterprise) {\n    return (\n      <HorizontalGroup height=\"auto\" wrap>\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        <PluginUpdateAvailableBadge plugin={plugin} />\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <HorizontalGroup height=\"auto\" wrap>\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      <PluginUpdateAvailableBadge plugin={plugin} />\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\nimport { Icon, useStyles2, CardContainer, VerticalGroup } from '@grafana/ui';\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode, PluginTabIds } from '../types';\nimport { PluginLogo } from './PluginLogo';\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { getStyles, LOGO_SIZE } from './PluginListItem';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n};\n\nexport function PluginListItemRow({ plugin, pathName }: Props) {\n  const styles = useStyles2((theme) => getStyles(theme, PluginListDisplayMode.List));\n\n  return (\n    <CardContainer href={`${pathName}/${plugin.id}?page=${PluginTabIds.OVERVIEW}`} className={styles.cardContainer}>\n      <VerticalGroup spacing=\"md\">\n        <div className={styles.headerWrap}>\n          {/* Logo */}\n          <PluginLogo\n            src={plugin.info.logos.small}\n            alt={`${plugin.name} logo`}\n            className={styles.image}\n            height={LOGO_SIZE}\n          />\n\n          <div>\n            {/* Name */}\n            <h3 className={styles.name}>{plugin.name}</h3>\n\n            {/* Org */}\n            <p className={styles.orgName}>By {plugin.orgName}</p>\n\n            {/* Badges */}\n            <PluginListItemBadges plugin={plugin} />\n          </div>\n\n          {/* Type Icon */}\n          {plugin.type && (\n            <div className={styles.icon}>\n              <Icon name={PluginIconName[plugin.type]} aria-label={`${plugin.type} plugin icon`} />\n            </div>\n          )}\n        </div>\n      </VerticalGroup>\n    </CardContainer>\n  );\n}\n","import React from 'react';\nimport { Icon, useStyles2, CardContainer, VerticalGroup } from '@grafana/ui';\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode, PluginTabIds } from '../types';\nimport { PluginLogo } from './PluginLogo';\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { getStyles, LOGO_SIZE } from './PluginListItem';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n};\n\nexport function PluginListItemCard({ plugin, pathName }: Props) {\n  const styles = useStyles2((theme) => getStyles(theme, PluginListDisplayMode.Grid));\n\n  return (\n    <CardContainer href={`${pathName}/${plugin.id}?page=${PluginTabIds.OVERVIEW}`} className={styles.cardContainer}>\n      <VerticalGroup spacing=\"md\">\n        <div className={styles.headerWrap}>\n          {/* Logo */}\n          <PluginLogo\n            src={plugin.info.logos.small}\n            alt={`${plugin.name} logo`}\n            className={styles.image}\n            height={LOGO_SIZE}\n          />\n\n          {/* Name */}\n          <h2 className={styles.name}>{plugin.name}</h2>\n\n          {/* Type Icon */}\n          {plugin.type && (\n            <div className={styles.icon} data-testid={`${plugin.type} plugin icon`}>\n              <Icon name={PluginIconName[plugin.type]} />\n            </div>\n          )}\n        </div>\n\n        {/* Org */}\n        <p className={styles.orgName}>By {plugin.orgName}</p>\n\n        {/* Badges */}\n        <PluginListItemBadges plugin={plugin} />\n      </VerticalGroup>\n    </CardContainer>\n  );\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useDisplayMode } from '../state/hooks';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\nimport { PluginListItemRow } from './PluginListItemRow';\nimport { PluginListItemCard } from './PluginListItemCard';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n};\n\nexport function PluginListItem({ plugin, pathName }: Props) {\n  const { displayMode } = useDisplayMode();\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  if (isList) {\n    return <PluginListItemRow plugin={plugin} pathName={pathName} />;\n  }\n\n  return <PluginListItemCard plugin={plugin} pathName={pathName} />;\n}\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2, displayMode: PluginListDisplayMode) => {\n  const isRow = displayMode === PluginListDisplayMode.List;\n  const isCard = displayMode === PluginListDisplayMode.Grid;\n\n  return {\n    cardContainer: css`\n      margin-bottom: 0;\n      padding: ${theme.spacing()};\n    `,\n    headerWrap: css`\n      display: grid;\n      grid-template-columns: ${LOGO_SIZE} 1fr ${theme.spacing(3)};\n      grid-gap: ${theme.spacing(2)};\n      width: 100%;\n      ${isCard &&\n      css`\n        align-items: center;\n      `}\n    `,\n    name: css`\n      color: ${theme.colors.text.primary};\n      flex-grow: 1;\n      font-size: ${theme.typography.h4.fontSize};\n      margin-bottom: 0;\n    `,\n    image: css`\n      object-fit: contain;\n      max-width: 100%;\n    `,\n    icon: css`\n      align-self: flex-start;\n      color: ${theme.colors.text.secondary};\n    `,\n    orgName: css`\n      color: ${theme.colors.text.secondary};\n      ${isRow &&\n      css`\n        margin: ${theme.spacing(0, 0, 0.5, 0)};\n      `}\n      ${isCard &&\n      css`\n        margin-bottom: 0;\n      `};\n    `,\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useLocation } from 'react-router-dom';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  displayMode: PluginListDisplayMode;\n}\n\nexport const PluginList = ({ plugins, displayMode }: Props) => {\n  const styles = useStyles2((theme) => getStyles(theme, displayMode));\n  const location = useLocation();\n\n  return (\n    <div className={styles.container} data-testid=\"plugin-list\">\n      {plugins.map((plugin) => (\n        <PluginListItem key={plugin.id} plugin={plugin} pathName={location.pathname} />\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, display: PluginListDisplayMode) => {\n  const isList = display === PluginListDisplayMode.List;\n\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: ${isList ? '1fr' : 'repeat(auto-fill, minmax(288px, 1fr))'};\n      grid-gap: ${theme.spacing(3)};\n    `,\n  };\n};\n","import { FilterInput } from '@grafana/ui';\nimport React, { useState, useRef } from 'react';\nimport { useDebounce } from 'react-use';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => any, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import React from 'react';\nimport { css, cx } from '@emotion/css';\n\nimport { useTheme2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\ninterface HorizontalGroupProps {\n  children: React.ReactNode;\n  wrap?: boolean;\n  className?: string;\n}\n\nexport const HorizontalGroup = ({ children, wrap, className }: HorizontalGroupProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, wrap);\n\n  return <div className={cx(styles.container, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2, wrap?: boolean) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: ${wrap ? 'wrap' : 'no-wrap'};\n    & > * {\n      margin-bottom: ${theme.spacing()};\n      margin-right: ${theme.spacing()};\n    }\n    & > *:last-child {\n      margin-right: 0;\n    }\n  `,\n});\n","import React, { ReactElement } from 'react';\nimport { css } from '@emotion/css';\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Select, RadioButtonGroup, useStyles2, Tooltip } from '@grafana/ui';\nimport { useLocation } from 'react-router-dom';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { PluginList } from '../components/PluginList';\nimport { SearchField } from '../components/SearchField';\nimport { useHistory } from '../hooks/useHistory';\nimport { PluginAdminRoutes, PluginListDisplayMode } from '../types';\nimport { Page as PluginPage } from '../components/Page';\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useGetAllWithFilters, useIsRemotePluginsAvailable, useDisplayMode } from '../state/hooks';\nimport { Sorters } from '../helpers';\n\nexport default function Browse({ route }: GrafanaRouteComponentProps): ReactElement | null {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModelId = getNavModelId(route.routeName);\n  const navModel = useSelector((state: StoreState) => getNavModel(state.navIndex, navModelId));\n  const { displayMode, setDisplayMode } = useDisplayMode();\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const query = (locationSearch.q as string) || '';\n  const filterBy = (locationSearch.filterBy as string) || 'installed';\n  const filterByType = (locationSearch.filterByType as string) || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAllWithFilters({\n    query,\n    filterBy,\n    filterByType,\n    sortBy,\n  });\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n  ];\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: string) => {\n    history.push({ query: { filterByType: value } });\n  };\n\n  const onSearch = (q: any) => {\n    history.push({ query: { filterBy: 'all', filterByType: 'all', q } });\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <PluginPage>\n          <HorizontalGroup wrap>\n            <SearchField value={query} onSearch={onSearch} />\n            <HorizontalGroup wrap className={styles.actionBar}>\n              {/* Filter by type */}\n              <div>\n                <RadioButtonGroup\n                  value={filterByType}\n                  onChange={onFilterByTypeChange}\n                  options={[\n                    { value: 'all', label: 'All' },\n                    { value: 'datasource', label: 'Data sources' },\n                    { value: 'panel', label: 'Panels' },\n                    { value: 'app', label: 'Applications' },\n                  ]}\n                />\n              </div>\n\n              {/* Filter by installed / all */}\n              {remotePluginsAvailable ? (\n                <div>\n                  <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n                </div>\n              ) : (\n                <Tooltip\n                  content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                  placement=\"top\"\n                >\n                  <div>\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </div>\n                </Tooltip>\n              )}\n\n              {/* Sorting */}\n              <div>\n                <Select\n                  menuShouldPortal\n                  aria-label=\"Sort Plugins List\"\n                  width={24}\n                  value={sortBy}\n                  onChange={onSortByChange}\n                  options={[\n                    { value: 'nameAsc', label: 'Sort by name (A-Z)' },\n                    { value: 'nameDesc', label: 'Sort by name (Z-A)' },\n                    { value: 'updated', label: 'Sort by updated date' },\n                    { value: 'published', label: 'Sort by published date' },\n                    { value: 'downloads', label: 'Sort by downloads' },\n                  ]}\n                />\n              </div>\n\n              {/* Display mode */}\n              <div>\n                <RadioButtonGroup<PluginListDisplayMode>\n                  className={styles.displayAs}\n                  value={displayMode}\n                  onChange={setDisplayMode}\n                  options={[\n                    {\n                      value: PluginListDisplayMode.Grid,\n                      icon: 'table',\n                      description: 'Display plugins in a grid layout',\n                    },\n                    { value: PluginListDisplayMode.List, icon: 'list-ul', description: 'Display plugins in list' },\n                  ]}\n                />\n              </div>\n            </HorizontalGroup>\n          </HorizontalGroup>\n          <div className={styles.listWrap}>\n            {isLoading ? (\n              <LoadingPlaceholder\n                className={css`\n                  margin-bottom: 0;\n                `}\n                text=\"Loading results\"\n              />\n            ) : (\n              <PluginList plugins={plugins} displayMode={displayMode} />\n            )}\n          </div>\n        </PluginPage>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.up('xl')} {\n      margin-left: auto;\n    }\n  `,\n  listWrap: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  displayAs: css`\n    svg {\n      margin-right: 0;\n    }\n  `,\n});\n\n// Because the component is used under multiple paths (/plugins and /admin/plugins) we need to get\n// the correct navModel from the store\nconst getNavModelId = (routeName?: string) => {\n  if (routeName === PluginAdminRoutes.HomeAdmin || routeName === PluginAdminRoutes.BrowseAdmin) {\n    return 'admin-plugins';\n  }\n\n  return 'plugins';\n};\n","import { getLocationSrv } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: any) => {\n      getLocationSrv().update({\n        partial: true,\n        replace: false,\n        query,\n      });\n    },\n  };\n};\n","import { createSelector } from 'reselect';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(searchBy.toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setDisplayMode } from './reducer';\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { CatalogPlugin, PluginCatalogStoreState, PluginListDisplayMode } from '../types';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n} from './selectors';\nimport { sortPlugins, Sorters } from '../helpers';\n\ntype Filters = {\n  query?: string;\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string, version: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter((item) => {\n    return (\n      regex.test(item.name) ||\n      regex.test(item.info.author.name) ||\n      regex.test(item.type) ||\n      regex.test(item.info.description)\n    );\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","plugin","selectors","id","type","PluginSignatureBadge","status","signature","hasUpdate","src","info","logos","small","name","author","plugins","map","index","mapStateToProps","state","navModel","getNavModel","navIndex","getPlugins","getPluginsSearchQuery","hasFetched","mapDispatchToProps","loadPlugins","setPluginsSearchQuery","PluginListPage","connect","useAsync","async","Page","isLoading","query","PluginsErrorsInfo","errors","getAllPluginsErrors","loadPluginsErrors","children","theme","useTheme","loading","length","InfoBox","severity","urlTitle","url","List","items","css","renderItem","e","spacing","sm","HorizontalGroup","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","PluginSignatureStatus","PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","icon","text","color","getBadgeColor","colors","background","primary","border","strong","secondary","PluginInstalledBadge","customBadgeStyles","useStyles2","PluginEnterpriseBadge","config","hasValidLicense","Button","size","fill","onClick","ev","preventDefault","window","open","PluginUpdateAvailableBadge","styles","getStyles","isCore","Tooltip","content","version","typography","bodySmall","fontSize","PluginLogo","alt","height","PluginListItemBadges","isEnterprise","wrap","isDisabled","isInstalled","PluginListItemRow","pathName","PluginListDisplayMode","CardContainer","PluginTabIds","cardContainer","VerticalGroup","headerWrap","image","LOGO_SIZE","orgName","Icon","PluginIconName","PluginListItemCard","PluginListItem","displayMode","useDisplayMode","isRow","isCard","h4","PluginList","location","useLocation","container","pathname","display","isList","SearchField","onSearch","setQuery","useState","callBack","delay","deps","isFirstRender","useRef","debounceDeps","useDebounce","current","useDebounceWithoutFirstRender","onKeyDown","key","keyCode","currentTarget","width","useTheme2","cx","Browse","route","locationSearch","locationSearchToObject","search","navModelId","getNavModelId","routeName","useSelector","setDisplayMode","history","push","getLocationSrv","update","partial","replace","remotePluginsAvailable","useIsRemotePluginsAvailable","q","filterBy","filterByType","sortBy","Sorters","useGetAllWithFilters","filterByOptions","label","onFilterByChange","console","message","actionBar","RadioButtonGroup","options","placement","Select","menuShouldPortal","displayAs","description","listWrap","LoadingPlaceholder","breakpoints","up","PluginAdminRoutes","selectRoot","selectItems","createSelector","selectDisplayMode","settings","selectAll","selectById","pluginsAdapter","findByInstallAndType","filter","selectInstalled","find","searchBy","fields","toLowerCase","some","f","includes","findByKeyword","filteredPlugins","searchedPlugins","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useFetchAll","filtered","useFetchStatus","sortPlugins","useGetSingle","useFetchDetails","useInstall","dispatch","useDispatch","isUpdating","install","useUninstall","uninstall","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","useEffect","shouldFetch","details","v","regex","RegExp","item","test"],"sourceRoot":""}