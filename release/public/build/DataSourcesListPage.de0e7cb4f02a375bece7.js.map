{"version":3,"sources":["webpack:///./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","className","value","onChange","title","DataSourcesList","dataSources","layoutMode","styles","useStyles","getStyles","list","map","dataSource","index","heading","name","uid","Figure","src","typeLogoUrl","alt","Meta","typeName","url","isDefault","colorIndex","id","css","buildCategories","plugins","categories","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","description","imgUrl","category","edition","hasValidLicense","config","licenseInfo","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","link","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","pluginCatalogURL","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","async","dispatch","getState","dataSourceSettings","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","err","console","error","initDataSourceSettingsFailed","Error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","statusText","message","errMessage","details","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","byUid","fetch","method","showErrorAlert","toPromise","ok","data","log","parseInt","Number","isNaN","toString","window","location","locationUtil","assureBaseUrl","getDataSourceUsingUidOrId","pluginInfo","getPluginSettings","meta","isBackend","DataSourceClass","prototype","DataSourceWithBackend","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","locationService","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","then","settings","datasources","defaultDatasource","init","endsWith","slice","pluginMeta","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","hasLicense","hideFromTabs","caching","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","user","secureJsonFields","getDataSources","state","regex","RegExp","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","dataSourcesCount","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","setDataSourcesSearchQuery","hasFetched","Contents","isLoading","query","mapDispatchToProps","setDataSourcesLayoutMode","hot","connect","getNavModel","navIndex"],"mappings":"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","file":"DataSourcesListPage.de0e7cb4f02a375bece7.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { FC } from 'react';\n\n// Types\nimport { DataSourceSettings, LayoutMode } from '@grafana/data';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport const DataSourcesList: FC<Props> = ({ dataSources, layoutMode }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <ul className={styles.list}>\n      {dataSources.map((dataSource, index) => {\n        return (\n          <li key={dataSource.id}>\n            <Card heading={dataSource.name} href={`datasources/edit/${dataSource.uid}`}>\n              <Card.Figure>\n                <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n              </Card.Figure>\n              <Card.Meta>\n                {[\n                  dataSource.typeName,\n                  dataSource.url,\n                  dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                ]}\n              </Card.Meta>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default DataSourcesList;\n\nconst getStyles = () => {\n  return {\n    list: css`\n      list-style: none;\n    `,\n  };\n};\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport config from '../../../core/config';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!pageId) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n\n      // have we already loaded the plugin then we can skip the steps below?\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        const { statusText, message: errMessage, details } = err;\n        const message = statusText ? 'HTTP error ' + statusText : errMessage;\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const dataSource = await getDataSourceUsingUidOrId(uid);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: isBackend,\n    };\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\n/**\n * Get data source by uid or id, if old id detected handles redirect\n */\nasync function getDataSourceUsingUidOrId(uid: string): Promise<DataSourceSettings> {\n  // Try first with uid api\n  try {\n    const byUid = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/uid/${uid}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    if (byUid.ok) {\n      return byUid.data;\n    }\n  } catch (err) {\n    console.log('Failed to lookup data source by uid', err);\n  }\n\n  // try lookup by old db id\n  const id = parseInt(uid, 10);\n  if (!Number.isNaN(id)) {\n    const response = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/${id}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    // Not ideal to do a full page reload here but so tricky to handle this\n    // otherwise We can update the location using react router, but need to\n    // fully reload the route as the nav model page index is not matching with\n    // the url in that case. And react router has no way to unmount remount a\n    // route\n    if (response.ok && response.data.id.toString() === uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${response.data.uid}`);\n      return {} as DataSourceSettings; // avoids flashing an error\n    }\n  }\n\n  throw Error('Could not find data source');\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    locationService.push(`/datasources/edit/${result.datasource.uid}`);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource); // by UID not yet supported\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n\n    locationService.push('/datasources');\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init(config.datasources, settings.defaultDatasource);\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'database',\n      id: `datasource-cache-${dataSource.id}`,\n      text: 'Cache',\n      url: `datasources/edit/${dataSource.id}/cache`,\n      hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeName: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel, LayoutMode } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState } from 'app/types';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'No data sources defined',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <PageActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={(query) => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}