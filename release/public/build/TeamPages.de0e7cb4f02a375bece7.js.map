{"version":3,"sources":["webpack:///./public/app/features/teams/state/selectors.ts","webpack:///./public/app/features/teams/state/actions.ts","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./public/app/core/components/WithFeatureToggle.tsx","webpack:///./public/app/features/teams/TeamMemberRow.tsx","webpack:///./public/app/features/teams/TeamMembers.tsx","webpack:///./public/app/features/teams/TeamSettings.tsx","webpack:///./public/app/features/teams/TeamGroupSync.tsx","webpack:///./public/app/features/teams/TeamPages.tsx","webpack:///./public/app/features/teams/state/navModel.ts"],"names":["getSearchQuery","state","searchQuery","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","getTeamsCount","teams","length","getTeam","currentTeamId","team","id","parseInt","getTeams","regex","RegExp","filter","test","name","getTeamMembers","members","member","login","email","isSignedInUserTeamAdmin","config","signedInUser","editorsCanAdmin","userInMembers","find","m","userId","permission","TeamPermissionLevel","Member","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","Admin","userIsTeamAdmin","loadTeams","async","response","getBackendSrv","get","perpage","page","dispatch","teamsLoaded","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","addTeamMember","post","removeTeamMember","delete","updateTeam","put","loadTeamGroups","teamGroupsLoaded","addTeamGroup","groupId","removeTeamGroup","encodeURIComponent","deleteTeam","updateTeamMember","teamId","themes","value","label","SharedPreferences","PureComponent","constructor","props","super","service","onSubmitForm","homeDashboardId","theme","timezone","this","update","window","location","reload","onThemeChanged","setState","onTimeZoneChanged","onHomeDashboardChanged","dashboardId","getFullDashName","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","search","starred","d","missing","dashboardIds","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","styles","getStyles","onSubmit","options","item","onChange","className","labelText","content","aria-label","getOptionValue","i","getOptionLabel","placeholder","selectors","components","TimeZonePicker","container","includeInternal","variant","stylesFactory","css","WithFeatureToggle","featureToggle","children","Select","LegacyForms","TeamMemberRow","onPermissionChange","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","labels","map","TagBadge","removeIcon","count","onClick","syncEnabled","src","avatarUrl","size","disabled","onConfirm","mapDispatchToProps","connect","TeamMembers","onSearchQueryChange","setSearchMemberQuery","onToggleAdding","isAdding","onUserSelected","user","newTeamMember","onAddUserToTeam","isTeamAdmin","FilterInput","SlideDown","in","CloseButton","UserPicker","onSelected","style","width","contextSrv","defaultValues","formTeam","register","required","description","Input","mapStateToProps","headerTooltip","TeamGroupSync","onNewGroupIdChanged","event","newGroupId","target","onAddGroup","preventDefault","onRemoveGroup","group","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","placement","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","PageTypes","connector","match","params","pageName","teamLoadingNav","getTeamLoadingNav","navModel","getNavModel","navIndex","TeamPages","textsAreEqual","text1","text2","toLocaleLowerCase","hideTabsFromNonTeamAdmin","main","navItem","text","Members","hideFromTabs","isLoading","isSyncEnabled","licenseInfo","hasLicense","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","Settings","GroupSync","Page","Contents","Object","keys","img","subTitle","breadcrumbs","active","icon","memberCount","node","child","indexOf"],"mappings":"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","file":"TeamPages.de0e7cb4f02a375bece7.js","sourcesContent":["import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n    this.service.update({ homeDashboardId, theme, timezone });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: DashboardSearchHit) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                aria-label=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: DashboardSearchHit) => this.onHomeDashboardChanged(dashboard.id)}\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nexport interface Props {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n  removeTeamMember: typeof removeTeamMember;\n  updateTeamMember: typeof updateTeamMember;\n}\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={(item) => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, User } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { Button } from '@grafana/ui';\n\nexport interface Props {\n  members: TeamMember[];\n  searchMemberQuery: string;\n  addTeamMember: typeof addTeamMember;\n  setSearchMemberQuery: typeof setSearchMemberQuery;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUser: SignedInUser;\n}\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: User | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: User) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <h5>Add team member</h5>\n            <div className=\"gf-form-inline\">\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  team: Team;\n  updateTeam: typeof updateTeam;\n}\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"Name\">\n                <Input {...register('name', { required: true })} />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n              >\n                <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" />\n              </Field>\n              <Button type=\"submit\">Update</Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} />\n    </VerticalGroup>\n  );\n};\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nexport default connect(null, mapDispatchToProps)(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon, Button } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { StoreState, TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => this.onRemoveGroup(group)}>\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <Button type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  Add group\n                </Button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"users-alt\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { includes } from 'lodash';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { StoreState } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams> {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const pageName = props.match.params.page ?? 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(TeamPages);\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'users-alt',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'sync',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"sourceRoot":""}