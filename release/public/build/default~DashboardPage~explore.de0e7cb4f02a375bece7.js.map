{"version":3,"sources":["webpack:///./public/app/features/inspector/DetailText.tsx","webpack:///./public/app/features/inspector/InspectDataOptions.tsx","webpack:///./public/app/features/inspector/InspectDataTab.tsx","webpack:///./public/app/features/inspector/InspectJSONTab.tsx","webpack:///./public/app/features/inspector/styles.ts","webpack:///./public/app/features/inspector/QueryInspector.tsx","webpack:///./public/app/features/inspector/InspectStatsTable.tsx","webpack:///./public/app/features/inspector/InspectStatsTab.tsx","webpack:///./public/app/features/inspector/InspectErrorTab.tsx","webpack:///./public/app/features/dashboard/components/PanelEditor/utils.ts"],"names":["getStyles","theme","css","spacing","md","typography","size","sm","colors","textWeak","DetailText","children","collapsedTextStyles","useStyles","className","InspectDataOptions","options","onOptionsChange","panel","data","dataFrames","transformId","transformationOptions","selectedDataFrame","onDataFrameChange","downloadForExcel","toggleDownloadForExcel","styles","getPanelInspectorStyles","panelTransformations","getTransformations","showPanelTransformationsOption","Boolean","length","showFieldConfigsOption","plugin","fieldConfigRegistry","isEmpty","dataSelect","DataTransformerID","seriesToColumns","selectableOptions","map","frame","index","value","label","getFrameDisplayName","dataDisplayOptions","QueryOperationRow","id","title","headerElement","parts","push","withTransforms","withFieldConfig","join","getActiveString","isOpen","data-testid","onChange","width","aria-label","description","InspectDataTab","PureComponent","constructor","props","super","exportCsv","dataFrame","csvConfig","this","state","dataFrameCsv","toCSV","blob","Blob","String","fromCharCode","type","fileName","getDisplayTitle","noop","toLocaleLowerCase","dateTimeFormat","Date","saveAs","exportLogsAsTxt","logsModel","dataFrameToLogsModel","undefined","textToDownload","meta","forEach","metaItem","string","JSON","stringify","rows","row","newRow","dateTimeFormatISO","timeEpochMs","entry","item","setState","dataFrameIndex","prevState","buildTransformationOptions","transformedData","componentDidUpdate","prevProps","currentTransform","find","transformer","subscription","transformDataFrame","subscribe","unsubscribe","getProcessedData","applyFieldOverrides","config","theme2","fieldConfig","replaceVariables","applyRawFieldOverrides","render","isLoading","inline","hasLogs","some","df","preferredVisualisationType","dataTabContent","selectors","components","PanelInspector","Data","content","actionsWrapper","variant","onClick","useExcelHeader","grow","height","style","byField","ShowContent","PanelJSON","DataJSON","DataStructure","InspectJSONTab","hasPanelJSON","onSelectChanged","text","getPrettyJSON","getJSONObject","show","onTextChanged","onApplyPanelModel","dashboard","onClose","canEdit","updates","parse","restoreModel","refresh","appEvents","emit","AppEvents","alertSuccess","alertError","err","console","error","getSaveModel","series","fields","field","chain","omit","note","jsonOptions","slice","selected","v","isPanelJSON","toolbar","Json","toolbarItem","disableWidth","language","showLineNumbers","showMiniMap","readOnly","onBlur","obj","stylesFactory","wrap","contentQueryInspector","editor","viewer","dataFrameSelect","tabContent","leftActions","selects","QueryInspector","formattedJson","subs","Subscription","onPanelRefresh","dsQuery","response","setFormattedJson","getTextForClipboard","onClipboardSuccess","onToggleExpand","allNodesExpanded","onToggleMocking","isMocking","getNrOfOpenNodes","setMockedResponse","evt","mockedResponse","target","executedQueries","componentDidMount","add","backendSrv","getInspectorStream","next","onDataSourceResponse","events","RefreshEvent","updateQueryList","oldProps","last","idx","query","executedQueryString","refId","frames","componentWillUnmount","hideFromInspector","headers","request","transformRequest","transformResponse","paramSerializer","jsonpCallbackParam","requestId","inspect","retry","timeout","status","statusText","ok","url","redirected","$$config","renderExecutedQueries","weight","semibold","textBlue","info","onRefreshQuery","openNodes","haveData","Object","keys","supportsDataQuery","Query","icon","refreshButton","onSuccess","elType","json","open","onDidRender","InspectStatsTable","timeZone","name","stats","useTheme2","wrapper","stat","displayName","cell","formatStat","display","getDisplayProcessor","FieldType","number","formattedValueToString","InspectStatsTab","requestTime","endTime","startTime","processingTime","timings","dataProcessingTime","dataRows","unit","targets","dataStats","concat","Stats","InspectErrorTab","message","calculatePanelSize","mode","DisplayMode","Fill","pWidth","window","innerWidth","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","gridPos","w","pHeight","GRID_CELL_HEIGHT","h","scale","Math","min","skipDataQuery","updateDefaultFieldConfigValue","isCustom","defaults","remove","custom","lodashSet"],"mappings":"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","file":"default~DashboardPage~explore.de0e7cb4f02a375bece7.js","sourcesContent":["import React, { FC } from 'react';\nimport { useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst getStyles = (theme: GrafanaTheme) => css`\n  margin: 0;\n  margin-left: ${theme.spacing.md};\n  font-size: ${theme.typography.size.sm};\n  color: ${theme.colors.textWeak};\n`;\n\nexport const DetailText: FC = ({ children }) => {\n  const collapsedTextStyles = useStyles(getStyles);\n  return <p className={collapsedTextStyles}>{children}</p>;\n};\n","import React, { FC } from 'react';\nimport { DataFrame, DataTransformerID, getFrameDisplayName, SelectableValue } from '@grafana/data';\nimport { Field, HorizontalGroup, Select, Switch, VerticalGroup } from '@grafana/ui';\nimport { getPanelInspectorStyles } from './styles';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { DetailText } from 'app/features/inspector/DetailText';\n\ninterface Props {\n  options: GetDataOptions;\n  dataFrames: DataFrame[];\n  transformId: DataTransformerID;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  selectedDataFrame: number | DataTransformerID;\n  downloadForExcel: boolean;\n  onDataFrameChange: (item: SelectableValue<DataTransformerID | number>) => void;\n  toggleDownloadForExcel: () => void;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\nexport const InspectDataOptions: FC<Props> = ({\n  options,\n  onOptionsChange,\n  panel,\n  data,\n  dataFrames,\n  transformId,\n  transformationOptions,\n  selectedDataFrame,\n  onDataFrameChange,\n  downloadForExcel,\n  toggleDownloadForExcel,\n}) => {\n  const styles = getPanelInspectorStyles();\n\n  const panelTransformations = panel?.getTransformations();\n  const showPanelTransformationsOption =\n    Boolean(panelTransformations?.length) && (transformId as any) !== 'join by time';\n  const showFieldConfigsOption = panel && !panel.plugin?.fieldConfigRegistry.isEmpty();\n\n  let dataSelect = dataFrames;\n  if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n    dataSelect = data!;\n  }\n\n  const choices = dataSelect.map((frame, index) => {\n    return {\n      value: index,\n      label: `${getFrameDisplayName(frame)} (${index})`,\n    } as SelectableValue<number>;\n  });\n\n  const selectableOptions = [...transformationOptions, ...choices];\n\n  function getActiveString() {\n    let activeString = '';\n\n    if (!data) {\n      return activeString;\n    }\n\n    const parts: string[] = [];\n\n    if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n      parts.push('Series joined by time');\n    } else if (data.length > 1) {\n      parts.push(getFrameDisplayName(data[selectedDataFrame as number]));\n    }\n\n    if (options.withTransforms || options.withFieldConfig) {\n      if (options.withTransforms) {\n        parts.push('Panel transforms');\n      }\n\n      if (options.withTransforms && options.withFieldConfig) {\n      }\n\n      if (options.withFieldConfig) {\n        parts.push('Formatted data');\n      }\n    }\n\n    if (downloadForExcel) {\n      parts.push('Excel header');\n    }\n\n    return parts.join(', ');\n  }\n\n  return (\n    <div className={styles.dataDisplayOptions}>\n      <QueryOperationRow\n        id=\"Data options\"\n        index={0}\n        title=\"Data options\"\n        headerElement={<DetailText>{getActiveString()}</DetailText>}\n        isOpen={false}\n      >\n        <div className={styles.options} data-testid=\"dataOptions\">\n          <VerticalGroup spacing=\"none\">\n            {data!.length > 1 && (\n              <Field label=\"Show data frame\">\n                <Select\n                  options={selectableOptions}\n                  value={selectedDataFrame}\n                  onChange={onDataFrameChange}\n                  width={30}\n                  aria-label=\"Select dataframe\"\n                />\n              </Field>\n            )}\n\n            <HorizontalGroup>\n              {showPanelTransformationsOption && onOptionsChange && (\n                <Field\n                  label=\"Apply panel transformations\"\n                  description=\"Table data is displayed with transformations defined in the panel Transform tab.\"\n                >\n                  <Switch\n                    value={!!options.withTransforms}\n                    onChange={() => onOptionsChange({ ...options, withTransforms: !options.withTransforms })}\n                  />\n                </Field>\n              )}\n              {showFieldConfigsOption && onOptionsChange && (\n                <Field\n                  label=\"Formatted data\"\n                  description=\"Table data is formatted with options defined in the Field and Override tabs.\"\n                >\n                  <Switch\n                    value={!!options.withFieldConfig}\n                    onChange={() => onOptionsChange({ ...options, withFieldConfig: !options.withFieldConfig })}\n                  />\n                </Field>\n              )}\n              <Field label=\"Download for Excel\" description=\"Adds header to CSV for use with Excel\">\n                <Switch value={downloadForExcel} onChange={toggleDownloadForExcel} />\n              </Field>\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </QueryOperationRow>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {\n  applyFieldOverrides,\n  applyRawFieldOverrides,\n  CSVConfig,\n  DataFrame,\n  DataTransformerID,\n  dateTimeFormat,\n  dateTimeFormatISO,\n  SelectableValue,\n  toCSV,\n  transformDataFrame,\n} from '@grafana/data';\nimport { Button, Container, Spinner, Table } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectDataOptions } from './InspectDataOptions';\nimport { getPanelInspectorStyles } from './styles';\nimport { config } from 'app/core/config';\nimport { saveAs } from 'file-saver';\nimport { css } from '@emotion/css';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dataFrameToLogsModel } from 'app/core/logs_model';\n\ninterface Props {\n  isLoading: boolean;\n  options: GetDataOptions;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\ninterface State {\n  /** The string is seriesToColumns transformation. Otherwise it is a dataframe index */\n  selectedDataFrame: number | DataTransformerID;\n  transformId: DataTransformerID;\n  dataFrameIndex: number;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  transformedData: DataFrame[];\n  downloadForExcel: boolean;\n}\n\nexport class InspectDataTab extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      selectedDataFrame: 0,\n      dataFrameIndex: 0,\n      transformId: DataTransformerID.noop,\n      transformationOptions: buildTransformationOptions(),\n      transformedData: props.data ?? [],\n      downloadForExcel: false,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (!this.props.data) {\n      this.setState({ transformedData: [] });\n      return;\n    }\n\n    if (this.props.options.withTransforms) {\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n\n    if (prevProps.data !== this.props.data || prevState.transformId !== this.state.transformId) {\n      const currentTransform = this.state.transformationOptions.find((item) => item.value === this.state.transformId);\n\n      if (currentTransform && currentTransform.transformer.id !== DataTransformerID.noop) {\n        const selectedDataFrame = this.state.selectedDataFrame;\n        const dataFrameIndex = this.state.dataFrameIndex;\n        const subscription = transformDataFrame([currentTransform.transformer], this.props.data).subscribe((data) => {\n          this.setState({ transformedData: data, selectedDataFrame, dataFrameIndex }, () => subscription.unsubscribe());\n        });\n        return;\n      }\n\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n  }\n\n  exportCsv = (dataFrame: DataFrame, csvConfig: CSVConfig = {}) => {\n    const { panel } = this.props;\n    const { transformId } = this.state;\n\n    const dataFrameCsv = toCSV([dataFrame], csvConfig);\n\n    const blob = new Blob([String.fromCharCode(0xfeff), dataFrameCsv], {\n      type: 'text/csv;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const transformation = transformId !== DataTransformerID.noop ? '-as-' + transformId.toLocaleLowerCase() : '';\n    const fileName = `${displayTitle}-data${transformation}-${dateTimeFormat(new Date())}.csv`;\n    saveAs(blob, fileName);\n  };\n\n  exportLogsAsTxt = () => {\n    const { data, panel } = this.props;\n    const logsModel = dataFrameToLogsModel(data || [], undefined);\n    let textToDownload = '';\n\n    logsModel.meta?.forEach((metaItem) => {\n      const string = `${metaItem.label}: ${JSON.stringify(metaItem.value)}\\n`;\n      textToDownload = textToDownload + string;\n    });\n    textToDownload = textToDownload + '\\n\\n';\n\n    logsModel.rows.forEach((row) => {\n      const newRow = dateTimeFormatISO(row.timeEpochMs) + '\\t' + row.entry + '\\n';\n      textToDownload = textToDownload + newRow;\n    });\n\n    const blob = new Blob([textToDownload], {\n      type: 'text/plain;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-logs-${dateTimeFormat(new Date())}.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onDataFrameChange = (item: SelectableValue<DataTransformerID | number>) => {\n    this.setState({\n      transformId:\n        item.value === DataTransformerID.seriesToColumns ? DataTransformerID.seriesToColumns : DataTransformerID.noop,\n      dataFrameIndex: typeof item.value === 'number' ? item.value : 0,\n      selectedDataFrame: item.value!,\n    });\n  };\n\n  toggleDownloadForExcel = () => {\n    this.setState((prevState) => ({\n      downloadForExcel: !prevState.downloadForExcel,\n    }));\n  };\n\n  getProcessedData(): DataFrame[] {\n    const { options, panel } = this.props;\n    const data = this.state.transformedData;\n\n    if (!options.withFieldConfig || !panel) {\n      return applyRawFieldOverrides(data);\n    }\n\n    // We need to apply field config even though it was already applied in the PanelQueryRunner.\n    // That's because transformers create new fields and data frames, so i.e. display processor is no longer there\n    return applyFieldOverrides({\n      data,\n      theme: config.theme2,\n      fieldConfig: panel.fieldConfig,\n      replaceVariables: (value: string) => {\n        return value;\n      },\n    });\n  }\n\n  render() {\n    const { isLoading, options, data, panel, onOptionsChange } = this.props;\n    const { dataFrameIndex, transformId, transformationOptions, selectedDataFrame, downloadForExcel } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    if (isLoading) {\n      return (\n        <div>\n          <Spinner inline={true} /> Loading\n        </div>\n      );\n    }\n\n    const dataFrames = this.getProcessedData();\n\n    if (!dataFrames || !dataFrames.length) {\n      return <div>No Data</div>;\n    }\n\n    // let's make sure we don't try to render a frame that doesn't exists\n    const index = !dataFrames[dataFrameIndex] ? 0 : dataFrameIndex;\n    const dataFrame = dataFrames[index];\n    const hasLogs = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'logs');\n\n    return (\n      <div className={styles.dataTabContent} aria-label={selectors.components.PanelInspector.Data.content}>\n        <div className={styles.actionsWrapper}>\n          <InspectDataOptions\n            data={data}\n            panel={panel}\n            options={options}\n            dataFrames={dataFrames}\n            transformId={transformId}\n            transformationOptions={transformationOptions}\n            selectedDataFrame={selectedDataFrame}\n            downloadForExcel={downloadForExcel}\n            onOptionsChange={onOptionsChange}\n            onDataFrameChange={this.onDataFrameChange}\n            toggleDownloadForExcel={this.toggleDownloadForExcel}\n          />\n          <Button\n            variant=\"primary\"\n            onClick={() => this.exportCsv(dataFrames[dataFrameIndex], { useExcelHeader: this.state.downloadForExcel })}\n            className={css`\n              margin-bottom: 10px;\n            `}\n          >\n            Download CSV\n          </Button>\n          {hasLogs && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportLogsAsTxt}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download logs\n            </Button>\n          )}\n        </div>\n        <Container grow={1}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width === 0) {\n                return null;\n              }\n\n              return (\n                <div style={{ width, height }}>\n                  <Table width={width} height={height} data={dataFrame} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction buildTransformationOptions() {\n  const transformations: Array<SelectableValue<DataTransformerID>> = [\n    {\n      value: DataTransformerID.seriesToColumns,\n      label: 'Series joined by time',\n      transformer: {\n        id: DataTransformerID.seriesToColumns,\n        options: { byField: 'Time' },\n      },\n    },\n  ];\n\n  return transformations;\n}\n","import React, { PureComponent } from 'react';\nimport { chain } from 'lodash';\nimport { AppEvents, PanelData, SelectableValue } from '@grafana/data';\nimport { Button, CodeEditor, Field, Select } from '@grafana/ui';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { appEvents } from 'app/core/core';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles } from '../inspector/styles';\n\nenum ShowContent {\n  PanelJSON = 'panel',\n  DataJSON = 'data',\n  DataStructure = 'structure',\n}\n\nconst options: Array<SelectableValue<ShowContent>> = [\n  {\n    label: 'Panel JSON',\n    description: 'The model saved in the dashboard JSON that configures how everything works.',\n    value: ShowContent.PanelJSON,\n  },\n  {\n    label: 'Data',\n    description: 'The raw model passed to the panel visualization',\n    value: ShowContent.DataJSON,\n  },\n  {\n    label: 'DataFrame structure',\n    description: 'Response info without any values',\n    value: ShowContent.DataStructure,\n  },\n];\n\ninterface Props {\n  onClose: () => void;\n  dashboard?: DashboardModel;\n  panel?: PanelModel;\n  data?: PanelData;\n}\n\ninterface State {\n  show: ShowContent;\n  text: string;\n}\n\nexport class InspectJSONTab extends PureComponent<Props, State> {\n  hasPanelJSON: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.hasPanelJSON = !!(props.panel && props.dashboard);\n    // If we are in panel, we want to show PanelJSON, otherwise show DataJSON\n    this.state = {\n      show: this.hasPanelJSON ? ShowContent.PanelJSON : ShowContent.DataJSON,\n      text: this.hasPanelJSON ? getPrettyJSON(props.panel!.getSaveModel()) : getPrettyJSON(props.data),\n    };\n  }\n\n  onSelectChanged = (item: SelectableValue<ShowContent>) => {\n    const show = this.getJSONObject(item.value!);\n    const text = getPrettyJSON(show);\n    this.setState({ text, show: item.value! });\n  };\n\n  // Called onBlur\n  onTextChanged = (text: string) => {\n    this.setState({ text });\n  };\n\n  getJSONObject(show: ShowContent) {\n    const { data, panel } = this.props;\n    if (show === ShowContent.DataJSON) {\n      return data;\n    }\n\n    if (show === ShowContent.DataStructure) {\n      const series = data?.series;\n      if (!series) {\n        return { note: 'Missing Response Data' };\n      }\n      return data!.series.map((frame) => {\n        const { table, fields, ...rest } = frame as any; // remove 'table' from arrow response\n        return {\n          ...rest,\n          fields: frame.fields.map((field) => {\n            return chain(field).omit('values').omit('state').omit('display').value();\n          }),\n        };\n      });\n    }\n\n    if (this.hasPanelJSON && show === ShowContent.PanelJSON) {\n      return panel!.getSaveModel();\n    }\n\n    return { note: `Unknown Object: ${show}` };\n  }\n\n  onApplyPanelModel = () => {\n    const { panel, dashboard, onClose } = this.props;\n    if (this.hasPanelJSON) {\n      try {\n        if (!dashboard!.meta.canEdit) {\n          appEvents.emit(AppEvents.alertError, ['Unable to apply']);\n        } else {\n          const updates = JSON.parse(this.state.text);\n          panel!.restoreModel(updates);\n          panel!.refresh();\n          appEvents.emit(AppEvents.alertSuccess, ['Panel model updated']);\n        }\n      } catch (err) {\n        console.error('Error applying updates', err);\n        appEvents.emit(AppEvents.alertError, ['Invalid JSON text']);\n      }\n\n      onClose();\n    }\n  };\n\n  render() {\n    const { dashboard } = this.props;\n    const { show, text } = this.state;\n    const jsonOptions = this.hasPanelJSON ? options : options.slice(1, options.length);\n    const selected = options.find((v) => v.value === show);\n    const isPanelJSON = show === ShowContent.PanelJSON;\n    const canEdit = dashboard && dashboard.meta.canEdit;\n    const styles = getPanelInspectorStyles();\n\n    return (\n      <>\n        <div className={styles.toolbar} aria-label={selectors.components.PanelInspector.Json.content}>\n          <Field label=\"Select source\" className=\"flex-grow-1\">\n            <Select options={jsonOptions} value={selected} onChange={this.onSelectChanged} />\n          </Field>\n          {this.hasPanelJSON && isPanelJSON && canEdit && (\n            <Button className={styles.toolbarItem} onClick={this.onApplyPanelModel}>\n              Apply\n            </Button>\n          )}\n        </div>\n        <div className={styles.content}>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language=\"json\"\n                showLineNumbers={true}\n                showMiniMap={(text && text.length) > 100}\n                value={text || ''}\n                readOnly={!isPanelJSON}\n                onBlur={this.onTextChanged}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction getPrettyJSON(obj: any): string {\n  return JSON.stringify(obj, null, 2);\n}\n","import { css } from '@emotion/css';\nimport { config } from 'app/core/config';\nimport { stylesFactory } from '@grafana/ui';\n\nexport const getPanelInspectorStyles = stylesFactory(() => {\n  return {\n    wrap: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      flex: 1 1 0;\n    `,\n    toolbar: css`\n      display: flex;\n      width: 100%;\n      flex-grow: 0;\n      align-items: center;\n      justify-content: flex-end;\n      margin-bottom: ${config.theme.spacing.sm};\n    `,\n    toolbarItem: css`\n      margin-left: ${config.theme.spacing.md};\n    `,\n    content: css`\n      flex-grow: 1;\n      height: 100%;\n      padding-bottom: 16px;\n    `,\n    contentQueryInspector: css`\n      flex-grow: 1;\n      padding: ${config.theme.spacing.md} 0;\n    `,\n    editor: css`\n      font-family: monospace;\n      height: 100%;\n      flex-grow: 1;\n    `,\n    viewer: css`\n      overflow: scroll;\n    `,\n    dataFrameSelect: css`\n      flex-grow: 2;\n    `,\n    tabContent: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    dataTabContent: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n    `,\n    actionsWrapper: css`\n      display: flex;\n    `,\n    leftActions: css`\n      display: flex;\n      flex-grow: 1;\n\n      max-width: 85%;\n      @media (max-width: 1345px) {\n        max-width: 75%;\n      }\n    `,\n    options: css`\n      padding-top: ${config.theme.spacing.sm};\n    `,\n    dataDisplayOptions: css`\n      flex-grow: 1;\n      min-width: 300px;\n      margin-right: ${config.theme.spacing.sm};\n    `,\n    selects: css`\n      display: flex;\n      > * {\n        margin-right: ${config.theme.spacing.sm};\n      }\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\nimport { Button, JSONFormatter, LoadingPlaceholder } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AppEvents, DataFrame } from '@grafana/data';\n\nimport appEvents from 'app/core/app_events';\nimport { CopyToClipboard } from 'app/core/components/CopyToClipboard/CopyToClipboard';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles } from './styles';\nimport { supportsDataQuery } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { config } from '@grafana/runtime';\nimport { css } from '@emotion/css';\nimport { Subscription } from 'rxjs';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { RefreshEvent } from 'app/types/events';\n\ninterface DsQuery {\n  isLoading: boolean;\n  response: {};\n}\n\ninterface ExecutedQueryInfo {\n  refId: string;\n  query: string;\n  frames: number;\n  rows: number;\n}\n\ninterface Props {\n  data: DataFrame[];\n  onRefreshQuery: () => void;\n  panel?: PanelModel;\n}\n\ninterface State {\n  allNodesExpanded: boolean | null;\n  isMocking: boolean;\n  mockedResponse: string;\n  dsQuery: DsQuery;\n  executedQueries: ExecutedQueryInfo[];\n}\n\nexport class QueryInspector extends PureComponent<Props, State> {\n  private formattedJson: any;\n  private subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      executedQueries: [],\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n\n    this.subs.add(\n      backendSrv.getInspectorStream().subscribe({\n        next: (response) => this.onDataSourceResponse(response),\n      })\n    );\n\n    if (panel) {\n      this.subs.add(panel.events.subscribe(RefreshEvent, this.onPanelRefresh));\n      this.updateQueryList();\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (this.props.data !== oldProps.data) {\n      this.updateQueryList();\n    }\n  }\n\n  /**\n   * Find the list of executed queries\n   */\n  updateQueryList() {\n    const { data } = this.props;\n    const executedQueries: ExecutedQueryInfo[] = [];\n\n    if (data?.length) {\n      let last: ExecutedQueryInfo | undefined = undefined;\n\n      data.forEach((frame, idx) => {\n        const query = frame.meta?.executedQueryString;\n\n        if (query) {\n          const refId = frame.refId || '?';\n\n          if (last?.refId === refId) {\n            last.frames++;\n            last.rows += frame.length;\n          } else {\n            last = {\n              refId,\n              frames: 0,\n              rows: frame.length,\n              query,\n            };\n            executedQueries.push(last);\n          }\n        }\n      });\n    }\n\n    this.setState({ executedQueries });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  onPanelRefresh = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: true,\n        response: {},\n      },\n    }));\n  };\n\n  onDataSourceResponse(response: any) {\n    // ignore silent requests\n    if (response.config?.hideFromInspector) {\n      return;\n    }\n\n    response = { ...response }; // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n\n      delete response.config;\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.ok;\n      delete response.url;\n      delete response.redirected;\n      delete response.type;\n      delete response.$$config;\n    }\n\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: false,\n        response: response,\n      },\n    }));\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  onToggleMocking = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isMocking: !this.state.isMocking,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  setMockedResponse = (evt: any) => {\n    const mockedResponse = evt.target.value;\n    this.setState((prevState) => ({\n      ...prevState,\n      mockedResponse,\n    }));\n  };\n\n  renderExecutedQueries(executedQueries: ExecutedQueryInfo[]) {\n    if (!executedQueries.length) {\n      return null;\n    }\n\n    const styles = {\n      refId: css`\n        font-weight: ${config.theme.typography.weight.semibold};\n        color: ${config.theme.colors.textBlue};\n        margin-right: 8px;\n      `,\n    };\n\n    return (\n      <div>\n        {executedQueries.map((info) => {\n          return (\n            <div key={info.refId}>\n              <div>\n                <span className={styles.refId}>{info.refId}:</span>\n                {info.frames > 1 && <span>{info.frames} frames, </span>}\n                <span>{info.rows} rows</span>\n              </div>\n              <pre>{info.query}</pre>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { allNodesExpanded, executedQueries } = this.state;\n    const { panel, onRefreshQuery } = this.props;\n    const { response, isLoading } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n    const styles = getPanelInspectorStyles();\n    const haveData = Object.keys(response).length > 0;\n\n    if (panel && !supportsDataQuery(panel.plugin)) {\n      return null;\n    }\n\n    return (\n      <>\n        <div aria-label={selectors.components.PanelInspector.Query.content}>\n          <h3 className=\"section-heading\">Query inspector</h3>\n          <p className=\"small muted\">\n            Query inspector allows you to view raw request and response. To collect this data Grafana needs to issue a\n            new query. Click refresh button below to trigger a new query.\n          </p>\n        </div>\n        {this.renderExecutedQueries(executedQueries)}\n        <div className={styles.toolbar}>\n          <Button\n            icon=\"sync\"\n            onClick={onRefreshQuery}\n            aria-label={selectors.components.PanelInspector.Query.refreshButton}\n          >\n            Refresh\n          </Button>\n\n          {haveData && allNodesExpanded && (\n            <Button icon=\"minus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Collapse all\n            </Button>\n          )}\n          {haveData && !allNodesExpanded && (\n            <Button icon=\"plus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Expand all\n            </Button>\n          )}\n\n          {haveData && (\n            <CopyToClipboard\n              text={this.getTextForClipboard}\n              onSuccess={this.onClipboardSuccess}\n              elType=\"div\"\n              className={styles.toolbarItem}\n            >\n              <Button icon=\"copy\" variant=\"secondary\">\n                Copy to clipboard\n              </Button>\n            </CopyToClipboard>\n          )}\n          <div className=\"flex-grow-1\" />\n        </div>\n        <div className={styles.contentQueryInspector}>\n          {isLoading && <LoadingPlaceholder text=\"Loading query inspector...\" />}\n          {!isLoading && haveData && (\n            <JSONFormatter json={response} open={openNodes} onDidRender={this.setFormattedJson} />\n          )}\n          {!isLoading && !haveData && (\n            <p className=\"muted\">No request and response collected yet. Hit refresh button</p>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  QueryResultMetaStat,\n  TimeZone,\n} from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface InspectStatsTableProps {\n  timeZone: TimeZone;\n  name: string;\n  stats: QueryResultMetaStat[];\n}\n\nexport const InspectStatsTable: React.FC<InspectStatsTableProps> = ({ timeZone, name, stats }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (!stats || !stats.length) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className=\"section-heading\">{name}</div>\n      <table className=\"filter-table width-30\">\n        <tbody>\n          {stats.map((stat, index) => {\n            return (\n              <tr key={`${stat.displayName}-${index}`}>\n                <td>{stat.displayName}</td>\n                <td className={styles.cell}>{formatStat(stat, timeZone, theme)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction formatStat(stat: QueryResultMetaStat, timeZone: TimeZone, theme: GrafanaTheme2): string {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat,\n    },\n    theme,\n    timeZone,\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      padding-bottom: ${theme.spacing(2)};\n    `,\n    cell: css`\n      text-align: right;\n    `,\n  };\n});\n","import { PanelData, QueryResultMetaStat, TimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectStatsTable } from './InspectStatsTable';\nimport React from 'react';\n\ninterface InspectStatsTabProps {\n  data: PanelData;\n  timeZone: TimeZone;\n}\n\nexport const InspectStatsTab: React.FC<InspectStatsTabProps> = ({ data, timeZone }) => {\n  if (!data.request) {\n    return null;\n  }\n\n  let stats: QueryResultMetaStat[] = [];\n\n  const requestTime = data.request.endTime ? data.request.endTime - data.request.startTime : -1;\n  const processingTime = data.timings?.dataProcessingTime || -1;\n  let dataRows = 0;\n\n  for (const frame of data.series) {\n    dataRows += frame.length;\n  }\n\n  if (requestTime > 0) {\n    stats.push({ displayName: 'Total request time', value: requestTime, unit: 'ms' });\n  }\n  if (processingTime > 0) {\n    stats.push({ displayName: 'Data processing time', value: processingTime, unit: 'ms' });\n  }\n  stats.push({ displayName: 'Number of queries', value: data.request.targets.length });\n  stats.push({ displayName: 'Total number rows', value: dataRows });\n\n  let dataStats: QueryResultMetaStat[] = [];\n\n  for (const series of data.series) {\n    if (series.meta && series.meta.stats) {\n      dataStats = dataStats.concat(series.meta.stats);\n    }\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelInspector.Stats.content}>\n      <InspectStatsTable timeZone={timeZone} name={'Stats'} stats={stats} />\n      <InspectStatsTable timeZone={timeZone} name={'Data source stats'} stats={dataStats} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { DataQueryError } from '@grafana/data';\nimport { JSONFormatter } from '@grafana/ui';\n\ninterface InspectErrorTabProps {\n  error?: DataQueryError;\n}\n\nexport const InspectErrorTab: React.FC<InspectErrorTabProps> = ({ error }) => {\n  if (!error) {\n    return null;\n  }\n  if (error.data) {\n    return (\n      <>\n        <h3>{error.data.message}</h3>\n        <JSONFormatter json={error} open={2} />\n      </>\n    );\n  }\n  return <div>{error.message}</div>;\n};\n","import { CSSProperties } from 'react';\nimport { set as lodashSet, omit } from 'lodash';\nimport { FieldConfigSource, PanelPlugin } from '@grafana/data';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DisplayMode } from './types';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\n\nexport function calculatePanelSize(mode: DisplayMode, width: number, height: number, panel: PanelModel): CSSProperties {\n  if (mode === DisplayMode.Fill) {\n    return { width, height };\n  }\n  const panelPadding = 8 * 6;\n  const sidebarWidth = 60;\n\n  const colWidth = (window.innerWidth - sidebarWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h + panelPadding;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight,\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale,\n  };\n}\n\nexport function supportsDataQuery(plugin: PanelPlugin | undefined | null): boolean {\n  return plugin?.meta.skipDataQuery === false;\n}\n\nexport const updateDefaultFieldConfigValue = (\n  config: FieldConfigSource,\n  name: string,\n  value: any,\n  isCustom?: boolean\n) => {\n  let defaults = { ...config.defaults };\n  const remove = value === undefined || value === null || '';\n\n  if (isCustom) {\n    if (defaults.custom) {\n      if (remove) {\n        defaults.custom = omit(defaults.custom, name);\n      } else {\n        defaults.custom = lodashSet({ ...defaults.custom }, name, value);\n      }\n    } else if (!remove) {\n      defaults.custom = lodashSet({ ...defaults.custom }, name, value);\n    }\n  } else if (remove) {\n    defaults = omit(defaults, name);\n  } else {\n    defaults = lodashSet({ ...defaults }, name, value);\n  }\n\n  return {\n    ...config,\n    defaults,\n  };\n};\n"],"sourceRoot":""}