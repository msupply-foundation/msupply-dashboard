{"version":3,"sources":["webpack:///./public/app/features/users/UsersTable.tsx","webpack:///./public/app/features/users/InviteeRow.tsx","webpack:///./public/app/features/users/InviteesTable.tsx","webpack:///./public/app/features/users/UsersListPage.tsx","webpack:///./public/app/features/users/state/selectors.ts","webpack:///./public/app/features/users/state/actions.ts","webpack:///./public/app/features/users/UsersActionBar.tsx"],"names":["UsersTable","props","users","onRoleChange","onRemoveUser","canUpdateRole","contextSrv","hasPermission","AccessControlAction","OrgUsersRoleUpdate","canRemoveFromOrg","OrgUsersRemove","showRemoveModal","setShowRemoveModal","useState","className","style","width","map","user","index","src","avatarUrl","title","login","email","name","lastSeenAtAge","value","role","disabled","onChange","newRole","size","variant","onClick","icon","body","confirmText","onDismiss","isOpen","onConfirm","userId","InviteeRow","PureComponent","render","invitee","revokeInvite","this","getText","url","code","mapDispatchToProps","connect","InviteesTable","invitees","id","UsersListPage","constructor","super","externalUserMngInfoHtml","updatedUser","updateUser","onShowInvites","setState","prevState","showInvites","getPaginatedUsers","offset","searchPage","slice","externalUserMngInfo","renderMarkdown","state","componentDidMount","fetchUsers","fetchInvitees","loadUsers","loadInvitees","renderTable","setUsersSearchPage","paginatedUsers","totalPages","Math","ceil","length","spacing","removeUser","justify","onNavigate","currentPage","numberOfPages","hideWhenSinglePage","navModel","hasFetched","Contents","isLoading","dangerouslySetInnerHTML","__html","setUsersSearchQuery","hot","module","getNavModel","navIndex","getUsers","searchQuery","getUsersSearchQuery","getUsersSearchPage","getInvitees","regex","RegExp","filter","test","getInviteesCount","async","getBackendSrv","get","dispatch","usersLoaded","OrgUsersAdd","inviteesLoaded","patch","delete","UsersActionBar","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","options","label","canAddToOrg","placeholder","marginLeft","href","target","rel"],"mappings":"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","file":"UsersListPage.17511e2bf08b06f121f8.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { AccessControlAction, OrgUser } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\nimport { contextSrv } from 'app/core/core';\n\nexport interface Props {\n  users: OrgUser[];\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, onRoleChange, onRemoveUser } = props;\n  const canUpdateRole = contextSrv.hasPermission(AccessControlAction.OrgUsersRoleUpdate);\n  const canRemoveFromOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersRemove);\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>Login</th>\n          <th>Email</th>\n          <th>Name</th>\n          <th>Seen</th>\n          <th>Role</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                <OrgRolePicker\n                  value={user.role}\n                  disabled={!canUpdateRole}\n                  onChange={(newRole) => onRoleChange(newRole, user)}\n                />\n              </td>\n\n              {canRemoveFromOrg && (\n                <td>\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => setShowRemoveModal(user.login)} icon=\"times\" />\n                  <ConfirmModal\n                    body={`Are you sure you want to delete user ${user.login}?`}\n                    confirmText=\"Delete\"\n                    title=\"Delete\"\n                    onDismiss={() => setShowRemoveModal(false)}\n                    isOpen={user.login === showRemoveModal}\n                    onConfirm={() => {\n                      onRemoveUser(user);\n                    }}\n                  />\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Invitee } from 'app/types';\nimport { revokeInvite } from './state/actions';\nimport { Button, ClipboardButton } from '@grafana/ui';\n\nexport interface Props {\n  invitee: Invitee;\n  revokeInvite: typeof revokeInvite;\n}\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => revokeInvite(invitee.code)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nexport default connect(() => {\n  return {};\n}, mapDispatchToProps)(InviteeRow);\n","import React, { PureComponent } from 'react';\nimport { Invitee } from 'app/types';\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel, renderMarkdown } from '@grafana/data';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport UsersActionBar from './UsersActionBar';\nimport UsersTable from './UsersTable';\nimport InviteesTable from './InviteesTable';\nimport { Invitee, OrgUser, OrgRole } from 'app/types';\nimport { loadInvitees, loadUsers, removeUser, updateUser } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getInvitees, getUsers, getUsersSearchQuery, getUsersSearchPage } from './state/selectors';\nimport { setUsersSearchQuery, setUsersSearchPage } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  invitees: Invitee[];\n  users: OrgUser[];\n  searchQuery: string;\n  searchPage: number;\n  externalUserMngInfo: string;\n  hasFetched: boolean;\n  loadUsers: typeof loadUsers;\n  loadInvitees: typeof loadInvitees;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  setUsersSearchPage: typeof setUsersSearchPage;\n  updateUser: typeof updateUser;\n  removeUser: typeof removeUser;\n}\n\nexport interface State {\n  showInvites: boolean;\n}\n\nconst pageLimit = 30;\n\nexport class UsersListPage extends PureComponent<Props, State> {\n  externalUserMngInfoHtml: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    if (this.props.externalUserMngInfo) {\n      this.externalUserMngInfoHtml = renderMarkdown(this.props.externalUserMngInfo);\n    }\n\n    this.state = {\n      showInvites: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.fetchInvitees();\n  }\n\n  async fetchUsers() {\n    return await this.props.loadUsers();\n  }\n\n  async fetchInvitees() {\n    return await this.props.loadInvitees();\n  }\n\n  onRoleChange = (role: OrgRole, user: OrgUser) => {\n    const updatedUser = { ...user, role: role };\n\n    this.props.updateUser(updatedUser);\n  };\n\n  onShowInvites = () => {\n    this.setState((prevState) => ({\n      showInvites: !prevState.showInvites,\n    }));\n  };\n\n  getPaginatedUsers = (users: OrgUser[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return users.slice(offset, offset + pageLimit);\n  };\n\n  renderTable() {\n    const { invitees, users, setUsersSearchPage } = this.props;\n    const paginatedUsers = this.getPaginatedUsers(users);\n    const totalPages = Math.ceil(users.length / pageLimit);\n\n    if (this.state.showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\">\n          <UsersTable\n            users={paginatedUsers}\n            onRoleChange={(role, user) => this.onRoleChange(role, user)}\n            onRemoveUser={(user) => this.props.removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={setUsersSearchPage}\n              currentPage={this.props.searchPage}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  }\n\n  render() {\n    const { navModel, hasFetched } = this.props;\n    const externalUserMngInfoHtml = this.externalUserMngInfoHtml;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <UsersActionBar onShowInvites={this.onShowInvites} showInvites={this.state.showInvites} />\n            {externalUserMngInfoHtml && (\n              <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n            )}\n            {hasFetched && this.renderTable()}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    navModel: getNavModel(state.navIndex, 'users'),\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    searchPage: getUsersSearchPage(state.users),\n    invitees: getInvitees(state.users),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    hasFetched: state.users.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  loadInvitees,\n  setUsersSearchQuery,\n  setUsersSearchPage,\n  updateUser,\n  removeUser,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UsersListPage));\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getInvitees = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.invitees.filter((invitee) => {\n    return regex.test(invitee.name) || regex.test(invitee.email);\n  });\n};\n\nexport const getInviteesCount = (state: UsersState) => state.invitees.length;\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\nexport const getUsersSearchPage = (state: UsersState) => state.searchPage;\n","import { AccessControlAction, ThunkResult } from '../../../types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { OrgUser } from 'app/types';\nimport { inviteesLoaded, usersLoaded } from './reducers';\nimport { contextSrv } from 'app/core/core';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch) => {\n    const users = await getBackendSrv().get('/api/org/users');\n    dispatch(usersLoaded(users));\n  };\n}\n\nexport function loadInvitees(): ThunkResult<void> {\n  return async (dispatch) => {\n    if (!contextSrv.hasPermission(AccessControlAction.OrgUsersAdd)) {\n      return;\n    }\n\n    const invitees = await getBackendSrv().get('/api/org/invites');\n    dispatch(inviteesLoaded(invitees));\n  };\n}\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function revokeInvite(code: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/invites/${code}/revoke`, {});\n    dispatch(loadInvitees());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { setUsersSearchQuery } from './state/reducers';\nimport { getInviteesCount, getUsersSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { RadioButtonGroup, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  searchQuery: string;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  onShowInvites: () => void;\n  pendingInvitesCount: number;\n  canInvite: boolean;\n  showInvites: boolean;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n}\n\nexport class UsersActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      canInvite,\n      externalUserMngLinkName,\n      externalUserMngLinkUrl,\n      searchQuery,\n      pendingInvitesCount,\n      setUsersSearchQuery,\n      onShowInvites,\n      showInvites,\n    } = this.props;\n    const options = [\n      { label: 'Users', value: 'users' },\n      { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n    ];\n    const canAddToOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersAdd);\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            value={searchQuery}\n            onChange={setUsersSearchQuery}\n            placeholder=\"Search user by login, email or name\"\n          />\n        </div>\n        {pendingInvitesCount > 0 && (\n          <div style={{ marginLeft: '1rem' }}>\n            <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n          </div>\n        )}\n        {canInvite && canAddToOrg && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n        {externalUserMngLinkUrl && (\n          <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n            {externalUserMngLinkName}\n          </LinkButton>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: getInviteesCount(state.users),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  setUsersSearchQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersActionBar);\n"],"sourceRoot":""}