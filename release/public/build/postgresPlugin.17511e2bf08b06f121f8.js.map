{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query_model.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","length","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","value","textFields","filter","type","FieldType","string","flatMap","toArray","map","v","Array","from","Set","transformToKeyValueList","rows","textColIndex","valueColIndex","res","this","containsKey","transformToSimpleList","j","unique","findColIndex","columns","colName","key","options","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","undefined","annotation","time","tags","trim","split","PostgresQueryModel","constructor","target","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","substring","replace","quoteIdentifier","String","quoteLiteral","escapeLiteral","hasTimeGroup","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","conditions","tag","index","buildGroupClause","groupSection","part","table","PostgresDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","id","jsonData","responseParser","queryModel","interval","interpolateVariable","_map","settingsData","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","filterQuery","hide","applyTemplateVariables","refId","datasourceId","Promise","reject","message","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","toPromise","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","getVersion","getTimescaleDBVersion","testDatasource","then","status","catch","err","console","error","targetContainsTemplate","variableExists","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","PostgresQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","formats","metaBuilder","lastQueryMeta","lastQueryError","showHelp","tableSegment","whereAdd","timeColumnSegment","metricColumnSegment","selectMenu","selectParts","groupParts","whereParts","groupAdd","panel","updateProjection","panelCtrl","result","segment","newSegment","html","updateRawSqlAndRefresh","fake","buildSelectMenu","newPlusButton","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","sqlPart","n","updatePersistedParts","aggregates","submenu","timescaledb","postgresVersion","aggregates2","toggleEditorMode","appEvents","publish","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","meta","results","queryRes","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","clone","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","templateUrl","PostgresConfigCtrl","datasourceSrv","showTimescaleDBHelp","onPasswordReset","onPasswordChange","postgresVersions","current","ctrl","sslmode","tlsConfigurationMethod","autoDetectFeatures","createResetHandler","PasswordFieldEnum","Password","createChangeHandler","tlsModeMapping","loadDatasource","ds","version","Number","major","trunc","minor","toggleTimescaleDBHelp","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","PostgresAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl","field","event","preventDefault","secureJsonFields","secureJsonData","currentTarget","wrapOpen","wrapClose","separator","toUpperCase","updateParam","strValue","optional"],"mappings":"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","file":"postgresPlugin.17511e2bf08b06f121f8.js","sourcesContent":["import { AnnotationEvent, DataFrame, FieldType, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\nimport { map } from 'lodash';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      const textFields = frame.fields.filter((f) => f.type === FieldType.string);\n      if (textFields) {\n        values.push(\n          ...textFields\n            .flatMap((f) => f.values.toArray())\n            .map((v) => ({\n              text: '' + v,\n            }))\n        );\n      }\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any[][]) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return map(unique, (value) => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any, key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport PostgresQueryModel from 'app/plugins/datasource/postgres/postgres_query_model';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresOptions, PostgresQuery, PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nexport class PostgresDatasource extends DataSourceWithBackend<PostgresQuery, PostgresOptions> {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PostgresOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as PostgresOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: PostgresQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: PostgresQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new PostgresQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  getVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource(): Promise<any> {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(() => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.error(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query_model';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQueryModel from './postgres_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQueryModel;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [[]];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            this.target.rawQuery = !this.target.rawQuery;\n          },\n        })\n      );\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { find } from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.current = $scope.ctrl.current;\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.tlsConfigurationMethod = this.current.jsonData.tlsConfigurationMethod || 'file-path';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.tlsModeMapping();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  tlsModeMapping() {\n    if (this.current.jsonData.sslmode === 'disable') {\n      this.current.jsonData.tlsAuth = false;\n      this.current.jsonData.tlsAuthWithCACert = false;\n      this.current.jsonData.tlsSkipVerify = true;\n    } else {\n      this.current.jsonData.tlsAuth = true;\n      this.current.jsonData.tlsAuthWithCACert = true;\n      this.current.jsonData.tlsSkipVerify = false;\n    }\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12', value: 1200 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\nimport { PostgresQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport const plugin = new DataSourcePlugin<PostgresDatasource, PostgresQuery>(PostgresDatasource)\n  .setQueryCtrl(PostgresQueryCtrl)\n  .setConfigCtrl(PostgresConfigCtrl)\n  .setAnnotationQueryCtrl(PostgresAnnotationsQueryCtrl);\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}