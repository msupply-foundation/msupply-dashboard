{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/Card/Card.tsx","webpack:///./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","edition","hasValidLicense","config","licenseInfo","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","link","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","pluginCatalogURL","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","async","dispatch","getState","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","err","console","error","initDataSourceSettingsFailed","Error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","statusText","message","errMessage","details","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","uid","byUid","fetch","method","showErrorAlert","toPromise","ok","data","log","parseInt","Number","isNaN","toString","window","location","href","locationUtil","assureBaseUrl","getDataSourceUsingUidOrId","pluginInfo","getPluginSettings","meta","isBackend","DataSourceClass","prototype","DataSourceWithBackend","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","locationService","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","then","settings","datasources","defaultDatasource","init","endsWith","slice","NewDataSourcePage","PureComponent","onDataSourceTypeClicked","this","props","onSearchQueryChange","value","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","componentDidMount","renderPlugins","items","getItemKey","renderItem","DataSourceTypeCard","onClick","renderCategories","map","className","variant","target","rel","render","navModel","isLoading","searchQuery","Contents","onChange","placeholder","fill","icon","isPhantom","learnMoreLink","ariaLabel","selectors","pages","AddDataSource","dataSourcePlugins","logoUrl","actions","disabled","labels","status","signature","aria-label","getNavModel","main","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","pluginMeta","img","breadcrumbs","children","active","configPages","page","includes","undefined","include","hasLicense","hideFromTabs","caching","getDataSourceNav","pageName","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeName","typeLogoUrl","user","secureJsonFields","getDataSources","regex","RegExp","test","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","Card","mainClassName","cx","src","mapStateToProps","errors","getAllPluginsErrors","loadPluginsErrors","PluginsErrorsInfo","theme","useTheme","loading","useAsync","loadPlugins","PluginsList","signatureErrorNotice","severity","urlTitle","css","e","spacing","sm","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","invalidSignature","PluginSignatureStatus","invalid","missingSignature","missing","modifiedSignature","modified","getPlugins","getPluginsSearchQuery"],"mappings":"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","file":"NewDataSourcePage.17511e2bf08b06f121f8.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport config from '../../../core/config';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!pageId) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n\n      // have we already loaded the plugin then we can skip the steps below?\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        const { statusText, message: errMessage, details } = err;\n        const message = statusText ? 'HTTP error ' + statusText : errMessage;\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const dataSource = await getDataSourceUsingUidOrId(uid);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: isBackend,\n    };\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\n/**\n * Get data source by uid or id, if old id detected handles redirect\n */\nasync function getDataSourceUsingUidOrId(uid: string): Promise<DataSourceSettings> {\n  // Try first with uid api\n  try {\n    const byUid = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/uid/${uid}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    if (byUid.ok) {\n      return byUid.data;\n    }\n  } catch (err) {\n    console.log('Failed to lookup data source by uid', err);\n  }\n\n  // try lookup by old db id\n  const id = parseInt(uid, 10);\n  if (!Number.isNaN(id)) {\n    const response = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/${id}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    // Not ideal to do a full page reload here but so tricky to handle this\n    // otherwise We can update the location using react router, but need to\n    // fully reload the route as the nav model page index is not matching with\n    // the url in that case. And react router has no way to unmount remount a\n    // route\n    if (response.ok && response.data.id.toString() === uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${response.data.uid}`);\n      return {} as DataSourceSettings; // avoids flashing an error\n    }\n  }\n\n  throw Error('Could not find data source');\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    locationService.push(`/datasources/edit/${result.datasource.uid}`);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource); // by UID not yet supported\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n\n    locationService.push('/datasources');\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init(config.datasources, settings.defaultDatasource);\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List, PluginSignatureBadge } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/PluginsErrorsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={(item) => item.id.toString()}\n        renderItem={(item) => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map((category) => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\" fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n              Cancel\n            </LinkButton>\n          </div>\n          {!searchQuery && <PluginsErrorsInfo />}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = (props) => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom && !plugin.unlicensed ? props.onClick : () => {};\n  // find first plugin info link\n  const learnMoreLink = plugin.info?.links?.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button disabled={plugin.unlicensed}>Select</Button>}\n        </>\n      }\n      labels={!isPhantom && <PluginSignatureBadge status={plugin.signature} />}\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'database',\n      id: `datasource-cache-${dataSource.id}`,\n      text: 'Cache',\n      url: `datasources/edit/${dataSource.id}/cache`,\n      hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeName: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React from 'react';\nimport { cx } from '@emotion/css';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div className=\"add-data-source-item-badge\">{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst mapStateToProps = (state: StoreState) => ({\n  errors: getAllPluginsErrors(state.plugins),\n});\n\nconst mapDispatchToProps = {\n  loadPluginsErrors,\n};\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PluginsErrorsInfoProps = ConnectedProps<typeof connector> & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(e) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nexport const PluginsErrorsInfo = hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected)\n);\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter((item) => {\n    return (\n      regex.test(item.name) ||\n      regex.test(item.info.author.name) ||\n      regex.test(item.type) ||\n      regex.test(item.info.description)\n    );\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"sourceRoot":""}