{"version":3,"file":"AlertSilences.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchedSilencedRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleState.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  if (contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FormEvent, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Label, Icon, Input, Tooltip, RadioButtonGroup, useStyles2, Button, Field } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { debounce, uniqueId } from 'lodash';\n\nconst stateOptions: SelectableValue[] = Object.entries(SilenceState).map(([key, value]) => ({\n  label: key,\n  value,\n}));\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const handleSilenceStateChange = (state: string) => {\n    setQueryParams({ silenceState: state });\n  };\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <span className={styles.fieldLabel}>\n            <Tooltip\n              content={\n                <div>\n                  Filter silences by matchers using a comma separated list of matchers, ie:\n                  <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" />\n            </Tooltip>{' '}\n            Search by matchers\n          </span>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n\n      <div className={styles.rowChild}>\n        <Label>State</Label>\n        <RadioButtonGroup options={stateOptions} value={silenceState} onChange={handleSilenceStateChange} />\n      </div>\n      {(queryString || silenceState) && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(2)};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import { Button, ButtonProps } from '@grafana/ui/src/components/Button';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => (\n  <Button variant=\"secondary\" size=\"xs\" className={cx(useStyles(getStyle), className)} {...restProps} />\n);\n\nexport const getStyle = (theme: GrafanaTheme) => css`\n  height: 24px;\n  font-size: ${theme.typography.size.sm};\n`;\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useState } from 'react';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport React from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport SilencedAlertsTable from './SilencedAlertsTable';\n\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { SilencesFilter } from './SilencesFilter';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { Matchers } from './Matchers';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { useDispatch } from 'react-redux';\nimport { expireSilenceAction } from '../../state/actions';\nimport { SilenceDetails } from './SilenceDetails';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          {contextSrv.isEditor && (\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.isEditor;\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: '88px',\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 9,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 1,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              <br />\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: '150px',\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </>\n          );\n        },\n        size: '140px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles]);\n}\n\nexport default SilencesTable;\n","import React, { FC } from 'react';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          menuShouldPortal\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: ${theme.breakpoints.values.sm}px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import React, { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\nimport { useDispatch } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { RuleState } from '../rules/RuleState';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { Annotation } from '../../utils/constants';\nimport { findAlertRulesWithMatchers } from '../../utils/matchers';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { MatcherFieldValue, SilenceFormFields } from '../../types/silence-form';\n\ntype MatchedRulesTableItemProps = DynamicTableItemProps<{\n  matchedRule: CombinedRule;\n}>;\ntype MatchedRulesTableColumnProps = DynamicTableColumnProps<{ matchedRule: CombinedRule }>;\n\nexport const MatchedSilencedRules = () => {\n  const [matchedAlertRules, setMatchedAlertRules] = useState<MatchedRulesTableItemProps[]>([]);\n  const formApi = useFormContext<SilenceFormFields>();\n  const dispatch = useDispatch();\n  const { watch } = formApi;\n  const matchers: MatcherFieldValue[] = watch('matchers');\n  const styles = useStyles2(getStyles);\n  const columns = useColumns();\n\n  useEffect(() => {\n    dispatch(fetchAllPromAndRulerRulesAction());\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces();\n  useDebounce(\n    () => {\n      const matchedRules = combinedNamespaces.flatMap((namespace) => {\n        return namespace.groups.flatMap((group) => {\n          return findAlertRulesWithMatchers(group.rules, matchers);\n        });\n      });\n      setMatchedAlertRules(matchedRules);\n    },\n    500,\n    [combinedNamespaces, matchers]\n  );\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Affected alerts\n        {matchedAlertRules.length > 0 ? (\n          <Badge className={styles.badge} color=\"blue\" text={matchedAlertRules.length} />\n        ) : null}\n      </h4>\n      <div className={styles.table}>\n        {matchers.every((matcher) => !matcher.value && !matcher.name) ? (\n          <span>Add a valid matcher to see affected alerts</span>\n        ) : (\n          <>\n            <DynamicTable items={matchedAlertRules.slice(0, 5) ?? []} isExpandable={false} cols={columns} />\n            {matchedAlertRules.length > 5 && (\n              <div className={styles.moreMatches}>and {matchedAlertRules.length - 5} more</div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useColumns(): MatchedRulesTableColumnProps[] {\n  return [\n    {\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({ data: { matchedRule } }) {\n        return <RuleState rule={matchedRule} isCreating={false} isDeleting={false} />;\n      },\n      size: '160px',\n    },\n    {\n      id: 'name',\n      label: 'Name',\n      renderCell: function renderName({ data: { matchedRule } }) {\n        return matchedRule.name;\n      },\n      size: '250px',\n    },\n    {\n      id: 'summary',\n      label: 'Summary',\n      renderCell: function renderSummary({ data: { matchedRule } }) {\n        return matchedRule.annotations[Annotation.summary] ?? '';\n      },\n      size: '400px',\n    },\n  ];\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    max-width: ${theme.breakpoints.values.lg}px;\n  `,\n  moreMatches: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  title: css`\n    display: flex;\n    align-items: center;\n  `,\n  badge: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme } from '@grafana/data';\nimport { Field, TimeRangeInput, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n  const styles = useStyles(getStyles);\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeRange: css`\n    width: 400px;\n  `,\n});\n","import { MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport {\n  DefaultTimeZone,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { useDebounce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { pickBy } from 'lodash';\nimport MatchersField from './MatchersField';\nimport { MatchedSilencedRules } from './MatchedSilencedRules';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { useDispatch } from 'react-redux';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilencePeriod } from './SilencePeriod';\nimport { css, cx } from '@emotion/css';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../utils/misc';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { matcherToMatcherField, matcherFieldToMatcher } from '../../utils/alertmanager';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (searchParams: URLSearchParams): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const comment = searchParams.get('comment');\n  const matchers = searchParams.getAll('matcher');\n\n  const formMatchers = parseQueryParamMatchers(matchers);\n  if (formMatchers.length) {\n    defaults.matchers = formMatchers.map(matcherToMatcherField);\n  }\n\n  if (comment) {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (searchParams: URLSearchParams, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: `created ${dateTime().format('YYYY-MM-DD HH:mm')}`,\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(searchParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [urlSearchParams] = useURLSearchParams();\n\n  const defaultValues = useMemo(() => getDefaultFormValues(urlSearchParams, silence), [silence, urlSearchParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => state.unifiedAlerting.updateSilence);\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={cx(styles.flexRow, styles.silencePeriod)}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              rows={5}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          <MatchedSilencedRules />\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  silencePeriod: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n\nexport default SilencesEditor;\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\n\nconst Silences: FC = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/silences\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <AlertManagerPicker disabled={!isRoot} current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n  const iconEl = (\n    <Icon\n      role=\"button\"\n      className={cx(useStyles(getStyle), className)}\n      onClick={onClick}\n      name={icon}\n      {...rest}\n      aria-label={ariaLabel}\n    />\n  );\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <GoTo url={to} label={ariaLabel} target={target}>\n          {iconEl}\n        </GoTo>\n      ) : (\n        iconEl\n      )}\n    </Tooltip>\n  );\n};\n\ninterface GoToProps {\n  url: string;\n  label?: string;\n  target?: string;\n}\n\nconst GoTo: FC<GoToProps> = ({ url, label, target, children }) => {\n  const absoluteUrl = url?.startsWith('http');\n\n  return absoluteUrl ? (\n    <a aria-label={label} href={url} target={target}>\n      {children}\n    </a>\n  ) : (\n    <Link aria-label={label} to={url} target={target}>\n      {children}\n    </Link>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { HorizontalGroup, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n}\n\nexport const RuleState: FC<Props> = ({ rule, isDeleting, isCreating }) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in it's firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (isCreating) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        {' '}\n        <Spinner />\n        creating\n      </HorizontalGroup>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <AlertStateTag state={promRule.state} />\n        {forTime}\n      </HorizontalGroup>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\nimport { useMemo, useRef } from 'react';\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n          if (isGrafanaRulesSource(rulesSource)) {\n            // merge all groups in case of grafana managed, essentially treating namespaces (folders) as gorups\n            result.forEach((namespace) => {\n              namespace.groups = [\n                {\n                  name: 'default',\n                  rules: namespace.groups.flatMap((g) => g.rules).sort((a, b) => a.name.localeCompare(b.name)),\n                },\n              ];\n            });\n          }\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[]): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  groups.forEach((group) => {\n    let combinedGroup = namespace.groups.find((g) => g.name === group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n    }\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedGroup!, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  group: CombinedRuleGroup,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return group!.rules.find((existingRule) => existingRule.name === rule.name);\n  }\n  return (\n    // try finding a rule that matches name, labels, annotations and query\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, true)\n    ) ??\n    // if that fails, try finding a rule that only matches name, labels and annotations.\n    // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, false)\n    )\n  );\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return (\n      JSON.stringify([\n        checkQuery ? hashQuery(combinedRule.query) : '',\n        combinedRule.labels,\n        combinedRule.annotations,\n      ]) ===\n      JSON.stringify([\n        checkQuery ? hashQuery(rule.query) : '',\n        rule.labels || {},\n        isAlertingRule(rule) ? rule.annotations || {} : {},\n      ])\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.substr(1, query.length - 2);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","NoSilencesSplash","alertManagerSourceName","contextSrv","EmptyListCTA","title","buttonIcon","buttonLink","makeAMLink","buttonTitle","CallToActionCard","callToActionElement","message","stateOptions","Object","entries","SilenceState","map","key","value","label","getQueryStringKey","uniqueId","SilencesFilter","queryStringKey","setQueryStringKey","useState","queryParams","setQueryParams","useQueryParams","queryString","silenceState","getSilenceFiltersFromUrlParams","styles","useStyles2","getStyles","handleQueryStringChange","debounce","e","target","inputInvalid","length","parseMatchers","className","flexRow","Field","rowChild","fieldLabel","Tooltip","content","Icon","name","invalid","error","Input","searchInput","prefix","onChange","defaultValue","placeholder","Label","RadioButtonGroup","options","state","Button","variant","icon","onClick","setTimeout","theme","css","spacing","colors","border","strong","silenceStateToState","SilenceStateTag","StateTag","ActionButton","restProps","size","cx","useStyles","getStyle","typography","sm","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","alertName","labels","reduce","labelKey","labelValue","CollapseToggle","onToggle","collapsed","AmAlertStateTag","status","colSpan","AlertLabels","tableMargin","colState","colName","silencedAlerts","tableStyles","getAlertTableStyles","table","colExpand","index","evenRow","fingerprint","SilenceDetails","silence","comment","createdBy","dateDisplayFormat","startsAtDate","dateMath","endsAtDate","container","format","text","primary","row","useFilteredSilences","silences","useMemo","silenceIdsString","silenceIds","filter","split","includes","id","every","matcher","matchers","some","isEqual","isRegex","topButtonContainer","addNewSilence","callout","background","secondary","info","calloutIcon","editButton","alertManagerAlerts","filteredSilences","showExpiredSilencesBanner","undefined","columns","handleExpireSilenceClick","expireSilenceAction","renderCell","data","Matchers","push","Link","href","ActionIcon","A","to","tooltip","useColumns","items","silencedBy","DynamicTable","cols","isExpandable","renderExpandedContent","wrapper","removeButton","matcherOptions","breakpoints","values","formApi","useFormContext","control","register","formState","errors","fields","append","remove","useFieldArray","required","InputControl","render","field","Select","menuShouldPortal","matcherFieldOptions","operator","rules","IconButton","type","newMatcher","MatcherOperator","MatchedSilencedRules","matchedAlertRules","setMatchedAlertRules","watch","matchedRule","RuleState","rule","isCreating","isDeleting","annotations","Annotation","fetchAllPromAndRulerRulesAction","combinedNamespaces","useCombinedRuleNamespaces","useDebounce","matchedRules","flatMap","namespace","groups","group","findAlertRulesWithMatchers","Badge","badge","color","slice","moreMatches","lg","SilencePeriod","getValues","onChangeStartsAt","fieldState","startsAtInvalid","useController","validate","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","dateTime","timeRange","TimeRangeInput","raw","newValue","hideTimeZone","hideQuickRanges","getDefaultFormValues","searchParams","now","interval","parse","addDurationToDate","hours","toISOString","matcherToMatcherField","matcherName","matcherValue","DefaultTimeZone","config","defaults","get","getAll","formMatchers","parseQueryParamMatchers","defaultsFromQuery","textArea","silencePeriod","urlSearchParams","useURLSearchParams","defaultValues","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","unifiedAlerting","handleSubmit","setValue","clearErrors","prevDuration","setPrevDuration","isValidDate","parseDuration","startValue","valueOf","nextDuration","onSubmit","matchersFields","matcherFieldToMatcher","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","FieldSet","keys","TextArea","rows","disabled","LinkButton","fill","withErrorBoundary","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","initialAsyncRequestState","isRoot","useLocation","pathname","endsWith","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","useCallback","find","AlertingPageWrapper","pageId","AlertManagerPicker","Alert","severity","LoadingPlaceholder","exact","path","match","params","style","children","isLoading","navModel","getNavModel","useSelector","navIndex","tooltipPlacement","rest","ariaLabel","iconEl","role","placement","GoTo","url","startsWith","promRule","forTime","isAlertingRule","alerts","PromAlertingRuleState","firstActiveAt","getFirstActiveAt","String","for","HorizontalGroup","align","Spinner","isRecordingRule","bodySmall","fontSize","alertStateToState","AlertState","onRemoveLabel","removeLabel","matcherToOperator","xs","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","rulesSourceName","promRulesResponses","promRules","rulerRulesResponses","rulerRules","cache","rulesSources","rulesSource","getRulesSourceByName","Error","getAllRulesSources","isCloudRulesSource","cached","namespaces","forEach","namespaceName","combinedGroup","isAlertingRulerRule","query","expr","rulerRule","isRecordingRulerRule","record","grafana_alert","rulerRuleToCombinedRule","addRulerGroupsToCombinedNamespace","g","existingRule","isGrafanaRulesSource","isCombinedRuleEqualToPromRule","getExistingRuleInGroup","promRuleToCombinedRule","addPromGroupsToCombinedNamespace","sort","a","b","localeCompare","flat","combinedRule","checkQuery","JSON","stringify","hashQuery","substr","replace","join","search","URLSearchParams","searchValues","locationService","shape","borderRadius","weak","actionsCell"],"sourceRoot":""}