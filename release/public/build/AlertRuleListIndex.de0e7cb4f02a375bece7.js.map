{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack:///./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack:///./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack:///./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack:///./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack:///./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack:///./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack:///./public/app/features/alerting/unified/RuleList.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack:///./public/app/features/alerting/AlertRuleListIndex.tsx","webpack:///./node_modules/timers-browserify/main.js","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/state/selectors.ts","webpack:///./public/app/features/alerting/AlertHowToModal.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"names":["getAlertRulesAsync","options","async","dispatch","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","togglePauseAlertRule","id","post","state","locationService","getSearchObject","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","push","error","alertError","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","partial","mapDispatchToProps","setSearchQuery","connector","connect","navModel","getNavModel","navIndex","alertRules","getAlertRuleItems","getSearchQuery","isLoading","AlertRuleListUnconnected","PureComponent","stateFilters","label","value","onStateFilterChanged","option","onOpenHowTo","publish","ShowModalReactEvent","component","AlertHowToModal","onSearchQueryChange","this","props","onTogglePause","rule","paused","alertStateFilterOption","text","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Contents","className","placeholder","onChange","config","featureToggles","ngalert","variant","href","onClick","spacing","map","hot","module","ActionIcon","tooltip","icon","to","target","tooltipPlacement","rest","iconEl","cx","useStyles","getStyle","content","placement","css","NoRulesSplash","contextSrv","hasEditPermissionInFolders","isEditor","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","message","callToActionElement","reduceNamespaces","filters","namespaceAcc","namespace","groups","reduce","reduceGroups","length","groupAcc","group","filter","dataSource","isGrafanaRulerRule","rulerRule","isQueryingDataSource","queryString","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","doLabelsContainQueryString","Object","entries","labels","some","key","alertState","promRule","isAlertingRule","grafana_alert","find","query","datasourceUid","ds","getDataSourceSrv","getInstanceSettings","ViewOptions","getStyles","theme","container","colors","border1","sm","inputWidth","flexRow","spaceBetween","rowChild","clearButton","RulesFilter","setQueryParams","filterKey","setFilterKey","useState","Math","floor","random","dataSourceKey","queryStringKey","getFiltersFromUrlParams","styles","stateOptions","PromAlertingRuleState","alertStateToReadable","handleQueryStringChange","debounce","e","searchIcon","alerting","noDefault","current","dataSourceValue","prefix","defaultValue","view","fullWidth","StateColoredText","children","status","useStyles2","Inactive","success","Pending","warning","Firing","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRule","isRecordingRulerRule","forEach","statsComponents","pluralize","prev","curr","idx","RulesGroup","React","memo","rulesSource","isCollapsed","setIsCollapsed","hasRuler","useHasRuler","folderUID","namespace_uid","undefined","folder","useFolder","actionIcons","GRAFANA_RULES_SOURCE_NAME","baseUrl","kbn","slugifyForUrl","canSave","canAdmin","groupName","isCloudRulesSource","wrapper","data-testid","header","CollapseToggle","collapseToggle","onToggle","dataSourceIcon","src","meta","info","logos","small","heading","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","displayName","background","dataSourceOrigin","disabled","CloudRules","useUnifiedAlertingSelector","promRules","rulesDataSources","getRulesDataSources","dataSourcesLoading","loading","sectionHeader","loader","getRulesSourceName","xl","GrafanaRules","initialAsyncRequestState","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","size","showGroupColumn","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","ns","isGrafanaRulesSource","groupedRules","result","RuleList","withErrorBoundary","useDispatch","rulesDataSourceNames","getAllRulesSourceNames","location","ViewComponent","useEffect","fetchAllPromAndRulerRulesAction","interval","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","promRuleRequests","rulerRuleRequests","rulerRules","dispatched","haveResults","keys","promReqeustErrors","rulerRequestErrors","requests","isRulerNotSupportedResponse","grafanaPromError","grafanaRulerError","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","severity","uid","break","buttonsContainer","urlUtil","renderUrl","returnTo","pathname","style","md","border2","iconError","palette","red","AlertRuleList","self","window","apply","Function","prototype","Timeout","clearFn","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","AlertRuleItem","ruleUrl","url","panelId","renderText","highlightClassName","textToHighlight","searchWords","Figure","stateIcon","stateClass","Meta","stateText","stateAge","Actions","registerImmediate","html","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","searchQuery","regex","RegExp","items","test","onDismiss","isOpen","onClickBackdrop","alt","useSelector"],"mappings":"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","file":"AlertRuleListIndex.de0e7cb4f02a375bece7.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.featureToggles.ngalert && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default hot(module)(connector(AlertRuleListUnconnected));\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = <Icon className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { CallToActionCard } from '@grafana/ui';\n\nexport const NoRulesSplash: FC = () => {\n  if (contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleFilterState } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    if (!filters.queryString && !filters.dataSource && !filters.alertState) {\n      return namespaces;\n    }\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: RuleFilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: RuleFilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n\n        const doLabelsContainQueryString = Object.entries(rule.labels || {}).some(\n          ([key, value]) =>\n            key.toLocaleLowerCase().includes(normalizedQueryString) ||\n            value.toLocaleLowerCase().includes(normalizedQueryString)\n        );\n        if (!(doesNameContainsQueryString || doLabelsContainQueryString)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: RuleFilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, Icon, Input, Label, RadioButtonGroup, useStyles } from '@grafana/ui';\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\n\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Groups',\n    value: 'group',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n    });\n    setFilterKey(filterKey + 1);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputWidth}>\n        <Label>Select data source</Label>\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          current={dataSource}\n          onChange={handleDataSourceChange}\n        />\n      </div>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <div className={styles.rowChild}>\n            <Label>Search by name or label</Label>\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={queryParams['view'] || 'group'}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString) && (\n          <div className={styles.flexRow}>\n            <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      border-bottom: 1px solid ${theme.colors.border1};\n      padding-bottom: ${theme.spacing.sm};\n\n      & > div {\n        margin-bottom: ${theme.spacing.sm};\n      }\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      & + & {\n        margin-left: ${theme.spacing.sm};\n      }\n    `,\n    clearButton: css`\n      align-self: flex-end;\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useState } from 'react';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { ActionIcon } from './ActionIcon';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { RuleStats } from './RuleStats';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace }) => {\n  const { rulesSource } = namespace;\n  const styles = useStyles2(getStyles);\n\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon key=\"edit\" icon=\"pen\" tooltip=\"edit\" to={baseUrl + '/settings'} target=\"__blank\" />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    } else if (hasRuler(rulesSource)) {\n      actionIcons.push(<ActionIcon key=\"edit\" icon=\"pen\" tooltip=\"edit\" />); // @TODO\n    }\n  }\n\n  const groupName = isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder-open' : 'folder'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>{groupName}</h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport pluralize from 'pluralize';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(() => rulesDataSources.filter((ds) => rules[ds.name]?.loading), [\n    rules,\n    rulesDataSources,\n  ]);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespaces?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup group={group} key={`${namespace.name}-${group.name}`} namespace={namespace} />\n        ))\n      )}\n      {namespaces?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useMemo } from 'react';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <GrafanaRules namespaces={grafanaNamespaces} />\n      <CloudRules namespaces={cloudNamespaces} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useState } from 'react';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { DataSourceInstanceSettings, GrafanaTheme, urlUtil } from '@grafana/data';\nimport { useStyles, Alert, LinkButton, withErrorBoundary } from '@grafana/ui';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { getAllRulesSourceNames, getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { css } from '@emotion/css';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { isRulerNotSupportedResponse } from './utils/rules';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useLocation } from 'react-router-dom';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { RuleStats } from './components/rules/RuleStats';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nexport const RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n\n    const [queryParams] = useQueryParams();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const [promReqeustErrors, rulerRequestErrors] = useMemo(\n      () =>\n        [promRuleRequests, rulerRuleRequests].map((requests) =>\n          getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n            (result, dataSource) => {\n              const error = requests[dataSource.name]?.error;\n              if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n                return [...result, { dataSource, error }];\n              }\n              return result;\n            },\n            []\n          )\n        ),\n      [promRuleRequests, rulerRuleRequests]\n    );\n\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        {(promReqeustErrors.length || rulerRequestErrors.length || grafanaPromError) && (\n          <Alert data-testid=\"cloud-rulessource-errors\" title=\"Errors loading rules\" severity=\"error\">\n            {grafanaPromError && (\n              <div>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</div>\n            )}\n            {grafanaRulerError && (\n              <div>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</div>\n            )}\n            {promReqeustErrors.map(({ dataSource, error }) => (\n              <div key={dataSource.name}>\n                Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n                {error.message || 'Unknown error.'}\n              </div>\n            ))}\n            {rulerRequestErrors.map(({ dataSource, error }) => (\n              <div key={dataSource.name}>\n                Failed to load rules config from <a href={'datasources/edit/${dataSource.uid}'}>{dataSource.name}</a>:{' '}\n                {error.message || 'Unknown error.'}\n              </div>\n            ))}\n          </Alert>\n        )}\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              <div />\n              {(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing.md};\n    border-bottom: solid 1px ${theme.colors.border2};\n  `,\n  iconError: css`\n    color: ${theme.palette.red};\n    margin-right: ${theme.spacing.md};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing.md};\n    display: flex;\n    justify-content: space-between;\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { config } from '@grafana/runtime';\nimport { RuleList } from './unified/RuleList';\nimport AlertRuleList from './AlertRuleList';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.featureToggles.ngalert ? RuleList : AlertRuleList;\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n"],"sourceRoot":""}