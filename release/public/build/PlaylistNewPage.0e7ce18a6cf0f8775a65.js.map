{"version":3,"file":"PlaylistNewPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/features/playlist/PlaylistTableRow.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/core/components/editors/DashboardPickerByID.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/PlaylistNewPage.tsx","webpack://grafana/./public/app/features/playlist/api.ts","webpack://grafana/./public/app/features/playlist/styles.ts","webpack://grafana/./public/app/features/playlist/usePlaylist.tsx"],"sourcesContent":["import React, { FC, MouseEvent } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Icon, IconButton, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\nimport { PlaylistItem } from './types';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface PlaylistTableRowProps {\n  first: boolean;\n  last: boolean;\n  item: PlaylistItem;\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRow: FC<PlaylistTableRowProps> = ({ item, onDelete, onMoveDown, onMoveUp, first, last }) => {\n  const styles = useStyles(getStyles);\n  const onDeleteClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onDelete(item);\n  };\n  const onMoveDownClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveDown(item);\n  };\n  const onMoveUpClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveUp(item);\n  };\n\n  return (\n    <tr aria-label={selectors.pages.PlaylistForm.itemRow} key={item.title}>\n      {item.type === 'dashboard_by_id' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"apps\" aria-label={selectors.pages.PlaylistForm.itemIdType} />\n          <span>{item.title}</span>\n        </td>\n      ) : null}\n      {item.type === 'dashboard_by_tag' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"tag-alt\" aria-label={selectors.pages.PlaylistForm.itemTagType} />\n          <TagBadge key={item.id} label={item.title} removeIcon={false} count={0} />\n        </td>\n      ) : null}\n      <td className={cx(styles.td, styles.settings)}>\n        {!first ? (\n          <IconButton\n            name=\"arrow-up\"\n            size=\"md\"\n            onClick={onMoveUpClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveUp}\n            type=\"button\"\n          />\n        ) : null}\n        {!last ? (\n          <IconButton\n            name=\"arrow-down\"\n            size=\"md\"\n            onClick={onMoveDownClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveDown}\n            type=\"button\"\n          />\n        ) : null}\n        <IconButton\n          name=\"times\"\n          size=\"md\"\n          onClick={onDeleteClick}\n          aria-label={selectors.pages.PlaylistForm.itemDelete}\n          type=\"button\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    td: css`\n      label: td;\n      line-height: 28px;\n      max-width: 335px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    item: css`\n      label: item;\n      span {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRow } from './PlaylistTableRow';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowsProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRows: FC<PlaylistTableRowsProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  if (items.length === 0) {\n    return (\n      <tr>\n        <td>\n          <em>Playlist is empty. Add dashboards below.</em>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const first = index === 0;\n        const last = index === items.length - 1;\n        return (\n          <PlaylistTableRow\n            first={first}\n            last={last}\n            item={item}\n            onDelete={onDelete}\n            onMoveDown={onMoveDown}\n            onMoveUp={onMoveUp}\n            key={item.title}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTable: FC<PlaylistTableProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <table className=\"filter-table\">\n        <tbody>\n          <PlaylistTableRows items={items} onMoveUp={onMoveUp} onMoveDown={onMoveDown} onDelete={onDelete} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport debounce from 'debounce-promise';\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit } from 'app/features/search/types';\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport interface DashboardPickerItem extends SelectableValue<number> {\n  id: number;\n  uid: string;\n  value: number;\n  label: string;\n}\n\ninterface Props {\n  onChange: (dashboard: DashboardPickerItem) => void;\n  value?: DashboardPickerItem;\n  width?: number;\n  isClearable?: boolean;\n  invalid?: boolean;\n  disabled?: boolean;\n  id?: string;\n}\n\nconst getDashboards = (query = '') => {\n  return backendSrv.search({ type: 'dash-db', query, limit: 100 }).then((result: DashboardSearchHit[]) => {\n    return result.map((item: DashboardSearchHit) => ({\n      id: item.id,\n      uid: item.uid,\n      value: item.id,\n      label: `${item?.folderTitle ?? 'General'}/${item.title}`,\n    }));\n  });\n};\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport const DashboardPickerByID: FC<Props> = ({\n  onChange,\n  value,\n  width,\n  isClearable = false,\n  invalid,\n  disabled,\n  id,\n}) => {\n  const debouncedSearch = debounce(getDashboards, 300);\n\n  return (\n    <AsyncSelect\n      inputId={id}\n      menuShouldPortal\n      width={width}\n      isClearable={isClearable}\n      defaultOptions={true}\n      loadOptions={debouncedSearch}\n      onChange={onChange}\n      placeholder=\"Select dashboard\"\n      noOptionsMessage=\"No dashboards found\"\n      value={value}\n      invalid={invalid}\n      disabled={disabled}\n    />\n  );\n};\n","import React, { FC } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { Playlist } from './types';\nimport { TagFilter } from '../../core/components/TagFilter/TagFilter';\nimport { SearchSrv } from '../../core/services/search_srv';\nimport { usePlaylistItems } from './usePlaylistItems';\nimport { PlaylistTable } from './PlaylistTable';\nimport { DashboardPickerByID } from 'app/core/components/editors/DashboardPickerByID';\n\ninterface PlaylistFormProps {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nconst searchSrv = new SearchSrv();\n\nexport const PlaylistForm: FC<PlaylistFormProps> = ({ onSubmit, playlist }) => {\n  const { name, interval, items: propItems } = playlist;\n  const { items, addById, addByTag, deleteItem, moveDown, moveUp } = usePlaylistItems(propItems);\n  return (\n    <>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} onMoveUp={moveUp} onMoveDown={moveDown} onDelete={deleteItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPickerByID onChange={addById} id=\"dashboard-picker\" isClearable />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={searchSrv.getDashboardTags}\n                    onChange={addByTag}\n                    placeholder={''}\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </>\n  );\n};\n","import { DashboardPickerItem } from 'app/core/components/editors/DashboardPickerByID';\nimport { useCallback, useState } from 'react';\n\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  const addById = useCallback(\n    (dashboard: DashboardPickerItem) => {\n      if (!dashboard || items.find((item) => item.id === dashboard.id)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        id: dashboard.id,\n        title: dashboard.label,\n        type: 'dashboard_by_id',\n        value: dashboard.id.toString(10),\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        title: tag,\n        type: 'dashboard_by_tag',\n        value: tag,\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const movePlaylistItem = useCallback(\n    (item: PlaylistItem, offset: number) => {\n      const newItems = [...items];\n      const currentPosition = newItems.indexOf(item);\n      const newPosition = currentPosition + offset;\n\n      if (newPosition >= 0 && newPosition < newItems.length) {\n        newItems.splice(currentPosition, 1);\n        newItems.splice(newPosition, 0, item);\n      }\n      setItems(newItems);\n    },\n    [items]\n  );\n\n  const moveUp = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, -1);\n    },\n    [movePlaylistItem]\n  );\n\n  const moveDown = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, 1);\n    },\n    [movePlaylistItem]\n  );\n\n  const deleteItem = useCallback(\n    (item: PlaylistItem) => {\n      setItems(items.filter((i) => i !== item));\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveDown, moveUp };\n}\n","import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PlaylistForm } from './PlaylistForm';\nimport { createPlaylist } from './api';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\nimport { getPlaylistStyles } from './styles';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistNewPage: FC<Props> = ({ navModel }) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist();\n  const onSubmit = async (playlist: Playlist) => {\n    await createPlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>New Playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistNewPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist, PlaylistDTO } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function deletePlaylist(id: number) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${id}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function getPlaylistStyles(theme: GrafanaTheme2) {\n  return {\n    description: css`\n      label: description;\n      width: 555px;\n      margin-bottom: 20px;\n    `,\n    subHeading: css`\n      label: sub-heading;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Playlist } from './types';\nimport { getPlaylist } from './api';\n\nexport function usePlaylist(playlistId?: number) {\n  const [playlist, setPlaylist] = useState<Playlist>({ items: [], interval: '5m', name: '' });\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initPlaylist = async () => {\n      if (!playlistId) {\n        setLoading(false);\n        return;\n      }\n      const list = await getPlaylist(playlistId);\n      setPlaylist(list);\n      setLoading(false);\n    };\n    initPlaylist();\n  }, [playlistId]);\n\n  return { playlist, loading };\n}\n"],"names":["PlaylistTableRow","item","onDelete","onMoveDown","onMoveUp","first","last","styles","useStyles","getStyles","selectors","type","className","cx","td","Icon","name","title","TagBadge","label","removeIcon","count","id","settings","IconButton","size","onClick","event","preventDefault","theme","css","spacing","xs","PlaylistTableRows","items","length","map","index","PlaylistTable","getDashboards","query","backendSrv","limit","then","result","uid","value","folderTitle","DashboardPickerByID","onChange","width","isClearable","invalid","disabled","debouncedSearch","debounce","AsyncSelect","inputId","menuShouldPortal","defaultOptions","loadOptions","placeholder","noOptionsMessage","searchSrv","SearchSrv","PlaylistForm","onSubmit","playlist","interval","propItems","addById","addByTag","deleteItem","moveDown","moveUp","playlistItems","setItems","useState","useCallback","dashboard","find","newItem","toString","order","tags","tag","movePlaylistItem","offset","newItems","currentPosition","indexOf","newPosition","splice","filter","i","usePlaylistItems","Form","list","validateOn","register","errors","isDisabled","Object","keys","Field","error","message","Input","required","defaultValue","TagFilter","hideValues","tagOptions","getDashboardTags","HorizontalGroup","Button","variant","LinkButton","href","config","PlaylistNewPage","navModel","useStyles2","getPlaylistStyles","loading","usePlaylist","isLoading","subHeading","description","async","createPlaylist","locationService","connect","state","getNavModel","navIndex","withErrorHandling","getBackendSrv","post","updatePlaylist","put","deletePlaylist","delete","getPlaylist","get","getAllPlaylist","apiCall","dispatch","notifyApp","createSuccessNotification","e","createErrorNotification","playlistId","setPlaylist","setLoading","useEffect","initPlaylist"],"sourceRoot":""}