{"version":3,"file":"AlertingRuleForm.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/SelectWIthAdd.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertTypeStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/LabelsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationKeyInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DetailsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useVizHeight.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryStep.tsx","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudConditionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ConditionField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionEvalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFolder.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useIsRuleEditable.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, useStyles2 } from '@grafana/ui';\nimport React, { FC } from 'react';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string;\n}\n\nexport const RuleEditorSection: FC<RuleEditorSectionProps> = ({ title, stepNo, children, description }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <div>\n        <span className={styles.stepNo}>{stepNo}</span>\n      </div>\n      <div className={styles.content}>\n        <FieldSet label={title} className={styles.fieldset}>\n          {description && <p className={styles.description}>{description}</p>}\n          {children}\n        </FieldSet>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldset: css`\n    legend {\n      font-size: 16px;\n      padding-top: ${theme.spacing(0.5)};\n    }\n  `,\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl};\n    & + & {\n      margin-top: ${theme.spacing(4)};\n    }\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  stepNo: css`\n    display: inline-block;\n    width: ${theme.spacing(4)};\n    height: ${theme.spacing(4)};\n    line-height: ${theme.spacing(4)};\n    border-radius: ${theme.spacing(4)};\n    text-align: center;\n    color: ${theme.colors.text.maxContrast};\n    background-color: ${theme.colors.background.canvas};\n    font-size: ${theme.typography.size.lg};\n    margin-right: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1;\n  `,\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Input, Select } from '@grafana/ui';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n\ninterface Props {\n  onChange: (value: string) => void;\n  options: Array<SelectableValue<string>>;\n  value?: string;\n  addLabel?: string;\n  className?: string;\n  placeholder?: string;\n  custom?: boolean;\n  onCustomChange?: (custom: boolean) => void;\n  width?: number;\n  disabled?: boolean;\n}\n\nexport const SelectWithAdd: FC<Props> = ({\n  value,\n  onChange,\n  options,\n  className,\n  placeholder,\n  width,\n  custom,\n  onCustomChange,\n  disabled = false,\n  addLabel = '+ Add new',\n}) => {\n  const [isCustom, setIsCustom] = useState(custom);\n\n  useEffect(() => {\n    if (custom) {\n      setIsCustom(custom);\n    }\n  }, [custom]);\n\n  const _options = useMemo((): Array<SelectableValue<string>> => [...options, { value: '__add__', label: addLabel }], [\n    options,\n    addLabel,\n  ]);\n\n  if (isCustom) {\n    return (\n      <Input\n        width={width}\n        autoFocus={!custom}\n        value={value || ''}\n        placeholder={placeholder}\n        className={className}\n        disabled={disabled}\n        onChange={(e) => onChange((e.target as HTMLInputElement).value)}\n      />\n    );\n  } else {\n    return (\n      <Select\n        menuShouldPortal\n        width={width}\n        options={_options}\n        value={value}\n        className={className}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={(val: SelectableValue) => {\n          const value = val?.value;\n          if (value === '__add__') {\n            setIsCustom(true);\n            if (onCustomChange) {\n              onCustomChange(true);\n            }\n            onChange('');\n          } else {\n            onChange(value);\n          }\n        }}\n      />\n    );\n  }\n};\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { useFormContext } from 'react-hook-form';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  dataSourceName: string;\n}\n\nexport const GroupAndNamespaceFields: FC<Props> = ({ dataSourceName }) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n\n  const [customGroup, setCustomGroup] = useState(false);\n\n  const rulerRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction(dataSourceName));\n  }, [dataSourceName, dispatch]);\n\n  const rulesConfig = rulerRequests[dataSourceName]?.result;\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      rulesConfig ? Object.keys(rulesConfig).map((namespace) => ({ label: namespace, value: namespace })) : [],\n    [rulesConfig]\n  );\n\n  const groupOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      (namespace && rulesConfig?.[namespace]?.map((group) => ({ label: group.name, value: group.name }))) || [],\n    [namespace, rulesConfig]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <SelectWithAdd\n              {...field}\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value);\n              }}\n              onCustomChange={(custom: boolean) => {\n                custom && setCustomGroup(true);\n              }}\n              options={namespaceOptions}\n              width={42}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <SelectWithAdd {...field} options={groupOptions} width={42} custom={customGroup} className={style.input} />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * + * {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  input: css`\n    width: 330px !important;\n  `,\n});\n","import React, { useCallback } from 'react';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, ...props }: Props): JSX.Element {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return !!rulesSourcesWithRuler.find(({ id }) => id === ds.id);\n    },\n    [rulesSourcesWithRuler]\n  );\n\n  return <DataSourcePicker noDefault alerting filter={dataSourceFilter} current={value} {...props} />;\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { getRulesDataSources } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useRulesSourcesWithRuler(): DataSourceInstanceSettings[] {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n\n  // try fetching rules for each prometheus to see if it has ruler\n  useEffect(() => {\n    getRulesDataSources()\n      .filter((ds) => checkEditingRequests[ds.name] === undefined)\n      .forEach((ds) => dispatch(checkIfLotexSupportsEditingRulesAction(ds.name)));\n  }, [dispatch, checkEditingRequests]);\n\n  return useMemo(() => getRulesDataSources().filter((ds) => checkEditingRequests[ds.name]?.result), [\n    checkEditingRequests,\n  ]);\n}\n","import React, { FC, useMemo } from 'react';\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { RuleFolderPicker } from './RuleFolderPicker';\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { CloudRulesSourcePicker } from './CloudRulesSourcePicker';\n\ninterface Props {\n  editingExistingRule: boolean;\n}\n\nconst recordingRuleNameValidationPattern = {\n  message:\n    'Recording rule name must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.',\n  value: /^[a-zA-Z_:][a-zA-Z0-9_:]*$/,\n};\n\nexport const AlertTypeStep: FC<Props> = ({ editingExistingRule }) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues & { location?: string }>();\n\n  const ruleFormType = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const alertTypeOptions = useMemo((): SelectableValue[] => {\n    const result = [\n      {\n        label: 'Grafana managed alert',\n        value: RuleFormType.grafana,\n        description: 'Classic Grafana alerts based on thresholds.',\n      },\n    ];\n\n    if (contextSrv.isEditor) {\n      result.push({\n        label: 'Cortex/Loki managed alert',\n        value: RuleFormType.cloudAlerting,\n        description: 'Alert based on a system or application behavior. Based on Prometheus.',\n      });\n      result.push({\n        label: 'Cortex/Loki managed recording rule',\n        value: RuleFormType.cloudRecording,\n        description: 'Recording rule to pre-compute frequently needed or expensive calculations. Based on Prometheus.',\n      });\n    }\n\n    return result;\n  }, []);\n\n  return (\n    <RuleEditorSection stepNo={1} title=\"Rule type\">\n      <Field\n        className={styles.formInput}\n        label=\"Rule name\"\n        error={errors?.name?.message}\n        invalid={!!errors.name?.message}\n      >\n        <Input\n          id=\"name\"\n          {...register('name', {\n            required: { value: true, message: 'Must enter an alert name' },\n            pattern: ruleFormType === RuleFormType.cloudRecording ? recordingRuleNameValidationPattern : undefined,\n          })}\n          autoFocus={true}\n        />\n      </Field>\n      <div className={styles.flexRow}>\n        <Field\n          disabled={editingExistingRule}\n          label=\"Rule type\"\n          className={styles.formInput}\n          error={errors.type?.message}\n          invalid={!!errors.type?.message}\n          data-testid=\"alert-type-picker\"\n        >\n          <InputControl\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                {...field}\n                options={alertTypeOptions}\n                onChange={(v: SelectableValue) => onChange(v?.value)}\n              />\n            )}\n            name=\"type\"\n            control={control}\n            rules={{\n              required: { value: true, message: 'Please select alert type' },\n            }}\n          />\n        </Field>\n        {(ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) && (\n          <Field\n            className={styles.formInput}\n            label=\"Select data source\"\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n            data-testid=\"datasource-picker\"\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset location if switching data sources, as different rules source will have different groups and namespaces\n                    setValue('location', undefined);\n                    onChange(ds?.name ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n      {(ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) &&\n        dataSourceName && <GroupAndNamespaceFields dataSourceName={dataSourceName} />}\n\n      {ruleFormType === RuleFormType.grafana && (\n        <Field\n          label=\"Folder\"\n          className={styles.formInput}\n          error={errors.folder?.message}\n          invalid={!!errors.folder?.message}\n          data-testid=\"folder-picker\"\n        >\n          <InputControl\n            render={({ field: { ref, ...field } }) => (\n              <RuleFolderPicker {...field} enableCreateNew={true} enableReset={true} />\n            )}\n            name=\"folder\"\n            rules={{\n              required: { value: true, message: 'Please select a folder' },\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css`\n    width: 330px;\n    & + & {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n});\n","import React, { FC } from 'react';\nimport { Button, Field, FieldArray, Input, InlineLabel, Label, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  className?: string;\n}\n\nconst LabelsField: FC<Props> = ({ className }) => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const labels = watch('labels');\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Label>Custom Labels</Label>\n      <FieldArray control={control} name=\"labels\">\n        {({ fields, append, remove }) => {\n          return (\n            <>\n              <div className={styles.flexRow}>\n                <InlineLabel width={18}>Labels</InlineLabel>\n                <div className={styles.flexColumn}>\n                  {fields.map((field, index) => {\n                    return (\n                      <div key={field.id}>\n                        <div className={cx(styles.flexRow, styles.centerAlignRow)}>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.key?.message}\n                            error={errors.labels?.[index]?.key?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].key`, {\n                                required: { value: !!labels[index]?.value, message: 'Required.' },\n                              })}\n                              placeholder=\"key\"\n                              data-testid={`label-key-${index}`}\n                              defaultValue={field.key}\n                            />\n                          </Field>\n                          <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.value?.message}\n                            error={errors.labels?.[index]?.value?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].value`, {\n                                required: { value: !!labels[index]?.key, message: 'Required.' },\n                              })}\n                              placeholder=\"value\"\n                              data-testid={`label-value-${index}`}\n                              defaultValue={field.value}\n                            />\n                          </Field>\n                          <Button\n                            className={styles.deleteLabelButton}\n                            aria-label=\"delete label\"\n                            icon=\"trash-alt\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                              remove(index);\n                            }}\n                          />\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <Button\n                    className={styles.addLabelButton}\n                    icon=\"plus-circle\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      append({});\n                    }}\n                  >\n                    Add label\n                  </Button>\n                </div>\n              </div>\n            </>\n          );\n        }}\n      </FieldArray>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n\n      & + button {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    deleteLabelButton: css`\n      margin-left: ${theme.spacing.xs};\n      align-self: flex-start;\n    `,\n    addLabelButton: css`\n      flex-grow: 0;\n      align-self: flex-start;\n    `,\n    centerAlignRow: css`\n      align-items: baseline;\n    `,\n    equalSign: css`\n      align-self: flex-start;\n      width: 28px;\n      justify-content: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    labelInput: css`\n      width: 183px;\n      margin-bottom: ${theme.spacing.sm};\n      & + & {\n        margin-left: ${theme.spacing.sm};\n      }\n    `,\n  };\n};\n\nexport default LabelsField;\n","import { SelectableValue } from '@grafana/data';\nimport React, { FC, useMemo } from 'react';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\ninterface Props {\n  onChange: (value: string) => void;\n  existingKeys: string[];\n\n  value?: string;\n  width?: number;\n  className?: string;\n}\n\nexport const AnnotationKeyInput: FC<Props> = ({ value, existingKeys, ...rest }) => {\n  const annotationOptions = useMemo(\n    (): SelectableValue[] =>\n      Object.values(Annotation)\n        .filter((key) => !existingKeys.includes(key)) // remove keys already taken in other annotations\n        .map((key) => ({ value: key, label: annotationLabels[key] })),\n    [existingKeys]\n  );\n\n  return (\n    <SelectWithAdd\n      value={value}\n      options={annotationOptions}\n      custom={!!value && !(Object.values(Annotation) as string[]).includes(value)}\n      {...rest}\n    />\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { Button, Field, FieldArray, Input, InputControl, Label, TextArea, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\n\nconst AnnotationsField: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const annotations = watch('annotations') as RuleFormValues['annotations'];\n\n  const existingKeys = useCallback(\n    (index: number): string[] => annotations.filter((_, idx: number) => idx !== index).map(({ key }) => key),\n    [annotations]\n  );\n\n  return (\n    <>\n      <Label>Summary and annotations</Label>\n      <FieldArray name={'annotations'} control={control}>\n        {({ fields, append, remove }) => {\n          return (\n            <div className={styles.flexColumn}>\n              {fields.map((field, index) => {\n                const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n                const ValueInputComponent = isUrl ? Input : TextArea;\n                return (\n                  <div key={field.id} className={styles.flexRow}>\n                    <Field\n                      className={styles.field}\n                      invalid={!!errors.annotations?.[index]?.key?.message}\n                      error={errors.annotations?.[index]?.key?.message}\n                      data-testid={`annotation-key-${index}`}\n                    >\n                      <InputControl\n                        name={`annotations[${index}].key`}\n                        render={({ field: { ref, ...field } }) => (\n                          <AnnotationKeyInput {...field} existingKeys={existingKeys(index)} width={18} />\n                        )}\n                        control={control}\n                        rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n                      />\n                    </Field>\n                    <Field\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations[${index}].value`)}\n                        placeholder={isUrl ? 'https://' : `Text`}\n                        defaultValue={field.value}\n                      />\n                    </Field>\n                    <Button\n                      type=\"button\"\n                      className={styles.flexRowItemMargin}\n                      aria-label=\"delete annotation\"\n                      icon=\"trash-alt\"\n                      variant=\"secondary\"\n                      onClick={() => remove(index)}\n                    />\n                  </div>\n                );\n              })}\n              <Button\n                className={styles.addAnnotationsButton}\n                icon=\"plus-circle\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  append({ key: '', value: '' });\n                }}\n              >\n                Add info\n              </Button>\n            </div>\n          );\n        }}\n      </FieldArray>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n\nexport default AnnotationsField;\n","import React, { FC } from 'react';\nimport LabelsField from './LabelsField';\nimport AnnotationsField from './AnnotationsField';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\n\nexport const DetailsStep: FC = () => {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n\n  return (\n    <RuleEditorSection\n      stepNo={type === RuleFormType.cloudRecording ? 3 : 4}\n      title={\n        type === RuleFormType.cloudRecording ? 'Add details for your recording rule' : 'Add details for your alert'\n      }\n      description={\n        type === RuleFormType.cloudRecording\n          ? 'Add labels to help you better manage your rules'\n          : 'Write a summary and add labels to help you better manage your alerts'\n      }\n    >\n      {type !== RuleFormType.cloudRecording && <AnnotationsField />}\n      <LabelsField />\n    </RuleEditorSection>\n  );\n};\n","import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { noop } from 'lodash';\nimport { CoreApp, DataQuery } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useAsync } from 'react-use';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n}\n\nexport const ExpressionEditor: FC<ExpressionEditorProps> = ({ value, onChange, dataSourceName }) => {\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const [query, setQuery] = useState(mapToQuery({ refId: 'A', hide: false }, value));\n  const { error, loading, value: dataSource } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      setQuery(query);\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  return (\n    <QueryEditor\n      query={query}\n      queries={[query]}\n      app={CoreApp.CloudAlerting}\n      onChange={onChangeQuery}\n      onRunQuery={noop}\n      datasource={dataSource}\n    />\n  );\n};\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nfunction useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { css } from '@emotion/css';\nimport { FieldConfigSource, GrafanaTheme2, PanelData, ThresholdsConfig } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { PanelContext, PanelContextProvider, useStyles2 } from '@grafana/ui';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { useVizHeight } from '../../hooks/useVizHeight';\nimport { SupportedPanelPlugins, PanelPluginsButtonGroup } from '../PanelPluginsButtonGroup';\nimport appEvents from 'app/core/app_events';\n\ninterface Props {\n  data: PanelData;\n  currentPanel: SupportedPanelPlugins;\n  changePanel: (panel: SupportedPanelPlugins) => void;\n  thresholds: ThresholdsConfig;\n  onThresholdsChange: (thresholds: ThresholdsConfig) => void;\n}\n\nexport const VizWrapper: FC<Props> = ({ data, currentPanel, changePanel, onThresholdsChange, thresholds }) => {\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n  const vizHeight = useVizHeight(data, currentPanel, options.frameIndex);\n  const styles = useStyles2(getStyles(vizHeight));\n  const [fieldConfig, setFieldConfig] = useState<FieldConfigSource>(defaultFieldConfig(thresholds));\n\n  useEffect(() => {\n    setFieldConfig((fieldConfig) => ({\n      ...fieldConfig,\n      defaults: {\n        ...fieldConfig.defaults,\n        thresholds: thresholds,\n        custom: {\n          ...fieldConfig.defaults.custom,\n          thresholdsStyle: {\n            mode: 'line',\n          },\n        },\n      },\n    }));\n  }, [thresholds, setFieldConfig]);\n\n  const context: PanelContext = useMemo(\n    () => ({\n      eventBus: appEvents,\n      canEditThresholds: true,\n      onThresholdsChange: onThresholdsChange,\n    }),\n    [onThresholdsChange]\n  );\n\n  if (!options || !data) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.buttonGroup}>\n        <PanelPluginsButtonGroup onChange={changePanel} value={currentPanel} />\n      </div>\n      <AutoSizer>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <div style={{ height: `${vizHeight}px`, width: `${width}px` }}>\n              <PanelContextProvider value={context}>\n                <PanelRenderer\n                  height={vizHeight}\n                  width={width}\n                  data={data}\n                  pluginId={currentPanel}\n                  title=\"title\"\n                  onOptionsChange={setOptions}\n                  options={options}\n                  fieldConfig={fieldConfig}\n                />\n              </PanelContextProvider>\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (visHeight: number) => (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: 0 ${theme.spacing(2)};\n    height: ${visHeight + theme.spacing.gridSize * 4}px;\n  `,\n  buttonGroup: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n\nfunction defaultFieldConfig(thresholds: ThresholdsConfig): FieldConfigSource {\n  if (!thresholds) {\n    return { defaults: {}, overrides: [] };\n  }\n  return {\n    defaults: {\n      thresholds: thresholds,\n      custom: {\n        thresholdsStyle: {\n          mode: 'line',\n        },\n      },\n    },\n    overrides: [],\n  };\n}\n","import { PanelData } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { STAT, TIMESERIES } from '../utils/constants';\n\nexport function useVizHeight(data: PanelData, pluginId: string, frameIndex: number) {\n  const theme = useTheme2();\n  if (pluginId === TIMESERIES || pluginId === STAT || dataIsEmpty(data)) {\n    return 200;\n  }\n\n  const values = data.series[frameIndex].fields[0].values.length;\n  const rowHeight = theme.spacing.gridSize * 5;\n\n  /*\n   Calculate how if we can make  the table smaller than 200px\n   for when we only have 1-2 values\n   The extra rowHeight is to accommodate the header.\n  */\n  const tableHeight = values * rowHeight + rowHeight;\n\n  return tableHeight >= 200 ? 200 : tableHeight;\n}\n\nfunction dataIsEmpty(data: PanelData) {\n  return !data || !data.series[0] || !data.series[0].fields[0] || !data.series[0].fields[0].values;\n}\n","import React, { FC, ReactNode, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport { RelativeTimeRangePicker, useStyles2 } from '@grafana/ui';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { VizWrapper } from './VizWrapper';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\ninterface Props {\n  data: PanelData;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  onChangeThreshold: (thresholds: ThresholdsConfig, index: number) => void;\n}\n\nexport const QueryWrapper: FC<Props> = ({\n  data,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  onChangeThreshold,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(query.model);\n  const [pluginId, changePluginId] = useState<SupportedPanelPlugins>(isExpression ? TABLE : TIMESERIES);\n\n  const renderTimePicker = (query: AlertQuery, index: number): ReactNode => {\n    if (isExpressionQuery(query.model) || !onChangeTimeRange) {\n      return null;\n    }\n\n    return (\n      <RelativeTimeRangePicker\n        timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n        onChange={(range) => onChangeTimeRange(range, index)}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <QueryEditorRow<DataQuery>\n        dataSource={dsSettings}\n        onChangeDataSource={!isExpression ? (settings) => onChangeDataSource(settings, index) : undefined}\n        id={query.refId}\n        index={index}\n        key={query.refId}\n        data={data}\n        query={cloneDeep(query.model)}\n        onChange={(query) => onChangeQuery(query, index)}\n        onRemoveQuery={onRemoveQuery}\n        onAddQuery={onDuplicateQuery}\n        onRunQuery={onRunQueries}\n        queries={queries}\n        renderHeaderExtras={() => renderTimePicker(query, index)}\n        visualization={\n          data ? (\n            <VizWrapper\n              data={data}\n              changePanel={changePluginId}\n              currentPanel={pluginId}\n              thresholds={thresholds}\n              onThresholdsChange={(thresholds) => onChangeThreshold(thresholds, index)}\n            />\n          ) : null\n        }\n        hideDisableQuery={true}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    label: AlertingQueryWrapper;\n    margin-bottom: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n});\n","import React, { PureComponent } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { QueryWrapper } from './QueryWrapper';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  data: Record<string, PanelData>;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n}\n\ninterface State {\n  dataPerQuery: Record<string, PanelData>;\n}\n\nexport class QueryRows extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { dataPerQuery: {} };\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(\n      this.props.queries.filter((item) => {\n        return item.model.refId !== query.refId;\n      })\n    );\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeThreshold = (thresholds: ThresholdsConfig, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const referencedRefId = queries[index].refId;\n\n    onQueriesChange(\n      queries.map((query) => {\n        if (!isExpressionQuery(query.model)) {\n          return query;\n        }\n\n        if (query.model.conditions && query.model.conditions[0].query.params[0] === referencedRefId) {\n          return {\n            ...query,\n            model: {\n              ...query.model,\n              conditions: query.model.conditions.map((condition, conditionIndex) => {\n                // Only update the first condition for a given refId.\n                if (condition.query.params[0] === referencedRefId && conditionIndex === 0) {\n                  return {\n                    ...condition,\n                    evaluator: {\n                      ...condition.evaluator,\n                      params: [parseFloat(thresholds.steps[1].value.toPrecision(3))],\n                    },\n                  };\n                }\n                return condition;\n              }),\n            },\n          };\n        }\n        return query;\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        const previous = getDataSourceSrv().getInstanceSettings(item.datasourceUid);\n\n        if (previous?.type === settings.uid) {\n          return {\n            ...item,\n            datasourceUid: settings.uid,\n          };\n        }\n\n        const { refId, hide } = item.model;\n\n        return {\n          ...item,\n          datasourceUid: settings.uid,\n          model: { refId, hide },\n        };\n      })\n    );\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          refId: query.refId,\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  onDuplicateQuery = (query: DataQuery, source: AlertQuery): void => {\n    this.props.onDuplicateQuery({\n      ...source,\n      model: query,\n    });\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  getThresholdsForQueries = (queries: AlertQuery[]): Record<string, ThresholdsConfig> => {\n    const record: Record<string, ThresholdsConfig> = {};\n\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        continue;\n      }\n\n      if (!Array.isArray(query.model.conditions)) {\n        continue;\n      }\n\n      query.model.conditions.forEach((condition, index) => {\n        if (index > 0) {\n          return;\n        }\n        const threshold = condition.evaluator.params[0];\n        const refId = condition.query.params[0];\n\n        if (condition.evaluator.type === 'outside_range' || condition.evaluator.type === 'within_range') {\n          return;\n        }\n        if (!record[refId]) {\n          record[refId] = {\n            mode: ThresholdsMode.Absolute,\n            steps: [\n              {\n                value: -Infinity,\n                color: 'green',\n              },\n            ],\n          };\n        }\n\n        record[refId].steps.push({\n          value: threshold,\n          color: 'red',\n        });\n      });\n    }\n\n    return record;\n  };\n\n  render() {\n    const { onDuplicateQuery, onRunQueries, queries } = this.props;\n    const thresholdByRefId = this.getThresholdsForQueries(queries);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const data = this.props.data ? this.props.data[query.refId] : ({} as PanelData);\n                  const dsSettings = this.getDataSourceSettings(query);\n\n                  if (!dsSettings) {\n                    return null;\n                  }\n\n                  return (\n                    <QueryWrapper\n                      index={index}\n                      key={`${query.refId}-${index}`}\n                      dsSettings={dsSettings}\n                      data={data}\n                      query={query}\n                      onChangeQuery={this.onChangeQuery}\n                      onRemoveQuery={this.onRemoveQuery}\n                      queries={queries}\n                      onChangeDataSource={this.onChangeDataSource}\n                      onDuplicateQuery={onDuplicateQuery}\n                      onRunQueries={onRunQueries}\n                      onChangeTimeRange={this.onChangeTimeRange}\n                      thresholds={thresholdByRefId[query.refId]}\n                      onChangeThreshold={this.onChangeThreshold}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataQuery,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, HorizontalGroup, Icon, stylesFactory, Tooltip } from '@grafana/ui';\nimport { config } from '@grafana/runtime';\nimport { QueryRows } from './QueryRows';\nimport {\n  dataSource as expressionDatasource,\n  ExpressionDatasourceUID,\n} from 'app/features/expressions/ExpressionDatasource';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\n\ninterface Props {\n  value?: AlertQuery[];\n  onChange: (queries: AlertQuery[]) => void;\n}\n\ninterface State {\n  panelDataByRefId: Record<string, PanelData>;\n}\nexport class QueryEditor extends PureComponent<Props, State> {\n  private runner: AlertingQueryRunner;\n  private queries: AlertQuery[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { panelDataByRefId: {} };\n    this.runner = new AlertingQueryRunner();\n    this.queries = props.value ?? [];\n  }\n\n  componentDidMount() {\n    this.runner.get().subscribe((data) => {\n      this.setState({ panelDataByRefId: data });\n    });\n  }\n\n  componentWillUnmount() {\n    this.runner.destroy();\n  }\n\n  onRunQueries = () => {\n    const { queries } = this;\n    this.runner.run(queries);\n  };\n\n  onCancelQueries = () => {\n    this.runner.cancel();\n  };\n\n  onChangeQueries = (queries: AlertQuery[]) => {\n    this.queries = queries;\n    this.props.onChange(queries);\n  };\n\n  onDuplicateQuery = (query: AlertQuery) => {\n    const { queries } = this;\n    this.onChangeQueries(addQuery(queries, query));\n  };\n\n  onNewAlertingQuery = () => {\n    const { queries } = this;\n    const defaultDataSource = getDatasourceSrv().getInstanceSettings('default');\n\n    if (!defaultDataSource) {\n      return;\n    }\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: defaultDataSource.uid,\n        model: {\n          refId: '',\n          datasource: defaultDataSource.name,\n        },\n      })\n    );\n  };\n\n  onNewExpressionQuery = () => {\n    const { queries } = this;\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: ExpressionQueryType.classic,\n          conditions: [defaultCondition],\n        }),\n      })\n    );\n  };\n\n  renderAddQueryRow(styles: ReturnType<typeof getStyles>) {\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        <Button\n          type=\"button\"\n          icon=\"plus\"\n          onClick={this.onNewAlertingQuery}\n          variant=\"secondary\"\n          aria-label={selectors.components.QueryTab.addQuery}\n        >\n          Query\n        </Button>\n        {config.expressionsEnabled && (\n          <Tooltip content=\"Beta feature: queries could stop working in next version\" placement=\"right\">\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              onClick={this.onNewExpressionQuery}\n              variant=\"secondary\"\n              className={styles.expressionButton}\n            >\n              <span>Expression&nbsp;</span>\n              <Icon name=\"exclamation-triangle\" className=\"muted\" size=\"sm\" />\n            </Button>\n          </Tooltip>\n        )}\n      </HorizontalGroup>\n    );\n  }\n\n  isRunning() {\n    const data = Object.values(this.state.panelDataByRefId).find((d) => Boolean(d));\n    return data?.state === LoadingState.Loading;\n  }\n\n  renderRunQueryButton() {\n    const isRunning = this.isRunning();\n    const styles = getStyles(config.theme2);\n\n    if (isRunning) {\n      return (\n        <div className={styles.runWrapper}>\n          <Button icon=\"fa fa-spinner\" type=\"button\" variant=\"destructive\" onClick={this.onCancelQueries}>\n            Cancel\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.runWrapper}>\n        <Button icon=\"sync\" type=\"button\" onClick={this.onRunQueries}>\n          Run queries\n        </Button>\n      </div>\n    );\n  }\n\n  render() {\n    const { value = [] } = this.props;\n    const { panelDataByRefId } = this.state;\n    const styles = getStyles(config.theme2);\n\n    return (\n      <div className={styles.container}>\n        <QueryRows\n          data={panelDataByRefId}\n          queries={value}\n          onQueriesChange={this.onChangeQueries}\n          onDuplicateQuery={this.onDuplicateQuery}\n          onRunQueries={this.onRunQueries}\n        />\n        {this.renderAddQueryRow(styles)}\n        {this.renderRunQueryButton()}\n      </div>\n    );\n  }\n}\n\nconst addQuery = (queries: AlertQuery[], queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid'>): AlertQuery[] => {\n  const refId = getNextRefIdChar(queries);\n\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.primary};\n      height: 100%;\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n    runWrapper: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    expressionButton: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, InputControl } from '@grafana/ui';\nimport { ExpressionEditor } from './ExpressionEditor';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { QueryEditor } from './QueryEditor';\n\nexport const QueryStep: FC = () => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n  return (\n    <RuleEditorSection\n      stepNo={2}\n      title={type === RuleFormType.cloudRecording ? 'Create a query to be recorded' : 'Create a query to be alerted on'}\n    >\n      {(type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) && dataSourceName && (\n        <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n          <InputControl\n            name=\"expression\"\n            render={({ field: { ref, ...field } }) => <ExpressionEditor {...field} dataSourceName={dataSourceName} />}\n            control={control}\n            rules={{\n              required: { value: true, message: 'A valid expression is required' },\n            }}\n          />\n        </Field>\n      )}\n      {type === RuleFormType.grafana && (\n        <Field\n          invalid={!!errors.queries}\n          error={(!!errors.queries && 'Must provide at least one valid query.') || undefined}\n        >\n          <InputControl\n            name=\"queries\"\n            render={({ field: { ref, ...field } }) => <QueryEditor {...field} />}\n            control={control}\n            rules={{\n              validate: (queries) => Array.isArray(queries) && !!queries.length,\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n","import {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport {\n  CloudPreviewRuleRequest,\n  GrafanaPreviewRuleRequest,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return previewCloudAlertRule(request);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return previewGrafanaAlertRule(request);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype GrafanaPreviewRuleResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction previewGrafanaAlertRule(request: GrafanaPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  const type = RuleFormType.grafana;\n\n  return withLoadingIndicator({\n    whileLoading: createResponse(type),\n    source: getBackendSrv()\n      .fetch<GrafanaPreviewRuleResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/grafana`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(type, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(type, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n\nfunction previewCloudAlertRule(request: CloudPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  throw new Error('preview for cloud alerting rules is not implemented');\n}\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { useStyles2 } from '@grafana/ui';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer title=\"\" width={width} height={height} pluginId=\"table\" data={data} />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `,\n  };\n}\n","import React, { useCallback, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { takeWhile } from 'rxjs/operators';\nimport { useMountedState } from 'react-use';\nimport { Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { RuleFormType } from '../../types/rule-form';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { previewAlertRule } from '../../api/preview';\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: string[] = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext();\n  const [type, condition] = watch(['type', 'condition']);\n\n  if (type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <HorizontalGroup>\n        <Button disabled={!condition} type=\"button\" variant=\"primary\" onClick={onPreview}>\n          Preview alerts\n        </Button>\n      </HorizontalGroup>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nfunction usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles } from '@grafana/ui';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\n\nexport const CloudConditionsStep: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n\n  // cloud recording rules do not have alert conditions\n  if (type === RuleFormType.cloudRecording) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <Field label=\"For\" description=\"Expression has to be true for this long for the alert to be fired.\">\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <InputControl\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  timeUnit: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Field, InputControl, Select } from '@grafana/ui';\nimport { ExpressionDatasourceID } from 'app/features/expressions/ExpressionDatasource';\nimport React, { FC, useEffect, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\nexport const ConditionField: FC = () => {\n  const {\n    watch,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const queries = watch('queries');\n  const condition = watch('condition');\n\n  const options = useMemo(\n    (): SelectableValue[] =>\n      queries\n        .filter((q) => !!q.refId)\n        .map((q) => ({\n          value: q.refId,\n          label: q.refId,\n        })),\n    [queries]\n  );\n\n  // reset condition if option no longer exists or if it is unset, but there are options available\n  useEffect(() => {\n    const expressions = queries.filter((query) => query.model.datasource === ExpressionDatasourceID);\n    if (condition && !options.find(({ value }) => value === condition)) {\n      setValue('condition', expressions.length ? expressions[expressions.length - 1].refId : null);\n    } else if (!condition && expressions.length) {\n      setValue('condition', expressions[expressions.length - 1].refId);\n    }\n  }, [condition, options, queries, setValue]);\n\n  return (\n    <Field\n      label=\"Condition\"\n      description=\"The query or expression that will be alerted on\"\n      error={errors.condition?.message}\n      invalid={!!errors.condition?.message}\n    >\n      <InputControl\n        name=\"condition\"\n        render={({ field: { onChange, ref, ...field } }) => (\n          <Select\n            menuShouldPortal\n            {...field}\n            width={42}\n            options={options}\n            onChange={(v: SelectableValue) => onChange(v?.value ?? null)}\n            noOptionsMessage=\"No queries defined\"\n          />\n        )}\n        rules={{\n          required: {\n            value: true,\n            message: 'Please select the condition to alert on',\n          },\n        }}\n      />\n    </Field>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n];\n\nexport const GrafanaAlertStatePicker: FC<Props> = ({ includeNoData, ...props }) => {\n  const opts = useMemo(() => {\n    if (includeNoData) {\n      return options;\n    }\n    return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n  }, [includeNoData]);\n  return <Select menuShouldPortal options={opts} {...props} />;\n};\n","import { durationToMilliseconds, parseDuration } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { isEmpty } from 'lodash';\nimport React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\n// a warning that will be shown if a problematic yet technically valid combination of \"evaluate every\" and \"evaluate for\" is enetered\nexport const GrafanaConditionEvalWarning: FC = () => {\n  const { watch } = useFormContext<RuleFormValues>();\n  const evaluateFor = watch('evaluateFor');\n  const evaluateEvery = watch('evaluateEvery');\n  if (evaluateFor === '0') {\n    return null;\n  }\n  const durationFor = parseDuration(evaluateFor);\n  const durationEvery = parseDuration(evaluateEvery);\n  if (isEmpty(durationFor) || isEmpty(durationEvery)) {\n    return null;\n  }\n  const millisFor = durationToMilliseconds(durationFor);\n  const millisEvery = durationToMilliseconds(durationEvery);\n  if (millisFor && millisEvery && millisFor <= millisEvery) {\n    return (\n      <Alert severity=\"warning\" title=\"\">\n        Setting a &quot;for&quot; duration that is less than or equal to the evaluation interval will result in the\n        evaluation interval being used to calculate when an alert that has stopped receiving data will be closed.\n      </Alert>\n    );\n  }\n  return null;\n};\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { parseDuration, durationToMilliseconds, GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\nimport { useFormContext, RegisterOptions } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { positiveDurationValidationPattern, durationValidationPattern } from '../../utils/time';\nimport { ConditionField } from './ConditionField';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\nimport { GrafanaConditionEvalWarning } from './GrafanaConditionEvalWarning';\nimport { CollapseToggle } from '../CollapseToggle';\n\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: durationValidationPattern,\n};\n\nconst evaluateEveryValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: positiveDurationValidationPattern,\n  validate: (value: string) => {\n    const duration = parseDuration(value);\n    if (Object.keys(duration).length) {\n      const diff = durationToMilliseconds(duration);\n      if (diff < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (diff % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n    }\n    return true;\n  },\n};\n\nexport const GrafanaConditionsStep: FC = () => {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <ConditionField />\n      <Field label=\"Evaluate\">\n        <div className={styles.flexRow}>\n          <InlineLabel width={16} tooltip=\"How often the alert will be evaluated to see if it fires\">\n            Evaluate every\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateEvery?.message}\n            invalid={!!errors.evaluateEvery?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input width={8} {...register('evaluateEvery', evaluateEveryValidationOptions)} />\n          </Field>\n          <InlineLabel\n            width={7}\n            tooltip='Once condition is breached, alert will go into pending state. If it is pending for longer than the \"for\" value, it will become a firing alert.'\n          >\n            for\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateFor?.message}\n            invalid={!!errors.evaluateFor?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input width={8} {...register('evaluateFor', forValidationOptions)} />\n          </Field>\n        </div>\n      </Field>\n      <GrafanaConditionEvalWarning />\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n        className={styles.collapseToggle}\n      />\n      {showErrorHandling && (\n        <>\n          <Field label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  width={42}\n                  includeNoData={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  width={42}\n                  includeNoData={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, AppEvents } from '@grafana/data';\nimport { PageToolbar, Button, useStyles2, CustomScrollbar, Spinner } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nimport { AlertTypeStep } from './AlertTypeStep';\nimport { DetailsStep } from './DetailsStep';\nimport { QueryStep } from './QueryStep';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { saveRuleFormAction } from '../../state/actions';\nimport { RuleWithLocation } from 'app/types/unified-alerting';\nimport { useDispatch } from 'react-redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { rulerRuleToFormValues, getDefaultFormValues, getDefaultQueries } from '../../utils/rule-form';\nimport { Link } from 'react-router-dom';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { appEvents } from 'app/core/core';\nimport { CloudConditionsStep } from './CloudConditionsStep';\nimport { GrafanaConditionsStep } from './GrafanaConditionsStep';\n\ntype Props = {\n  existing?: RuleWithLocation;\n};\n\nexport const AlertRuleForm: FC<Props> = ({ existing }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n\n  const returnTo: string = (queryParams['returnTo'] as string | undefined) ?? '/alerting/list';\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    if (existing) {\n      return rulerRuleToFormValues(existing);\n    }\n    return {\n      ...getDefaultFormValues(),\n      queries: getDefaultQueries(),\n      ...(queryParams['defaults'] ? JSON.parse(queryParams['defaults'] as string) : {}),\n    };\n  }, [existing, queryParams]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const { handleSubmit, watch } = formAPI;\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const showStep2 = Boolean(type && (type === RuleFormType.grafana || !!dataSourceName));\n\n  const submitState = useUnifiedAlertingSelector((state) => state.ruleForm.saveRule) || initialAsyncRequestState;\n  useCleanup((state) => state.unifiedAlerting.ruleForm.saveRule);\n\n  const submit = (values: RuleFormValues, exitOnSave: boolean) => {\n    dispatch(\n      saveRuleFormAction({\n        values: {\n          ...defaultValues,\n          ...values,\n          annotations:\n            values.annotations\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key, value }) => !!key && !!value) ?? [],\n          labels:\n            values.labels\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key }) => !!key) ?? [],\n        },\n        existing,\n        redirectOnSave: exitOnSave ? returnTo : undefined,\n      })\n    );\n  };\n\n  const onInvalid = () => {\n    appEvents.emit(AppEvents.alertError, ['There are errors in the form. Please correct them and try again!']);\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <PageToolbar title=\"Create alert rule\" pageIcon=\"bell\">\n          <Link to={returnTo}>\n            <Button variant=\"secondary\" disabled={submitState.loading} type=\"button\" fill=\"outline\">\n              Cancel\n            </Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save\n          </Button>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save and exit\n          </Button>\n        </PageToolbar>\n        <div className={styles.contentOuter}>\n          <CustomScrollbar autoHeightMin=\"100%\" hideHorizontalTrack={true}>\n            <div className={styles.contentInner}>\n              <AlertTypeStep editingExistingRule={!!existing} />\n              {showStep2 && (\n                <>\n                  <QueryStep />\n                  {type === RuleFormType.grafana ? <GrafanaConditionsStep /> : <CloudConditionsStep />}\n                  <DetailsStep />\n                </>\n              )}\n            </div>\n          </CustomScrollbar>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    buttonSpinner: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    form: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    contentInner: css`\n      flex: 1;\n      padding: ${theme.spacing(2)};\n    `,\n    contentOuter: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      margin: ${theme.spacing(0, 2, 2)};\n      overflow: hidden;\n      flex: 1;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\nimport React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertRuleForm } from './components/rule-editor/AlertRuleForm';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchEditableRuleAction } from './state/actions';\nimport * as ruleId from './utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n}\n\nconst ExistingRuleEditor: FC<ExistingRuleEditorProps> = ({ identifier }) => {\n  useCleanup((state) => state.unifiedAlerting.ruleForm.existingRule);\n  const { loading, result, error, dispatched } = useUnifiedAlertingSelector((state) => state.ruleForm.existingRule);\n  const dispatch = useDispatch();\n  const { isEditable } = useIsRuleEditable(ruleId.ruleIdentifierToRuleSourceName(identifier), result?.rule);\n\n  useEffect(() => {\n    if (!dispatched) {\n      dispatch(fetchEditableRuleAction(identifier));\n    }\n  }, [dispatched, dispatch, identifier]);\n\n  if (loading || isEditable === undefined) {\n    return (\n      <Page.Contents>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </Page.Contents>\n    );\n  }\n  if (error) {\n    return (\n      <Page.Contents>\n        <Alert severity=\"error\" title=\"Failed to load rule\">\n          {error.message}\n        </Alert>\n      </Page.Contents>\n    );\n  }\n  if (!result) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n  return <AlertRuleForm existing={result} />;\n};\n\ntype RuleEditorProps = GrafanaRouteComponentProps<{ id?: string }>;\n\nconst RuleEditor: FC<RuleEditorProps> = ({ match }) => {\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  if (identifier) {\n    return <ExistingRuleEditor key={id} identifier={identifier} />;\n  }\n  if (!(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor)) {\n    return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n  }\n  return <AlertRuleForm />;\n};\n\nconst AlertWarning: FC<{ title: string }> = ({ title, children }) => (\n  <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n    <p>{children}</p>\n    <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n  </Alert>\n);\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css`\n    margin: ${theme.spacing(4)};\n  `,\n});\n\nexport default withErrorBoundary(RuleEditor, { style: 'page' });\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React, { useMemo } from 'react';\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import { FolderDTO } from 'app/types';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useEffect } from 'react';\nimport { fetchFolderIfNotFetchedAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\n\ninterface ReturnBag {\n  folder?: FolderDTO;\n  loading: boolean;\n}\n\nexport function useFolder(uid?: string): ReturnBag {\n  const dispatch = useDispatch();\n  const folderRequests = useUnifiedAlertingSelector((state) => state.folders);\n  useEffect(() => {\n    if (uid) {\n      dispatch(fetchFolderIfNotFetchedAction(uid));\n    }\n  }, [dispatch, uid]);\n\n  if (uid) {\n    const request = folderRequests[uid] || initialAsyncRequestState;\n    return {\n      folder: request.result,\n      loading: request.loading,\n    };\n  }\n  return {\n    loading: false,\n  };\n}\n","import { contextSrv } from 'app/core/services/context_srv';\nimport { isGrafanaRulerRule } from '../utils/rules';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\nimport { useFolder } from './useFolder';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface ResultBag {\n  isEditable?: boolean;\n  loading: boolean;\n}\n\nexport function useIsRuleEditable(rulesSourceName: string, rule?: RulerRuleDTO): ResultBag {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n  const folderUID = rule && isGrafanaRulerRule(rule) ? rule.grafana_alert.namespace_uid : undefined;\n\n  const { folder, loading } = useFolder(folderUID);\n\n  useEffect(() => {\n    if (checkEditingRequests[rulesSourceName] === undefined && rulesSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n      dispatch(checkIfLotexSupportsEditingRulesAction(rulesSourceName));\n    }\n  }, [rulesSourceName, checkEditingRequests, dispatch]);\n\n  if (!rule) {\n    return { isEditable: false, loading: false };\n  }\n\n  // grafana rules can be edited if user can edit the folder they're in\n  if (isGrafanaRulerRule(rule)) {\n    if (!folderUID) {\n      throw new Error(\n        `Rule ${rule.grafana_alert.title} does not have a folder uid, cannot determine if it is editable.`\n      );\n    }\n    return {\n      isEditable: folder?.canSave,\n      loading,\n    };\n  }\n\n  // prom rules are only editable by users with Editor role and only if rules source supports editing\n  return {\n    isEditable: contextSrv.isEditor && !!checkEditingRequests[rulesSourceName]?.result,\n    loading: !!checkEditingRequests[rulesSourceName]?.loading,\n  };\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { getTimeRangeForExpression } from '../utils/timeRange';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { DataQuery } from '@grafana/data';\nimport { ExpressionDatasourceID } from './ExpressionDatasource';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (dataQuery.datasource === ExpressionDatasourceID) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","RuleEditorSection","title","stepNo","children","description","styles","useStyles2","getStyles","className","parent","content","FieldSet","label","fieldset","theme","css","spacing","breakpoints","xl","colors","text","maxContrast","background","canvas","typography","size","lg","SelectWithAdd","value","onChange","options","placeholder","width","custom","onCustomChange","disabled","addLabel","isCustom","setIsCustom","useState","_options","Input","autoFocus","e","target","Select","menuShouldPortal","val","GroupAndNamespaceFields","dataSourceName","control","watch","formState","errors","setValue","useFormContext","style","getStyle","customGroup","setCustomGroup","rulerRequests","useUnifiedAlertingSelector","state","rulerRules","fetchRulerRulesAction","rulesConfig","result","namespace","namespaceOptions","Object","keys","map","groupOptions","group","name","flexRow","Field","error","message","invalid","InputControl","render","field","input","rules","required","CloudRulesSourcePicker","props","rulesSourcesWithRuler","checkEditingRequests","lotexSupportsRuleEditing","getRulesDataSources","filter","ds","undefined","forEach","checkIfLotexSupportsEditingRulesAction","useRulesSourcesWithRuler","dataSourceFilter","find","id","DataSourcePicker","noDefault","alerting","recordingRuleNameValidationPattern","AlertTypeStep","editingExistingRule","register","ruleFormType","alertTypeOptions","RuleFormType","contextSrv","push","formInput","pattern","type","v","folder","RuleFolderPicker","enableCreateNew","enableReset","wrapper","md","flexColumn","xs","deleteLabelButton","addLabelButton","centerAlignRow","equalSign","labelInput","sm","useStyles","labels","cx","Label","FieldArray","fields","append","remove","InlineLabel","index","key","defaultValue","Button","icon","variant","onClick","AnnotationKeyInput","existingKeys","rest","annotationOptions","Annotation","includes","annotationLabels","annotationValueInput","textarea","addAnnotationsButton","flexRowItemMargin","annotations","_","idx","isUrl","toLocaleLowerCase","endsWith","ValueInputComponent","TextArea","DetailsStep","ExpressionEditor","mapToValue","mapToQuery","settings","getDataSourceSrv","getInstanceSettings","query","expr","existing","Error","useQueryMappers","setQuery","refId","hide","loading","dataSource","useAsync","get","onChangeQuery","components","QueryEditor","errorMessage","queries","app","CoreApp","onRunQuery","noop","datasource","VizWrapper","data","currentPanel","changePanel","onThresholdsChange","thresholds","setOptions","frameIndex","showHeader","vizHeight","pluginId","useTheme2","TIMESERIES","STAT","series","dataIsEmpty","length","rowHeight","gridSize","tableHeight","useVizHeight","fieldConfig","setFieldConfig","defaults","overrides","thresholdsStyle","mode","defaultFieldConfig","context","eventBus","appEvents","canEditThresholds","buttonGroup","PanelPluginsButtonGroup","height","PanelContextProvider","PanelRenderer","onOptionsChange","visHeight","QueryWrapper","dsSettings","onChangeDataSource","onChangeTimeRange","onRunQueries","onRemoveQuery","onDuplicateQuery","onChangeThreshold","isExpression","isExpressionQuery","model","changePluginId","TABLE","QueryEditorRow","cloneDeep","onAddQuery","renderHeaderExtras","RelativeTimeRangePicker","timeRange","relativeTimeRange","getDefaultRelativeTimeRange","range","renderTimePicker","visualization","hideDisableQuery","border","medium","shape","borderRadius","QueryRows","PureComponent","constructor","super","this","onQueriesChange","item","itemIndex","referencedRefId","conditions","params","condition","conditionIndex","evaluator","parseFloat","steps","toPrecision","previous","datasourceUid","uid","destination","startIndex","source","endIndex","update","Array","from","removed","splice","record","isArray","threshold","ThresholdsMode","Infinity","color","dataPerQuery","thresholdByRefId","getThresholdsForQueries","onDragEnd","droppableId","direction","provided","ref","innerRef","droppableProps","getDataSourceSettings","runner","run","cancel","onChangeQueries","addQuery","defaultDataSource","getDatasourceSrv","ExpressionDatasourceUID","expressionDatasource","ExpressionQueryType","defaultCondition","panelDataByRefId","AlertingQueryRunner","componentDidMount","subscribe","setState","componentWillUnmount","destroy","renderAddQueryRow","HorizontalGroup","align","onNewAlertingQuery","selectors","config","Tooltip","placement","onNewExpressionQuery","expressionButton","Icon","isRunning","d","Boolean","LoadingState","renderRunQueryButton","runWrapper","onCancelQueries","container","queryToAdd","getNextRefIdChar","queryType","defaultTimeRange","stylesFactory","primary","xxl","editorWrapper","QueryStep","expression","validate","previewAlertRule","request","isCloudPreviewRequest","previewCloudAlertRule","isGrafanaPreviewRequest","withLoadingIndicator","whileLoading","createResponse","getBackendSrv","fetch","method","url","pipe","instances","dataFrameFromJSON","catchError","of","toDataQueryError","share","previewGrafanaAlertRule","ruleType","getDefaultTimeRange","PreviewRuleResult","preview","messageFromError","table","PreviewRule","onPreview","setPreview","getValues","isMounted","useMountedState","grafana_condition","now","dateTimeFormatISO","Date","createPreviewRequest","takeWhile","response","isCompleted","usePreview","CloudConditionsStep","forTime","inlineField","timeOptions","timeUnit","ConditionField","q","expressions","ExpressionDatasourceID","noOptionsMessage","GrafanaAlertStateDecision","GrafanaAlertStatePicker","includeNoData","opts","opt","GrafanaConditionEvalWarning","evaluateFor","evaluateEvery","durationFor","parseDuration","durationEvery","isEmpty","millisFor","durationToMilliseconds","millisEvery","Alert","severity","forValidationOptions","durationValidationPattern","evaluateEveryValidationOptions","positiveDurationValidationPattern","duration","diff","MIN_TIME_RANGE_STEP_S","GrafanaConditionsStep","showErrorHandling","setShowErrorHandling","tooltip","validationMessageHorizontalOverflow","CollapseToggle","isCollapsed","onToggle","collapsed","collapseToggle","AlertRuleForm","queryParams","returnTo","defaultValues","rulerRuleToFormValues","getDefaultFormValues","getDefaultQueries","JSON","parse","formAPI","useForm","shouldFocusError","handleSubmit","showStep2","submitState","ruleForm","saveRule","initialAsyncRequestState","unifiedAlerting","submit","exitOnSave","saveRuleFormAction","trim","redirectOnSave","onInvalid","AppEvents","onSubmit","preventDefault","form","PageToolbar","pageIcon","Link","to","fill","Spinner","buttonSpinner","inline","contentOuter","CustomScrollbar","autoHeightMin","hideHorizontalTrack","contentInner","weak","ExistingRuleEditor","identifier","existingRule","dispatched","isEditable","useIsRuleEditable","ruleId","rule","fetchEditableRuleAction","Page","LoadingPlaceholder","AlertWarning","warningStyles","warning","LinkButton","href","withErrorBoundary","match","panels","reduce","panel","isSupportedPanelPlugin","imgUrl","info","logos","small","RadioButtonGroup","useFolder","folderRequests","folders","fetchFolderIfNotFetchedAction","rulesSourceName","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","GRAFANA_RULES_SOURCE_NAME","canSave","FALL_BACK_TIME_RANGE","getReferencedIds","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","getTimeRanges","referencedRefIds","referencedRefIdsKey","backendSrv","subject","ReplaySubject","lastResult","asObservable","empty","initialState","next","subscription","runRequest","nextResult","applyChange","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","unsubscribe","requestIsRunning","complete","initial","requestId","uuidv4","mapToPanelData","cancelNetworkRequestsOnUnsubscribe","dataByQuery","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","console","warn","results","entries","frames","queryError","change","dataQuery"],"sourceRoot":""}