{"version":3,"file":"AdminListOrgsPage.0e7ce18a6cf0f8775a65.js","mappings":"4gBASO,MAAMA,EAA4B,EAAGC,KAAAA,EAAMC,SAAAA,MAChD,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,YAClC,OACE,mBAAOC,UAAU,+CAAjB,WACE,4BACE,iCACE,gCADF,OAEE,mCACA,eAAIC,MAAO,CAAEC,MAAO,cAGxB,2BACGP,EAAKQ,KAAKC,IACT,2BACE,eAAIJ,UAAU,UAAd,UACE,cAAGK,KAAO,mBAAkBD,EAAIE,KAAhC,SAAuCF,EAAIE,QAE7C,eAAIN,UAAU,UAAd,UACE,cAAGK,KAAO,mBAAkBD,EAAIE,KAAhC,SAAuCF,EAAIG,UAE7C,eAAIP,UAAU,aAAd,UACE,SAAC,EAAAQ,OAAD,CACEC,QAAQ,cACRC,KAAK,KACLC,KAAK,QACLC,QAAS,IAAMd,EAAaM,GAC5B,aAAW,mBAbP,GAAEA,EAAIE,MAAMF,EAAIG,YAmB7BV,IACC,SAAC,EAAAgB,aAAD,CACEC,QAAM,EACNH,KAAK,YACLI,MAAM,SACNC,MACE,+DACyCnB,EAAUU,KADnD,YAEE,mBAFF,WAES,yFAGXU,YAAY,SACZC,UAAW,IAAMpB,OAAaqB,GAC9BC,UAAW,KACTxB,EAASC,EAAUS,IACnBR,OAAaqB,U,wDC9CzB,MAQaE,EAAyB,KACpC,MAAMC,GAAWC,EAAAA,EAAAA,cAAaC,GAAsBA,EAAMF,WACpDG,GAAWC,EAAAA,EAAAA,GAAYJ,EAAU,gBAChCE,EAAOG,IAAaC,EAAAA,EAAAA,UAAWC,cAPxBA,gBACDC,EAAAA,EAAAA,iBAAgBC,IAAI,aAMuBC,IAAW,IAMnE,OAJAC,EAAAA,EAAAA,YAAU,KACRN,MACC,CAACA,KAGF,SAACO,EAAA,EAAD,CAAMT,SAAUA,EAAhB,UACE,SAACS,EAAA,WAAD,WACE,uCACE,iBAAKlC,UAAU,kBAAf,WACE,gBAAKA,UAAU,6BACf,SAAC,EAAAmC,WAAD,CAAYxB,KAAK,OAAON,KAAK,UAA7B,yBAIDmB,EAAMY,SAAW,yBACjBZ,EAAMa,MACNb,EAAMc,QACL,SAAC5C,EAAD,CACEC,KAAM6B,EAAMc,MACZ1C,SAAW2C,IAhCPV,OAAAA,SACHC,EAAAA,EAAAA,iBAAgBU,OAAO,aAAeD,GAgCrC1C,CAAU0C,GAAOE,MAAK,IAAMd,iBAU5C","sources":["webpack://grafana/./public/app/features/admin/AdminOrgsTable.tsx","webpack://grafana/./public/app/features/admin/AdminListOrgsPage.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport { Organization } from 'app/types';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ninterface Props {\n  orgs: Organization[];\n  onDelete: (orgId: number) => void;\n}\n\nexport const AdminOrgsTable: FC<Props> = ({ orgs, onDelete }) => {\n  const [deleteOrg, setDeleteOrg] = useState<Organization>();\n  return (\n    <table className=\"filter-table form-inline filter-table--hover\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th style={{ width: '1%' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {orgs.map((org) => (\n          <tr key={`${org.id}-${org.name}`}>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.id}</a>\n            </td>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.name}</a>\n            </td>\n            <td className=\"text-right\">\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                icon=\"times\"\n                onClick={() => setDeleteOrg(org)}\n                aria-label=\"Delete org\"\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      {deleteOrg && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Delete\"\n          body={\n            <div>\n              Are you sure you want to delete &apos;{deleteOrg.name}&apos;?\n              <br /> <small>All dashboards for this organization will be removed!</small>\n            </div>\n          }\n          confirmText=\"Delete\"\n          onDismiss={() => setDeleteOrg(undefined)}\n          onConfirm={() => {\n            onDelete(deleteOrg.id);\n            setDeleteOrg(undefined);\n          }}\n        />\n      )}\n    </table>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { LinkButton } from '@grafana/ui';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AdminOrgsTable } from './AdminOrgsTable';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nconst deleteOrg = async (orgId: number) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId);\n};\n\nconst getOrgs = async () => {\n  return await getBackendSrv().get('/api/orgs');\n};\n\nexport const AdminListOrgsPages: FC = () => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const [state, fetchOrgs] = useAsyncFn(async () => await getOrgs(), []);\n\n  useEffect(() => {\n    fetchOrgs();\n  }, [fetchOrgs]);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <div className=\"page-action-bar\">\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton icon=\"plus\" href=\"org/new\">\n              New org\n            </LinkButton>\n          </div>\n          {state.loading && 'Fetching organizations'}\n          {state.error}\n          {state.value && (\n            <AdminOrgsTable\n              orgs={state.value}\n              onDelete={(orgId) => {\n                deleteOrg(orgId).then(() => fetchOrgs());\n              }}\n            />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminListOrgsPages;\n"],"names":["AdminOrgsTable","orgs","onDelete","deleteOrg","setDeleteOrg","useState","className","style","width","map","org","href","id","name","Button","variant","size","icon","onClick","ConfirmModal","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","AdminListOrgsPages","navIndex","useSelector","state","navModel","getNavModel","fetchOrgs","useAsyncFn","async","getBackendSrv","get","getOrgs","useEffect","Page","LinkButton","loading","error","value","orgId","delete","then"],"sourceRoot":""}