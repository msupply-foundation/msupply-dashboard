{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/Card/Card.tsx","webpack:///./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","enterprise","find","info","links","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","NewDataSourcePage","onDataSourceTypeClicked","props","onSearchQueryChange","value","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","this","items","getItemKey","toString","renderItem","DataSourceTypeCard","onClick","map","className","key","renderPlugins","variant","href","target","rel","navModel","isLoading","searchQuery","Contents","onChange","placeholder","renderCategories","PureComponent","isPhantom","learnMoreLink","ariaLabel","selectors","pages","AddDataSource","dataSourcePlugins","logoUrl","actions","icon","labels","status","signature","aria-label","getNavModel","main","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","pluginMeta","meta","img","breadcrumbs","children","active","configPages","page","includes","undefined","include","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","secureJsonFields","child","indexOf","getDataSources","regex","RegExp","test","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","Card","mainClassName","cx","src","loadPluginsErrors","PluginsErrorsInfo","errors","getAllPluginsErrors","theme","useTheme","useAsync","loadPlugins","loading","PluginsList","signatureErrorNotice","severity","urlTitle","css","e","spacing","sm","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","getPlugins","getPluginsSearchQuery"],"mappings":"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","file":"NewDataSourcePage.be7fa34b3aa92fa71cc6.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter(c => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration & data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration & data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration & data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { PluginSignatureBadge } from '../plugins/PluginSignatureBadge';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/PluginsErrorsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\">Cancel</LinkButton>\n          </div>\n          {!searchQuery && (\n            <PluginsErrorsInfo>\n              <>\n                <br />\n                <p>\n                  Note that <strong>unsigned front-end datasource plugins</strong> are still usable, but this is subject\n                  to change in the upcoming releases of Grafana\n                </p>\n              </>\n            </PluginsErrorsInfo>\n          )}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button>Select</Button>}\n        </>\n      }\n      labels={\n        !isPhantom && (\n          <div>\n            <PluginSignatureBadge status={plugin.signature} />\n          </div>\n        )\n      }\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React from 'react';\nimport { cx } from 'emotion';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div>{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, useTheme } from '@grafana/ui';\nimport { mapPluginErrorCodeToSignatureStatus, PluginSignatureBadge } from './PluginSignatureBadge';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { PluginError } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface ConnectedProps {\n  errors: PluginError[];\n}\n\ninterface DispatchProps {\n  loadPluginsErrors: typeof loadPluginsErrors;\n}\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\n\ntype PluginsErrorsInfoProps = ConnectedProps & DispatchProps & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signature-verification/\"\n    >\n      <div>\n        <p>\n          We have encountered{' '}\n          <a href=\"https://grafana.com/docs/grafana/latest/developers/plugins/backend/\" target=\"_blank\">\n            data source backend plugins\n          </a>{' '}\n          that are unsigned. Grafana Labs cannot guarantee the integrity of unsigned plugins and recommends using signed\n          plugins only.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={e => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => {\n  return {\n    errors: getAllPluginsErrors(state.plugins),\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  loadPluginsErrors,\n};\n\nexport const PluginsErrorsInfo = hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected)\n);\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"sourceRoot":""}