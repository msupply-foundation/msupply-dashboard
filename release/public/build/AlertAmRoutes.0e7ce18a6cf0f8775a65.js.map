{"version":3,"file":"AlertAmRoutes.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/AmRoutes.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { SelectableValue } from '@grafana/data';\nimport { Validate } from 'react-hook-form';\nimport { MatcherOperator, Route } from 'app/plugins/datasource/alertmanager/types';\nimport { FormAmRoute } from '../types/amroutes';\nimport { parseInterval, timeOptions } from './time';\nimport { isUndefined, omitBy } from 'lodash';\nimport { MatcherFieldValue } from '../types/silence-form';\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\n\nconst defaultValueAndType: [string, string] = ['', timeOptions[0].value];\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst intervalToValueAndType = (strValue: string | undefined): [string, string] => {\n  if (!strValue) {\n    return defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  groupBy: [],\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n};\n\n//returns route, and a record mapping id to existing route route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route || Object.keys(route).length === 0) {\n    return [emptyRoute, {}];\n  }\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval);\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  // Frontend migration to use object_matchers instead of matchers\n  const matchers = route.matchers\n    ? route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? []\n    : route.object_matchers?.map(\n        (matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] } as MatcherFieldValue)\n      ) ?? [];\n\n  return [\n    {\n      id,\n      object_matchers: [\n        ...matchers,\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      groupBy: route.group_by ?? [],\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string | undefined,\n  formAmRoute: FormAmRoute,\n  id2ExistingRoute: Record<string, Route>\n): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: formAmRoute.groupBy,\n    object_matchers: formAmRoute.object_matchers.length\n      ? formAmRoute.object_matchers.map((matcher) => [matcher.name, matcher.operator, matcher.value])\n      : undefined,\n    match: undefined,\n    match_re: undefined,\n    group_wait: formAmRoute.groupWaitValue\n      ? `${formAmRoute.groupWaitValue}${formAmRoute.groupWaitValueType}`\n      : undefined,\n    group_interval: formAmRoute.groupIntervalValue\n      ? `${formAmRoute.groupIntervalValue}${formAmRoute.groupIntervalValueType}`\n      : undefined,\n    repeat_interval: formAmRoute.repeatIntervalValue\n      ? `${formAmRoute.repeatIntervalValue}${formAmRoute.repeatIntervalValueType}`\n      : undefined,\n    routes: formAmRoute.routes.map((subRoute) =>\n      formAmRouteToAmRoute(alertManagerSourceName, subRoute, id2ExistingRoute)\n    ),\n  };\n\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { cx } from '@emotion/css';\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      menuShouldPortal\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}>\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  menuShouldPortal\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={groupByOptions}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const isReadOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && !isReadOnly && (\n          <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n            Edit\n          </Button>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import React, { ButtonHTMLAttributes, FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, useStyles } from '@grafana/ui';\n\nexport interface EmptyAreaProps {\n  buttonLabel: string;\n  onButtonClick: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n}\n\nexport const EmptyArea: FC<EmptyAreaProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n}) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <p className={styles.text}>{text}</p>\n      <Button\n        className={styles.button}\n        icon={buttonIcon}\n        onClick={onButtonClick}\n        size={buttonSize}\n        type=\"button\"\n        variant={buttonVariant}\n      >\n        {buttonLabel}\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing.md};\n    `,\n    button: css`\n      margin: ${theme.spacing.md} 0 ${theme.spacing.sm};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [overrideGrouping, setOverrideGrouping] = useState(routes.groupBy.length > 0);\n  const [overrideTimings, setOverrideTimings] = useState(\n    !!routes.groupWaitValue || !!routes.groupIntervalValue || !!routes.repeatIntervalValue\n  );\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <div>Matching labels</div>\n                <div className={styles.matchersContainer}>\n                  {fields.map((field, index) => {\n                    const localPath = `object_matchers[${index}]`;\n                    return (\n                      <HorizontalGroup key={field.id} align=\"flex-start\">\n                        <Field\n                          label=\"Label\"\n                          invalid={!!errors.object_matchers?.[index]?.name}\n                          error={errors.object_matchers?.[index]?.name?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.name`, { required: 'Field is required' })}\n                            defaultValue={field.name}\n                            placeholder=\"label\"\n                          />\n                        </Field>\n                        <Field label={'Operator'}>\n                          <InputControl\n                            render={({ field: { onChange, ref, ...field } }) => (\n                              <Select\n                                {...field}\n                                className={styles.matchersOperator}\n                                onChange={(value) => onChange(value?.value)}\n                                options={matcherFieldOptions}\n                              />\n                            )}\n                            defaultValue={field.operator}\n                            control={control}\n                            name={`${localPath}.operator` as const}\n                            rules={{ required: { value: true, message: 'Required.' } }}\n                          />\n                        </Field>\n                        <Field\n                          label=\"Value\"\n                          invalid={!!errors.object_matchers?.[index]?.value}\n                          error={errors.object_matchers?.[index]?.value?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.value`, { required: 'Field is required' })}\n                            defaultValue={field.value}\n                            placeholder=\"value\"\n                          />\n                        </Field>\n                        <IconButton\n                          className={styles.removeButton}\n                          tooltip=\"Remove matcher\"\n                          name={'trash-alt'}\n                          onClick={() => remove(index)}\n                        >\n                          Remove\n                        </IconButton>\n                      </HorizontalGroup>\n                    );\n                  })}\n                </div>\n                <Button\n                  className={styles.addMatcherBtn}\n                  icon=\"plus\"\n                  onClick={() => append(emptyArrayFieldMatcher)}\n                  variant=\"secondary\"\n                  type=\"button\"\n                >\n                  Add matcher\n                </Button>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  menuShouldPortal\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch\n              value={overrideGrouping}\n              onChange={() => setOverrideGrouping((overrideGrouping) => !overrideGrouping)}\n            />\n          </Field>\n          {overrideGrouping && (\n            <Field label=\"Group by\" description=\"Group alerts when you receive a notification based on labels.\">\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    menuShouldPortal\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={groupByOptions}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch\n              value={overrideTimings}\n              onChange={() => setOverrideTimings((overrideTimings) => !overrideTimings)}\n            />\n          </Field>\n          {overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { FC, useState } from 'react';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Button\n            className={styles.addNestedRoutingBtn}\n            icon=\"plus\"\n            onClick={() => {\n              setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n              setIsAddMode(true);\n            }}\n            variant=\"secondary\"\n            type=\"button\"\n          >\n            Add nested policy\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Button, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\nimport { Matchers } from '../silences/Matchers';\nimport { matcherFieldToMatcher } from '../../utils/alertmanager';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  readOnly?: boolean;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n\n  const [expandedId, setExpandedId] = useState<string | number>();\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />,\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => item.data.groupBy.join(', ') || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    ...(readOnly\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item, index) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <HorizontalGroup>\n                  <Button\n                    data-testid=\"edit-route\"\n                    icon=\"pen\"\n                    onClick={expandWithCustomContent}\n                    size=\"sm\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                  >\n                    Edit\n                  </Button>\n                  <IconButton\n                    data-testid=\"delete-route\"\n                    name=\"trash-alt\"\n                    onClick={() => {\n                      const newRoutes = [...routes];\n\n                      newRoutes.splice(index, 1);\n\n                      onChange(newRoutes);\n                    }}\n                    type=\"button\"\n                  />\n                </HorizontalGroup>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const items = useMemo(() => prepareItems(routes), [routes]);\n\n  // expand the last item when adding\n  useEffect(() => {\n    if (isAddMode && items.length) {\n      setExpandedId(items[items.length - 1].id);\n    }\n  }, [isAddMode, items]);\n\n  return (\n    <DynamicTable\n      cols={cols}\n      isExpandable={true}\n      items={items}\n      testIdGenerator={() => 'am-routes-row'}\n      onCollapse={collapseItem}\n      onExpand={expandItem}\n      isExpanded={(item) => expandedId === item.id}\n      renderExpandedContent={(item: RouteTableItemProps, index) =>\n        isAddMode || editMode ? (\n          <AmRoutesExpandedForm\n            onCancel={() => {\n              if (isAddMode) {\n                onCancelAdd();\n              }\n              setEditMode(false);\n            }}\n            onSave={(data) => {\n              const newRoutes = [...routes];\n\n              newRoutes[index] = {\n                ...newRoutes[index],\n                ...data,\n              };\n              setEditMode(false);\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n          />\n        ) : (\n          <AmRoutesExpandedRead\n            onChange={(data) => {\n              const newRoutes = [...routes];\n\n              newRoutes[index] = {\n                ...item.data,\n                ...data,\n              };\n\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n            readOnly={readOnly}\n          />\n        )\n      }\n    />\n  );\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { EmptyArea } from '../EmptyArea';\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({\n  onChange,\n  onRootRouteEdit,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [actualRoutes, setActualRoutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  const styles = useStyles2(getStyles);\n\n  const addNewRoute = () => {\n    setIsAddMode(true);\n    setActualRoutes((actualRoutes) => [\n      ...actualRoutes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        <EmptyArea\n          buttonIcon=\"rocket\"\n          buttonLabel=\"Set a default contact point\"\n          onButtonClick={onRootRouteEdit}\n          text=\"You haven't set a default contact point for the root route yet.\"\n        />\n      ) : actualRoutes.length > 0 ? (\n        <>\n          {!isAddMode && !readOnly && (\n            <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n              New policy\n            </Button>\n          )}\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            readOnly={readOnly}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setActualRoutes((actualRoutes) => {\n                const newRoutes = [...actualRoutes];\n                newRoutes.pop();\n\n                return newRoutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={actualRoutes}\n          />\n        </>\n      ) : (\n        <EmptyArea\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n      margin-bottom: ${theme.spacing(3.5)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useCleanup } from '../../../core/hooks/useCleanup';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : true;\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, loading: resultLoading, error: resultError } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/routes\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { ReactNode, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n  renderExpandedContent?: () => ReactNode;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n\n  // provide these to manually control expanded status\n  onCollapse?: (item: DynamicTableItemProps<T>) => void;\n  onExpand?: (item: DynamicTableItemProps<T>) => void;\n  isExpanded?: (item: DynamicTableItemProps<T>) => boolean;\n\n  renderExpandedContent?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>, index: number) => string;\n  renderPrefixHeader?: () => ReactNode;\n  renderPrefixCell?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n}\n\nexport const DynamicTable = <T extends object>({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  isExpanded,\n  renderExpandedContent,\n  testIdGenerator,\n\n  // render a cell BEFORE expand icon for header/ each row.\n  // currently use by RuleList to render guidelines\n  renderPrefixCell,\n  renderPrefixHeader,\n}: DynamicTableProps<T>) => {\n  if ((onCollapse || onExpand || isExpanded) && !(onCollapse && onExpand && isExpanded)) {\n    throw new Error('either all of onCollapse, onExpand, isExpanded must be provided, or none');\n  }\n  if ((isExpandable || renderExpandedContent) && !(isExpandable && renderExpandedContent)) {\n    throw new Error('either both isExpanded and renderExpandedContent must be provided, or neither');\n  }\n  const styles = useStyles2(getStyles(cols, isExpandable, !!renderPrefixHeader));\n\n  const [expandedIds, setExpandedIds] = useState<Array<DynamicTableItemProps['id']>>([]);\n\n  const toggleExpanded = (item: DynamicTableItemProps<T>) => {\n    if (isExpanded && onCollapse && onExpand) {\n      isExpanded(item) ? onCollapse(item) : onExpand(item);\n    } else {\n      setExpandedIds(\n        expandedIds.includes(item.id) ? expandedIds.filter((itemId) => itemId !== item.id) : [...expandedIds, item.id]\n      );\n    }\n  };\n  return (\n    <div className={styles.container} data-testid=\"dynamic-table\">\n      <div className={styles.row} data-testid=\"header\">\n        {renderPrefixHeader && renderPrefixHeader()}\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => {\n        const isItemExpanded = isExpanded ? isExpanded(item) : expandedIds.includes(item.id);\n        return (\n          <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item, index) ?? 'row'}>\n            {renderPrefixCell && renderPrefixCell(item, index, items)}\n            {isExpandable && (\n              <div className={cx(styles.cell, styles.expandCell)}>\n                <IconButton\n                  size=\"xl\"\n                  data-testid=\"collapse-toggle\"\n                  className={styles.expandButton}\n                  name={isItemExpanded ? 'angle-down' : 'angle-right'}\n                  onClick={() => toggleExpanded(item)}\n                  type=\"button\"\n                />\n              </div>\n            )}\n            {cols.map((col) => (\n              <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n                {col.renderCell(item, index)}\n              </div>\n            ))}\n            {isItemExpanded && renderExpandedContent && (\n              <div className={styles.expandedContentRow} data-testid=\"expanded-content\">\n                {renderExpandedContent(item, index, items)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = <T extends unknown>(\n  cols: Array<DynamicTableColumnProps<T>>,\n  isExpandable: boolean,\n  hasPrefixCell: boolean\n) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  if (hasPrefixCell) {\n    sizes.unshift('0');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n\n        ${hasPrefixCell\n          ? `\n            & > *:first-child {\n              display: none;\n            }\n          `\n          : ''}\n      }\n    `,\n    cell: css`\n      align-items: center;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      overflow: hidden;\n      word-break: break-all;\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n          display: block;\n          color: ${theme.colors.text.primary};\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: ${hasPrefixCell ? 3 : 2};\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n      position: relative;\n\n      ${theme.breakpoints.down('sm')} {\n        grid-column-start: 2;\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n      display: block;\n    `,\n  });\n};\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","defaultValueAndType","timeOptions","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","value","operator","MatcherOperator","intervalToValueAndType","strValue","valueType","parseInterval","undefined","timeOption","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","emptyRoute","id","groupBy","object_matchers","routes","continue","receiver","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","amRouteToFormAmRoute","route","keys","length","group_wait","group_interval","repeat_interval","Math","random","id2route","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","matcher","matcherToMatcherField","parseMatcher","match","match_re","group_by","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","id2ExistingRoute","existing","amRoute","GRAFANA_RULES_SOURCE_NAME","omitBy","isUndefined","stringToSelectableValue","str","label","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","AmRootRouteForm","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","Form","defaultValues","onSubmit","control","errors","setValue","Field","invalid","error","message","className","InputControl","render","field","onChange","Select","menuShouldPortal","options","rules","required","Link","href","makeAMLink","description","MultiSelect","allowCustomValue","onCreateOption","opts","Collapse","collapsible","isOpen","onToggle","cx","fieldState","Input","validate","menuPlacement","Button","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","colors","text","primary","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","getStyles","isReadOnly","isVanillaPrometheusAlertManagerDataSource","titleContainer","title","icon","size","background","EmptyArea","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","useStyles","button","bg2","textSemiWeak","xl","md","sm","AmRoutesExpandedForm","formStyles","overrideGrouping","setOverrideGrouping","overrideTimings","setOverrideTimings","register","FieldArray","fields","append","remove","matchersContainer","index","localPath","HorizontalGroup","align","defaultValue","placeholder","matchersOperator","matcherFieldOptions","IconButton","removeButton","tooltip","addMatcherBtn","Switch","buttonGroup","commonSpacing","nestedPolicies","AmRoutesExpandedRead","readOnly","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","editMode","setEditMode","expandedId","setExpandedId","expandItem","item","collapseItem","cols","renderCell","Matchers","data","matcherFieldToMatcher","renderExpandedContent","splice","items","idCreator","prepareItems","DynamicTable","isExpandable","testIdGenerator","onCollapse","onExpand","isExpanded","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","addNewRoute","withErrorBoundary","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","fetchConfig","fetchAlertManagerConfigAction","result","loading","resultLoading","resultError","initialAsyncRequestState","config","alertmanager_config","rootRoute","enterRootRouteEditMode","exitRootRouteEditMode","unifiedAlerting","saveAMConfig","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","refetch","AlertingPageWrapper","pageId","AlertManagerPicker","Alert","severity","LoadingPlaceholder","break","to","style","border","medium","children","isLoading","navModel","getNavModel","useSelector","navIndex","renderPrefixCell","renderPrefixHeader","Error","expandedIds","setExpandedIds","row","cell","col","isItemExpanded","includes","expandCell","expandButton","filter","itemId","toggleExpanded","bodyCell","expandedContentRow","hasPrefixCell","sizes","unshift","strong","onRemoveLabel","removeLabel","wrapper","labelKey","matcherToOperator","xs","isAlertManagerSource","getAlertManagerDataSources","find","ds","queryParams","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource"],"sourceRoot":""}