{"version":3,"file":"AdminEditOrgPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/AdminEditOrgPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState, OrgUser } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport UsersTable from '../users/UsersTable';\nimport { useAsyncFn } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { UrlQueryValue } from '@grafana/data';\nimport { Form, Field, Input, Button, Legend } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId + '/users');\n};\n\nconst updateOrgUserRole = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nexport const AdminEditOrgPage: FC<Props> = ({ match }) => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const orgId = parseInt(match.params.id, 10);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then((res) => setUsers(res));\n  }, [fetchOrg, fetchOrgUsers]);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, { ...orgState.value, name });\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={async (values: OrgNameDTO) => await updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\">\n                    <Input {...register('orgName', { required: true })} id=\"org-name-input\" />\n                  </Field>\n                  <Button>Update</Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div\n            className={css`\n              margin-top: 20px;\n            `}\n          >\n            <Legend>Organization users</Legend>\n            {!!users.length && (\n              <UsersTable\n                users={users}\n                onRoleChange={(role, orgUser) => {\n                  updateOrgUserRole({ ...orgUser, role }, orgId);\n                  setUsers(\n                    users.map((user) => {\n                      if (orgUser.userId === user.userId) {\n                        return { ...orgUser, role };\n                      }\n                      return user;\n                    })\n                  );\n                  fetchOrgUsers();\n                }}\n                onRemoveUser={(orgUser) => {\n                  removeOrgUser(orgUser, orgId);\n                  setUsers(users.filter((user) => orgUser.userId !== user.userId));\n                  fetchOrgUsers();\n                }}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n","import React, { FC, useState } from 'react';\nimport { AccessControlAction, OrgUser } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\nimport { contextSrv } from 'app/core/core';\n\nexport interface Props {\n  users: OrgUser[];\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, onRoleChange, onRemoveUser } = props;\n  const canUpdateRole = contextSrv.hasPermission(AccessControlAction.OrgUsersRoleUpdate);\n  const canRemoveFromOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersRemove);\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>Login</th>\n          <th>Email</th>\n          <th>Name</th>\n          <th>Seen</th>\n          <th>Role</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                <OrgRolePicker\n                  aria-label=\"Role\"\n                  value={user.role}\n                  disabled={!canUpdateRole}\n                  onChange={(newRole) => onRoleChange(newRole, user)}\n                />\n              </td>\n\n              {canRemoveFromOrg && (\n                <td>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => setShowRemoveModal(user.login)}\n                    icon=\"times\"\n                    aria-label=\"Delete user\"\n                  />\n                  <ConfirmModal\n                    body={`Are you sure you want to delete user ${user.login}?`}\n                    confirmText=\"Delete\"\n                    title=\"Delete\"\n                    onDismiss={() => setShowRemoveModal(false)}\n                    isOpen={user.login === showRemoveModal}\n                    onConfirm={() => {\n                      onRemoveUser(user);\n                    }}\n                  />\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n"],"names":["AdminEditOrgPage","match","navIndex","useSelector","state","navModel","getNavModel","orgId","parseInt","params","id","users","setUsers","useState","orgState","fetchOrg","useAsyncFn","async","getBackendSrv","get","getOrg","fetchOrgUsers","getOrgUsers","useEffect","then","res","Legend","value","Form","defaultValues","orgName","name","onSubmit","put","updateOrgName","values","register","errors","Field","label","invalid","error","Input","required","Button","className","css","length","onRoleChange","role","orgUser","patch","userId","updateOrgUserRole","map","user","onRemoveUser","delete","removeOrgUser","filter","props","canUpdateRole","contextSrv","AccessControlAction","canRemoveFromOrg","showRemoveModal","setShowRemoveModal","style","width","index","src","avatarUrl","alt","title","login","email","lastSeenAtAge","disabled","onChange","newRole","size","variant","onClick","icon","ConfirmModal","body","confirmText","onDismiss","isOpen","onConfirm"],"sourceRoot":""}