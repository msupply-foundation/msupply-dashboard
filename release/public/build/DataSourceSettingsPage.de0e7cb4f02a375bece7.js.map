{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/CloudInfoBox.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","edition","hasValidLicense","config","licenseInfo","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","link","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","pluginCatalogURL","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","async","dispatch","getState","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","err","console","error","initDataSourceSettingsFailed","Error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","statusText","message","errMessage","details","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","uid","byUid","fetch","method","showErrorAlert","toPromise","ok","data","log","parseInt","Number","isNaN","toString","window","location","href","locationUtil","assureBaseUrl","getDataSourceUsingUidOrId","pluginInfo","getPluginSettings","meta","isBackend","DataSourceClass","prototype","DataSourceWithBackend","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","locationService","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","then","settings","datasources","defaultDatasource","init","endsWith","slice","pluginMeta","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","hasLicense","hideFromTabs","caching","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeName","typeLogoUrl","user","secureJsonFields","PluginSettings","PureComponent","constructor","props","super","element","component","scopeProps","onModelChanged","this","onModelChange","ctrl","datasourceMeta","current","cloneDeep","bind","componentDidMount","components","ConfigEditor","loader","getAngularLoader","template","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","React","createElement","onOptionsChange","Input","Switch","LegacyForms","BasicSettings","onDefaultChange","onNameChange","className","aria-label","style","marginRight","tooltip","value","placeholder","onChange","event","target","required","selectors","pages","DataSource","label","checked","ButtonRow","isReadOnly","onDelete","onSubmit","onTest","variant","fill","appSubUrl","disabled","onClick","saveAndTest","PluginStateinfo","state","PluginState","alpha","beta","getPluginStateInfoText","CloudInfoBox","mainDS","extraDS","buildInfo","GrafanaEdition","OpenSource","LocalStorageValueProvider","storageKey","defaultValue","isDismissed","onDismiss","severity","bottomSpacing","onRemove","rel","mapDispatchToProps","setDataSourceName","setIsDefault","cleanUpAction","connector","connect","dataSourceId","match","params","URLSearchParams","search","loadError","testingStatus","nav","getNavModel","navIndex","DataSourceSettingsPage","evt","preventDefault","appEvents","publish","ShowConfirmModalEvent","yesText","onConfirm","confirmDelete","stateSelector","renderIsReadOnlyMessage","renderLoadError","showDelete","msg","isString","Page","Contents","renderConfigPageBody","p","body","query","renderAlertDetails","verboseMessage","whiteSpace","renderSettings","status","alert","isLoading","hasDataSource","getDataSources","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount"],"mappings":"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","file":"DataSourceSettingsPage.de0e7cb4f02a375bece7.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport config from '../../../core/config';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!pageId) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n\n      // have we already loaded the plugin then we can skip the steps below?\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        const { statusText, message: errMessage, details } = err;\n        const message = statusText ? 'HTTP error ' + statusText : errMessage;\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const dataSource = await getDataSourceUsingUidOrId(uid);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: isBackend,\n    };\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\n/**\n * Get data source by uid or id, if old id detected handles redirect\n */\nasync function getDataSourceUsingUidOrId(uid: string): Promise<DataSourceSettings> {\n  // Try first with uid api\n  try {\n    const byUid = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/uid/${uid}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    if (byUid.ok) {\n      return byUid.data;\n    }\n  } catch (err) {\n    console.log('Failed to lookup data source by uid', err);\n  }\n\n  // try lookup by old db id\n  const id = parseInt(uid, 10);\n  if (!Number.isNaN(id)) {\n    const response = await getBackendSrv()\n      .fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/${id}`,\n        showErrorAlert: false,\n      })\n      .toPromise();\n\n    // Not ideal to do a full page reload here but so tricky to handle this\n    // otherwise We can update the location using react router, but need to\n    // fully reload the route as the nav model page index is not matching with\n    // the url in that case. And react router has no way to unmount remount a\n    // route\n    if (response.ok && response.data.id.toString() === uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${response.data.uid}`);\n      return {} as DataSourceSettings; // avoids flashing an error\n    }\n  }\n\n  throw Error('Could not find data source');\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    locationService.push(`/datasources/edit/${result.datasource.uid}`);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource); // by UID not yet supported\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n\n    locationService.push('/datasources');\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init(config.datasources, settings.defaultDatasource);\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'database',\n      id: `datasource-cache-${dataSource.id}`,\n      text: 'Cache',\n      url: `datasources/edit/${dataSource.id}/cache`,\n      hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeName: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import React, { PureComponent } from 'react';\nimport { cloneDeep } from 'lodash';\nimport {\n  DataQuery,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceSettings,\n} from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={(event) => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={(event) => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      <LinkButton variant=\"secondary\" fill=\"outline\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {!isReadOnly && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={isReadOnly}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {isReadOnly && (\n        <Button type=\"submit\" variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = (props) => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return <AlphaNotice state={props.state} text={text} />;\n};\n\nexport default PluginStateinfo;\n","import { DataSourceSettings } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { config } from 'app/core/config';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport const CloudInfoBox: FC<Props> = ({ dataSource }) => {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { isString } from 'lodash';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\n// Types\nimport { StoreState } from 'app/types/';\nimport { DataSourceSettings } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const dataSource = getDataSource(state.dataSources, dataSourceId);\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n  const page = params.get('page');\n\n  const nav = plugin\n    ? getDataSourceNav(buildNavModel(dataSource, plugin), page || 'settings')\n    : getDataSourceLoadingNav('settings');\n\n  const navModel = getNavModel(\n    state.navIndex,\n    page ? `datasource-page-${page}` : `datasource-settings-${dataSourceId}`,\n    nav\n  );\n\n  return {\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    dataSourceId: dataSourceId,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n    navModel,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, dataSourceId } = this.props;\n    initDataSourceSettings(dataSourceId);\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({\n      stateSelector: (state) => state.dataSourceSettings,\n    });\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Are you sure you want to delete this data source?',\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.confirmDelete();\n        },\n      })\n    );\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <Alert aria-label={selectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n        This data source was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this data source.\n      </Alert>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <Button type=\"submit\" variant=\"destructive\" onClick={this.onDelete}>\n                  Delete\n                </Button>\n              )}\n              <LinkButton variant=\"secondary\" href=\"datasources\" fill=\"outline\">\n                Back\n              </LinkButton>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        // Investigate is any plugins using this? We should change this interface\n        return <p.body plugin={plugin} query={{}} />;\n      }\n    }\n\n    return <div>Page not found: {page}</div>;\n  }\n\n  renderAlertDetails() {\n    const { testingStatus } = this.props;\n\n    return (\n      <>\n        {testingStatus?.details?.message}\n        {testingStatus?.details?.verboseMessage ? (\n          <details style={{ whiteSpace: 'pre-wrap' }}>{testingStatus?.details?.verboseMessage}</details>\n        ) : null}\n      </>\n    );\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, plugin, testingStatus } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <CloudInfoBox dataSource={dataSource} />\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={(state) => setIsDefault(state)}\n          onNameChange={(name) => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        {testingStatus?.message && (\n          <div className=\"gf-form-group p-t-2\">\n            <Alert\n              severity={testingStatus.status === 'error' ? 'error' : 'success'}\n              title={testingStatus.message}\n              aria-label={selectors.pages.DataSource.alert}\n            >\n              {testingStatus.details && this.renderAlertDetails()}\n            </Alert>\n          </div>\n        )}\n\n        <ButtonRow\n          onSubmit={(event) => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={(event) => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceSettingsPage);\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}