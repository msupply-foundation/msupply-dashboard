{"version":3,"sources":["webpack:///./node_modules/debounce-promise/dist/index.js","webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/types.ts","webpack:///./public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/components/useShadowedState.ts","webpack:///./public/app/plugins/datasource/influxdb/components/useUniqueId.ts","webpack:///./public/app/plugins/datasource/influxdb/components/constants.ts","webpack:///./public/app/plugins/datasource/influxdb/components/RawInfluxQLEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Seg.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/toSelectableValue.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/unwrap.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/AddButton.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/PartListSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/styles.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/OrderByTimeSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/InputSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts","webpack:///./public/app/plugins/datasource/influxdb/components/queryUtils.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FormatAsSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/SectionLabel.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/SectionFill.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Editor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/InfluxCheatSheet.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/InfluxStartPage.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/plugins/datasource/influxdb/components/QueryEditor.tsx","webpack:///./node_modules/react-use/esm/usePrevious.js"],"names":["getWait","wait","defer","deferred","promise","Promise","resolve","reject","module","exports","fn","arguments","length","undefined","options","lastCallAt","timer","pendingArgs","currentWait","currentTime","Date","getTime","isCold","_len","args","Array","_key","leading","accumulate","call","this","then","result","apply","concat","clearTimeout","push","setTimeout","flush","bind","argsIndex","results","thisDeferred","InfluxSeries","constructor","refId","series","alias","annotation","meta","getTimeSeries","output","i","j","each","columns","tags","map","value","key","seriesName","name","columnName","_getSeriesName","join","datapoints","values","target","index","segments","split","replace","match","g1","g2","group","segIndex","parseInt","isNaN","indexOf","tag","getAnnotations","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","titleColumn","includes","tagsColumn","textColumn","timeEndColumn","data","time","title","timeEnd","flatten","filter","t","text","getTable","table","TableModel","seriesIndex","type","FieldType","keys","reordered","hasOwnProperty","rows","categories","Aggregations","Selectors","Transformations","Predictors","Math","Aliasing","Fields","createPart","part","def","message","QueryPart","register","QueryPartDef","category","groupByTimeFunctions","fieldRenderer","innerExpr","params","replaceAggregationAddStrategy","selectParts","partModel","morePartsAvailable","splice","addTransformationStrategy","addStrategy","query","parts","clone","selectModels","dynamicLookup","defaultParams","renderer","functionRenderer","partCount","suffixRenderer","quote","renderMode","create","getCategories","replaceAggregationAdd","InfluxQueryModel","templateSrv","scopedVars","queryBuilder","groupByParts","policy","resultFormat","orderByTime","groupBy","select","updateProjection","queryPart","updatePersistedParts","hasGroupByTime","find","g","hasFill","addGroupBy","stringParts","typePart","arg","removeGroupByPart","s","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","str","operator","condition","test","getMeasurementAndPolicy","measurement","interpolateQueryStr","variable","defaultFormatFn","multi","includeAll","kbn","regexEscape","render","rawQuery","y","selectText","conditions","groupBySection","fill","limit","slimit","tz","renderAdhocFilters","filters","ResponseParser","parse","influxResults","normalizedQuery","toLowerCase","isValueFirst","res","Set","serie","isArray","addUnique","from","v","add","toString","InfluxQueryBuilder","database","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","reduce","memo","InfluxVersion","samples","label","description","FluxQueryEditor","PureComponent","onFluxQueryChange","props","onChange","onRunQuery","onSampleChange","val","forceUpdate","getSuggestions","sugs","kind","CodeEditorSuggestionItemKind","Property","detail","getTemplateSrv","getVariables","forEach","Text","editorDidMountCallbackHack","editor","layout","helpTooltip","height","language","onBlur","onSave","showMiniMap","showLineNumbers","onEditorDidMount","className","cx","css","icon","variant","href","width","tooltip","InfluxDatasource","DataSourceWithBackend","instanceSettings","super","urls","username","password","basicAuth","withCredentials","interval","responseParser","httpMode","isFlux","url","trim","settingsData","jsonData","timeInterval","version","Flux","annotations","QueryEditor","request","filteredRequest","targets","hide","classicQuery","getQueryDisplayText","filterQuery","applyTemplateVariables","timeFilter","getTimeFilter","cloneDeep","queryTargets","allQueries","_map","__interval","acc","current","of","adhocFilters","getAdhocFilters","_seriesQuery","pipe","seriesList","executedQueryString","influxSeries","preferredVisualisationType","timeSeries","rangeRaw","timezone","dashboard","toPromise","targetContainsTemplate","param","variableExists","interpolateVariablesInQueries","queries","expandedQueries","expandedQuery","datasource","rsp","frameToMetricFindValue","interpolated","resp","getTagKeys","metricFindQuery","getTagValues","range","_influxRequest","q","epoch","serializeParams","encodeURIComponent","testDatasource","requestId","id","uuidv4","dashboardId","panelId","intervalMs","maxDataPoints","dateTime","to","state","LoadingState","Done","console","error","status","first","catch","err","get","method","currentUrl","shift","u","p","db","has","extend","omit","pick","req","precision","inspect","paramSerializer","headers","Authorization","getBackendSrv","fetch","errors","elem","catchError","cancelled","throwError","handleErrors","Number","isInteger","config","statusText","getInfluxTime","date","roundUp","isString","exec","dateMath","valueOf","useShadowedState","outsideVal","currentVal","setCurrentVal","useState","prevOutsideVal","usePrevious","useEffect","useUniqueId","idRefLazy","useRef","uniqueId","RESULT_FORMATS","RawInfluxQLEditor","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","selectElementId","applyDelayedChangesAndRunQuery","aria-label","spellCheck","placeholder","e","currentTarget","htmlFor","inputId","selectClass","minWidth","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","debouncePromise","defaultOptions","autoFocus","isOpen","onCloseMenu","SelSingleLoad","loadState","doLoad","useAsyncFn","isLoading","loading","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","onKeyDown","defaultButtonClass","cursor","Seg","buttonClassName","setOpen","as","onClick","toSelectableValue","FromSection","getPolicyOptions","getMeasurementOptions","async","allPolicies","some","isRegex","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","unwrap","Error","AddButton","onAdd","operatorOptions","condititonOptions","loadConditionOptions","loadOperatorOptions","Tag","onRemove","getTagKeyOptions","getTagValueOptions","op","TagsSection","newT","newTag","newTags","onTagChange","onTagRemove","tagKey","minimalTag","addNewTag","noRightMarginPaddingClass","paddingRight","marginRight","RemovableName","renderMenuItems","renderRemovableNameMenuItems","ariaLabel","openMenu","noHorizMarginPaddingClass","paddingLeft","marginLeft","Part","theme","useTheme2","partClass","useMemo","lineHeight","typography","body","fontSize","getPartClass","isLast","items","Fragment","par","newParams","onParamChange","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","paddingRightClass","OPTIONS","OrderByTimeSection","InputSection","isWide","runExploreQuery","buildRawQuery","queryCopy","FormatAsSection","format","uppercaseClass","textTransform","SectionLabel","isInitial","SectionFill","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","withTemplateVariableOptions","optionsPromise","SectionWrap","initialName","children","Editor","normalizeQuery","selectLists","dynamicSelectPartOptions","Map","item","getFieldKeysForMeasurement","sel","getTagKeysForMeasurementAndTags","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","getAllPolicies","measurementFilter","getAllMeasurementsForTags","m","Object","x","getNewSelectPartOptions","listIndex","newSel","changeSelectPart","model","addNewSelectPart","selectModel","tagKeys","getNewGroupByPartOptions","newGroupBy","changeGroupByPart","addNewGroupByPart","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","confirmText","dismissText","onConfirm","onDismiss","CHEAT_SHEET_ITEMS","InfluxCheatSheet","InfluxStartPage","onClickExample","Select","Input","SecretFormField","LegacyForms","httpModes","versions","InfluxQL","ConfigEditor","maxSeries","onResetPassword","updateDatasourcePluginResetOption","onResetToken","onVersionChanged","selected","onOptionsChange","copy","access","user","renderInflux2x","secureJsonFields","secureJsonData","organization","onUpdateDatasourceJsonDataOption","isConfigured","token","labelWidth","inputWidth","onReset","onUpdateDatasourceSecureJsonDataOption","defaultBucket","renderInflux1x","onUpdateDatasourceOption","defaultValue","onUpdateDatasourceJsonDataOptionSelect","severity","showAccessOptions","dataSourceConfig","defaultUrl","event","setState","updateDatasourcePluginJsonDataOption","isFinite","VariableQueryEditor","onRefresh","InfluxAnnotationsQueryCtrl","templateUrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","display","flexGrow","setAnnotationQueryCtrl","setVariableQueryEditor","setQueryEditorHelp","ref"],"mappings":"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","file":"influxdbPlugin.17511e2bf08b06f121f8.js","sourcesContent":["'use strict';\n\n/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var lastCallAt = void 0;\n  var deferred = void 0;\n  var timer = void 0;\n  var pendingArgs = [];\n  return function debounced() {\n    var currentWait = getWait(wait);\n    var currentTime = new Date().getTime();\n\n    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n\n    lastCallAt = currentTime;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isCold && options.leading) {\n      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {\n        return result[0];\n      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));\n    }\n\n    if (deferred) {\n      clearTimeout(timer);\n    } else {\n      deferred = defer();\n    }\n\n    pendingArgs.push(args);\n    timer = setTimeout(flush.bind(this), currentWait);\n\n    if (options.accumulate) {\n      var argsIndex = pendingArgs.length - 1;\n      return deferred.promise.then(function (results) {\n        return results[argsIndex];\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  function flush() {\n    var thisDeferred = deferred;\n    clearTimeout(timer);\n\n    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);\n\n    pendingArgs = [];\n    deferred = null;\n  }\n};\n\nfunction getWait(wait) {\n  return typeof wait === 'function' ? wait() : wait;\n}\n\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n//# sourceMappingURL=index.js.map","import { each, map, includes, flatten, keys } from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias: any;\n  annotation: any;\n  meta?: QueryResultMeta;\n\n  constructor(options: { series: any; alias?: any; annotation?: any; meta?: QueryResultMeta; refId?: string }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({ target: seriesName, datapoints: datapoints, meta: this.meta, refId: this.refId });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match: any, g1: any, g2: any) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex];\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        j = 0;\n        // Check that the first column is indeed 'time'\n        if (series.columns[0] === 'time') {\n          // Push this now before the tags and with the right type\n          table.columns.push({ text: 'Time', type: FieldType.time });\n          j++;\n        }\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import { map, clone } from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { map, find, filter, indexOf } from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\nimport { InfluxQuery, InfluxQueryTag } from './types';\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: any[];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n  refId?: string;\n\n  /** @ngInject */\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts: any) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s: any) => {\n        return filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate: any) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: any[], variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: any[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { each, isArray } from 'lodash';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n}\n\nfunction addUnique(s: Set<string>, value: string | number) {\n  s.add(value.toString());\n}\n","import { reduce } from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number, or if empty-string\n  if (value === '' || (operator !== '=~' && operator !== '!~' && isNaN(+value))) {\n    value = \"'\" + value + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + kbn.regexEscape(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval: string;\n  httpMode: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n}\n","import React, { PureComponent } from 'react';\nimport { InfluxQuery } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { cx, css } from '@emotion/css';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n} from '@grafana/ui';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../datasource';\n\ntype Props = {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n};\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nexport class FluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query } = this.props;\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from chronograph\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'200px'}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div\n          className={cx(\n            'gf-form-inline',\n            css`\n              margin-top: 6px;\n            `\n          )}\n        >\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n","import { cloneDeep, map as _map, reduce, get, has, extend, omit, pick, isString } from 'lodash';\n\nimport {\n  dateMath,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  DataQueryRequest,\n  DataQueryResponse,\n  dateTime,\n  LoadingState,\n  QueryResultMeta,\n  MetricFindValue,\n  AnnotationQueryRequest,\n  AnnotationEvent,\n  DataQueryError,\n} from '@grafana/data';\nimport { v4 as uuidv4 } from 'uuid';\nimport InfluxSeries from './influx_series';\nimport InfluxQueryModel from './influx_query_model';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxQuery, InfluxOptions, InfluxVersion } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getBackendSrv, DataSourceWithBackend, frameToMetricFindValue } from '@grafana/runtime';\nimport { Observable, throwError, of } from 'rxjs';\nimport { FluxQueryEditor } from './components/FluxQueryEditor';\nimport { catchError, map } from 'rxjs/operators';\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  responseParser: any;\n  httpMode: string;\n  isFlux: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    const settingsData = instanceSettings.jsonData || ({} as InfluxOptions);\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.isFlux = settingsData.version === InfluxVersion.Flux;\n\n    if (this.isFlux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (this.isFlux) {\n      // for not-flux queries we call `this.classicQuery`, and that\n      // handles the is-hidden situation.\n      // for the flux-case, we do the filtering here\n      const filteredRequest = {\n        ...request,\n        targets: request.targets.filter((t) => t.hide !== true),\n      };\n      return super.query(filteredRequest);\n    }\n\n    // Fallback to classic query support\n    return this.classicQuery(request);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    if (this.isFlux) {\n      return query.query;\n    }\n    return new InfluxQueryModel(query).render(false);\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.isFlux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  /**\n   * Only applied on flux queries\n   */\n  applyTemplateVariables(query: InfluxQuery, scopedVars: ScopedVars): Record<string, any> {\n    return {\n      ...query,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars), // The raw query text\n    };\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data: any) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeries[y]);\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<any>): Promise<AnnotationEvent[]> {\n    if (this.isFlux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!options.annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw, timezone: options.dashboard.timezone });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, 'regex');\n\n    return this._seriesQuery(query, options)\n      .toPromise()\n      .then((data: any) => {\n        if (!data || !data.results || !data.results[0]) {\n          throw { message: 'No results in response from InfluxDB' };\n        }\n        return new InfluxSeries({\n          series: data.results[0].series,\n          annotation: options.annotation,\n        }).getAnnotations();\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    for (const group of target.groupBy) {\n      for (const param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (const i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          measurement: this.templateSrv.replace(query.measurement ?? '', scopedVars, 'regex'),\n          policy: this.templateSrv.replace(query.policy ?? '', scopedVars, 'regex'),\n        };\n\n        if (query.rawQuery) {\n          expandedQuery.query = this.templateSrv.replace(query.query ?? '', scopedVars, 'regex');\n        }\n\n        if (query.tags) {\n          expandedQuery.tags = query.tags.map((tag) => {\n            return {\n              ...tag,\n              value: this.templateSrv.replace(tag.value, undefined, 'regex'),\n            };\n          });\n        }\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    if (this.isFlux) {\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        query,\n      };\n      return super\n        .query({\n          ...options, // includes 'range'\n          targets: [target],\n        } as DataQueryRequest)\n        .toPromise()\n        .then((rsp) => {\n          if (rsp.data?.length) {\n            return frameToMetricFindValue(rsp.data[0]);\n          }\n          return [];\n        });\n    }\n\n    const interpolated = this.templateSrv.replace(query, undefined, 'regex');\n\n    return this._seriesQuery(interpolated, options)\n      .toPromise()\n      .then((resp) => {\n        return this.responseParser.parse(query, resp);\n      });\n  }\n\n  getTagKeys(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      [] as string[]\n    ).join('&');\n  }\n\n  testDatasource() {\n    if (this.isFlux) {\n      // TODO: eventually use the real /health endpoint\n      const request: DataQueryRequest<InfluxQuery> = {\n        targets: [{ refId: 'test', query: 'buckets()' }],\n        requestId: `${this.id}-health-${uuidv4()}`,\n        dashboardId: 0,\n        panelId: 0,\n        interval: '1m',\n        intervalMs: 60000,\n        maxDataPoints: 423,\n        range: {\n          from: dateTime(1000),\n          to: dateTime(2000),\n        },\n      } as DataQueryRequest<InfluxQuery>;\n\n      return super\n        .query(request)\n        .toPromise()\n        .then((res: DataQueryResponse) => {\n          if (!res || !res.data || res.state !== LoadingState.Done) {\n            console.error('InfluxDB Error', res);\n            return { status: 'error', message: 'Error reading InfluxDB' };\n          }\n          const first = res.data[0];\n          if (first && first.length) {\n            return { status: 'success', message: `${first.length} buckets found` };\n          }\n          console.error('InfluxDB Error', res);\n          return { status: 'error', message: 'Error reading buckets' };\n        })\n        .catch((err: any) => {\n          console.error('InfluxDB Error', err);\n          return { status: 'error', message: err.message };\n        });\n    }\n\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .toPromise()\n      .then((res: any) => {\n        const error = get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch((err: any) => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: any) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import { useRef } from 'react';\nimport { uniqueId } from 'lodash';\n\nexport function useUniqueId(): string {\n  // we need to lazy-init this ref.\n  // otherwise we would call `uniqueId`\n  // on every render. unfortunately\n  // useRef does not have lazy-init builtin,\n  // like useState does. we do it manually.\n  const idRefLazy = useRef<string | null>(null);\n\n  if (idRefLazy.current == null) {\n    idRefLazy.current = uniqueId();\n  }\n\n  return idRefLazy.current;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { ResultFormat } from '../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import React from 'react';\nimport { TextArea, InlineFormLabel, Input, Select, HorizontalGroup } from '@grafana/ui';\nimport { InfluxQuery } from '../types';\nimport { useShadowedState } from './useShadowedState';\nimport { useUniqueId } from './useUniqueId';\nimport { RESULT_FORMATS, DEFAULT_RESULT_FORMAT } from './constants';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useUniqueId();\n  const selectElementId = useUniqueId();\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <div>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <HorizontalGroup>\n        <InlineFormLabel htmlFor={selectElementId}>Format as</InlineFormLabel>\n        <Select\n          inputId={selectElementId}\n          onChange={(v) => {\n            onChange({ ...query, resultFormat: v.value });\n            onRunQuery();\n          }}\n          value={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          options={RESULT_FORMATS}\n        />\n        <InlineFormLabel htmlFor={aliasElementId}>Alias by</InlineFormLabel>\n        <Input\n          id={aliasElementId}\n          type=\"text\"\n          spellCheck={false}\n          placeholder=\"Naming pattern\"\n          onBlur={applyDelayedChangesAndRunQuery}\n          onChange={(e) => {\n            setCurrentAlias(e.currentTarget.value);\n          }}\n          value={currentAlias ?? ''}\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport debouncePromise from 'debounce-promise';\nimport { cx, css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { useAsyncFn } from 'react-use';\nimport { InlineLabel, Select, AsyncSelect, Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad();\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","import React from 'react';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\nconst DEFAULT_POLICY = 'default';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === 'default')\n      ? allPolicies\n      : [DEFAULT_POLICY, allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { InfluxQueryTag } from '../../types';\nimport { toSelectableValue } from './toSelectableValue';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { AddButton } from './AddButton';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => [\n      { label: '-- remove filter --', value: undefined },\n      ...tags.map(toSelectableValue),\n    ]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { cx, css } from '@emotion/css';\nimport { MenuItem, WithContextMenu, MenuGroup, useTheme2 } from '@grafana/ui';\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\nimport { toSelectableValue } from './toSelectableValue';\nimport { AddButton } from './AddButton';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst renderRemovableNameMenuItems = (onClick: () => void) => {\n  return (\n    <MenuGroup label=\"\" ariaLabel=\"\">\n      <MenuItem label=\"remove\" ariaLabel=\"remove\" onClick={onClick} />\n    </MenuGroup>\n  );\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\nconst RemovableName = ({ name, onRemove }: { name: string; onRemove: () => void }) => {\n  return (\n    <WithContextMenu renderMenuItems={() => renderRemovableNameMenuItems(onRemove)}>\n      {({ openMenu }) => (\n        <button className={cx('gf-form-label', noRightMarginPaddingClass)} onClick={openMenu}>\n          {name}\n        </button>\n      )}\n    </WithContextMenu>\n  );\n};\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange, onRemove }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <RemovableName name={name} onRemove={onRemove} />(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <React.Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </React.Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Part\n          key={index}\n          name={part.name}\n          params={part.params}\n          onRemove={() => {\n            onRemovePart(index);\n          }}\n          onChange={(pars) => {\n            onChange(index, pars);\n          }}\n        />\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { unwrap } from './unwrap';\nimport { Select } from '@grafana/ui';\nimport { paddingRightClass } from './styles';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n};\n\nexport const OrderByTimeSection = ({ value, onChange }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx(isWide ?? false ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from './types';\nimport InfluxDatasource from './datasource';\nimport { InfluxQueryBuilder } from './query_builder';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  return datasource.metricFindQuery(q);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n","import { cloneDeep } from 'lodash';\nimport InfluxQueryModel from '../influx_query_model';\nimport { InfluxQuery } from '../types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n","import { Select } from '@grafana/ui';\nimport { cx } from '@emotion/css';\nimport { ResultFormat } from '../../types';\nimport React from 'react';\nimport { unwrap } from './unwrap';\nimport { RESULT_FORMATS } from '../constants';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import React from 'react';\nimport { cx, css } from '@emotion/css';\n\ntype Props = {\n  name: string;\n  isInitial?: boolean;\n};\n\nconst uppercaseClass = css({\n  textTransform: 'uppercase',\n});\n\nexport const SectionLabel = ({ name, isInitial }: Props) => (\n  <label className={cx('gf-form-label query-keyword', { 'width-7': isInitial ?? false }, uppercaseClass)}>{name}</label>\n);\n","import React from 'react';\n\nexport const SectionFill = () => (\n  <div className=\"gf-form gf-form--grow\">\n    <label className=\"gf-form-label gf-form-label--grow\"></label>\n  </div>\n);\n","import { InfluxQuery, InfluxQueryPart } from '../../types';\nimport { SelectableValue } from '@grafana/data';\nimport { PartParams } from './PartListSection';\nimport InfluxQueryModel from '../../influx_query_model';\nimport { unwrap } from './unwrap';\nimport queryPart from '../../query_part';\nimport { toSelectableValue } from './toSelectableValue';\nimport { QueryPartDef } from '../../../../../core/components/query_part/query_part';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import React, { useMemo } from 'react';\nimport { InfluxQuery, InfluxQueryTag } from '../../types';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../../datasource';\nimport { FromSection } from './FromSection';\nimport { TagsSection } from './TagsSection';\nimport { PartListSection } from './PartListSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { InputSection } from './InputSection';\nimport {\n  getAllMeasurementsForTags,\n  getAllPolicies,\n  getFieldKeysForMeasurement,\n  getTagKeysForMeasurementAndTags,\n  getTagValues,\n} from '../../influxQLMetadataQuery';\nimport {\n  normalizeQuery,\n  addNewSelectPart,\n  removeSelectPart,\n  addNewGroupByPart,\n  removeGroupByPart,\n  changeSelectPart,\n  changeGroupByPart,\n} from '../queryUtils';\nimport { FormatAsSection } from './FormatAsSection';\nimport { SectionLabel } from './SectionLabel';\nimport { SectionFill } from './SectionFill';\nimport { DEFAULT_RESULT_FORMAT } from '../constants';\nimport { getNewSelectPartOptions, getNewGroupByPartOptions, makePartList } from './partListUtils';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nfunction getTemplateVariableOptions() {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map((v) => `/^$${v.name}$/`)\n  );\n}\n\n// helper function to make it easy to call this from the widget-render-code\nfunction withTemplateVariableOptions(optionsPromise: Promise<string[]>): Promise<string[]> {\n  return optionsPromise.then((options) => [...getTemplateVariableOptions(), ...options]);\n}\n\nconst SectionWrap = ({ initialName, children }: { initialName: string; children: React.ReactNode }) => (\n  <div className=\"gf-form-inline\">\n    <SectionLabel name={initialName} isInitial={true} />\n    {children}\n    <SectionFill />\n  </div>\n);\n\nexport const Editor = (props: Props): JSX.Element => {\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined\n            ? getFieldKeysForMeasurement(measurement, policy, datasource)\n            : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getTagKeys = useMemo(() => {\n    return () => getTagKeysForMeasurementAndTags(measurement, policy, query.tags ?? [], datasource);\n  }, [measurement, policy, query.tags, datasource]);\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SectionWrap initialName=\"from\">\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => getAllPolicies(datasource)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              getAllMeasurementsForTags(filter === '' ? undefined : filter, query.tags ?? [], datasource)\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <SectionLabel name=\"where\" />\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getTagKeys}\n          getTagValueOptions={(key: string) =>\n            withTemplateVariableOptions(getTagValues(key, measurement, policy, datasource))\n          }\n        />\n      </SectionWrap>\n      {selectLists.map((sel, index) => (\n        <SectionWrap key={index} initialName={index === 0 ? 'select' : ''}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SectionWrap>\n      ))}\n      <SectionWrap initialName=\"group by\">\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SectionWrap>\n      <SectionWrap initialName=\"timezone\">\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <SectionLabel name=\"order by time\" />\n        <OrderByTimeSection\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SectionWrap>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be appled,\n          as long as you do not edit that query. */}\n      <SectionWrap initialName=\"limit\">\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <SectionLabel name=\"slimit\" />\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SectionWrap>\n      <SectionWrap initialName=\"format as\">\n        <FormatAsSection\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <SectionLabel name=\"alias\" />\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SectionWrap>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will loose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import React from 'react';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nconst InfluxCheatSheet = (props: any) => (\n  <div>\n    <h2>InfluxDB Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item) => (\n      <div className=\"cheat-sheet-item\" key={item.title}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default InfluxCheatSheet;\n","import React, { PureComponent } from 'react';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport InfluxCheatSheet from './InfluxCheatSheet';\n\nexport default class InfluxStartPage extends PureComponent<QueryEditorHelpProps> {\n  render() {\n    return <InfluxCheatSheet onClickExample={this.props.onClickExample} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  onUpdateDatasourceOption,\n  updateDatasourcePluginResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InfoBox, InlineField, InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Input, SecretFormField } = LegacyForms;\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst httpModes = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n] as SelectableValue[];\n\nconst versions = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.  Supported in InfluxDB 1.x',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+ (beta)',\n  },\n] as Array<SelectableValue<InfluxVersion>>;\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Organization</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.token) as boolean}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Database</InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                className=\"width-20\"\n                value={options.database || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'database')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">User</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            Browser access mode in the InfluxDB datasource is deprecated and will be removed in a future release.\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={true}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { PureComponent } from 'react';\nimport InfluxDatasource from '../datasource';\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport InfluxStartPage from './components/InfluxStartPage';\nimport { DataSourcePlugin } from '@grafana/data';\nimport ConfigEditor from './components/ConfigEditor';\nimport VariableQueryEditor from './components/VariableQueryEditor';\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(InfluxAnnotationsQueryCtrl)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { QueryEditorProps } from '@grafana/data';\nimport { InfluxOptions, InfluxQuery } from '../types';\nimport InfluxDatasource from '../datasource';\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { RawInfluxQLEditor } from './RawInfluxQLEditor';\nimport { Editor as VisualInfluxQLEditor } from './VisualInfluxQLEditor/Editor';\nimport { QueryEditorModeSwitcher } from './QueryEditorModeSwitcher';\nimport { buildRawQuery } from './queryUtils';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range, data }: Props): JSX.Element => {\n  if (datasource.isFlux) {\n    return (\n      <div className=\"gf-form-query-content\">\n        <FluxQueryEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={css({ display: 'flex' })}>\n      <div className={css({ flexGrow: 1 })}>\n        {query.rawQuery ? (\n          <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        ) : (\n          <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n        )}\n      </div>\n      <QueryEditorModeSwitcher\n        isRaw={query.rawQuery ?? false}\n        onChange={(value) => {\n          onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n          onRunQuery();\n        }}\n      />\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\nvar usePrevious = function (state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n"],"sourceRoot":""}