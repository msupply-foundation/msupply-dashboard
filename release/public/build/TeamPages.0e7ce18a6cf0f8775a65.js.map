{"version":3,"file":"TeamPages.0e7ce18a6cf0f8775a65.js","mappings":"gpBAkCA,MAAMA,EAA4B,CAChC,CAAEC,MAAO,GAAIC,MAAO,WACpB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,QAASC,MAAO,UAGpB,MAAMC,UAA0BC,EAAAA,cAGrCC,YAAYC,GACVC,MAAMD,GADkB,gDA+CXE,UACb,MAAM,gBAAEC,EAAF,MAAmBC,EAAnB,SAA0BC,GAAaC,KAAKC,YAC5CD,KAAKE,QAAQC,OAAO,CAAEN,gBAAAA,EAAiBC,MAAAA,EAAOC,SAAAA,IACpDK,OAAOC,SAASC,YAlDQ,yBAqDRjB,IAChBW,KAAKO,SAAS,CAAET,MAAOT,OAtDC,4BAyDLU,IACdA,GAGLC,KAAKO,SAAS,CAAER,SAAUA,OA7DF,iCAgEAS,IACxBR,KAAKO,SAAS,CAAEV,gBAAiBW,OAjET,0BAoEPC,QACoB,IAA1BA,EAAUC,aAAyD,KAA1BD,EAAUC,YACrDD,EAAUE,MAEZF,EAAUC,YAAc,MAAQD,EAAUE,QArEjDX,KAAKE,QAAU,IAAIU,EAAAA,EAAmBlB,EAAMmB,aAC5Cb,KAAKC,MAAQ,CACXJ,gBAAiB,EACjBC,MAAO,GACPC,SAAU,GACVe,WAAY,IAIO,0BACrB,MAAMC,QAAcf,KAAKE,QAAQc,OAC3BF,QAAmBG,EAAAA,GAAAA,OAAkB,CAAEC,SAAS,IAkBtD,GAAIH,EAAMlB,gBAAkB,IAAMiB,EAAWK,MAAMC,GAAMA,EAAEC,KAAON,EAAMlB,kBAAkB,CACxF,MAAMyB,QAAgBL,EAAAA,GAAAA,OAAkB,CAAEM,aAAc,CAACR,EAAMlB,mBAC3DyB,GAAWA,EAAQE,OAAS,GAC9BV,EAAWW,KAAKH,EAAQ,IAI5BtB,KAAKO,SAAS,CACZV,gBAAiBkB,EAAMlB,gBACvBC,MAAOiB,EAAMjB,MACbC,SAAUgB,EAAMhB,SAChBe,WAAY,CA5BkC,CAC9CO,GAAI,EACJV,MAAO,UACPe,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,SAAU,EACVrB,YAAa,GACbsB,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,KAAM,GACNC,MAAO,OAc8BtB,KAgCzCuB,SACE,MAAM,MAAEvC,EAAF,SAASC,EAAT,gBAAmBF,EAAnB,WAAoCiB,GAAed,KAAKC,MACxDqC,EAASC,IAEf,OACE,SAAC,EAAAC,KAAD,CAAMC,SAAUzC,KAAK0C,aAArB,SACG,KAAM,MACL,OACE,UAAC,EAAAC,SAAD,CAAUrD,MAAM,cAAhB,WACE,SAAC,EAAAsD,MAAD,CAAOtD,MAAM,WAAb,UACE,SAAC,EAAAuD,iBAAD,CACEC,QAAS1D,EACTC,MAAK,UAAED,EAAO+B,MAAM4B,GAASA,EAAK1D,QAAUS,WAAvC,aAAE,EAA6CT,MACpD2D,SAAUhD,KAAKiD,oBAInB,SAAC,EAAAL,MAAD,CACEtD,OACE,UAAC,EAAA4D,MAAD,CAAOC,QAAQ,wBAAf,WACE,iBAAMC,UAAWd,EAAOe,UAAxB,4BADF,OAEE,SAAC,EAAAC,QAAD,CAASC,QAAQ,+FAAjB,UACE,SAAC,EAAAC,KAAD,CAAMC,KAAK,sBAIjB,aAAW,4CATb,UAWE,SAAC,EAAAC,OAAD,CACEC,kBAAgB,EAChBtE,MAAOyB,EAAWK,MAAMV,GAAcA,EAAUY,KAAOxB,IACvD+D,eAAiBC,GAAMA,EAAExC,GACzByC,eAAgB9D,KAAK+D,gBACrBf,SAAWvC,GACTT,KAAKgE,uBAAuBvD,EAAUY,IAExCyB,QAAShC,EACTmD,YAAY,2BACZC,QAAQ,6BAIZ,SAAC,EAAAtB,MAAD,CAAOtD,MAAM,WAAW,aAAY6E,EAAAA,GAAAA,WAAAA,eAAAA,UAApC,UACE,SAAC,EAAAC,eAAD,CAAgBC,iBAAiB,EAAMhF,MAAOU,EAAUiD,SAAUhD,KAAKsE,sBAnC3E,OAqCE,gBAAKlB,UAAU,qBAAf,UACE,SAAC,EAAAmB,OAAD,CAAQC,QAAQ,UAAU,aAAW,+BAArC,4BAYhB,UAEMjC,GAAYkC,EAAAA,EAAAA,gBAAc,KACvB,CACLpB,UAAWqB,EAAAA,GAAI;;2oBC9KZ,MAAMC,EAA8C,EAAGC,cAAAA,EAAeC,SAAAA,MACrD,IAAlBD,GACK,8BAAGC,IAGL,K,oICRT,MAAM,OAAEnB,GAAWoB,EAAAA,YAQbC,EAAqB,CACzBC,iBADyB,KAEzBC,iBAAgBA,EAAAA,IAGZC,GAAYC,EAAAA,EAAAA,SAAQ,KAAMJ,GAUzB,MAAMK,UAAsB5F,EAAAA,cACjCC,YAAYC,G,UACVC,MAAMD,G,EASa,CAACqD,EAA4CsC,KAChE,MAAMC,EAAavC,EAAK1D,MAClBkG,EAAgC,OAAH,UAC9BF,EAD8B,CAEjCC,WAAYA,IAGdtF,KAAKN,MAAMuF,iBAAiBM,K,EAjBJ,wB,EAAA,M,sFAExBvF,KAAKwF,aAAexF,KAAKwF,aAAaC,KAAKzF,MAC3CA,KAAK0F,kBAAoB1F,KAAK0F,kBAAkBD,KAAKzF,MAGvD2F,eAAeN,GACbrF,KAAKN,MAAMsF,iBAAiBK,EAAOO,QAarCF,kBAAkBL,GAChB,MAAM,gBAAEQ,EAAF,wBAAmBC,GAA4B9F,KAAKN,MACpDL,EAAQ0G,EAAAA,GAAAA,MAA4BC,GAAOA,EAAG3G,QAAUgG,EAAOC,aAErE,OACE,SAACX,EAAD,CAAmBC,cAAeiB,EAAlC,UACE,eAAIzC,UAAU,2BAAd,UACE,iBAAKA,UAAU,UAAf,UACG0C,IACC,SAACpC,EAAD,CACEC,kBAAgB,EAChBsC,cAAc,EACdnD,QAASiD,EAAAA,GACT/C,SAAWD,GAAS/C,KAAKkG,mBAAmBnD,EAAMsC,GAClDjC,UAAU,0CACV/D,MAAOA,KAGTyG,IAA2B,0BAAOzG,EAAMC,eAOpDkG,aAAaW,GACX,OAAKA,GAKH,wBACGA,EAAOC,KAAK9G,IACX,SAAC+G,EAAA,EAAD,CAAsB/G,MAAOA,EAAOgH,YAAY,EAAOC,MAAO,EAAGC,QAAS,QAA3DlH,OANnB,OAAO,mBAYX+C,SACE,MAAM,OAAEgD,EAAF,YAAUoB,EAAV,wBAAuBX,GAA4B9F,KAAKN,MAC9D,OACE,2BACE,eAAI0D,UAAU,sBAAd,UACE,gBACE,aAAa,2BAA0BiC,EAAO5B,QAC9CL,UAAU,uBACVsD,IAAKrB,EAAOsB,eAGhB,wBAAKtB,EAAOuB,SACZ,wBAAKvB,EAAOwB,SACZ,wBAAKxB,EAAO5B,OACXzD,KAAK0F,kBAAkBL,GACvBoB,GAAezG,KAAKwF,aAAaH,EAAOc,SACzC,eAAI/C,UAAU,aAAd,UACE,SAAC,EAAA0D,aAAD,CACE,aAAW,qBACXC,KAAK,KACLC,UAAWlB,EACXmB,UAAW,IAAMjH,KAAK2F,eAAeN,SAlBlCA,EAAOO,SA0BtB,QAAeV,EAAUE,G,iQC1FzB,MAAML,EAAqB,CACzBmC,cADyB,KAEzBC,qBAAoBA,EAAAA,IAGhBjC,GAAYC,EAAAA,EAAAA,UAblB,SAAyBlF,GACvB,MAAO,CACLmH,mBAAmBC,EAAAA,EAAAA,IAAqBpH,EAAMqH,MAC9CzB,gBAAiB0B,EAAAA,GAAAA,gBACjBC,aAAcC,EAAAA,GAAAA,QASyB1C,GAcpC,MAAM2C,UAAoBlI,EAAAA,cAC/BC,YAAYC,GACVC,MAAMD,GADkB,8BAKHL,IACrBW,KAAKN,MAAMyH,qBAAqB9H,MANR,yBAST,KACfW,KAAKO,SAAS,CAAEoH,UAAW3H,KAAKC,MAAM0H,cAVd,yBAaRC,IAChB5H,KAAKO,SAAS,CAAEsH,cAAeD,OAdP,0BAiBRhI,UAChBI,KAAKN,MAAMwH,cAAclH,KAAKC,MAAM4H,cAAexG,IACnDrB,KAAKO,SAAS,CAAEsH,cAAe,UAjB/B7H,KAAKC,MAAQ,CAAE0H,UAAU,EAAOE,cAAe,MAoBjDrC,aAAaW,GACX,OAAKA,GAKH,wBACGA,EAAOC,KAAK9G,IACX,SAAC+G,EAAA,EAAD,CAAsB/G,MAAOA,EAAOgH,YAAY,EAAOC,MAAO,EAAGC,QAAS,QAA3DlH,OANnB,OAAO,mBAYX+C,SACE,MAAM,SAAEsF,GAAa3H,KAAKC,OACpB,kBAAEmH,EAAF,QAAqBU,EAArB,YAA8BrB,EAA9B,gBAA2CZ,EAA3C,aAA4D2B,GAAiBxH,KAAKN,MAClFqI,GAAcC,EAAAA,EAAAA,IAAwB,CAAEF,QAAAA,EAASjC,gBAAAA,EAAiB2B,aAAAA,IAExE,OACE,4BACE,iBAAKpE,UAAU,kBAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAAC,EAAA6E,YAAD,CAAahE,YAAY,iBAAiB5E,MAAO+H,EAAmBpE,SAAUhD,KAAKkI,yBAErF,SAAC,EAAA3D,OAAD,CAAQnB,UAAU,aAAaoD,QAASxG,KAAKmI,eAAgBnB,SAAUW,IAAaI,EAApF,4BAKF,SAACK,EAAA,EAAD,CAAWC,GAAIV,EAAf,UACE,iBAAKvE,UAAU,WAAf,WACE,SAACkF,EAAA,EAAD,CAAa,aAAW,mCAAmC9B,QAASxG,KAAKmI,iBAD3E,OAEE,SAAC,EAAAjF,MAAD,CAAOC,QAAQ,cAAf,+BACA,iBAAKC,UAAU,iBAAf,WACE,SAACmF,EAAA,EAAD,CAAYrE,QAAQ,cAAcsE,WAAYxI,KAAKyI,eAAgBrF,UAAU,iBAC5EpD,KAAKC,MAAM4H,gBACV,SAAC,EAAAtD,OAAD,CAAQ5C,KAAK,SAAS6E,QAASxG,KAAK0I,gBAApC,kCAQR,gBAAKtF,UAAU,mBAAf,UACE,mBAAOA,UAAU,+CAAjB,WACE,4BACE,iCACE,mBADF,OAEE,mCAFF,OAGE,mCAHF,OAIE,mCACA,SAACuB,EAAD,CAAmBC,cAAeiB,EAAlC,gBACE,0CAEDY,IAAW,OAAI,qBAChB,eAAIkC,MAAO,CAAEC,MAAO,cAGxB,2BACGd,GACCA,EAAQ1B,KAAKf,IACX,SAAC,EAAD,CAEEA,OAAQA,EACRoB,YAAaA,EACbZ,gBAAiBA,EACjBC,wBAAyBiC,GAJpB1C,EAAOO,qBAehC,QAAeV,EAAUwC,G,kFC1IzB,MAAM3C,EAAqB,CACzB8D,WAAUA,EAAAA,IA0CZ,GAvCkB1D,EAAAA,EAAAA,SAAQ,KAAMJ,EAuChC,EAhCuC,EAAGuC,KAAAA,EAAMuB,WAAAA,MAE5C,UAAC,EAAAC,cAAD,YACE,SAAC,EAAAnG,SAAD,CAAUrD,MAAM,gBAAhB,UACE,SAAC,EAAAkD,KAAD,CACEuG,cAAa,iBAAOzB,GACpB7E,SAAWuG,IACTH,EAAWG,EAASvF,KAAMuF,EAASnC,QAHvC,SAMG,EAAGoC,SAAAA,MACF,iCACE,SAAC,EAAArG,MAAD,CAAOtD,MAAM,OAAb,UACE,SAAC,EAAA4J,MAAD,iBAAWD,EAAS,OAAQ,CAAEE,UAAU,IAAxC,CAAiD9H,GAAG,mBAGtD,SAAC,EAAAuB,MAAD,CACEtD,MAAM,QACN8J,YAAY,gGAFd,UAIE,SAAC,EAAAF,MAAD,iBAAWD,EAAS,SAApB,CAA8BhF,YAAY,iBAAiBtC,KAAK,QAAQN,GAAG,mBAT/E,OAWE,SAAC,EAAAkD,OAAD,CAAQ5C,KAAK,SAAb,6BAKR,SAACpC,EAAA,EAAD,CAAmBsB,YAAc,SAAQyG,EAAKjG,Y,4MCzCpD,MAAM,MAAE6H,GAAUpE,EAAAA,YAQlB,SAASuE,EAAgBpJ,GACvB,MAAO,CACLqJ,QAAQC,EAAAA,EAAAA,IAActJ,EAAMqH,OAIhC,MAAMvC,GAAqB,CACzByE,eADyB,KAEzBC,aAFyB,KAGzBC,gBAAeA,EAAAA,IAWXC,KAHYxE,EAAAA,EAAAA,SAAQkE,EAAiBtE,IAGpB,sDAEhB,MAAM6E,WAAsBpK,EAAAA,cACjCC,YAAYC,GACVC,MAAMD,GADkB,yBAaT,KACfM,KAAKO,SAAS,CAAEoH,UAAW3H,KAAKC,MAAM0H,cAdd,8BAiBHkC,IACrB7J,KAAKO,SAAS,CAAEuJ,WAAYD,EAAME,OAAO1K,WAlBjB,qBAqBZwK,IACZA,EAAMG,iBACNhK,KAAKN,MAAM+J,aAAazJ,KAAKC,MAAM6J,YACnC9J,KAAKO,SAAS,CAAEoH,UAAU,EAAOmC,WAAY,QAxBrB,wBA2BTG,IACfjK,KAAKN,MAAMgK,gBAAgBO,EAAMC,YA1BjClK,KAAKC,MAAQ,CAAE0H,UAAU,EAAOmC,WAAY,IAG9CK,oBACEnK,KAAKoK,kBAGc,8BACbpK,KAAKN,MAAM8J,iBAqBnBa,kBACE,OAAOrK,KAAKC,MAAM6J,WAAWtI,OAAS,EAGxC8I,YAAYL,GACV,OACE,2BACE,wBAAKA,EAAMC,WACX,eAAIvB,MAAO,CAAEC,MAAO,MAApB,UACE,SAAC,EAAArE,OAAD,CAAQwC,KAAK,KAAKvC,QAAQ,cAAcgC,QAAS,IAAMxG,KAAKuK,cAAcN,GAA1E,gBACE,SAAC,EAAAzG,KAAD,CAAMC,KAAK,iBAJRwG,EAAMC,SAWnB7H,SACE,MAAM,SAAEsF,EAAF,WAAYmC,GAAe9J,KAAKC,MAChCqJ,EAAStJ,KAAKN,MAAM4J,OAE1B,OACE,4BACE,iBAAKlG,UAAU,kBAAf,iBACE,eAAIA,UAAU,mBAAd,kCADF,OAEE,SAAC,EAAAE,QAAD,CAASkH,UAAU,OAAOjH,QAASoG,GAAnC,UACE,SAAC,EAAAnG,KAAD,CAAMJ,UAAU,wCAAwCK,KAAK,uBAHjE,OAKE,gBAAKL,UAAU,6BACdkG,EAAO9H,OAAS,IACf,UAAC,EAAA+C,OAAD,CAAQnB,UAAU,aAAaoD,QAASxG,KAAKmI,eAA7C,iBACE,SAAC,EAAA3E,KAAD,CAAMC,KAAK,UADb,oBAMJ,SAAC2E,EAAA,EAAD,CAAWC,GAAIV,EAAf,UACE,iBAAKvE,UAAU,WAAf,WACE,SAACkF,EAAA,EAAD,CAAa9B,QAASxG,KAAKmI,iBAD7B,OAEE,iDACA,kBAAM/E,UAAU,iBAAiBX,SAAUzC,KAAKyK,WAAhD,WACE,gBAAKrH,UAAU,UAAf,UACE,SAAC8F,EAAD,CACEvH,KAAK,OACLyB,UAAU,yBACV/D,MAAOyK,EACP9G,SAAUhD,KAAK0K,oBACfzG,YAAY,0CAIhB,gBAAKb,UAAU,UAAf,UACE,SAAC,EAAAmB,OAAD,CAAQ5C,KAAK,SAASqF,UAAWhH,KAAKqK,kBAAtC,iCAQW,IAAlBf,EAAO9H,SAAiBmG,IACvB,SAACgD,EAAA,EAAD,CACEnE,QAASxG,KAAKmI,eACdyC,WAAW,YACXjK,MAAM,4CACNkK,YAAY,YACZC,OAAQnB,GACRoB,gBAAgB,aAChBC,WAAW,8CACXC,aAAa,WAIhB3B,EAAO9H,OAAS,IACf,gBAAK4B,UAAU,mBAAf,UACE,mBAAOA,UAAU,+CAAjB,WACE,4BACE,iCACE,gDACA,eAAIuF,MAAO,CAAEC,MAAO,cAGxB,2BAAQU,EAAOlD,KAAK6D,GAAUjK,KAAKsK,YAAYL,gBAS7D,UAAe9E,EAAAA,EAAAA,SAAQkE,EAAiBtE,GAAxC,CAA4D6E,I,OCjIvDsB,G,yOAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,SAAAA,WAAAA,EAAAA,UAAAA,Y,CAAAA,KAAAA,GAAAA,KAyBL,MAAMnG,GAAqB,CACzBoG,SADyB,KAEzBC,gBAAeA,EAAAA,IAGXlG,IAAYC,EAAAA,EAAAA,UAxBlB,SAAyBlF,EAAmBP,GAAiB,MAC3D,MAAM2L,EAASC,SAAS5L,EAAM6L,MAAMC,OAAOnK,GAAI,IACzCoK,EAAQ,UAAG/L,EAAM6L,MAAMC,OAAOE,YAAtB,QAA8B,UACtCC,GAAiBC,EAAAA,GAAAA,GAAkBH,GAKzC,MAAO,CACLI,UALeC,EAAAA,GAAAA,GAAY7L,EAAM8L,SAAW,QAAON,KAAYJ,IAAUM,GAMzEN,OAAQA,EACRI,SAAUA,EACVnE,MAPW0E,EAAAA,EAAAA,IAAQ/L,EAAMqH,KAAM+D,GAQ/BvD,SAPcmE,EAAAA,EAAAA,IAAehM,EAAMqH,MAQnCzB,gBAAiB0B,EAAAA,GAAAA,gBACjBC,aAAcC,EAAAA,GAAAA,QASyB1C,IAIpC,MAAMmH,WAAkB1M,EAAAA,cAC7BC,YAAYC,GACVC,MAAMD,GADkB,yBA4BV,CAACyM,EAAeC,KACzBD,IAAUC,MAIVD,IAAUC,IAIRD,EAAME,sBAAwBD,EAAMC,sBArCnB,oCAwCC,CAACR,EAAoB7D,MACzCA,GAA2B6D,EAASS,MAAQT,EAASS,KAAKzH,UAC7DgH,EAASS,KAAKzH,SACX0H,QAAQC,IAAaxM,KAAKyM,cAAcD,EAAQE,KAAMxB,GAAUyB,WAChEvG,KAAKoG,IACJA,EAAQI,cAAe,KAItBf,KA9CP7L,KAAKC,MAAQ,CACX4M,WAAW,EACXC,cAAevF,EAAAA,GAAAA,YAAAA,YAII,gCACfvH,KAAK+M,YAGE,kBACb,MAAM,SAAE5B,EAAF,OAAYE,GAAWrL,KAAKN,MAClCM,KAAKO,SAAS,CAAEsM,WAAW,IAC3B,MAAMvF,QAAa6D,EAASE,GAG5B,aAFMrL,KAAKN,MAAM0L,kBACjBpL,KAAKO,SAAS,CAAEsM,WAAW,IACpBvF,EAGT0F,iBACE,MAAMC,EAAQ,CAAC,UAAW,WAAY,aAChCC,EAAclN,KAAKN,MAAM+L,SAC/B,OAAO0B,EAAAA,EAAAA,UAASF,EAAOC,GAAeA,EAAcD,EAAM,GA2B5DG,WAAWpF,GACT,MAAM,cAAE8E,GAAkB9M,KAAKC,OACzB,QAAE6H,EAAF,KAAWR,GAAStH,KAAKN,MAG/B,OAFoBM,KAAKgN,kBAGvB,KAAK9B,GAAUyB,QACb,OAAO,SAAC,EAAD,CAAalG,YAAaqG,EAAehF,QAASA,IAE3D,KAAKoD,GAAUmC,SACb,OAAOrF,IAA2B,SAAC,EAAD,CAAcV,KAAMA,IACxD,KAAK4D,GAAUoC,UACb,OAAOtF,GAA2B8E,IAA3B,SAA4C,SAAC,GAAD,MAGvD,OAAO,KAGTzK,SACE,MAAM,KAAEiF,EAAF,SAAQuE,EAAR,QAAkB/D,EAAlB,gBAA2BjC,EAA3B,aAA4C2B,GAAiBxH,KAAKN,MAClEqI,GAAcC,EAAAA,EAAAA,IAAwB,CAAEF,QAAAA,EAASjC,gBAAAA,EAAiB2B,aAAAA,IAExE,OACE,SAAC+F,EAAA,EAAD,CAAM1B,SAAU7L,KAAKwN,yBAAyB3B,EAAU9D,GAAxD,UACE,SAACwF,EAAA,WAAD,CAAeV,UAAW7M,KAAKC,MAAM4M,UAArC,SACGvF,GAAqC,IAA7BmG,OAAOC,KAAKpG,GAAM9F,QAAgBxB,KAAKoN,WAAWrF,QAOrE,SAAe7C,GAAUgH,K,4WC7IlB,SAASyB,IACd,OAAO/N,MAAAA,IACL,MAAMgO,QAAiBC,EAAAA,EAAAA,iBAAgBC,IAAI,oBAAqB,CAAEC,QAAS,IAAMrC,KAAM,IACvFsC,GAASC,EAAAA,EAAAA,IAAYL,EAASM,SAI3B,SAAS/C,EAAS9J,GACvB,OAAOzB,MAAAA,IACL,MAAMgO,QAAiBC,EAAAA,EAAAA,iBAAgBC,IAAK,cAAazM,KACzD2M,GAASG,EAAAA,EAAAA,IAAWP,IACpBI,GAASI,EAAAA,EAAAA,KAAeC,EAAAA,EAAAA,GAAcT,MAInC,SAASxC,IACd,OAAOxL,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,KACvBsG,QAAiBC,EAAAA,EAAAA,iBAAgBC,IAAK,cAAaxG,EAAKjG,cAC9D2M,GAASO,EAAAA,EAAAA,IAAkBX,KAIxB,SAAS1G,EAAc7F,GAC5B,OAAOzB,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,WACvBuG,EAAAA,EAAAA,iBAAgBW,KAAM,cAAalH,EAAKjG,aAAc,CAAEuE,OAAQvE,IACtE2M,EAAS5C,MAIN,SAASpG,EAAiB3D,GAC/B,OAAOzB,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,WACvBuG,EAAAA,EAAAA,iBAAgBY,OAAQ,cAAanH,EAAKjG,cAAcA,KAC9D2M,EAAS5C,MAIN,SAASvC,EAAWpF,EAAcoD,GACvC,OAAOjH,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,WACvBuG,EAAAA,EAAAA,iBAAgBa,IAAK,cAAapH,EAAKjG,KAAM,CAAEoC,KAAAA,EAAMoD,MAAAA,IAC3DmH,EAAS7C,EAAS7D,EAAKjG,MAIpB,SAASmI,IACd,OAAO5J,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,KACvBsG,QAAiBC,EAAAA,EAAAA,iBAAgBC,IAAK,cAAaxG,EAAKjG,aAC9D2M,GAASW,EAAAA,EAAAA,IAAiBf,KAIvB,SAASnE,EAAaS,GAC3B,OAAOtK,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,WACvBuG,EAAAA,EAAAA,iBAAgBW,KAAM,cAAalH,EAAKjG,YAAa,CAAE6I,QAASA,IACtE8D,EAASxE,MAIN,SAASE,EAAgBQ,GAC9B,OAAOtK,MAAOoO,EAAUM,KACtB,MAAMhH,EAAOgH,IAAWhH,KAAKA,WACvBuG,EAAAA,EAAAA,iBAAgBY,OAAQ,cAAanH,EAAKjG,aAAauN,mBAAmB1E,MAChF8D,EAASxE,MAIN,SAASqF,EAAWxN,GACzB,OAAOzB,MAAAA,UACCiO,EAAAA,EAAAA,iBAAgBY,OAAQ,cAAapN,KAC3C2M,EAASL,MAIN,SAAS1I,EAAiBI,GAC/B,OAAOzF,MAAAA,UACCiO,EAAAA,EAAAA,iBAAgBa,IAAK,cAAarJ,EAAOgG,kBAAkBhG,EAAOO,SAAU,CAChFN,WAAYD,EAAOC,aAErB0I,EAAS5C,Q,6JCtFN,SAASiD,EAAc/G,GAC5B,MAAMuE,EAAW,CACfiD,IAAKxH,EAAKX,UACVtF,GAAI,QAAUiG,EAAKjG,GACnB0N,SAAU,8BACVjN,IAAK,GACL4K,KAAMpF,EAAK7D,KACXuL,YAAa,CAAC,CAAErO,MAAO,QAASmB,IAAK,cACrC+C,SAAU,CACR,CACEoK,QAAQ,EACRC,KAAM,YACN7N,GAAK,gBAAeiG,EAAKjG,KACzBqL,KAAM,UACN5K,IAAM,kBAAiBwF,EAAKjG,cAE9B,CACE4N,QAAQ,EACRC,KAAM,gBACN7N,GAAK,iBAAgBiG,EAAKjG,KAC1BqL,KAAM,WACN5K,IAAM,kBAAiBwF,EAAKjG,iBAelC,OAVIkG,EAAAA,GAAAA,YAAAA,YACFsE,EAAShH,SAASpD,KAAK,CACrBwN,QAAQ,EACRC,KAAM,OACN7N,GAAK,kBAAiBiG,EAAKjG,KAC3BqL,KAAM,sBACN5K,IAAM,kBAAiBwF,EAAKjG,iBAIzBwK,EAGF,SAASD,EAAkBH,GAChC,MAAMa,EAAO+B,EAAc,CACzB1H,UAAW,8BACXtF,GAAI,EACJoC,KAAM,UACNoD,MAAO,UACPsI,YAAa,EACb7J,WAAY8J,EAAAA,GAAAA,SAGd,IAAIC,EAGJ,IAAK,MAAMC,KAAShD,EAAKzH,SACvB,GAAIyK,EAAMjO,GAAIkO,QAAQ9D,GAAY,EAAG,CACnC6D,EAAML,QAAS,EACfI,EAAOC,EACP,MAIJ,MAAO,CACLhD,KAAMA,EACN+C,KAAMA,K,4LC/DH,MAAMG,EAAkBvP,GAAsBA,EAAMwP,YAC9CpI,EAAwBpH,GAAqBA,EAAMmH,kBACnDmC,EAAiBtJ,GAAqBA,EAAMqJ,OAC5CoG,EAAiBzP,GAAsBA,EAAMiO,MAAM1M,OAEnDwK,EAAU,CAAC/L,EAAkB0P,IACpC1P,EAAMqH,KAAKjG,KAAOiK,SAASqE,EAAe,IACrC1P,EAAMqH,KAGR,KAGIsI,EAAY3P,IACvB,MAAM4P,EAAQC,OAAO7P,EAAMwP,YAAa,KAExC,OAAOxP,EAAMiO,MAAM3B,QAAQjF,GAClBuI,EAAME,KAAKzI,EAAK7D,SAIdwI,EAAkBhM,IAC7B,MAAM4P,EAAQC,OAAO7P,EAAMmH,kBAAmB,KAE9C,OAAOnH,EAAM6H,QAAQyE,QAAQlH,GACpBwK,EAAME,KAAK1K,EAAOuB,QAAUiJ,EAAME,KAAK1K,EAAOwB,QAAUgJ,EAAME,KAAK1K,EAAO5B,SAUxEuE,EAA2BT,IACtC,MAAM,QAAEO,EAAF,aAAWN,EAAX,gBAAyB3B,GAAoB0B,EAC7CyI,EAAgBlI,EAAQ3G,MAAM8O,GAAMA,EAAErK,SAAW4B,EAAanG,KAC9DiE,EAAa0K,EAAgBA,EAAc1K,WAAa8J,EAAAA,GAAAA,OAE9D,OAAOc,EAAsB,CAAE5K,WAAAA,EAAYkC,aAAAA,EAAc3B,gBAAAA,KAS9CqK,EAAyB3I,IACpC,MAAM,WAAEjC,EAAF,aAAckC,EAAd,gBAA4B3B,GAAoB0B,EAChD4I,EAAU3I,EAAa4I,gBAAkB5I,EAAa6I,UAAYC,EAAAA,GAAAA,MAClEC,EAAkBjL,IAAe8J,EAAAA,GAAAA,MAGvC,OAFgCe,GAAWI,IAER1K","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding the dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                aria-label=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                menuShouldPortal\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={(item) => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            aria-label={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label=\"Remove team member\"\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, OrgUser } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { Team } from 'app/types';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"Name\">\n                <Input {...register('name', { required: true })} id=\"name-input\" />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n              >\n                <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n              </Field>\n              <Button type=\"submit\">Update</Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon, Button } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { StoreState, TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => this.onRemoveGroup(group)}>\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <Button type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  Add group\n                </Button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"users-alt\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { includes } from 'lodash';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { StoreState } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams> {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const pageName = props.match.params.page ?? 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(TeamPages);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'users-alt',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'sync',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["themes","value","label","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","id","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","styles","getStyles","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Tooltip","content","Icon","name","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","Button","variant","stylesFactory","css","WithFeatureToggle","featureToggle","children","LegacyForms","mapDispatchToProps","removeTeamMember","updateTeamMember","connector","connect","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","onPermissionChange","labels","map","TagBadge","removeIcon","count","onClick","syncEnabled","src","avatarUrl","login","email","DeleteButton","size","disabled","onConfirm","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","team","config","signedInUser","contextSrv","TeamMembers","isAdding","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","onToggleAdding","SlideDown","in","CloseButton","UserPicker","onSelected","onUserSelected","onAddUserToTeam","style","width","updateTeam","VerticalGroup","defaultValues","formTeam","register","Input","required","description","mapStateToProps","groups","getTeamGroups","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","TeamGroupSync","event","newGroupId","target","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","onRemoveGroup","placement","onAddGroup","onNewGroupIdChanged","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","PageTypes","loadTeam","loadTeamMembers","teamId","parseInt","match","params","pageName","page","teamLoadingNav","getTeamLoadingNav","navModel","getNavModel","navIndex","getTeam","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","main","filter","navItem","textsAreEqual","text","Members","hideFromTabs","isLoading","isSyncEnabled","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","Settings","GroupSync","Page","hideTabsFromNonTeamAdmin","Object","keys","loadTeams","response","getBackendSrv","get","perpage","dispatch","teamsLoaded","teams","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","img","subTitle","breadcrumbs","active","icon","memberCount","TeamPermissionLevel","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}