{"version":3,"file":"prom-query-field.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./node_modules/react-use/esm/useLatest.js","webpack://grafana/./node_modules/monaco-promql/promql/promql.contribution.js","webpack://grafana/./node_modules/lezer-tree/dist/tree.es.js","webpack://grafana/./node_modules/lezer/dist/index.es.js","webpack://grafana/./node_modules/lezer-promql/index.es.js","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/util.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/intent.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/completions.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/index.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryField.tsx"],"sourcesContent":["import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","// The MIT License (MIT)\n//\n// Copyright (c) Celian Garcia and Augustin Husson @ Amadeus IT Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n'use strict';\n// noinspection JSUnusedGlobalSymbols\nexport var promLanguageDefinition = {\n    id: 'promql',\n    extensions: ['.promql'],\n    aliases: ['Prometheus', 'prometheus', 'prom', 'Prom', 'promql', 'Promql', 'promQL', 'PromQL'],\n    mimetypes: [],\n    loader: function () { return import('./promql'); } // eslint-disable-line @typescript-eslint/explicit-function-return-type\n};\n","/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nconst CachedNode = new WeakMap();\n/// Each [node type](#tree.NodeType) can have metadata associated with\n/// it in props. Instances of this class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type. You can optionally pass a\n    /// `deserialize` function.\n    constructor({ deserialize } = {}) {\n        this.id = nextPropID++;\n        this.deserialize = deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// Create a string-valued node prop whose deserialize function is\n    /// the identity function.\n    static string() { return new NodeProp({ deserialize: str => str }); }\n    /// Create a number-valued node prop whose deserialize function is\n    /// just `Number`.\n    static number() { return new NodeProp({ deserialize: Number }); }\n    /// Creates a boolean-valued node prop whose deserialize function\n    /// returns true for any input.\n    static flag() { return new NodeProp({ deserialize: () => true }); }\n    /// Store a value for this prop in the given object. This can be\n    /// useful when building up a prop object to pass to the\n    /// [`NodeType`](#tree.NodeType) constructor. Returns its first\n    /// argument.\n    set(propObj, value) {\n        propObj[this.id] = value;\n        return propObj;\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#tree.NodeSet.extend) or\n    /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop\n    /// values for each node type in the set. Takes a [match\n    /// object](#tree.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src)\n                    src[0].set(props, src[1]);\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#tree.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#tree.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a number array. Each parser\n/// [has](#lezer.Parser.nodeSet) a node set, and [tree\n/// buffers](#tree.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536)\n/// node types in it, so that the ids fit into 16-bit typed array\n/// slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#tree.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    add[0].set(newProps, add[1]);\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the `TreeCursor` interface instead, which provides a view on\n/// some part of this data structure, and can be used to move around\n/// to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. You usually want to go through\n    /// [`Tree.build`](#tree.Tree^build) instead.\n    constructor(type, \n    /// The tree's child nodes. Children small enough to fit in a\n    /// `TreeBuffer will be represented as such, other children can be\n    /// further `Tree` instances with their own internal structure.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n    }\n    /// @internal\n    toString() {\n        let children = this.children.map(c => c.toString()).join();\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When\n    /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)\n    /// to the given position and side.\n    cursor(pos, side = 0) {\n        let scope = (pos != null && CachedNode.get(this)) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        if (pos != null) {\n            cursor.moveTo(pos, side);\n            CachedNode.set(this, cursor._tree);\n        }\n        return cursor;\n    }\n    /// Get a [tree cursor](#tree.TreeCursor) that, unlike regular\n    /// cursors, doesn't skip [anonymous](#tree.NodeType.isAnonymous)\n    /// nodes.\n    fullCursor() {\n        return new TreeCursor(this.topNode, true);\n    }\n    /// Get a [syntax node](#tree.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#tree.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        return this.cursor(pos, side).node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, the given node\n    /// will not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor();;) {\n            let mustLeave = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to) !== false)) {\n                if (c.firstChild())\n                    continue;\n                if (!c.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(c.type, c.from, c.to);\n                mustLeave = c.type.isAnonymous;\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Balance the direct children of this tree.\n    balance(maxBufferLength = DefaultBufferLength) {\n        return this.children.length <= BalanceBranchFactor ? this\n            : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length, 0);\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\n// For trees that need a context hash attached, we're using this\n// kludge which assigns an extra property directly after\n// initialization (creating a single new object shape).\nfunction withHash(tree, hash) {\n    if (hash)\n        tree.contextHash = hash;\n    return tree;\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer @internal\n    constructor(\n    /// @internal\n    buffer, \n    // The total length of the group of nodes in the buffer.\n    length, \n    /// @internal\n    set, type = NodeType.none) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n        this.type = type;\n    }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, after) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (after != -100000000 /* None */) {\n                let start = buffer[i + 1], end = buffer[i + 2];\n                if (dir > 0) {\n                    if (end > after)\n                        pick = i;\n                    if (end > after)\n                        break;\n                }\n                else {\n                    if (start < after)\n                        pick = i;\n                    if (end >= after)\n                        break;\n                }\n            }\n            else {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n}\nclass TreeNode {\n    constructor(node, from, index, _parent) {\n        this.node = node;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this.node.type; }\n    get name() { return this.node.type.name; }\n    get to() { return this.from + this.node.length; }\n    nextChild(i, dir, after, full = false) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    let index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if (full || (!next.type.isAnonymous || hasChild(next))) {\n                    let inner = new TreeNode(next, start, i, parent);\n                    return full || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);\n                }\n            }\n            if (full || !parent.type.isAnonymous)\n                return null;\n            i = parent.index + dir;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, -100000000 /* None */); }\n    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos); }\n    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos); }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;\n    }\n    get prevSibling() {\n        return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;\n    }\n    get cursor() { return new TreeCursor(this); }\n    resolve(pos, side = 0) {\n        return this.cursor.moveTo(pos, side).node;\n    }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this.node.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor, result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, after) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, -100000000 /* None */); }\n    get lastChild() { return this.child(-1, -100000000 /* None */); }\n    childAfter(pos) { return this.child(1, pos); }\n    childBefore(pos) { return this.child(-1, pos); }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));\n    }\n    get cursor() { return new TreeCursor(this); }\n    resolve(pos, side = 0) {\n        return this.cursor.moveTo(pos, side).node;\n    }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, full = false) {\n        this.full = full;\n        this.buffer = null;\n        this.stack = [];\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enter(dir, after) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, after, this.full));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enter(1, -100000000 /* None */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enter(-1, -100000000 /* None */); }\n    /// Move the cursor to the first child that starts at or after `pos`.\n    childAfter(pos) { return this.enter(1, pos); }\n    /// Move to the last child that ends at or before `pos`.\n    childBefore(pos) { return this.enter(-1, pos); }\n    /// Move the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode(this.full ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = this.full ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree._parent.nextChild(this._tree.index + dir, dir, -100000000 /* None */, this.full));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */, this.full)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n                let child = parent.node.children[i];\n                if (this.full || !child.type.isAnonymous || child instanceof TreeBuffer || hasChild(child))\n                    return false;\n            }\n        }\n        return true;\n    }\n    move(dir) {\n        if (this.enter(dir, -100000000 /* None */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty, its next sibling or the next sibling of\n    /// the first parent node that has one.\n    next() { return this.move(1); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by ist last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev() { return this.move(-1); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        for (;;) {\n            if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))\n                break;\n            if (this.from == this.to ||\n                (side < 1 ? this.from >= pos : this.from > pos) ||\n                (side > -1 ? this.to <= pos : this.to < pos)) {\n                this.parent();\n                break;\n            }\n        }\n        return this;\n    }\n    /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#tree.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#tree.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree.node;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => !ch.type.isAnonymous || ch instanceof TreeBuffer || hasChild(ch));\n}\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\nconst BalanceBranchFactor = 8;\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, topID = 0, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let startPos = start - parentStart;\n        if (size < 0) {\n            if (size == -1) { // Reused node\n                children.push(reused[id]);\n                positions.push(startPos);\n            }\n            else { // Context change\n                contextHash = id;\n            }\n            cursor.next();\n            return;\n        }\n        let type = types[id], node, buffer;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index, inRepeat);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet, inRepeat < 0 ? NodeType.none : types[inRepeat]);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            while (cursor.pos > endPos) {\n                if (cursor.id == localInRepeat)\n                    cursor.next();\n                else\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n            }\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor)\n                node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start, contextHash);\n            else\n                node = withHash(new Tree(type, localChildren, localPositions, end - start), contextHash);\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let nodeSize = fork.size, startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0)\n                    break scan;\n                if (fork.id >= minRepeatType)\n                    localSkipped += 4;\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index, inRepeat) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (id == inRepeat)\n            return index;\n        let startIndex = index;\n        if (size > 4) {\n            let endPos = cursor.pos - (size - 4);\n            while (cursor.pos > endPos)\n                index = copyToBuffer(bufferStart, buffer, index, inRepeat);\n        }\n        if (id < minRepeatType) { // Don't copy repeat nodes into buffers\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[topID], children.reverse(), positions.reverse(), length);\n}\nfunction balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length, contextHash) {\n    let localChildren = [], localPositions = [];\n    if (length <= maxBufferLength) {\n        for (let i = from; i < to; i++) {\n            localChildren.push(children[i]);\n            localPositions.push(positions[i] - start);\n        }\n    }\n    else {\n        let maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i];\n            i++;\n            for (; i < to; i++) {\n                let nextEnd = positions[i] + children[i].length;\n                if (nextEnd - groupStart > maxChild)\n                    break;\n            }\n            if (i == groupFrom + 1) {\n                let only = children[groupFrom];\n                if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse\n                    for (let j = 0; j < only.children.length; j++) {\n                        localChildren.push(only.children[j]);\n                        localPositions.push(only.positions[j] + groupStart - start);\n                    }\n                    continue;\n                }\n                localChildren.push(only);\n            }\n            else if (i == groupFrom + 1) {\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart, contextHash);\n                if (innerType != NodeType.none && !containsType(inner.children, innerType))\n                    inner = withHash(new Tree(NodeType.none, inner.children, inner.positions, inner.length), contextHash);\n                localChildren.push(inner);\n            }\n            localPositions.push(groupStart - start);\n        }\n    }\n    return withHash(new Tree(outerType, localChildren, localPositions, length), contextHash);\n}\nfunction containsType(nodes, type) {\n    for (let elt of nodes)\n        if (elt.type == type)\n            return true;\n    return false;\n}\n/// Tree fragments are used during [incremental\n/// parsing](#lezer.ParseOptions.fragments) to track parts of old\n/// trees that can be reused in a new parse. An array of fragments is\n/// used to track regions of an old tree whose nodes might be reused\n/// in new parses. Use the static\n/// [`applyChanges`](#tree.TreeFragment^applyChanges) method to update\n/// fragments for document changes.\nclass TreeFragment {\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, open) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = open;\n    }\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        let cI = 0, pos = 0, off = 0;\n        for (;;) {\n            let nextC = cI < changes.length ? changes[cI++] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null :\n                            new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, (cI > 0 ? 1 /* Start */ : 0) | (nextC ? 2 /* End */ : 0));\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the token at its\n    /// end is not included in [`safeTo`](#tree.TreeFragment.safeTo).\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, partial ? 2 /* End */ : 0)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n}\n// Creates an `Input` that is backed by a single, flat string.\nfunction stringInput(input) { return new StringInput(input); }\nclass StringInput {\n    constructor(string, length = string.length) {\n        this.string = string;\n        this.length = length;\n    }\n    get(pos) {\n        return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);\n    }\n    lineAfter(pos) {\n        if (pos < 0)\n            return \"\";\n        let end = this.string.indexOf(\"\\n\", pos);\n        return this.string.slice(pos, end < 0 ? this.length : Math.min(end, this.length));\n    }\n    read(from, to) { return this.string.slice(from, Math.min(this.length, to)); }\n    clip(at) { return new StringInput(this.string, at); }\n}\n\nexport { DefaultBufferLength, NodeProp, NodeSet, NodeType, Tree, TreeBuffer, TreeCursor, TreeFragment, stringInput };\n//# sourceMappingURL=tree.es.js.map\n","import { DefaultBufferLength, NodeSet, NodeType, stringInput, Tree, TreeBuffer } from 'lezer-tree';\nexport { NodeProp, NodeSet, NodeType, Tree, TreeCursor } from 'lezer-tree';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// A the parse that this stack is part of @internal\n    p, \n    /// Holds state, pos, value stack pos (15 bits array index, 15 bits\n    /// buffer index) triplets for all but the top state\n    /// @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null);\n    }\n    /// The stack's current [context](#lezer.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            this.reduceContext(type);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let start = this.pos, nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n            this.shiftContext(next);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, this.pos, nextEnd, 4);\n            this.pos = nextEnd;\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt node into the buffer. This may be a reused node or\n    // the result of running a nested parser.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 200 /* Token */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.top, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    /// Find the start position of the rule that is currently being parsed.\n    get ruleStart() {\n        for (let state = this.state, base = this.stack.length;;) {\n            let force = this.p.parser.stateSlot(state, 5 /* ForcedReduce */);\n            if (!(force & 65536 /* ReduceFlag */))\n                return 0;\n            base -= 3 * (force >> 19 /* ReduceDepthShift */);\n            if ((force & 65535 /* ValueMask */) < this.p.parser.minRepeatTerm)\n                return this.stack[base + 1];\n            state = this.stack[base];\n        }\n    }\n    /// Find the start position of an instance of any of the given term\n    /// types, or return `null` when none of them are found.\n    ///\n    /// **Note:** this is only reliable when there is at least some\n    /// state that unambiguously matches the given rule on the stack.\n    /// I.e. if you have a grammar like this, where the difference\n    /// between `a` and `b` is only apparent at the third token:\n    ///\n    ///     a { b | c }\n    ///     b { \"x\" \"y\" \"x\" }\n    ///     c { \"x\" \"y\" \"z\" }\n    ///\n    /// Then a parse state after `\"x\"` will not reliably tell you that\n    /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check\n    /// for either of those two rules (assuming that `a` isn't part of\n    /// some rule that includes other things starting with `\"x\"`).\n    ///\n    /// When `before` is given, this keeps scanning up the stack until\n    /// it finds a match that starts before that position.\n    ///\n    /// Note that you have to be careful when using this in tokenizers,\n    /// since it's relatively easy to introduce data dependencies that\n    /// break incremental parsing by using this method.\n    startOf(types, before) {\n        let state = this.state, frame = this.stack.length, { parser } = this.p;\n        for (;;) {\n            let force = parser.stateSlot(state, 5 /* ForcedReduce */);\n            let depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;\n            if (types.indexOf(term) > -1) {\n                let base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];\n                if (before == null || before > pos)\n                    return pos;\n            }\n            if (frame == 0)\n                return null;\n            if (depth == 0) {\n                frame -= 3;\n                state = this.stack[frame];\n            }\n            else {\n                frame -= 3 * (depth - 1);\n                state = parser.getGoto(this.stack[frame - 3], term, true);\n            }\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.pushState(s, this.pos);\n            stack.shiftContext(nextStates[i]);\n            stack.score -= 200 /* Token */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        if (!this.p.parser.validAction(this.state, reduce)) {\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this));\n    }\n    reduceContext(term) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this));\n    }\n    /// @internal\n    emitContext() {\n        let cx = this.curContext;\n        if (!cx.tracker.strict)\n            return;\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -2)\n            this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.hash(context);\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Token\"] = 200] = \"Token\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(stack) {\n        this.stack = stack;\n        this.top = stack.state;\n        this.rest = stack.stack;\n        this.offset = this.rest.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.rest == this.stack.stack)\n                this.rest = this.rest.slice();\n            this.rest.push(this.top, 0, 0);\n            this.offset += 3;\n        }\n        else {\n            this.offset -= (depth - 1) * 3;\n        }\n        let goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true);\n        this.top = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack) {\n        return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n/// Tokenizers write the tokens they read into instances of this class.\nclass Token {\n    constructor() {\n        /// The start of the token. This is set by the parser, and should not\n        /// be mutated by the tokenizer.\n        this.start = -1;\n        /// This starts at -1, and should be updated to a term id when a\n        /// matching token is found.\n        this.value = -1;\n        /// When setting `.value`, you should also set `.end` to the end\n        /// position of the token. (You'll usually want to use the `accept`\n        /// method.)\n        this.end = -1;\n    }\n    /// Accept a token, setting `value` and `end` to the given values.\n    accept(value, end) {\n        this.value = value;\n        this.end = end;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, token, stack) { readToken(this.data, input, token, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// Exports that are used for `@external tokens` in the grammar should\n/// export an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream and a token object,\n    /// [fills](#lezer.Token.accept) the token object if it recognizes a\n    /// token. `token.start` should be used as the start position to\n    /// scan from.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, token, stack, group) {\n    let state = 0, groupMask = 1 << group, dialect = stack.p.parser.dialect;\n    scan: for (let pos = token.start;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {\n                    token.accept(term, pos);\n                    break;\n                }\n            }\n        let next = input.get(pos++);\n        // Do a binary search on the state's edges\n        for (let low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        this.fragments = fragments;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            else if (start == pos && start + next.length <= this.safeTo) {\n                return start == pos && start >= this.safeFrom ? next : null;\n            }\n            if (next instanceof TreeBuffer) {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n            else {\n                this.index[last]++;\n                if (start + next.length >= pos) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n        }\n    }\n}\nclass CachedToken extends Token {\n    constructor() {\n        super(...arguments);\n        this.extended = -1;\n        this.mask = 0;\n        this.context = 0;\n    }\n    clear(start) {\n        this.start = start;\n        this.value = this.extended = -1;\n    }\n}\nconst dummyToken = new Token;\nclass TokenCache {\n    constructor(parser) {\n        this.tokens = [];\n        this.mainToken = dummyToken;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack, input) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack, input);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (!main) {\n            main = dummyToken;\n            main.start = stack.pos;\n            if (stack.pos == input.length)\n                main.accept(stack.p.parser.eofTerm, stack.pos);\n            else\n                main.accept(0 /* Err */, stack.pos + 1);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    updateCachedToken(token, tokenizer, stack, input) {\n        token.clear(stack.pos);\n        tokenizer.token(input, token, stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](input.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else if (stack.pos == input.length) {\n            token.accept(stack.p.parser.eofTerm, stack.pos);\n        }\n        else {\n            token.accept(0 /* Err */, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 1), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    Rec[Rec[\"MinBufferLengthPrune\"] = 200] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n})(Rec || (Rec = {}));\n/// A parse context can be used for step-by-step parsing. After\n/// creating it, you repeatedly call `.advance()` until it returns a\n/// tree to indicate it has reached the end of the parse.\nclass Parse {\n    constructor(parser, input, startPos, context) {\n        this.parser = parser;\n        this.input = input;\n        this.startPos = startPos;\n        this.context = context;\n        // The position to which the parse has advanced.\n        this.pos = 0;\n        this.recovering = 0;\n        this.nextStackID = 0x2654;\n        this.nested = null;\n        this.nestEnd = 0;\n        this.nestWrap = null;\n        this.reused = [];\n        this.tokens = new TokenCache(parser);\n        this.topTerm = parser.top[1];\n        this.stacks = [Stack.start(this, parser.top[0], this.startPos)];\n        let fragments = context === null || context === void 0 ? void 0 : context.fragments;\n        this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        if (this.nested) {\n            let result = this.nested.advance();\n            this.pos = this.nested.pos;\n            if (result) {\n                this.finishNested(this.stacks[0], result);\n                this.nested = null;\n            }\n            return null;\n        }\n        let stacks = this.stacks, pos = this.pos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        let maybeNest;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], nest;\n            for (;;) {\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (nest = this.checkNest(stack)) {\n                    if (!maybeNest || maybeNest.stack.score < stack.score)\n                        maybeNest = nest;\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.mainToken;\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (maybeNest) {\n            this.startNested(maybeNest);\n            return null;\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + this.parser.getName(this.tokens.mainToken.value));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 200 /* MinBufferLengthPrune */ && other.buffer.length > 200 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.pos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.pos)\n                this.pos = newStacks[i].pos;\n        return null;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { input, parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.contextHash || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        let actions = this.tokens.getActions(stack, input);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            let nest = this.checkNest(stack);\n            if (nest)\n                return nest;\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        let maybeNest;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done) {\n                    if (done !== true)\n                        maybeNest = done;\n                    continue;\n                }\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done) {\n                    if (done !== true)\n                        maybeNest = done;\n                    break;\n                }\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.input.length > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        if (finished)\n            return finished;\n        if (maybeNest)\n            for (let s of this.stacks)\n                if (s.score > maybeNest.stack.score) {\n                    maybeNest = undefined;\n                    break;\n                }\n        if (maybeNest)\n            this.startNested(maybeNest);\n        return null;\n    }\n    forceFinish() {\n        let stack = this.stacks[0].split();\n        if (this.nested)\n            this.finishNested(stack, this.nested.forceFinish());\n        return this.stackToTree(stack.forceAll());\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack, pos = stack.pos) {\n        if (this.parser.context)\n            stack.emitContext();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.startPos,\n            length: pos - this.startPos,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    checkNest(stack) {\n        let info = this.parser.findNested(stack.state);\n        if (!info)\n            return null;\n        let spec = info.value;\n        if (typeof spec == \"function\")\n            spec = spec(this.input, stack);\n        return spec ? { stack, info, spec } : null;\n    }\n    startNested(nest) {\n        let { stack, info, spec } = nest;\n        this.stacks = [stack];\n        this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd);\n        this.nestWrap = typeof spec.wrapType == \"number\" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null;\n        if (spec.startParse) {\n            this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context);\n        }\n        else {\n            this.finishNested(stack);\n        }\n    }\n    scanForNestEnd(stack, endToken, filter) {\n        for (let pos = stack.pos; pos < this.input.length; pos++) {\n            dummyToken.start = pos;\n            dummyToken.value = -1;\n            endToken.token(this.input, dummyToken, stack);\n            if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end))))\n                return pos;\n        }\n        return this.input.length;\n    }\n    finishNested(stack, tree) {\n        if (this.nestWrap)\n            tree = new Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos);\n        else if (!tree)\n            tree = new Tree(NodeType.none, [], [], this.nestEnd - stack.pos);\n        let info = this.parser.findNested(stack.state);\n        stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true));\n        if (verbose)\n            console.log(this.stackID(stack) + ` (via unnest)`);\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\nclass ContextTracker {\n    /// The export used in a `@context` declaration should be of this\n    /// type.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash;\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass Parser {\n    /// @internal\n    constructor(spec) {\n        /// @internal\n        this.bufferLength = DefaultBufferLength;\n        /// @internal\n        this.strict = false;\n        this.cachedDialect = null;\n        if (spec.version != 13 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);\n        let tokenArray = decodeArray(spec.tokenData);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        this.context = spec.context;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.nested = (spec.nested || []).map(([name, value, endToken, placeholder]) => {\n            return { name, value, end: new TokenGroup(decodeArray(endToken), 0), placeholder };\n        });\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    /// Parse a given string or stream.\n    parse(input, startPos = 0, context = {}) {\n        if (typeof input == \"string\")\n            input = stringInput(input);\n        let cx = new Parse(this, input, startPos, context);\n        for (;;) {\n            let done = cx.advance();\n            if (done)\n                return done;\n        }\n    }\n    /// Start an incremental parse.\n    startParse(input, startPos = 0, context = {}) {\n        if (typeof input == \"string\")\n            input = stringInput(input);\n        return new Parse(this, input, startPos, context);\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    findNested(state) {\n        let flags = this.stateSlot(state, 0 /* Flags */);\n        return flags & 4 /* StartNest */ ? this.nested[flags >> 10 /* NestShift */] : null;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(Parser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.nested)\n            copy.nested = this.nested.map(obj => {\n                if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name))\n                    return obj;\n                return { name: obj.name, value: config.nested[obj.name], end: obj.end, placeholder: obj.placeholder };\n            });\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// Tells you whether this grammar has any nested grammars.\n    get hasNested() { return this.nested.length > 0; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        if (this.cachedDialect && this.cachedDialect.source == dialect)\n            return this.cachedDialect;\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return this.cachedDialect = new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new Parser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        if (stack.pos == stack.p.input.length &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, Parser, Stack, Token };\n//# sourceMappingURL=index.es.js.map\n","import { Parser } from 'lezer';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst \n  inf = 130,\n  nan = 131,\n  Bool = 1,\n  Ignoring = 2,\n  On = 3,\n  GroupLeft = 4,\n  GroupRight = 5,\n  Offset = 6,\n  Avg = 7,\n  Bottomk = 8,\n  Count = 9,\n  CountValues = 10,\n  Group = 11,\n  Max = 12,\n  Min = 13,\n  Quantile = 14,\n  Stddev = 15,\n  Stdvar = 16,\n  Sum = 17,\n  Topk = 18,\n  By = 19,\n  Without = 20,\n  And = 21,\n  Or = 22,\n  Unless = 23,\n  Start = 24,\n  End = 25;\n\n// Copyright 2021 PromLabs GmbH\n\nconst keywordTokens = {\n  inf: inf,\n  nan: nan,\n  bool: Bool,\n  ignoring: Ignoring,\n  on: On,\n  group_left: GroupLeft,\n  group_right: GroupRight,\n  offset: Offset,\n};\n\nconst specializeIdentifier = (value, stack) => {\n  return keywordTokens[value.toLowerCase()] || -1;\n};\n\nconst contextualKeywordTokens = {\n  avg: Avg,\n  bottomk: Bottomk,\n  count: Count,\n  count_values: CountValues,\n  group: Group,\n  max: Max,\n  min: Min,\n  quantile: Quantile,\n  stddev: Stddev,\n  stdvar: Stdvar,\n  sum: Sum,\n  topk: Topk,\n  by: By,\n  without: Without,\n  and: And,\n  or: Or,\n  unless: Unless,\n  start: Start,\n  end: End,\n};\n\nconst extendIdentifier = (value, stack) => {\n  return contextualKeywordTokens[value.toLowerCase()] || -1;\n};\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {__proto__:null,absent_over_time:275, absent:277, abs:279, avg_over_time:281, ceil:283, changes:285, clamp:287, clamp_max:289, clamp_min:291, count_over_time:293, days_in_month:295, day_of_month:297, day_of_week:299, delta:301, deriv:303, exp:305, floor:307, histogram_quantile:309, holt_winters:311, hour:313, idelta:315, increase:317, irate:319, label_replace:321, label_join:323, last_over_time:325, ln:327, log10:329, log2:331, max_over_time:333, min_over_time:335, minute:337, month:339, predict_linear:341, present_over_time:343, quantile_over_time:345, rate:347, resets:349, round:351, scalar:353, sgn:355, sort:357, sort_desc:359, sqrt:361, stddev_over_time:363, stdvar_over_time:365, sum_over_time:367, timestamp:369, time:371, vector:373, year:375};\nconst parser = Parser.deserialize({\n  version: 13,\n  states: \"4^OYQPOOO%|QPOOOOQO'#Cz'#CzO&RQPO'#CyQ&^QQOOOOQO'#Dd'#DdO&XQPO'#DcOOQO'#Em'#EmO'hQPO'#EsOYQPO'#EoOYQPO'#ErOOQO'#Eu'#EuO,eQSO'#EvO,mQQO'#EtOOQO'#Et'#EtOOQO'#Cx'#CxOOQO'#De'#DeOOQO'#Dg'#DgOOQO'#Dh'#DhOOQO'#Di'#DiOOQO'#Dj'#DjOOQO'#Dk'#DkOOQO'#Dl'#DlOOQO'#Dm'#DmOOQO'#Dn'#DnOOQO'#Do'#DoOOQO'#Dp'#DpOOQO'#Dq'#DqOOQO'#Dr'#DrOOQO'#Ds'#DsOOQO'#Dt'#DtOOQO'#Du'#DuOOQO'#Dv'#DvOOQO'#Dw'#DwOOQO'#Dx'#DxOOQO'#Dy'#DyOOQO'#Dz'#DzOOQO'#D{'#D{OOQO'#D|'#D|OOQO'#D}'#D}OOQO'#EO'#EOOOQO'#EP'#EPOOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETOOQO'#EU'#EUOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EY'#EYOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#E]'#E]OOQO'#E^'#E^OOQO'#E_'#E_OOQO'#E`'#E`OOQO'#Ea'#EaOOQO'#Eb'#EbOOQO'#Ec'#EcOOQO'#Ed'#EdOOQO'#Ee'#EeOOQO'#Ef'#EfOOQO'#Eg'#EgOOQO'#Eh'#EhOOQO'#Ei'#EiOOQO'#Ej'#EjQOQPOOO.TQPO'#C{O.YQPO'#DQO&XQPO,59eO.aQQO,59eO/zQPO,59nO/zQPO,59nO/zQPO,59nO/zQPO,59nO/zQPO,59nO4wQQO,5;VO4|QQO,5;YO5UQPO,5;iOOQO,59},59}OOQO,5;X,5;XO5mQQO,5;ZO5tQQO,5;^O7XQPO'#ExO7gQPO,5;bOOQO'#Ew'#EwOOQO,5;b,5;bOOQO,5;`,5;`O7oQSO'#C|OOQO,59g,59gO7wQPO,59lO8PQQO'#DROOQO,59l,59lOOQO1G/P1G/PO.TQPO'#DVO<}QPO'#DUO=XQPO'#DUOYQPO1G/YOYQPO1G/YOYQPO1G/YOYQPO1G/YOYQPO1G/YO=cQSO1G0qOOQO1G0t1G0tO=kQQO1G0tO=pQPO'#EmOOQO'#FP'#FPOOQO1G1T1G1TO={QPO1G1TOOQO1G0u1G0uOOQO'#Ey'#EyO>QQPO,5;dO>VQSO1G0|OOQO1G0|1G0|OOQO'#DO'#DOO>_QPO,59hOOQO'#C}'#C}OOQO,59h,59hOYQPO,59mOOQO1G/W1G/WOOQO,59q,59qOCWQPO,59pOC_QPO,59pODvQQO7+$tOETQQO7+$tOFcQQO7+$tOFyQQO7+$tOH_QQO7+$tOOQO7+&]7+&]OHxQQO7+&cOOQO7+&`7+&`OIQQPO7+&oOOQO1G1O1G1OOOQO1G0}1G0}OOQO7+&h7+&hOIVQSO1G/SOOQO1G/S1G/SOI_QQO1G/XOOQO1G/[1G/[OIiQPO1G/[OOQO<<I}<<I}ON]QPO<<I}OOQO<<JZ<<JZOOQO1G/T1G/TOOQO7+$n7+$nOOQO7+$v7+$vOOQOAN?iAN?i\",\n  stateData: \"Nb~O#yOSjOS~OVQOWQOXQOYQOZQO[QO]QO^QO_QO`QOaQObQO!YZO#d_O#vVO#wVO#zXO#}`O$OaO$PbO$QcO$RdO$SeO$TfO$UgO$VhO$WiO$XjO$YkO$ZlO$[mO$]nO$^oO$_pO$`qO$arO$bsO$ctO$duO$evO$fwO$gxO$hyO$izO$j{O$k|O$l}O$m!OO$n!PO$o!QO$p!RO$q!SO$r!TO$s!UO$t!VO$u!WO$v!XO$w!YO$x!ZO$y![O$z!]O${!^O$|!_O$}!`O%O!aO%P!bO%Q!cO%R!dO%UWO%VWO%WVO%Y[O~O!YZO~Oc!fOd!fO#z!gO~OU!pOe!mOf!nOg!mOw!jOz!jO{!jO|!jO}!kO!O!kO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO#r!qO%S!oO~O#v!sO#w!sO%W!sOV#gXW#gXX#gXY#gXZ#gX[#gX]#gX^#gX_#gX`#gXa#gXb#gX!Y#gX#d#gX#v#gX#w#gX#z#gX#}#gX$O#gX$P#gX$Q#gX$R#gX$S#gX$T#gX$U#gX$V#gX$W#gX$X#gX$Y#gX$Z#gX$[#gX$]#gX$^#gX$_#gX$`#gX$a#gX$b#gX$c#gX$d#gX$e#gX$f#gX$g#gX$h#gX$i#gX$j#gX$k#gX$l#gX$m#gX$n#gX$o#gX$p#gX$q#gX$r#gX$s#gX$t#gX$u#gX$v#gX$w#gX$x#gX$y#gX$z#gX${#gX$|#gX$}#gX%O#gX%P#gX%Q#gX%R#gX%U#gX%V#gX%W#gX%Y#gX~Os!vO%Z!yO~O%Y[OU#hXe#hXf#hXg#hXw#hXz#hX{#hX|#hX}#hX!O#hX!P#hX!Q#hX!R#hX!S#hX!T#hX!U#hX#r#hX#u#hX%S#hX#|#hX#{#hX~O#z!{O~O#|#PO~PYOc!fOd!fOUmaemafmagmawmazma{ma|ma}ma!Oma!Pma!Qma!Rma!Sma!Tma!Uma#rma#uma%Sma#|ma#{ma~OP#TOQ#ROR#ROVxPWxPXxPYxPZxP[xP]xP^xP_xP`xPaxPbxP!YxP#dxP#vxP#wxP#zxP#}xP$OxP$PxP$QxP$RxP$SxP$TxP$UxP$VxP$WxP$XxP$YxP$ZxP$[xP$]xP$^xP$_xP$`xP$axP$bxP$cxP$dxP$exP$fxP$gxP$hxP$ixP$jxP$kxP$lxP$mxP$nxP$oxP$pxP$qxP$rxP$sxP$txP$uxP$vxP$wxP$xxP$yxP$zxP${xP$|xP$}xP%OxP%PxP%QxP%RxP%UxP%VxP%WxP%YxP~O#`#ZO~O!O#]O#`#[O~Oh#_Oi#_O#vVO#wVO%U#^O%V#^O%WVO~O#|#bO~P&^Ow!jOU#fae#faf#fag#faz#fa{#fa|#fa}#fa!O#fa!P#fa!Q#fa!R#fa!S#fa!T#fa!U#fa#r#fa#u#fa%S#fa#|#fa#{#fa~O!U#cO#n#cO#o#cO#p#cO~O#{#eO%Z#fO~Os#gO#|#jO~O#{#kO#|#lO~O#{uX#|uX~P&^OVxXWxXXxXYxXZxX[xX]xX^xX_xX`xXaxXbxX!YxX#dxX#vxX#wxX#zxX#}xX$OxX$PxX$QxX$RxX$SxX$TxX$UxX$VxX$WxX$XxX$YxX$ZxX$[xX$]xX$^xX$_xX$`xX$axX$bxX$cxX$dxX$exX$fxX$gxX$hxX$ixX$jxX$kxX$lxX$mxX$nxX$oxX$pxX$qxX$rxX$sxX$txX$uxX$vxX$wxX$xxX$yxX$zxX${xX$|xX$}xX%OxX%PxX%QxX%RxX%UxX%VxX%WxX%YxX~OS#nOT#nO~P8ZOQ#ROR#RO~P8ZO%T#uO%X#vO~O#`#wO~O#v!sO#w!sO%W!sO~O#z#xO~O#d#yO~Os!vO%Z#{O~O#{#|O#|#}O~OVxaWxaXxaYxaZxa[xa]xa^xa_xa`xaaxabxa!Yxa#dxa#vxa#wxa#}xa$Oxa$Pxa$Qxa$Rxa$Sxa$Txa$Uxa$Vxa$Wxa$Xxa$Yxa$Zxa$[xa$]xa$^xa$_xa$`xa$axa$bxa$cxa$dxa$exa$fxa$gxa$hxa$ixa$jxa$kxa$lxa$mxa$nxa$oxa$pxa$qxa$rxa$sxa$txa$uxa$vxa$wxa$xxa$yxa$zxa${xa$|xa$}xa%Oxa%Pxa%Qxa%Rxa%Uxa%Vxa%Wxa%Yxa~O#z!{O~P>gOS$QOT$QO#zxa~P>gOw!jOUvqevqfvqgvq}vq!Ovq!Pvq!Qvq!Rvq!Svq!Tvq!Uvq#rvq#uvq%Svq#|vq#{vq~Ozvq{vq|vq~PClOz!jO{!jO|!jO~PClOw!jOz!jO{!jO|!jO}!kO!O!kOUvqevqfvqgvq#rvq#uvq%Svq#|vq#{vq~O!Pvq!Qvq!Rvq!Svq!Tvq!Uvq~PEbO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO~PEbOe!mOg!mOw!jOz!jO{!jO|!jO}!kO!O!kO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO~OUvqfvq#rvq#uvq%Svq#|vq#{vq~PGaO#`$SO%T$RO~O#|$TO~Os#gO#|$VO~O#{ui#|ui~P&^O#z!{OVxiWxiXxiYxiZxi[xi]xi^xi_xi`xiaxibxi!Yxi#dxi#vxi#wxi#}xi$Oxi$Pxi$Qxi$Rxi$Sxi$Txi$Uxi$Vxi$Wxi$Xxi$Yxi$Zxi$[xi$]xi$^xi$_xi$`xi$axi$bxi$cxi$dxi$exi$fxi$gxi$hxi$ixi$jxi$kxi$lxi$mxi$nxi$oxi$pxi$qxi$rxi$sxi$txi$uxi$vxi$wxi$xxi$yxi$zxi${xi$|xi$}xi%Oxi%Pxi%Qxi%Rxi%Uxi%Vxi%Wxi%Yxi~O%T$XO~O\",\n  goto: \"(e#tPPPPPPPPPPPPPPPPPPPPPPPPPPPP#u$e$q$}%T%a%dP%j%s$eP%v&VPPPPPPPPPPP$e&a&mP&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m$eP&y$e$eP$e$e'Y$e'f'u(U(X(_PPP$eP(bQSOQ!tXQ!uYQ#O!gQ#p#UQ#q#VQ#r#WQ#s#XQ#t#YR$O#ke_OXY!g#U#V#W#X#Y#keROXY!g#U#V#W#X#Y#kQ!hRR#Q!iQ!|!fQ#m#RQ$P#nR$W$QR#h!{Q#i!{R$U#|Q!iRQ!rUR#Q!hR!}!gQ#U!jQ#V!kQ#W!lQ#X!mR#Y!nY#S!j!k!l!m!nR#o#TeUOXY!g#U#V#W#X#Y#keTOXY!g#U#V#W#X#Y#kd_OXY!g#U#V#W#X#Y#kR#`!qeYOXY!g#U#V#W#X#Y#kd]OXY!g#U#V#W#X#Y#kR!ePd^OXY!g#U#V#W#X#Y#kR!z]R!w[Q!x[R#z#eR#d!vR#a!q\",\n  nodeNames: \"⚠ Bool Ignoring On GroupLeft GroupRight Offset Avg Bottomk Count CountValues Group Max Min Quantile Stddev Stdvar Sum Topk By Without And Or Unless Start End LineComment PromQL Expr AggregateExpr AggregateOp AggregateModifier GroupingLabels GroupingLabelList GroupingLabel LabelName FunctionCallBody FunctionCallArgs BinaryExpr Pow BinModifiers OnOrIgnoring Mul Div Mod Add Sub Eql Gte Gtr Lte Lss Neq FunctionCall FunctionIdentifier AbsentOverTime Identifier Absent Abs AvgOverTime Ceil Changes Clamp ClampMax ClampMin CountOverTime DaysInMonth DayOfMonth DayOfWeek Delta Deriv Exp Floor HistogramQuantile HoltWinters Hour Idelta Increase Irate LabelReplace LabelJoin LastOverTime Ln Log10 Log2 MaxOverTime MinOverTime Minute Month PredictLinear PresentOverTime QuantileOverTime Rate Resets Round Scalar Sgn Sort SortDesc Sqrt StddevOverTime StdvarOverTime SumOverTime Timestamp Time Vector Year MatrixSelector Duration NumberLiteral OffsetExpr ParenExpr StringLiteral SubqueryExpr UnaryExpr UnaryOp VectorSelector MetricIdentifier LabelMatchers LabelMatchList LabelMatcher MatchOp EqlSingle EqlRegex NeqRegex StepInvariantExpr At AtModifierPreprocessors MetricName\",\n  maxTerm: 195,\n  skippedNodes: [0,26],\n  repeatNodeCount: 0,\n  tokenData: \"! j~RwX^#lpq#lqr$ars$tst%huv%swx%xxy&gyz&lz{&q{|&v|}&}}!O'S!O!P'Z!P!Q(Z!Q!R(`!R![)f![!]LZ!^!_MV!_!`Md!`!aMy!b!cNW!c!}N]!}#ONs#P#QNx#Q#RN}#R#SN]#S#T! S#T#oN]#o#p! `#q#r! e#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~#qY#y~X^#lpq#l#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~$dQ!_!`$j#r#s$o~$oO!U~~$tO#p~~$yU#d~OY$tZr$trs%]s#O$t#O#P%b#P~$t~%bO#d~~%ePO~$t~%mQj~OY%hZ~%h~%xO|~~%}U#d~OY%xZw%xwx%]x#O%x#O#P&a#P~%x~&dPO~%x~&lO#z~~&qO#|~~&vOz~R&}O%VP}Q~'SO#{~R'ZO%UP!OQP'^P!Q!['aP'fR%WP!Q!['a!g!h'o#X#Y'oP'rR{|'{}!O'{!Q![(RP(OP!Q![(RP(WP%WP!Q![(R~(`O{~R(eZ%WP!O!P)W!Q![)f!g!h'o#W#X*Z#X#Y'o#[#].i#a#b0l#g#h1r#k#l2Z#l#mKo#m#n:pP)]R%WP!Q![)W!g!h'o#X#Y'oR)kY%WP!O!P)W!Q![)f!g!h'o#W#X*Z#X#Y'o#[#].i#a#b0l#g#h1r#k#l2Z#m#n:pQ*`P#`Q!Q![*cQ*fS!Q![*c#[#]*r#a#b,z#g#h.QQ*wP#`Q!Q![*zQ*}R!Q![*z#a#b+W#g#h,cQ+]Q#`Q!Q![+c#g#h+uQ+fR!Q![+c#a#b+o#g#h+zQ+rP#g#h+uQ+zO#`QQ,PP#`Q!Q![,SQ,VQ!Q![,S#a#b,]Q,`P#g#h+uQ,hP#`Q!Q![,kQ,nQ!Q![,k#a#b,tQ,wP#g#h+uQ-PQ#`Q!Q![-V#g#h+uQ-YR!Q![-V#a#b-c#g#h-iQ-fP#g#h+uQ-nP#`Q!Q![-qQ-tQ!Q![-q#a#b-zQ-}P#g#h+uQ.VP#`Q!Q![.YQ.]Q!Q![.Y#a#b.cQ.fP#g#h+uQ.nP#`Q!Q![.qQ.tR!Q![.q#a#b.}#g#h0TQ/SQ#`Q!Q![/Y#g#h+uQ/]R!Q![/Y#a#b/f#g#h/lQ/iP#g#h+uQ/qP#`Q!Q![/tQ/wQ!Q![/t#a#b/}Q0QP#g#h+uQ0YP#`Q!Q![0]Q0`Q!Q![0]#a#b0fQ0iP#g#h+uQ0qQ#`Q!Q![0w#g#h+uQ0zR!Q![0w#a#b1T#g#h1ZQ1WP#g#h+uQ1`P#`Q!Q![1cQ1fQ!Q![1c#a#b1lQ1oP#g#h+uQ1wP#`Q!Q![1zQ1}Q!Q![1z#a#b2TQ2WP#g#h+uQ2`P#`Q!Q![2cQ2fT!Q![2c#W#X2u#[#]7O#a#b9R#g#h:XQ2zP#`Q!Q![2}Q3QS!Q![2}#[#]3^#a#b5a#g#h6gQ3cP#`Q!Q![3fQ3iR!Q![3f#a#b3r#g#h4xQ3wQ#`Q!Q![3}#g#h+uQ4QR!Q![3}#a#b4Z#g#h4aQ4^P#g#h+uQ4fP#`Q!Q![4iQ4lQ!Q![4i#a#b4rQ4uP#g#h+uQ4}P#`Q!Q![5QQ5TQ!Q![5Q#a#b5ZQ5^P#g#h+uQ5fQ#`Q!Q![5l#g#h+uQ5oR!Q![5l#a#b5x#g#h6OQ5{P#g#h+uQ6TP#`Q!Q![6WQ6ZQ!Q![6W#a#b6aQ6dP#g#h+uQ6lP#`Q!Q![6oQ6rQ!Q![6o#a#b6xQ6{P#g#h+uQ7TP#`Q!Q![7WQ7ZR!Q![7W#a#b7d#g#h8jQ7iQ#`Q!Q![7o#g#h+uQ7rR!Q![7o#a#b7{#g#h8RQ8OP#g#h+uQ8WP#`Q!Q![8ZQ8^Q!Q![8Z#a#b8dQ8gP#g#h+uQ8oP#`Q!Q![8rQ8uQ!Q![8r#a#b8{Q9OP#g#h+uQ9WQ#`Q!Q![9^#g#h+uQ9aR!Q![9^#a#b9j#g#h9pQ9mP#g#h+uQ9uP#`Q!Q![9xQ9{Q!Q![9x#a#b:RQ:UP#g#h+uQ:^P#`Q!Q![:aQ:dQ!Q![:a#a#b:jQ:mP#g#h+uQ:uP#`Q!Q![:xQ:{U!Q![:x#W#X;_#[#]?h#a#bAk#g#hBq#k#lCYQ;dP#`Q!Q![;gQ;jS!Q![;g#[#];v#a#b=y#g#h?PQ;{P#`Q!Q![<OQ<RR!Q![<O#a#b<[#g#h=bQ<aQ#`Q!Q![<g#g#h+uQ<jR!Q![<g#a#b<s#g#h<yQ<vP#g#h+uQ=OP#`Q!Q![=RQ=UQ!Q![=R#a#b=[Q=_P#g#h+uQ=gP#`Q!Q![=jQ=mQ!Q![=j#a#b=sQ=vP#g#h+uQ>OQ#`Q!Q![>U#g#h+uQ>XR!Q![>U#a#b>b#g#h>hQ>eP#g#h+uQ>mP#`Q!Q![>pQ>sQ!Q![>p#a#b>yQ>|P#g#h+uQ?UP#`Q!Q![?XQ?[Q!Q![?X#a#b?bQ?eP#g#h+uQ?mP#`Q!Q![?pQ?sR!Q![?p#a#b?|#g#hASQ@RQ#`Q!Q![@X#g#h+uQ@[R!Q![@X#a#b@e#g#h@kQ@hP#g#h+uQ@pP#`Q!Q![@sQ@vQ!Q![@s#a#b@|QAPP#g#h+uQAXP#`Q!Q![A[QA_Q!Q![A[#a#bAeQAhP#g#h+uQApQ#`Q!Q![Av#g#h+uQAyR!Q![Av#a#bBS#g#hBYQBVP#g#h+uQB_P#`Q!Q![BbQBeQ!Q![Bb#a#bBkQBnP#g#h+uQBvP#`Q!Q![ByQB|Q!Q![By#a#bCSQCVP#g#h+uQC_P#`Q!Q![CbQCeT!Q![Cb#W#XCt#[#]G}#a#bJQ#g#hKWQCyP#`Q!Q![C|QDPS!Q![C|#[#]D]#a#bF`#g#hGfQDbP#`Q!Q![DeQDhR!Q![De#a#bDq#g#hEwQDvQ#`Q!Q![D|#g#h+uQEPR!Q![D|#a#bEY#g#hE`QE]P#g#h+uQEeP#`Q!Q![EhQEkQ!Q![Eh#a#bEqQEtP#g#h+uQE|P#`Q!Q![FPQFSQ!Q![FP#a#bFYQF]P#g#h+uQFeQ#`Q!Q![Fk#g#h+uQFnR!Q![Fk#a#bFw#g#hF}QFzP#g#h+uQGSP#`Q!Q![GVQGYQ!Q![GV#a#bG`QGcP#g#h+uQGkP#`Q!Q![GnQGqQ!Q![Gn#a#bGwQGzP#g#h+uQHSP#`Q!Q![HVQHYR!Q![HV#a#bHc#g#hIiQHhQ#`Q!Q![Hn#g#h+uQHqR!Q![Hn#a#bHz#g#hIQQH}P#g#h+uQIVP#`Q!Q![IYQI]Q!Q![IY#a#bIcQIfP#g#h+uQInP#`Q!Q![IqQItQ!Q![Iq#a#bIzQI}P#g#h+uQJVQ#`Q!Q![J]#g#h+uQJ`R!Q![J]#a#bJi#g#hJoQJlP#g#h+uQJtP#`Q!Q![JwQJzQ!Q![Jw#a#bKQQKTP#g#h+uQK]P#`Q!Q![K`QKcQ!Q![K`#a#bKiQKlP#g#h+uPKrR!Q![K{!c!iK{#T#ZK{PLQR%WP!Q![K{!c!iK{#T#ZK{VLbT%XS!YR!Q![Lq![!]Lq!c!}Lq#R#SLq#T#oLqRLvT!YR!Q![Lq![!]Lq!c!}Lq#R#SLq#T#oLq~M[P!T~!_!`M_~MdO!S~~MiQ#nP!_!`Mo#r#sMtQMtO!PQ~MyO#o~~NOP!R~!_!`NR~NWO!Q~~N]O#r~VNdT!YRsS!Q![N]![!]Lq!c!}N]#R#SN]#T#oN]~NxO%S~~N}O%T~~! SOw~~! VRO#S! S#S#T%]#T~! S~! eO%Y~~! jO%Z~\",\n  tokenizers: [0, 1, 2],\n  topRules: {\"PromQL\":[0,27],\"MetricName\":[1,128]},\n  specialized: [{term: 56, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 56, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 56, get: value => spec_Identifier[value] || -1}],\n  tokenPrec: 0\n});\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst \n  inf$1 = 130,\n  nan$1 = 131,\n  Bool$1 = 1,\n  Ignoring$1 = 2,\n  On$1 = 3,\n  GroupLeft$1 = 4,\n  GroupRight$1 = 5,\n  Offset$1 = 6,\n  Avg$1 = 7,\n  Bottomk$1 = 8,\n  Count$1 = 9,\n  CountValues$1 = 10,\n  Group$1 = 11,\n  Max$1 = 12,\n  Min$1 = 13,\n  Quantile$1 = 14,\n  Stddev$1 = 15,\n  Stdvar$1 = 16,\n  Sum$1 = 17,\n  Topk$1 = 18,\n  By$1 = 19,\n  Without$1 = 20,\n  And$1 = 21,\n  Or$1 = 22,\n  Unless$1 = 23,\n  Start$1 = 24,\n  End$1 = 25,\n  LineComment = 26,\n  PromQL = 27,\n  Expr = 28,\n  AggregateExpr = 29,\n  AggregateOp = 30,\n  AggregateModifier = 31,\n  GroupingLabels = 32,\n  GroupingLabelList = 33,\n  GroupingLabel = 34,\n  LabelName = 35,\n  FunctionCallBody = 36,\n  FunctionCallArgs = 37,\n  BinaryExpr = 38,\n  Pow = 39,\n  BinModifiers = 40,\n  OnOrIgnoring = 41,\n  Mul = 42,\n  Div = 43,\n  Mod = 44,\n  Add = 45,\n  Sub = 46,\n  Eql = 47,\n  Gte = 48,\n  Gtr = 49,\n  Lte = 50,\n  Lss = 51,\n  Neq = 52,\n  FunctionCall = 53,\n  FunctionIdentifier = 54,\n  AbsentOverTime = 55,\n  Identifier = 56,\n  Absent = 57,\n  Abs = 58,\n  AvgOverTime = 59,\n  Ceil = 60,\n  Changes = 61,\n  Clamp = 62,\n  ClampMax = 63,\n  ClampMin = 64,\n  CountOverTime = 65,\n  DaysInMonth = 66,\n  DayOfMonth = 67,\n  DayOfWeek = 68,\n  Delta = 69,\n  Deriv = 70,\n  Exp = 71,\n  Floor = 72,\n  HistogramQuantile = 73,\n  HoltWinters = 74,\n  Hour = 75,\n  Idelta = 76,\n  Increase = 77,\n  Irate = 78,\n  LabelReplace = 79,\n  LabelJoin = 80,\n  LastOverTime = 81,\n  Ln = 82,\n  Log10 = 83,\n  Log2 = 84,\n  MaxOverTime = 85,\n  MinOverTime = 86,\n  Minute = 87,\n  Month = 88,\n  PredictLinear = 89,\n  PresentOverTime = 90,\n  QuantileOverTime = 91,\n  Rate = 92,\n  Resets = 93,\n  Round = 94,\n  Scalar = 95,\n  Sgn = 96,\n  Sort = 97,\n  SortDesc = 98,\n  Sqrt = 99,\n  StddevOverTime = 100,\n  StdvarOverTime = 101,\n  SumOverTime = 102,\n  Timestamp = 103,\n  Time = 104,\n  Vector = 105,\n  Year = 106,\n  MatrixSelector = 107,\n  Duration = 108,\n  NumberLiteral = 109,\n  OffsetExpr = 110,\n  ParenExpr = 111,\n  StringLiteral = 112,\n  SubqueryExpr = 113,\n  UnaryExpr = 114,\n  UnaryOp = 115,\n  VectorSelector = 116,\n  MetricIdentifier = 117,\n  LabelMatchers = 118,\n  LabelMatchList = 119,\n  LabelMatcher = 120,\n  MatchOp = 121,\n  EqlSingle = 122,\n  EqlRegex = 123,\n  NeqRegex = 124,\n  StepInvariantExpr = 125,\n  At = 126,\n  AtModifierPreprocessors = 127,\n  MetricName = 128;\n\nexport { Abs, Absent, AbsentOverTime, Add, AggregateExpr, AggregateModifier, AggregateOp, And$1 as And, At, AtModifierPreprocessors, Avg$1 as Avg, AvgOverTime, BinModifiers, BinaryExpr, Bool$1 as Bool, Bottomk$1 as Bottomk, By$1 as By, Ceil, Changes, Clamp, ClampMax, ClampMin, Count$1 as Count, CountOverTime, CountValues$1 as CountValues, DayOfMonth, DayOfWeek, DaysInMonth, Delta, Deriv, Div, Duration, End$1 as End, Eql, EqlRegex, EqlSingle, Exp, Expr, Floor, FunctionCall, FunctionCallArgs, FunctionCallBody, FunctionIdentifier, Group$1 as Group, GroupLeft$1 as GroupLeft, GroupRight$1 as GroupRight, GroupingLabel, GroupingLabelList, GroupingLabels, Gte, Gtr, HistogramQuantile, HoltWinters, Hour, Idelta, Identifier, Ignoring$1 as Ignoring, Increase, Irate, LabelJoin, LabelMatchList, LabelMatcher, LabelMatchers, LabelName, LabelReplace, LastOverTime, LineComment, Ln, Log10, Log2, Lss, Lte, MatchOp, MatrixSelector, Max$1 as Max, MaxOverTime, MetricIdentifier, MetricName, Min$1 as Min, MinOverTime, Minute, Mod, Month, Mul, Neq, NeqRegex, NumberLiteral, Offset$1 as Offset, OffsetExpr, On$1 as On, OnOrIgnoring, Or$1 as Or, ParenExpr, Pow, PredictLinear, PresentOverTime, PromQL, Quantile$1 as Quantile, QuantileOverTime, Rate, Resets, Round, Scalar, Sgn, Sort, SortDesc, Sqrt, Start$1 as Start, Stddev$1 as Stddev, StddevOverTime, Stdvar$1 as Stdvar, StdvarOverTime, StepInvariantExpr, StringLiteral, Sub, SubqueryExpr, Sum$1 as Sum, SumOverTime, Time, Timestamp, Topk$1 as Topk, UnaryExpr, UnaryOp, Unless$1 as Unless, Vector, VectorSelector, Without$1 as Without, Year, inf$1 as inf, nan$1 as nan, parser };\n","// this helper class is used to make typescript warn you when you forget\n// a case-block in a switch statement.\n// example code that triggers the typescript-error:\n//\n// const x:'A'|'B'|'C' = 'A';\n//\n// switch(x) {\n//   case 'A':\n//     // something\n//   case 'B':\n//     // something\n//   default:\n//     throw new NeverCaseError(x);\n// }\n//\n//\n// typescript will show an error in this case,\n// when you add the missing `case 'C'` code,\n// the problem will be fixed.\n\nexport class NeverCaseError extends Error {\n  constructor(value: never) {\n    super('should never happen');\n  }\n}\n","import { parser } from 'lezer-promql';\nimport type { Tree, SyntaxNode } from 'lezer-tree';\nimport { NeverCaseError } from './util';\n\ntype Direction = 'parent' | 'firstChild' | 'lastChild';\ntype NodeTypeName =\n  | '⚠' // this is used as error-name\n  | 'AggregateExpr'\n  | 'AggregateModifier'\n  | 'FunctionCallBody'\n  | 'GroupingLabels'\n  | 'Identifier'\n  | 'LabelMatcher'\n  | 'LabelMatchers'\n  | 'LabelMatchList'\n  | 'LabelName'\n  | 'MetricIdentifier'\n  | 'PromQL'\n  | 'StringLiteral'\n  | 'VectorSelector'\n  | 'MatrixSelector';\n\ntype Path = Array<[Direction, NodeTypeName]>;\n\nfunction move(node: SyntaxNode, direction: Direction): SyntaxNode | null {\n  switch (direction) {\n    case 'parent':\n      return node.parent;\n    case 'firstChild':\n      return node.firstChild;\n    case 'lastChild':\n      return node.lastChild;\n    default:\n      throw new NeverCaseError(direction);\n  }\n}\n\nfunction walk(node: SyntaxNode, path: Path): SyntaxNode | null {\n  let current: SyntaxNode | null = node;\n  for (const [direction, expectedType] of path) {\n    current = move(current, direction);\n    if (current === null) {\n      // we could not move in the direction, we stop\n      return null;\n    }\n    if (current.type.name !== expectedType) {\n      // the reached node has wrong type, we stop\n      return null;\n    }\n  }\n  return current;\n}\n\nfunction getNodeText(node: SyntaxNode, text: string): string {\n  return text.slice(node.from, node.to);\n}\n\nfunction parsePromQLStringLiteral(text: string): string {\n  // FIXME: support https://prometheus.io/docs/prometheus/latest/querying/basics/#string-literals\n  // FIXME: maybe check other promql code, if all is supported or not\n  // we start with double-quotes\n  if (text.startsWith('\"') && text.endsWith('\"')) {\n    if (text.indexOf('\\\\') !== -1) {\n      throw new Error('FIXME: escape-sequences not supported in label-values');\n    }\n    return text.slice(1, text.length - 1);\n  } else {\n    throw new Error('FIXME: invalid string literal');\n  }\n}\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Intent =\n  | {\n      type: 'ALL_METRIC_NAMES';\n    }\n  | {\n      type: 'FUNCTIONS_AND_ALL_METRIC_NAMES';\n    }\n  | {\n      type: 'HISTORY_AND_FUNCTIONS_AND_ALL_METRIC_NAMES';\n    }\n  | {\n      type: 'ALL_DURATIONS';\n    }\n  | {\n      type: 'LABEL_NAMES_FOR_SELECTOR';\n      metricName?: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'LABEL_NAMES_FOR_BY';\n      metricName: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'LABEL_VALUES';\n      metricName?: string;\n      labelName: string;\n      otherLabels: Label[];\n    };\n\ntype Resolver = {\n  path: NodeTypeName[];\n  fun: (node: SyntaxNode, text: string, pos: number) => Intent | null;\n};\n\nfunction isPathMatch(resolverPath: string[], cursorPath: string[]): boolean {\n  return resolverPath.every((item, index) => item === cursorPath[index]);\n}\n\nconst ERROR_NODE_NAME: NodeTypeName = '⚠'; // this is used as error-name\n\nconst RESOLVERS: Resolver[] = [\n  {\n    path: ['LabelMatchers', 'VectorSelector'],\n    fun: resolveLabelKeysWithEquals,\n  },\n  {\n    path: ['PromQL'],\n    fun: resolveTopLevel,\n  },\n  {\n    path: ['FunctionCallBody'],\n    fun: resolveInFunction,\n  },\n  {\n    path: [ERROR_NODE_NAME, 'LabelMatcher'],\n    fun: resolveLabelMatcherError,\n  },\n  {\n    path: [ERROR_NODE_NAME, 'MatrixSelector'],\n    fun: resolveDurations,\n  },\n  {\n    path: ['GroupingLabels'],\n    fun: resolveLabelsForGrouping,\n  },\n];\n\nfunction getLabel(labelMatcherNode: SyntaxNode, text: string): Label | null {\n  if (labelMatcherNode.type.name !== 'LabelMatcher') {\n    return null;\n  }\n\n  const nameNode = walk(labelMatcherNode, [['firstChild', 'LabelName']]);\n\n  if (nameNode === null) {\n    return null;\n  }\n\n  const valueNode = walk(labelMatcherNode, [['lastChild', 'StringLiteral']]);\n\n  if (valueNode === null) {\n    return null;\n  }\n\n  const name = getNodeText(nameNode, text);\n  const value = parsePromQLStringLiteral(getNodeText(valueNode, text));\n\n  return { name, value };\n}\nfunction getLabels(labelMatchersNode: SyntaxNode, text: string): Label[] {\n  if (labelMatchersNode.type.name !== 'LabelMatchers') {\n    return [];\n  }\n\n  let listNode: SyntaxNode | null = walk(labelMatchersNode, [['firstChild', 'LabelMatchList']]);\n\n  const labels: Label[] = [];\n\n  while (listNode !== null) {\n    const matcherNode = walk(listNode, [['lastChild', 'LabelMatcher']]);\n    if (matcherNode === null) {\n      // unexpected, we stop\n      return [];\n    }\n\n    const label = getLabel(matcherNode, text);\n    if (label !== null) {\n      labels.push(label);\n    }\n\n    // there might be more labels\n    listNode = walk(listNode, [['firstChild', 'LabelMatchList']]);\n  }\n\n  // our labels-list is last-first, so we reverse it\n  labels.reverse();\n\n  return labels;\n}\n\nfunction getNodeChildren(node: SyntaxNode): SyntaxNode[] {\n  let child: SyntaxNode | null = node.firstChild;\n  const children: SyntaxNode[] = [];\n  while (child !== null) {\n    children.push(child);\n    child = child.nextSibling;\n  }\n  return children;\n}\n\nfunction getNodeInSubtree(node: SyntaxNode, typeName: NodeTypeName): SyntaxNode | null {\n  // first we try the current node\n  if (node.type.name === typeName) {\n    return node;\n  }\n\n  // then we try the children\n  const children = getNodeChildren(node);\n  for (const child of children) {\n    const n = getNodeInSubtree(child, typeName);\n    if (n !== null) {\n      return n;\n    }\n  }\n\n  return null;\n}\n\nfunction resolveLabelsForGrouping(node: SyntaxNode, text: string, pos: number): Intent | null {\n  const aggrExpNode = walk(node, [\n    ['parent', 'AggregateModifier'],\n    ['parent', 'AggregateExpr'],\n  ]);\n  if (aggrExpNode === null) {\n    return null;\n  }\n  const bodyNode = aggrExpNode.getChild('FunctionCallBody');\n  if (bodyNode === null) {\n    return null;\n  }\n\n  const metricIdNode = getNodeInSubtree(bodyNode, 'MetricIdentifier');\n  if (metricIdNode === null) {\n    return null;\n  }\n\n  const idNode = walk(metricIdNode, [['firstChild', 'Identifier']]);\n  if (idNode === null) {\n    return null;\n  }\n\n  const metricName = getNodeText(idNode, text);\n  return {\n    type: 'LABEL_NAMES_FOR_BY',\n    metricName,\n    otherLabels: [],\n  };\n}\n\nfunction resolveLabelMatcherError(node: SyntaxNode, text: string, pos: number): Intent | null {\n  // we are probably in the scenario where the user is before entering the\n  // label-value, like `{job=^}` (^ marks the cursor)\n  const parent = walk(node, [['parent', 'LabelMatcher']]);\n  if (parent === null) {\n    return null;\n  }\n\n  const labelNameNode = walk(parent, [['firstChild', 'LabelName']]);\n  if (labelNameNode === null) {\n    return null;\n  }\n\n  const labelName = getNodeText(labelNameNode, text);\n\n  // now we need to go up, to the parent of LabelMatcher,\n  // there can be one or many `LabelMatchList` parents, we have\n  // to go through all of them\n\n  const firstListNode = walk(parent, [['parent', 'LabelMatchList']]);\n  if (firstListNode === null) {\n    return null;\n  }\n\n  let listNode = firstListNode;\n\n  // we keep going through the parent-nodes\n  // as long as they are LabelMatchList.\n  // as soon as we reawch LabelMatchers, we stop\n  let labelMatchersNode: SyntaxNode | null = null;\n  while (labelMatchersNode === null) {\n    const p = listNode.parent;\n    if (p === null) {\n      return null;\n    }\n\n    const { name } = p.type;\n\n    switch (name) {\n      case 'LabelMatchList':\n        //we keep looping\n        listNode = p;\n        continue;\n      case 'LabelMatchers':\n        // we reached the end, we can stop the loop\n        labelMatchersNode = p;\n        continue;\n      default:\n        // we reached some other node, we stop\n        return null;\n    }\n  }\n\n  // now we need to find the other names\n  const otherLabels = getLabels(labelMatchersNode, text);\n\n  const metricNameNode = walk(labelMatchersNode, [\n    ['parent', 'VectorSelector'],\n    ['firstChild', 'MetricIdentifier'],\n    ['firstChild', 'Identifier'],\n  ]);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name\n    return {\n      type: 'LABEL_VALUES',\n      labelName,\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'LABEL_VALUES',\n    metricName,\n    labelName,\n    otherLabels,\n  };\n}\n\nfunction resolveTopLevel(node: SyntaxNode, text: string, pos: number): Intent {\n  return {\n    type: 'FUNCTIONS_AND_ALL_METRIC_NAMES',\n  };\n}\n\nfunction resolveInFunction(node: SyntaxNode, text: string, pos: number): Intent {\n  return {\n    type: 'ALL_METRIC_NAMES',\n  };\n}\n\nfunction resolveDurations(node: SyntaxNode, text: string, pos: number): Intent {\n  return {\n    type: 'ALL_DURATIONS',\n  };\n}\n\nfunction resolveLabelKeysWithEquals(node: SyntaxNode, text: string, pos: number): Intent | null {\n  const metricNameNode = walk(node, [\n    ['parent', 'VectorSelector'],\n    ['firstChild', 'MetricIdentifier'],\n    ['firstChild', 'Identifier'],\n  ]);\n\n  const otherLabels = getLabels(node, text);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name.\n    return {\n      type: 'LABEL_NAMES_FOR_SELECTOR',\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'LABEL_NAMES_FOR_SELECTOR',\n    metricName,\n    otherLabels,\n  };\n}\n\n// we find the first error-node in the tree that is at the cursor-position.\n// NOTE: this might be too slow, might need to optimize it\n// (ideas: we do not need to go into every subtree, based on from/to)\n// also, only go to places that are in the sub-tree of the node found\n// by default by lezer. problem is, `next()` will go upward too,\n// and we do not want to go higher than our node\nfunction getErrorNode(tree: Tree, pos: number): SyntaxNode | null {\n  const cur = tree.cursor(pos);\n  while (true) {\n    if (cur.from === pos && cur.to === pos) {\n      const { node } = cur;\n      if (node.type.isError) {\n        return node;\n      }\n    }\n\n    if (!cur.next()) {\n      break;\n    }\n  }\n  return null;\n}\n\nexport function getIntent(text: string, pos: number): Intent | null {\n  // there is a special-case when we are at the start of writing text,\n  // so we handle that case first\n\n  if (text === '') {\n    return {\n      type: 'HISTORY_AND_FUNCTIONS_AND_ALL_METRIC_NAMES',\n    };\n  }\n\n  /*\n\tPromQL\nExpr\nVectorSelector\nLabelMatchers\n*/\n  const tree = parser.parse(text);\n\n  // if the tree contains error, it is very probable that\n  // our node is one of those error-nodes.\n  // also, if there are errors, the node lezer finds us,\n  // might not be the best node.\n  // so first we check if there is an error-node at the cursor-position\n  const maybeErrorNode = getErrorNode(tree, pos);\n\n  const cur = maybeErrorNode != null ? maybeErrorNode.cursor : tree.cursor(pos);\n  const currentNode = cur.node;\n\n  const names = [cur.name];\n  while (cur.parent()) {\n    names.push(cur.name);\n  }\n\n  for (let resolver of RESOLVERS) {\n    // i do not use a foreach because i want to stop as soon\n    // as i find something\n    if (isPathMatch(resolver.path, names)) {\n      return resolver.fun(currentNode, text, pos);\n    }\n  }\n\n  return null;\n}\n","import type { Intent, Label } from './intent';\nimport { NeverCaseError } from './util';\n// FIXME: we should not load this from the \"outside\", but we cannot do that while we have the \"old\" query-field too\nimport { FUNCTIONS } from '../../../promql';\n\nexport type CompletionType = 'HISTORY' | 'FUNCTION' | 'METRIC_NAME' | 'DURATION' | 'LABEL_NAME' | 'LABEL_VALUE';\n\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string;\n  triggerOnInsert?: boolean;\n};\n\ntype Metric = {\n  name: string;\n  help: string;\n  type: string;\n};\n\nexport type DataProvider = {\n  getHistory: () => Promise<string[]>;\n  getAllMetricNames: () => Promise<Metric[]>;\n  getSeries: (selector: string) => Promise<Record<string, string[]>>;\n};\n\n// we order items like: history, functions, metrics\n\nasync function getAllMetricNamesCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  const metrics = await dataProvider.getAllMetricNames();\n  return metrics.map((metric) => ({\n    type: 'METRIC_NAME',\n    label: metric.name,\n    insertText: metric.name,\n    detail: `${metric.name} : ${metric.type}`,\n    documentation: metric.help,\n  }));\n}\n\nconst FUNCTION_COMPLETIONS: Completion[] = FUNCTIONS.map((f) => ({\n  type: 'FUNCTION',\n  label: f.label,\n  insertText: f.insertText ?? '', // i don't know what to do when this is nullish. it should not be.\n  detail: f.detail,\n  documentation: f.documentation,\n}));\n\nconst DURATION_COMPLETIONS: Completion[] = [\n  '$__interval',\n  '$__range',\n  '$__rate_interval',\n  '1m',\n  '5m',\n  '10m',\n  '30m',\n  '1h',\n  '1d',\n].map((text) => ({\n  type: 'DURATION',\n  label: text,\n  insertText: text,\n}));\n\nasync function getAllHistoryCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  // function getAllHistoryCompletions(queryHistory: PromHistoryItem[]): Completion[] {\n  // NOTE: the typescript types are wrong. historyItem.query.expr can be undefined\n  const allHistory = await dataProvider.getHistory();\n  // FIXME: find a better history-limit\n  return allHistory.slice(0, 10).map((expr) => ({\n    type: 'HISTORY',\n    label: expr,\n    insertText: expr,\n  }));\n}\n\nfunction makeSelector(metricName: string | undefined, labels: Label[]): string {\n  const allLabels = [...labels];\n\n  // we transform the metricName to a label, if it exists\n  if (metricName !== undefined) {\n    allLabels.push({ name: '__name__', value: metricName });\n  }\n\n  const allLabelTexts = allLabels.map((label) => `${label.name}=\"${label.value}\"`);\n\n  return `{${allLabelTexts.join(',')}}`;\n}\n\nasync function getLabelNamesForCompletions(\n  metric: string | undefined,\n  suffix: string,\n  triggerOnInsert: boolean,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const selector = makeSelector(metric, otherLabels);\n  const data = await dataProvider.getSeries(selector);\n  const possibleLabelNames = Object.keys(data); // all names from prometheus\n  const usedLabelNames = new Set(otherLabels.map((l) => l.name)); // names used in the query\n  const labelNames = possibleLabelNames.filter((l) => !usedLabelNames.has(l));\n  return labelNames.map((text) => ({\n    type: 'LABEL_NAME',\n    label: text,\n    insertText: `${text}${suffix}`,\n    triggerOnInsert,\n  }));\n}\n\nasync function getLabelNamesForSelectorCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '=', true, otherLabels, dataProvider);\n}\nasync function getLabelNamesForByCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '', false, otherLabels, dataProvider);\n}\n\nasync function getLabelValuesForMetricCompletions(\n  metric: string | undefined,\n  labelName: string,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const selector = makeSelector(metric, otherLabels);\n  const data = await dataProvider.getSeries(selector);\n  const values = data[labelName] ?? [];\n  return values.map((text) => ({\n    type: 'LABEL_VALUE',\n    label: text,\n    insertText: `\"${text}\"`, // FIXME: escaping strange characters?\n  }));\n}\n\nexport async function getCompletions(intent: Intent, dataProvider: DataProvider): Promise<Completion[]> {\n  switch (intent.type) {\n    case 'ALL_DURATIONS':\n      return DURATION_COMPLETIONS;\n    case 'ALL_METRIC_NAMES':\n      return getAllMetricNamesCompletions(dataProvider);\n    case 'FUNCTIONS_AND_ALL_METRIC_NAMES': {\n      const metricNames = await getAllMetricNamesCompletions(dataProvider);\n      return [...FUNCTION_COMPLETIONS, ...metricNames];\n    }\n    case 'HISTORY_AND_FUNCTIONS_AND_ALL_METRIC_NAMES': {\n      const metricNames = await getAllMetricNamesCompletions(dataProvider);\n      const historyCompletions = await getAllHistoryCompletions(dataProvider);\n      return [...historyCompletions, ...FUNCTION_COMPLETIONS, ...metricNames];\n    }\n    case 'LABEL_NAMES_FOR_SELECTOR':\n      return getLabelNamesForSelectorCompletions(intent.metricName, intent.otherLabels, dataProvider);\n    case 'LABEL_NAMES_FOR_BY':\n      return getLabelNamesForByCompletions(intent.metricName, intent.otherLabels, dataProvider);\n    case 'LABEL_VALUES':\n      return getLabelValuesForMetricCompletions(intent.metricName, intent.labelName, intent.otherLabels, dataProvider);\n    default:\n      throw new NeverCaseError(intent);\n  }\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { getIntent } from './intent';\nimport { getCompletions, DataProvider, CompletionType } from './completions';\nimport { NeverCaseError } from './util';\n\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'DURATION':\n      return monaco.languages.CompletionItemKind.Unit;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Variable;\n    case 'HISTORY':\n      return monaco.languages.CompletionItemKind.Snippet;\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'METRIC_NAME':\n      return monaco.languages.CompletionItemKind.Constructor;\n    default:\n      throw new NeverCaseError(type);\n  }\n}\nexport function getCompletionProvider(\n  monaco: Monaco,\n  dataProvider: DataProvider\n): monacoTypes.languages.CompletionItemProvider {\n  const provideCompletionItems = (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> => {\n    const word = model.getWordAtPosition(position);\n    const range =\n      word != null\n        ? monaco.Range.lift({\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          })\n        : monaco.Range.fromPositions(position);\n    // documentation says `position` will be \"adjusted\" in `getOffsetAt`\n    // i don't know what that means, to be sure i clone it\n    const positionClone = {\n      column: position.column,\n      lineNumber: position.lineNumber,\n    };\n    const offset = model.getOffsetAt(positionClone);\n    const intent = getIntent(model.getValue(), offset);\n    const completionsPromise = intent != null ? getCompletions(intent, dataProvider) : Promise.resolve([]);\n    return completionsPromise.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, monaco),\n        label: item.label,\n        insertText: item.insertText,\n        detail: item.detail,\n        documentation: item.documentation,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n        command: item.triggerOnInsert\n          ? {\n              id: 'editor.action.triggerSuggest',\n              title: '',\n            }\n          : undefined,\n      }));\n      return { suggestions };\n    });\n  };\n\n  return {\n    triggerCharacters: ['{', ',', '[', '(', '='],\n    provideCompletionItems,\n  };\n}\n","import React, { useRef, useEffect } from 'react';\nimport { CodeEditor, CodeEditorMonacoOptions, Monaco, monacoTypes } from '@grafana/ui';\nimport { useLatest } from 'react-use';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport { getCompletionProvider } from './monaco-completion-provider';\nimport { Props } from './MonacoQueryFieldProps';\n\nconst options: CodeEditorMonacoOptions = {\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  lineDecorationsWidth: 0,\n  wordWrap: 'off',\n  overviewRulerLanes: 0,\n  overviewRulerBorder: false,\n  folding: false,\n  scrollBeyondLastLine: false,\n  renderLineHighlight: 'none',\n  fontSize: 14,\n  suggestFontSize: 12,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n};\n\nconst PROMQL_LANG_ID = promLanguageDefinition.id;\n\n// we must only run the promql-setup code once\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco: Monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const { aliases, extensions, mimetypes, loader } = promLanguageDefinition;\n    monaco.languages.register({ id: PROMQL_LANG_ID, aliases, extensions, mimetypes });\n\n    loader().then((mod) => {\n      monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, mod.language);\n      monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, mod.languageConfiguration);\n    });\n  }\n}\n\nconst MonacoQueryField = (props: Props) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { languageProvider, history, onChange, initialValue } = props;\n\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  return (\n    <div\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n      style={{\n        // FIXME:\n        // this is how the non-monaco query-editor is styled,\n        // through the \"gf-form\" class\n        // so to have the same effect, we do the same.\n        // this should be applied somehow differently probably,\n        // like a min-height on the whole row.\n        marginBottom: '4px',\n      }}\n    >\n      <CodeEditor\n        onBlur={onChange}\n        monacoOptions={options}\n        language=\"promql\"\n        value={initialValue}\n        onBeforeEditorMount={ensurePromQL}\n        onEditorDidMount={(editor, monaco) => {\n          // we construct a DataProvider object\n          const getSeries = (selector: string) => lpRef.current.getSeries(selector);\n\n          const getHistory = () =>\n            Promise.resolve(historyRef.current.map((h) => h.query.expr).filter((expr) => expr !== undefined));\n\n          const getAllMetricNames = () => {\n            const { metrics, metricsMetadata } = lpRef.current;\n            const result = metrics.map((m) => {\n              const metaItem = metricsMetadata?.[m]?.[0];\n              return {\n                name: m,\n                help: metaItem?.help ?? '',\n                type: metaItem?.type ?? '',\n              };\n            });\n\n            return Promise.resolve(result);\n          };\n\n          const dataProvider = { getSeries, getHistory, getAllMetricNames };\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registerd to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(\n            PROMQL_LANG_ID,\n            filteringCompletionProvider\n          );\n\n          autocompleteDisposeFun.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            const text = editor.getValue();\n            props.onChange(text);\n            props.onRunQuery();\n          });\n        }}\n      />\n    </div>\n  );\n};\n\n// we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is agains the style-guidelines.\n\nexport default MonacoQueryField;\n"],"names":["value","ref","useRef","current","promLanguageDefinition","id","extensions","aliases","mimetypes","loader","DefaultBufferLength","nextPropID","CachedNode","WeakMap","NodeProp","constructor","deserialize","this","Error","str","Number","set","propObj","add","match","NodeType","type","result","undefined","closedBy","split","openedBy","group","noProps","Object","create","name","props","flags","spec","length","top","skipped","error","src","Array","isArray","prop","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","RangeError","extend","newTypes","newProps","source","assign","push","Tree","children","positions","toString","c","join","test","isError","JSON","stringify","cursor","pos","side","scope","get","topNode","TreeCursor","moveTo","_tree","fullCursor","TreeNode","resolve","iterate","enter","leave","from","to","mustLeave","isAnonymous","firstChild","nextSibling","parent","balance","maxBufferLength","BalanceBranchFactor","balanceRange","data","_a","buffer","nodeSet","topID","reused","minRepeatType","FlatBufferCursor","contextHash","takeNode","parentStart","minPos","inRepeat","start","end","size","startPos","next","findBufferSize","Uint16Array","skip","endPos","index","copyToBuffer","TreeBuffer","localChildren","localPositions","localInRepeat","reverse","withHash","maxSize","fork","minStart","scan","nodeSize","localSkipped","nodeStart","bufferStart","startIndex","buildTree","tree","hash","empty","childString","endIndex","findChild","dir","after","pick","_parent","nextChild","full","e","BufferNode","BufferContext","hasChild","inner","childAfter","childBefore","nextSignificantParent","val","getChild","before","r","getChildren","cur","context","child","externalSibling","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","lastChild","pop","sibling","d","prevSibling","atLastNode","move","prev","cache","depth","some","ch","outerType","innerType","maxChild","Math","max","ceil","groupFrom","groupStart","only","j","containsType","nodes","elt","stringInput","input","StringInput","string","charCodeAt","lineAfter","slice","min","read","clip","at","Stack","p","state","reducePos","score","bufferBase","curContext","filter","_","concat","cx","parser","StackContext","pushState","reduce","action","dPrec","dynamicPrecedence","minRepeatTerm","storeNode","getGoto","reduceContext","base","count","stateFlag","baseStateID","term","isReduce","shift","nextEnd","nextState","maxNode","shiftContext","apply","useNode","updateContext","tracker","reuse","off","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","force","startOf","frame","recoverByInsert","nextStates","best","s","v","forceReduce","validAction","forceAll","restart","sameState","other","dialectEnabled","dialectID","dialect","emitContext","strict","last","newCx","Recover","rest","offset","goto","StackBufferCursor","maybeNext","Token","accept","TokenGroup","token","groupMask","accEnd","allows","overrides","low","high","mid","readToken","prototype","contextual","fallback","decodeArray","Type","array","out","stop","digit","verbose","process","env","LOG","stackIDs","cutAt","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","CachedToken","super","arguments","extended","mask","clear","dummyToken","TokenCache","tokens","mainToken","actions","tokenizers","getActions","actionIndex","main","tokenizer","updateCachedToken","addActions","eofTerm","specialized","specializers","putAction","pair","Rec","Parse","recovering","nextStackID","nested","nestEnd","nestWrap","topTerm","stacks","advance","finishNested","stopped","stoppedTokens","maybeNest","newStacks","nest","checkNest","advanceStack","tok","startNested","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","splice","stackID","strictCx","cxHash","cached","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","deadEnd","done","forceBase","insert","forceFinish","build","bufferLength","info","findNested","scanForNestEnd","filterEnd","wrapType","startParse","endToken","placeholder","String","fromCodePoint","Dialect","disabled","Parser","cachedDialect","version","tokenArray","tokenData","nodeNames","repeatNodeCount","nodeProps","setProp","nodeID","propSpec","states","Uint32Array","stateData","topTerms","keys","topRules","define","skippedNodes","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","parse","loose","table","groupTag","target","terminal","slot","flag","iPrev","findOffset","configure","config","copy","t","find","obj","hasOwnProperty","call","prec","values","part","Uint8Array","keywordTokens","inf","nan","bool","ignoring","on","group_left","group_right","contextualKeywordTokens","avg","bottomk","count_values","quantile","stddev","stdvar","sum","topk","by","without","and","or","unless","spec_Identifier","__proto__","absent_over_time","absent","abs","avg_over_time","changes","clamp","clamp_max","clamp_min","count_over_time","days_in_month","day_of_month","day_of_week","delta","deriv","exp","floor","histogram_quantile","holt_winters","hour","idelta","increase","irate","label_replace","label_join","last_over_time","ln","log10","log2","max_over_time","min_over_time","minute","month","predict_linear","present_over_time","quantile_over_time","rate","resets","round","scalar","sgn","sort_desc","sqrt","stddev_over_time","stdvar_over_time","sum_over_time","timestamp","time","vector","year","toLowerCase","specializeIdentifier","extendIdentifier","NeverCaseError","direction","walk","path","expectedType","getNodeText","text","isPathMatch","resolverPath","cursorPath","every","item","RESOLVERS","fun","metricNameNode","otherLabels","getLabels","metricName","labelNameNode","labelName","firstListNode","listNode","labelMatchersNode","aggrExpNode","bodyNode","metricIdNode","getNodeInSubtree","idNode","getLabel","labelMatcherNode","nameNode","valueNode","startsWith","endsWith","parsePromQLStringLiteral","labels","matcherNode","label","typeName","getNodeChildren","async","getAllMetricNamesCompletions","dataProvider","getAllMetricNames","metric","insertText","detail","documentation","help","FUNCTION_COMPLETIONS","FUNCTIONS","f","DURATION_COMPLETIONS","makeSelector","allLabels","getLabelNamesForCompletions","suffix","triggerOnInsert","selector","getSeries","possibleLabelNames","usedLabelNames","Set","l","has","getCompletions","intent","metricNames","getHistory","expr","getAllHistoryCompletions","getLabelNamesForSelectorCompletions","getLabelNamesForByCompletions","getLabelValuesForMetricCompletions","getMonacoCompletionItemKind","monaco","languages","CompletionItemKind","Unit","Variable","Snippet","Enum","EnumMember","Constructor","getCompletionProvider","triggerCharacters","provideCompletionItems","model","position","word","getWordAtPosition","range","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","maybeErrorNode","getErrorNode","currentNode","names","resolver","getIntent","getValue","Promise","then","items","maxIndexDigits","suggestions","kind","sortText","padStart","command","title","options","lineNumbers","minimap","enabled","lineDecorationsWidth","wordWrap","overviewRulerLanes","overviewRulerBorder","folding","scrollBeyondLastLine","renderLineHighlight","fontSize","suggestFontSize","fixedOverflowWidgets","PROMQL_LANG_ID","PROMQL_SETUP_STARTED","ensurePromQL","register","mod","setMonarchTokensProvider","language","setLanguageConfiguration","languageConfiguration","containerRef","languageProvider","history","onChange","initialValue","lpRef","useLatest","historyRef","autocompleteDisposeFun","useEffect","style","marginBottom","CodeEditor","onBlur","monacoOptions","onBeforeEditorMount","onEditorDidMount","editor","completionProvider","h","query","metrics","metricsMetadata","m","metaItem","filteringCompletionProvider","getModel","dispose","registerCompletionItemProvider","updateElementHeight","containerDiv","pixelHeight","getContentHeight","height","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","onRunQuery"],"sourceRoot":""}