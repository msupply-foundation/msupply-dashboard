{"version":3,"file":"azureMonitorPlugin.0e7ce18a6cf0f8775a65.js","mappings":"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ACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,oBAAqB,CACnB,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,kBAAmB,CACjB,qCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,gCACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,mD,EAImC,+B,EAAA,M,sFAAA,KAAnBJ,UAAAA,EAEpB/B,MACE,OAAOoC,KAAKC,0BAA0BD,KAAKL,Y,qMC7O/C,MAAMO,EAA6BC,OAAO,2BAEnC,SAASC,EAAYC,GAC1B,OAAKA,EAAQC,SAASC,cAYfF,EAAQC,SAASC,cATlBF,EAAQC,SAASE,UAAYH,EAAQC,SAASG,SACzC,eAKFC,EAAAA,OAAAA,MAAAA,uBAAsC,MAAQ,eAMzD,SAASC,IACP,OAAQD,EAAAA,OAAAA,MAAAA,OACN,KAAKE,EAAAA,EAAAA,OACL,KAAKA,EAAAA,EAAAA,K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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/insights_analytics/insights_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateAnnotation.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.ts"],"sourcesContent":["export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return `${urlPrefix}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return (\n      `${urlPrefix}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` +\n      `&metricnamespace=${encodeURIComponent(metricNamespace)}`\n    );\n  }\n}\n","import { find, get } from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        const value = get(result.value[i], valueFieldName);\n        const text = get(result.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (result.value[i].type === metricDefinition) {\n        list.push({\n          text: result.value[i].name,\n          value: result.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: get(result.data.value[i], textFieldName),\n          value: get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.AppConfiguration/configurationStores',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforMySQL/flexibleServers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.DBforPostgreSQL/flexibleServers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.Network/natGateways',\n      'Microsoft.Network/vpngateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.SignalRService/SignalR',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import { config } from '@grafana/runtime';\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    case AzureCloud.Germany:\n      return 'germanyazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    case 'germanyazuremonitor':\n      return 'https://portal.microsoftazure.de';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n          defaultSubscriptionId: options.jsonData.subscriptionId,\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n        defaultSubscriptionId: options.jsonData.subscriptionId,\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'msi',\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function isAppInsightsConfigured(options: AzureDataSourceSettings) {\n  return !!(options.jsonData.appInsightsAppId && options.secureJsonFields.appInsightsApiKey);\n}\n","import { filter, startsWith } from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport { DataSourceInstanceSettings, ScopedVars, MetricFindValue } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport { resourceTypeDisplayNames } from '../azureMetadata';\nimport { routeNames } from '../utils/common';\n\nconst defaultDropdownValue = 'select';\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n  supportedMetricNamespaces: string[] = [];\n  timeSrv: TimeSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = `${routeNames.azureMonitor}/subscriptions`;\n    this.supportedMetricNamespaces = new SupportedNamespaces(cloud).get();\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!(\n      item.hide !== true &&\n      item.azureMonitor &&\n      item.azureMonitor.resourceGroup &&\n      item.azureMonitor.resourceGroup !== defaultDropdownValue &&\n      item.azureMonitor.resourceName &&\n      item.azureMonitor.resourceName !== defaultDropdownValue &&\n      item.azureMonitor.metricDefinition &&\n      item.azureMonitor.metricDefinition !== defaultDropdownValue &&\n      item.azureMonitor.metricName &&\n      item.azureMonitor.metricName !== defaultDropdownValue &&\n      item.azureMonitor.aggregation &&\n      item.azureMonitor.aggregation !== defaultDropdownValue\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = (item.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filter = templateSrv.replace(f.filter ?? '', scopedVars);\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filter: filter || '*', // send * when empty\n        };\n      });\n\n    return {\n      refId: target.refId,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery && this.defaultSubscriptionId) {\n      return this.getResourceGroups(this.defaultSubscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery && this.defaultSubscriptionId) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.defaultSubscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.defaultSubscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.defaultSubscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery && this.defaultSubscriptionId) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(\n          this.defaultSubscriptionId,\n          resourceGroup,\n          metricDefinition,\n          resourceName,\n          metricNamespace\n        );\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return null;\n  }\n\n  toVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}?api-version=2019-03-01`).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`\n    ).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`\n    )\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result) => {\n        return filter(result, (t) => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result.map((v) => ({\n          value: v.value,\n          text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value,\n        }));\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`\n    ).then((result: any) => {\n      if (!startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return Promise.resolve(validationError);\n    }\n\n    try {\n      const url = `${this.resourcePath}?api-version=2019-03-01`;\n\n      return await this.getResource(url).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Monitor service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Monitor: ';\n      message += e.statusText ? e.statusText + ': ' : '';\n\n      if (e.data && e.data.error && e.data.error.code) {\n        message += e.data.error.code + '. ' + e.data.error.message;\n      } else if (e.data && e.data.error) {\n        message += e.data.error;\n      } else if (e.data) {\n        message += e.data;\n      } else {\n        message += 'Cannot connect to Azure Monitor REST API.';\n      }\n      return {\n        status: 'error',\n        message: message,\n      };\n    }\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { concat, filter, find, forEach, indexOf, intersection, isObject, map, without, keys as _keys } from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.Tables[0].Columns;\n        const rows = this.results[i].result.Tables[0].Rows;\n        data = concat(data, this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton));\n      } else {\n        const value = this.results[i].result.value;\n        const alias = this.results[i].query.alias;\n        data = concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = map(columns, (column) => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    forEach(yaxisesSplit, (yaxis) => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    forEach(rows, (row) => {\n      forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _keys(obj);\n    return indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _keys(segment);\n\n    return filter(without(keys, 'start', 'end'), (key) => {\n      return isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _keys(dataObj);\n    return intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { metrics: any }) {\n    const keys = _keys(result.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results && this.results.Tables) {\n      for (let i = 0; i < this.results.Tables[0].Rows.length; i++) {\n        const column = this.results.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { DataQueryRequest, DataSourceInstanceSettings, ScopedVars, MetricFindValue } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { isString } from 'lodash';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType, DatasourceValidationResult } from '../types';\nimport { routeNames } from '../utils/common';\nimport ResponseParser from './response_parser';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\n\nexport default class AppInsightsDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  resourcePath: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId || '';\n\n    this.resourcePath = `${routeNames.appInsights}/${this.version}/apps/${this.applicationId}`;\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: getTemplateSrv().replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.appInsights;\n\n    if (!item) {\n      return target;\n    }\n\n    const old: any = item;\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (old.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(old.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (old.groupBy && !item.dimension) {\n      item.dimension = [old.groupBy];\n    }\n    if (old.filter && !item.dimensionFilter) {\n      item.dimensionFilter = old.filter;\n    }\n\n    // Migrate single dimension string to array\n    if (isString(item.dimension)) {\n      if (item.dimension === 'None') {\n        item.dimension = [];\n      } else {\n        item.dimension = [item.dimension as string];\n      }\n    }\n    if (!item.dimension) {\n      item.dimension = [];\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.ApplicationInsights,\n      appInsights: {\n        timeGrain: templateSrv.replace((item.timeGrain || '').toString(), scopedVars),\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        aggregation: templateSrv.replace(item.aggregation, scopedVars),\n        dimension: item.dimension.map((d) => templateSrv.replace(d, scopedVars)),\n        dimensionFilter: templateSrv.replace(item.dimensionFilter, scopedVars),\n        alias: item.alias,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(getTemplateSrv().replace(metricName));\n    }\n\n    return null;\n  }\n\n  testDatasource(): Promise<DatasourceValidationResult> {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path)\n      .then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Application Insights service.',\n          title: 'Success',\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  getMetricNames() {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const path = `${this.resourcePath}/query/schema`;\n    return this.getResource(path).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw?.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw?.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { concat, find, flattenDeep, forEach, get, map } from 'lodash';\nimport { AnnotationEvent, dateTime, TimeSeries } from '@grafana/data';\nimport { AzureLogsTableData, AzureLogsVariable } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\nexport default class ResponseParser {\n  declare columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.tables[0].columns;\n      const rows = this.results[i].result.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    forEach(rows, (row) => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: map(columns, (col) => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    forEach(queryResult, (result) => {\n      forEach(flattenDeep(result.rows), (row) => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    forEach(queryResult, (result) => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      forEach(result.rows, (row) => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(sourceSchema: AzureLogAnalyticsMetadata, nameOrIdOrSomething: string) {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n  };\n}\n","import { map } from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  ScopedVars,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n} from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { interpolateVariable, routeNames } from '../utils/common';\n\ninterface AdhocQuery {\n  datasourceId: number;\n  path: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: any) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const metadata = await this.getMetadata(resourceUri);\n    return transformMetadataToKustoSchema(metadata, resourceUri);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureLogAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.LogAnalytics,\n\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resource,\n\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string, optionalOptions?: unknown): Promise<MetricFindValue[]> {\n    // workspaces() - Get workspaces in the default subscription\n    const workspacesQuery = query.match(/^workspaces\\(\\)/i);\n    if (workspacesQuery) {\n      if (this.defaultSubscriptionId) {\n        return this.getWorkspaces(this.defaultSubscriptionId);\n      } else {\n        throw new Error(\n          'No subscription ID. Specify a default subscription ID in the data source config to use workspaces() without a subscription ID'\n        );\n      }\n    }\n\n    // workspaces(\"abc-def-etc\") - Get workspaces a specified subscription\n    const workspacesQueryWithSub = query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i);\n    if (workspacesQueryWithSub) {\n      return this.getWorkspaces((workspacesQueryWithSub[1] || '').trim());\n    }\n\n    // Execute the query as KQL to the default or first workspace\n    return this.getFirstWorkspace().then((resourceURI) => {\n      if (!resourceURI) {\n        return [];\n      }\n\n      const queries = this.buildQuery(query, optionalOptions, resourceURI);\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then((results) => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch((err) => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n\n          throw err;\n        });\n    }) as Promise<MetricFindValue[]>;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace)\n      ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasourceId: this.id,\n        path: path,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.getResource(query.path)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return validationError;\n    }\n\n    let resourceOrWorkspace: string;\n    try {\n      const result = await this.getFirstWorkspace();\n      if (!result) {\n        return {\n          status: 'error',\n          message: 'Workspace not found.',\n        };\n      }\n      resourceOrWorkspace = result;\n    } catch (e) {\n      let message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n\n    try {\n      const path = isGUIDish(resourceOrWorkspace)\n        ? `${this.resourcePath}/v1/workspaces/${resourceOrWorkspace}/metadata`\n        : `${this.resourcePath}/v1${resourceOrWorkspace}/metadata`;\n\n      return await this.getResource(path).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Log Analytics service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Log Analytics: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { ScopedVars, DataSourceInstanceSettings } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from '../types';\nimport AppInsightsDatasource from '../app_insights/app_insights_datasource';\n\nexport default class InsightsAnalyticsDatasource extends AppInsightsDatasource {\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.insightsAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const query = item.rawQueryString && !item.query ? item.rawQueryString : item.query;\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.InsightsAnalytics,\n      insightsAnalytics: {\n        query: getTemplateSrv().replace(query, scopedVars),\n        resultFormat: item.resultFormat,\n      },\n    };\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { interpolateVariable } from '../utils/common';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureResourceGraph;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const variableNames = templateSrv.getVariables().map((v) => `$${v.name}`);\n    const subscriptionVar = _.find(target.subscriptions, (sub) => _.includes(variableNames, sub));\n    const interpolatedSubscriptions = templateSrv\n      .replace(subscriptionVar, scopedVars, (v: any) => v)\n      .split(',')\n      .filter((v) => v.length > 0);\n    const subscriptions = [\n      ...interpolatedSubscriptions,\n      ..._.filter(target.subscriptions, (sub) => !_.includes(variableNames, sub)),\n    ];\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n}\n","import { AzureMonitorQuery, AzureQueryType } from '../types';\nimport { AnnotationQuery } from '@grafana/data';\n\n// The old Angular annotations editor put some properties (rawQuery, workspace, subscription)\n// on the root annotation object, rather than down in the 'targets' query value\n// This migration moves them to a Log Analytics query compatible with the React query editor\n// The old Angular annotations editor did not support any other query types.\nexport default function migrateAnnotation(annotation: AnnotationQuery<AzureMonitorQuery>) {\n  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;\n  const oldWorkspace = typeof annotation.workspace === 'string' ? annotation.workspace : null;\n\n  if (!(oldQuery && oldWorkspace && !annotation.target?.azureLogAnalytics?.query)) {\n    return annotation;\n  }\n\n  const newQuery: AzureMonitorQuery = {\n    ...(annotation.target ?? {}),\n    refId: annotation.target?.refId ?? 'Anno',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: oldQuery,\n      resource: oldWorkspace,\n    },\n  };\n\n  return {\n    ...annotation,\n    rawQuery: undefined,\n    workspace: undefined,\n    subscription: undefined,\n    queryType: undefined,\n    target: newQuery,\n  };\n}\n","import { cloneDeep, upperFirst } from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType, DatasourceValidationResult } from './types';\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport InsightsAnalyticsDatasource from './insights_analytics/insights_analytics_datasource';\nimport { datasourceMigrations } from './utils/migrateQuery';\nimport { map } from 'rxjs/operators';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport { getAzureCloud } from './credentials';\nimport migrateAnnotation from './utils/migrateAnnotation';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  annotations = {\n    prepareAnnotation: migrateAnnotation,\n  };\n\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n  /** @deprecated */\n  appInsightsDatasource?: AppInsightsDatasource;\n  /** @deprecated */\n  insightsAnalyticsDatasource?: InsightsAnalyticsDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType]?:\n      | AzureMonitorDatasource\n      | AzureLogAnalyticsDatasource\n      | AzureResourceGraphDatasource\n      | AppInsightsDatasource\n      | InsightsAnalyticsDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    const cloud = getAzureCloud(instanceSettings);\n    if (cloud === 'azuremonitor' || cloud === 'chinaazuremonitor') {\n      // AppInsights and InsightAnalytics are only supported for Public and Azure China clouds\n      this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings);\n      this.insightsAnalyticsDatasource = new InsightsAnalyticsDatasource(instanceSettings);\n      this.pseudoDatasource[AzureQueryType.ApplicationInsights] = this.appInsightsDatasource;\n      this.pseudoDatasource[AzureQueryType.InsightsAnalytics] = this.insightsAnalyticsDatasource;\n    }\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = datasourceMigrations(baseTarget);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string, optionalOptions?: unknown) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource?.metricFindQueryInternal(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQueryInternal(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQueryInternal(query, optionalOptions);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const promises: Array<Promise<DatasourceValidationResult>> = [];\n\n    promises.push(this.azureMonitorDatasource.testDatasource());\n    promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n\n    if (this.appInsightsDatasource?.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    return await Promise.all(promises).then((results) => {\n      let status: 'success' | 'error' = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.replaceTemplateVariable(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup)\n    );\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition)\n    );\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace)\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName)\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace),\n      this.replaceTemplateVariable(metricName)\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource?.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource?.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource?.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return ds?.applyTemplateVariables(query, scopedVars) ?? query;\n    });\n\n    return mapped;\n  }\n\n  replaceTemplateVariable(variable: string) {\n    return this.templateSrv.replace(variable);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  isTemplateVariable(value: string) {\n    return this.getVariables().includes(value);\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.ApplicationInsights:\n      return !!query.appInsights;\n\n    case AzureQueryType.InsightsAnalytics:\n      return !!query.insightsAnalytics;\n\n    default:\n      return false;\n  }\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nimport { AzureAuthType, AzureCredentials } from '../types';\nimport { isCredentialsComplete } from '../credentials';\nconst { Select, Input } = LegacyForms;\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange?: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n  children?: JSX.Element;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions, disabled } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  menuShouldPortal\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n                </div>\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset} disabled={disabled}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <div className=\"width-15\">\n                    <Input\n                      className=\"width-30\"\n                      placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                      value={credentials.clientSecret || ''}\n                      onChange={onClientSecretChange}\n                      disabled={disabled}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-30\">\n                <Select\n                  menuShouldPortal\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    type=\"button\"\n                    onClick={onLoadSubscriptions}\n                    disabled={!hasRequiredFields}\n                  >\n                    Load Subscriptions\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {props.children}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\nimport { getCredentials, updateCredentials } from '../credentials';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions } = props;\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    updateOptions((options) => updateCredentials(options, credentials));\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Authentication</h3>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        getSubscriptions={getSubscriptions}\n        disabled={props.options.readOnly}\n      />\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { Button, Alert } from '@grafana/ui';\nimport { AzureDataSourceSettings } from '../types';\nimport { getCredentials } from '../credentials';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n}\n\nexport const AnalyticsConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions } = props;\n  const primaryCredentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  // Only show a section for setting LogAnalytics credentials if\n  // they were set from before with different values and the\n  // authType is supported\n  const logCredentialsEnabled =\n    primaryCredentials.authType === 'clientsecret' && props.options.jsonData.azureLogAnalyticsSameAs === false;\n\n  const onClearAzLogsCreds = () => {\n    updateOptions((options) => {\n      return {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureLogAnalyticsSameAs: true,\n        },\n      };\n    });\n  };\n\n  return logCredentialsEnabled ? (\n    <>\n      <h3 className=\"page-heading\">Azure Monitor Logs</h3>\n      <>\n        <Alert severity=\"error\" title=\"Deprecated\">\n          Using different credentials for Azure Monitor Logs is no longer supported. Authentication information above\n          will be used instead. Please create a new data source with the credentials below.\n        </Alert>\n\n        <AzureCredentialsForm\n          managedIdentityEnabled={false}\n          credentials={{\n            ...primaryCredentials,\n            authType: 'clientsecret',\n            // Use deprecated Log Analytics credentials read-only\n            // to help with a possible migration\n            tenantId: props.options.jsonData.logAnalyticsTenantId,\n            clientId: props.options.jsonData.logAnalyticsClientId,\n          }}\n          disabled={true}\n        >\n          <Button onClick={onClearAzLogsCreds}>Clear Azure Monitor Logs Credentials</Button>\n        </AzureCredentialsForm>\n      </>\n    </>\n  ) : null;\n};\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { InlineFormLabel, Button, LegacyForms, Alert } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport { AzureDataSourceSettings, AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../types';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  onUpdateJsonDataOption: (\n    key: keyof AzureDataSourceJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onUpdateSecureJsonDataOption: (\n    key: keyof AzureDataSourceSecureJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onResetOptionKey: (key: keyof AzureDataSourceSecureJsonData) => void;\n}\nexport class InsightsConfig extends PureComponent<Props> {\n  onAppInsightsResetApiKey = () => {\n    this.props.onResetOptionKey('appInsightsApiKey');\n  };\n\n  render() {\n    const { options, onUpdateJsonDataOption, onUpdateSecureJsonDataOption } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Application Insights</h3>\n        <Alert severity=\"info\" title=\"Application Insights credentials are deprecated\">\n          Configure using Azure AD App Registration above and update existing queries to use Metrics or Logs.\n        </Alert>\n        <div className=\"gf-form-group\">\n          {options.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    type=\"button\"\n                    onClick={this.onAppInsightsResetApiKey}\n                    disabled={this.props.options.readOnly}\n                  >\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={options.secureJsonData!.appInsightsApiKey || ''}\n                    onChange={onUpdateSecureJsonDataOption('appInsightsApiKey')}\n                    disabled={this.props.options.readOnly}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={options.jsonData.appInsightsAppId || ''}\n                  onChange={onUpdateJsonDataOption('appInsightsAppId')}\n                  disabled={this.props.options.readOnly}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n  updateDatasourcePluginResetOption,\n  updateDatasourcePluginSecureJsonDataOption,\n} from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { MonitorConfig } from './MonitorConfig';\nimport { AnalyticsConfig } from './AnalyticsConfig';\nimport { getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { InsightsConfig } from './InsightsConfig';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { isAppInsightsConfigured } from '../credentials';\nimport { routeNames } from '../utils/common';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\ninterface ErrorMessage {\n  title: string;\n  description: string;\n  details?: string;\n}\n\nexport interface State {\n  unsaved: boolean;\n  appInsightsInitiallyConfigured: boolean;\n  error?: ErrorMessage;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n      appInsightsInitiallyConfigured: isAppInsightsConfigured(props.options),\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    try {\n      const result = await getBackendSrv()\n        .fetch({\n          url: this.baseURL + query,\n          method: 'GET',\n        })\n        .toPromise();\n\n      this.setState({ error: undefined });\n      return ResponseParser.parseSubscriptionsForSelect(result);\n    } catch (err) {\n      this.setState({\n        error: {\n          title: 'Error requesting subscriptions',\n          description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n          details: err?.data?.message,\n        },\n      });\n      return Promise.resolve([]);\n    }\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateJsonDataOption = (key: keyof AzureDataSourceJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateSecureJsonDataOption = (key: keyof AzureDataSourceSecureJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginSecureJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private resetSecureKey = (key: keyof AzureDataSourceSecureJsonData) => {\n    updateDatasourcePluginResetOption(this.props, key);\n  };\n\n  render() {\n    const { options } = this.props;\n    const { error } = this.state;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        <AnalyticsConfig options={options} updateOptions={this.updateOptions} />\n        {this.state.appInsightsInitiallyConfigured && (\n          <InsightsConfig\n            options={options}\n            onUpdateJsonDataOption={this.onUpdateJsonDataOption}\n            onUpdateSecureJsonDataOption={this.onUpdateSecureJsonDataOption}\n            onResetOptionKey={this.resetSecureKey}\n          />\n        )}\n\n        {error && (\n          <Alert severity=\"error\" title={error.title}>\n            <p>{error.description}</p>\n            {error.details && <details style={{ whiteSpace: 'pre-wrap' }}>{error.details}</details>}\n          </Alert>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { DataSourcePlugin } from '@grafana/data';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport AzureMonitorQueryEditor from './components/QueryEditor';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(AzureMonitorQueryEditor);\n"],"names":["UrlBuilder","baseUrl","subscriptionId","resourceGroup","metricDefinition","resourceName","apiVersion","metricDefinitionArray","split","resourceNameArray","urlArray","shift","i","push","join","metricNamespace","encodeURIComponent","ResponseParser","result","textFieldName","valueFieldName","list","value","length","find","get","text","type","name","metricName","defaultAggTypes","metricData","v","primaryAggType","primaryAggregationType","supportedAggTypes","supportedAggregationTypes","supportedTimeGrains","label","parseTimeGrains","metricAvailabilities","dimensions","parseDimensions","timeGrains","forEach","avail","timeGrain","TimeGrainConverter","metadataDimensions","map","dimension","localizedValue","data","properties","SupportedNamespaces","constructor","cloudName","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","this","supportedMetricNamespaces","concealed","Symbol","getAuthType","options","jsonData","azureAuthType","tenantId","clientId","config","getDefaultAzureCloud","AzureCloud","undefined","Error","getAzurePortalUrl","azureCloud","getAzureCloud","getSecret","secureJsonFields","clientSecret","secret","secureJsonData","getCredentials","authType","defaultSubscriptionId","defaultDropdownValue","AzureMonitorDatasource","DataSourceWithBackend","instanceSettings","super","timeSrv","getTimeSrv","cloud","resourcePath","routeNames","azurePortalUrl","isConfigured","validateDatasource","filterQuery","item","hide","azureMonitor","aggregation","applyTemplateVariables","target","scopedVars","timeGrainUnit","TimegrainConverter","templateSrv","getTemplateSrv","replace","subscription","toString","top","dimensionFilters","filter","f","operator","refId","queryType","AzureQueryType","allowedTimeGrainsMs","alias","metricFindQueryInternal","query","match","getSubscriptions","getResourceGroups","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","getMetricDefinitions","metricDefinitionsQueryWithSub","resourceNamesQuery","getResourceNames","resourceNamesQueryWithSub","metricNamespaceQuery","getMetricNamespaces","metricNamespaceQueryWithSub","metricNamesQuery","indexOf","getMetricNames","metricNamesQueryWithSub","metric","trim","getResource","then","parseSubscriptions","parseResponseValues","t","toLowerCase","shouldHardcodeBlobStorage","resourceTypeDisplayNames","startsWith","parseResourceNames","url","buildAzureMonitorGetMetricNamespacesUrl","apiPreviewVersion","buildAzureMonitorGetMetricNamesUrl","getMetricMetadata","parseMetadata","validationError","Promise","resolve","response","status","message","title","e","statusText","error","code","isValidConfigField","field","results","parseQueryResult","columns","raw","xaxis","yaxises","yaxis","spliton","Tables","Columns","rows","Rows","concat","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","datapoints","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","end","hasSegmentsField","segments","j","getTargetName","meta","dataTarget","segment","segmentName","segmentValue","prop","isObject","regex","g1","g2","group","obj","keys","_keys","without","key","dataObj","intersection","dateTimeValue","dateTime","valueOf","metrics","toTextValueList","defaultAggregation","supportedAggregations","supportedGroupBy","all","parseGroupBys","parseQuerySchema","Type","columnTable","columnName","columnType","OrderedColumns","Name","values","AppInsightsDatasource","applicationId","appInsightsAppId","version","createRawQueryRequest","timeColumn","valueColumn","segmentColumn","appInsights","rawQuery","rawQueryString","old","timeGrainCount","groupBy","dimensionFilter","isString","d","appInsightsGroupByQuery","getGroupBys","testDatasource","path","catch","getQuerySchema","LogAnalyticsQuerystringBuilder","defaultTimeField","generate","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","interval","uriString","from","range","startOf","toISOString","rangeRaw","to","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","substring","templateVar","tables","resultFormat","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","executedQueryString","col","parseToVariables","queryResult","variables","flattenDeep","transformToAnnotations","textIndex","tagsIndex","annotation","time","Math","floor","tags","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","functions","fn","params","parameters","arg","defaultValue","cslDefaultValue","body","inputParameters","AzureLogAnalyticsDatasource","cache","Map","azureMonitorPath","getWorkspaceList","val","id","workspaceListUrl","resourceUri","nameOrIdOrSomething","database","majorVersion","minorVersion","clusterType","cluster","connectionString","databases","transformMetadataToKustoSchema","getMetadata","azureLogAnalytics","resource","workspace","firstWorkspace","interpolateVariable","request","pipe","mergeMap","res","processResponse","df","encodedQuery","custom","buildDeepLink","fields","links","targetBlank","customMeta","base64Enc","workspaceId","details","getWorkspaceDetails","o","customerId","exec","optionalOptions","getWorkspaces","workspacesQueryWithSub","getFirstWorkspace","resourceURI","queries","buildQuery","promises","doQueries","err","innererror","querystring","isGUIDish","datasourceId","getDefaultOrFirstSubscription","annotationQuery","reject","resourceOrWorkspace","getErrorMessage","InsightsAnalyticsDatasource","insightsAnalytics","AzureResourceGraphDatasource","azureResourceGraph","variableNames","getVariables","subscriptionVar","_","subscriptions","sub","migrateAnnotation","oldQuery","oldWorkspace","newQuery","Datasource","DataSourceApi","prepareAnnotation","azureMonitorDatasource","azureLogAnalyticsDatasource","azureResourceGraphDatasource","resourcePickerData","ResourcePickerData","pseudoDatasource","appInsightsDatasource","insightsAnalyticsDatasource","byType","baseTarget","targets","datasourceMigrations","hasQueryForType","has","queryForType","cloneDeep","requestId","set","observables","Array","entries","req","ds","forkJoin","frame","state","LoadingState","of","aiResult","amResult","alaResult","upperFirst","replaceTemplateVariable","getAppInsightsMetricNames","getAppInsightsMetricMetadata","getAppInsightsColumns","logAnalyticsColumns","getAzureLogAnalyticsWorkspaces","interpolateVariablesInQueries","variable","isTemplateVariable","includes","Select","Input","LegacyForms","authTypeOptions","AzureCredentialsForm","props","credentials","azureCloudOptions","onCredentialsChange","disabled","hasRequiredFields","isCredentialsComplete","setSubscriptions","useState","loadSubscriptionsClicked","onLoadSubscriptions","useReducer","useEffect","updateSubscriptions","canceled","received","autoSelect","onSubscriptionChange","opt","selected","updated","className","managedIdentityEnabled","InlineFormLabel","tooltip","menuShouldPortal","onChange","isDisabled","placeholder","event","Button","variant","onClick","size","children","azureClouds","MonitorConfig","updateOptions","useMemo","updateCredentials","readOnly","AnalyticsConfig","primaryCredentials","azureLogAnalyticsSameAs","Alert","severity","logAnalyticsTenantId","logAnalyticsClientId","InsightsConfig","PureComponent","onResetOptionKey","render","onUpdateJsonDataOption","onUpdateSecureJsonDataOption","appInsightsApiKey","onAppInsightsResetApiKey","ConfigEditor","optionsFunc","onOptionsChange","setState","unsaved","async","getBackendSrv","put","updateDatasourcePluginOption","datasource","saveOptions","fetch","baseURL","method","toPromise","parseSubscriptionsForSelect","description","updateDatasourcePluginJsonDataOption","currentTarget","updateDatasourcePluginSecureJsonDataOption","updateDatasourcePluginResetOption","appInsightsInitiallyConfigured","resetSecureKey","style","whiteSpace","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","AzureMonitorQueryEditor"],"sourceRoot":""}