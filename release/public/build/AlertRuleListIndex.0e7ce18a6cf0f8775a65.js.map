{"version":3,"file":"AlertRuleListIndex.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditCloudGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleListIndex.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, LinkButton, Select, VerticalGroup, FilterInput } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  menuShouldPortal\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { CallToActionCard } from '@grafana/ui';\n\nexport const NoRulesSplash: FC = () => {\n  if (contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    if (!filters.queryString && !filters.dataSource && !filters.alertState) {\n      return namespaces;\n    }\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\n\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Groups',\n    value: 'group',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputWidth}>\n        <Label>Select data source</Label>\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          current={dataSource}\n          onChange={handleDataSourceChange}\n        />\n      </div>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <div className={styles.rowChild}>\n            <Label>\n              <Tooltip\n                content={\n                  <div>\n                    Filter rules and alerts using label querying, ex:\n                    <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" className={styles.tooltip} />\n              </Tooltip>\n              Search by label\n            </Label>\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] || 'group')}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      border-bottom: 1px solid ${theme.colors.border1};\n      padding-bottom: ${theme.spacing.sm};\n\n      & > div {\n        margin-bottom: ${theme.spacing.sm};\n      }\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n      margin-top: ${theme.spacing.sm};\n    `,\n    tooltip: css`\n      margin: 0 ${theme.spacing.xs};\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo } from 'react';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { durationValidationPattern } from '../../utils/time';\nimport { css } from '@emotion/css';\nimport { useDispatch } from 'react-redux';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: Props): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty } }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', {\n                  pattern: durationValidationPattern,\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button variant=\"secondary\" type=\"button\" disabled={loading} onClick={onClose} fill=\"outline\">\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n","import { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useState } from 'react';\nimport { HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { ActionIcon } from './ActionIcon';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { RuleStats } from './RuleStats';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace }) => {\n  const { rulesSource } = namespace;\n  const styles = useStyles2(getStyles);\n\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon key=\"edit\" icon=\"pen\" tooltip=\"edit\" to={baseUrl + '/settings'} target=\"__blank\" />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (hasRuler(rulesSource)) {\n    actionIcons.push(\n      <ActionIcon\n        data-testid=\"edit-group\"\n        key=\"edit\"\n        icon=\"pen\"\n        tooltip=\"edit\"\n        onClick={() => setIsEditingGroup(true)}\n      />\n    );\n  }\n\n  const groupName = isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>{groupName}</h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal group={group} namespace={namespace} onClose={() => setIsEditingGroup(false)} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport pluralize from 'pluralize';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(() => rulesDataSources.filter((ds) => rules[ds.name]?.loading), [\n    rules,\n    rulesDataSources,\n  ]);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespaces?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup group={group} key={`${namespace.name}-${group.name}`} namespace={namespace} />\n        ))\n      )}\n      {namespaces?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useState } from 'react';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useState(false);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [promRequestErrors, rulerRequestErrors] = [promRuleRequests, rulerRuleRequests].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from <a href={'datasources/edit/${dataSource.uid}'}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [promRuleRequests, rulerRuleRequests]);\n\n  return (\n    <>\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  variant=\"link\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n});\n","import { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2, LinkButton, withErrorBoundary } from '@grafana/ui';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { css } from '@emotion/css';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useLocation } from 'react-router-dom';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { RuleStats } from './components/rules/RuleStats';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nexport const RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n\n    const [queryParams] = useQueryParams();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        <RuleListErrors />\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              <div />\n              {(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n});\n","import { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useMemo } from 'react';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <GrafanaRules namespaces={grafanaNamespaces} />\n      <CloudRules namespaces={cloudNamespaces} />\n    </>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { config } from '@grafana/runtime';\nimport { RuleList } from './unified/RuleList';\nimport AlertRuleList from './AlertRuleList';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.unifiedAlertingEnabled ? RuleList : AlertRuleList;\n","import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = <Icon className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { CombinedRule } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    promRule,\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances promRule={promRule} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { RuleDetails } from './RuleDetails';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { Annotation } from '../../utils/constants';\nimport { RuleState } from './RuleState';\nimport { RuleHealth } from './RuleHealth';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td + td {\n      padding: ${theme.spacing(0, 1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  state: css`\n    width: 110px;\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          const { rulesSource } = namespace;\n          return isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n","import { RulesSource } from 'app/types/unified-alerting';\nimport { useCallback } from 'react';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler(): (rulesSource: string | RulesSource) => boolean {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n  return useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","rule","onTogglePause","ruleUrl","url","panelId","renderText","text","highlightClassName","textToHighlight","searchWords","Card","heading","href","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","LinkButton","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","VerticalGroup","spacing","src","alt","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","navModel","getNavModel","navIndex","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Page","FilterInput","placeholder","onChange","onSearchQueryChange","Select","menuShouldPortal","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","NoRulesSplash","contextSrv","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","CallToActionCard","message","callToActionElement","reduceNamespaces","filters","namespaceAcc","namespace","groups","reduce","reduceGroups","length","push","groupAcc","group","rules","dataSource","isGrafanaRulerRule","rulerRule","isQueryingDataSource","queryString","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","promRule","type","PromRuleType","alerts","some","alert","alertState","isAlertingRule","grafana_alert","data","find","query","datasourceUid","ds","getDataSourceSrv","getInstanceSettings","ViewOptions","getStyles","theme","container","css","colors","border1","sm","inputWidth","flexRow","spaceBetween","rowChild","tooltip","xs","clearButton","setQueryParams","filterKey","setFilterKey","useState","Math","floor","random","dataSourceKey","queryStringKey","getFiltersFromUrlParams","styles","useStyles","stateOptions","Object","entries","PromAlertingRuleState","key","alertStateToReadable","handleQueryStringChange","debounce","e","target","searchIcon","Label","DataSourcePicker","alerting","noDefault","dataSourceValue","cx","Tooltip","content","Input","prefix","defaultValue","RadioButtonGroup","String","view","fullWidth","setTimeout","StateColoredText","children","status","useStyles2","success","warning","error","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRule","isRecordingRulerRule","forEach","statsComponents","pluralize","prev","curr","idx","Fragment","EditCloudGroupModal","onClose","loading","dispatched","useUnifiedAlertingSelector","updateLotexNamespaceAndGroup","initialAsyncRequestState","defaultValues","namespaceName","groupName","groupInterval","interval","unifiedAlerting","modal","Form","onSubmit","updateLotexNamespaceAndGroupAction","rulesSourceName","getRulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","register","errors","formState","isDirty","Field","invalid","required","pattern","durationValidationPattern","disabled","fill","JSON","stringify","RulesGroup","React","isCollapsed","setIsCollapsed","isEditingGroup","setIsEditingGroup","hasRuler","useHasRuler","folderUID","namespace_uid","folder","useFolder","actionIcons","HorizontalGroup","Spinner","GRAFANA_RULES_SOURCE_NAME","baseUrl","kbn","canSave","ActionIcon","A","to","canAdmin","isCloudRulesSource","wrapper","header","CollapseToggle","collapseToggle","onToggle","placement","dataSourceIcon","meta","logos","small","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","displayName","background","breakpoints","down","dataSourceOrigin","CloudRules","promRules","rulesDataSources","getRulesDataSources","dataSourcesLoading","sectionHeader","LoadingPlaceholder","loader","xl","GrafanaRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","showGroupColumn","RuleListErrors","expanded","setExpanded","closed","setClosed","promRuleRequests","rulerRuleRequests","rulerRules","promRequestErrors","rulerRequestErrors","requests","result","isRulerNotSupportedResponse","grafanaPromError","grafanaRulerError","uid","Alert","severity","onRemove","moreButton","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","sort","a","b","localeCompare","ns","isGrafanaRulesSource","groupedRules","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","ViewComponent","fetchAllPromAndRulerRulesAction","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","haveResults","keys","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","urlUtil","returnTo","pathname","style","border","medium","AlertRuleList","async","loadAlertRules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","AppEvents","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","useSelector","DynamicTableWithGuidelines","renderExpandedContent","index","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","tooltipPlacement","rest","iconEl","getStyle","Link","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","up","emptyMessage","wrapperClass","wrapperMargin","seenKeys","ruleIdx","columns","renderCell","isDeleting","isCreating","RuleState","RuleHealth","Annotation","useColumns","TableComponent","DynamicTable","cols","isExpandable","shape","borderRadius","table","weak","evenRow","primary"],"sourceRoot":""}