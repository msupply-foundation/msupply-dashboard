{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack:///./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilenceTableRow.tsx","webpack:///./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack:///./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack:///./public/app/features/alerting/unified/utils/matchers.ts","webpack:///./public/app/features/alerting/unified/Silences.tsx","webpack:///./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack:///./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack:///./public/app/features/alerting/unified/styles/table.ts","webpack:///./public/app/core/hooks/useCleanup.ts","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/CollapseToggle.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","ActionButton","className","restProps","Button","variant","size","cx","useStyles","getStyle","theme","css","typography","sm","alertStateToState","AlertState","Active","Unprocessed","Suppressed","AmAlertStateTag","state","StateTag","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","useState","tableStyles","useStyles2","getAlertTableStyles","alertDuration","toDuration","dateTimeAsMoment","endsAt","diff","startsAt","asSeconds","alertName","Object","entries","labels","reduce","name","labelKey","labelValue","CollapseToggle","onToggle","collapsed","status","actionsCell","ActionIcon","icon","to","generatorURL","tooltip","colSpan","AlertLabels","getStyles","tableMargin","spacing","colState","colName","SilencedAlertsTable","silencedAlerts","styles","length","table","colExpand","map","index","evenRow","fingerprint","silenceStateToState","SilenceState","Expired","Pending","SilenceStateTag","matchersCell","xs","alertRulesCell","SilenceTableRow","silence","alertManagerSourceName","dispatch","useDispatch","matchers","comment","createdBy","startsAtDate","dateMath","parse","endsAtDate","duration","intervalToAbbreviatedDurationString","start","Date","end","detailsColspan","contextSrv","isEditor","value","Matchers","format","href","makeAMLink","id","onClick","expireSilenceAction","NoSilencesSplash","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","callToActionElement","message","topButtonContainer","addNewSilence","colMatchers","callout","colors","background","secondary","info","border","calloutIcon","text","SilencesTable","silences","alertManagerAlerts","filter","silencedBy","includes","undefined","wrapper","row","removeButton","MatchersField","formApi","useFormContext","register","formState","errors","fields","append","remove","useFieldArray","label","required","matcher","invalid","error","defaultValue","placeholder","defaultChecked","isRegex","isEqual","type","SilencePeriod","control","getValues","field","onChange","onChangeStartsAt","fieldState","startsAtInvalid","useController","rules","validate","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","dateTime","timeRange","raw","newValue","hideTimeZone","hideQuickRanges","defaultsFromQuery","queryParams","defaults","formMatchers","split","x","trim","parseMatcher","textArea","flexRow","SilencesEditor","defaultValues","now","interval","addDurationToDate","hours","toISOString","matcherName","matcherValue","DefaultTimeZone","config","bootData","user","getDefaultFormValues","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","useCleanup","unifiedAlerting","handleSubmit","watch","setValue","clearErrors","prevDuration","setPrevDuration","useDebounce","isValidDate","parseDuration","startValue","valueOf","nextDuration","onSubmit","data","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","keys","disabled","fill","withErrorBoundary","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","initialAsyncRequestState","isRoot","pathname","endsWith","useEffect","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","find","AlertingPageWrapper","pageId","AlertManagerPicker","current","severity","exact","path","match","params","style","onRemoveLabel","removeLabel","operator","matcherToOperator","target","tooltipPlacement","rest","iconEl","content","placement","shape","borderRadius","weak","primary","stateSelector","selectorRef","useRef","cleanUpAction","self","window","apply","Function","prototype","Timeout","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","storeSource","get","options","imgUrl","meta","getAllDataSources","DataSourceType","Alertmanager","substr","logos","small","data-testid","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","children","isLoading","navModel","getNavModel","useSelector","navIndex","Contents","restOfProps","expandButton"],"mappings":"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","file":"AlertSilences.de0e7cb4f02a375bece7.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { Button, ButtonProps } from '@grafana/ui/src/components/Button';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => (\n  <Button variant=\"secondary\" size=\"xs\" className={cx(useStyles(getStyle), className)} {...restProps} />\n);\n\nexport const getStyle = (theme: GrafanaTheme) => css`\n  height: 24px;\n  font-size: ${theme.typography.size.sm};\n`;\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useState } from 'react';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { dateTimeAsMoment, toDuration } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const alertDuration = toDuration(dateTimeAsMoment(alert.endsAt).diff(alert.startsAt)).asSeconds();\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {alertDuration} seconds</td>\n        <td>{alertName}</td>\n        <td className={tableStyles.actionsCell}>\n          <ActionIcon icon=\"chart-line\" to={alert.generatorURL} tooltip=\"View in explorer\" />\n        </td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import React, { FC, Fragment, useState } from 'react';\nimport { dateMath, GrafanaTheme, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { Silence, AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { useStyles, Link } from '@grafana/ui';\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { expireSilenceAction } from '../../state/actions';\nimport { useDispatch } from 'react-redux';\nimport { Matchers } from './Matchers';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\ninterface Props {\n  className?: string;\n  silence: Silence;\n  silencedAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilenceTableRow: FC<Props> = ({ silence, className, silencedAlerts, alertManagerSourceName }) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const dispatch = useDispatch();\n\n  const styles = useStyles(getStyles);\n  const { status, matchers = [], startsAt, endsAt, comment, createdBy } = silence;\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n\n  const handleExpireSilenceClick = () => {\n    dispatch(expireSilenceAction(alertManagerSourceName, silence.id));\n  };\n\n  const detailsColspan = contextSrv.isEditor ? 4 : 3;\n\n  return (\n    <Fragment>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(value) => setIsCollapsed(value)} />\n        </td>\n        <td>\n          <SilenceStateTag state={status.state} />\n        </td>\n        <td className={styles.matchersCell}>\n          <Matchers matchers={matchers} />\n        </td>\n        <td>{silencedAlerts.length}</td>\n        <td>\n          {startsAtDate?.format(dateDisplayFormat)} {'-'}\n          <br />\n          {endsAtDate?.format(dateDisplayFormat)}\n        </td>\n        {contextSrv.isEditor && (\n          <td className={styles.actionsCell}>\n            {status.state === 'expired' ? (\n              <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                <ActionButton icon=\"sync\">Recreate</ActionButton>\n              </Link>\n            ) : (\n              <ActionButton icon=\"bell\" onClick={handleExpireSilenceClick}>\n                Unsilence\n              </ActionButton>\n            )}\n            {status.state !== 'expired' && (\n              <ActionIcon\n                to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                icon=\"pen\"\n                tooltip=\"edit\"\n              />\n            )}\n          </td>\n        )}\n      </tr>\n      {!isCollapsed && (\n        <>\n          <tr className={className}>\n            <td />\n            <td>Comment</td>\n            <td colSpan={detailsColspan}>{comment}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Schedule</td>\n            <td colSpan={detailsColspan}>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(\n              dateDisplayFormat\n            )}`}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Duration</td>\n            <td colSpan={detailsColspan}>{duration}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Created by</td>\n            <td colSpan={detailsColspan}>{createdBy}</td>\n          </tr>\n          {!!silencedAlerts.length && (\n            <tr className={cx(className, styles.alertRulesCell)}>\n              <td />\n              <td>Affected alerts</td>\n              <td colSpan={detailsColspan}>\n                <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n              </td>\n            </tr>\n          )}\n        </>\n      )}\n    </Fragment>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  matchersCell: css`\n    & > * + * {\n      margin-left: ${theme.spacing.xs};\n    }\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing.sm};\n    }\n  `,\n  alertRulesCell: css`\n    vertical-align: top;\n  `,\n});\n\nexport default SilenceTableRow;\n","import { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  if (contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FC } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertmanagerAlert, Silence } from 'app/plugins/datasource/alertmanager/types';\nimport SilenceTableRow from './SilenceTableRow';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const findSilencedAlerts = (id: string) => {\n    return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n  };\n\n  return (\n    <>\n      {!!silences.length && (\n        <>\n          {contextSrv.isEditor && (\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          )}\n          <table className={tableStyles.table}>\n            <colgroup>\n              <col className={tableStyles.colExpand} />\n              <col className={styles.colState} />\n              <col className={styles.colMatchers} />\n              <col />\n              <col />\n              {contextSrv.isEditor && <col />}\n            </colgroup>\n            <thead>\n              <tr>\n                <th />\n                <th>State</th>\n                <th>Matching labels</th>\n                <th>Alerts</th>\n                <th>Schedule</th>\n                {contextSrv.isEditor && <th>Action</th>}\n              </tr>\n            </thead>\n            <tbody>\n              {silences.map((silence, index) => {\n                const silencedAlerts = findSilencedAlerts(silence.id);\n                return (\n                  <SilenceTableRow\n                    key={silence.id}\n                    silence={silence}\n                    className={index % 2 === 0 ? tableStyles.evenRow : undefined}\n                    silencedAlerts={silencedAlerts}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                );\n              })}\n            </tbody>\n          </table>\n          <div className={styles.callout}>\n            <Icon className={styles.calloutIcon} name=\"info-circle\" />\n            <span>Expired silences are automatically deleted after 5 days.</span>\n          </div>\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colMatchers: css`\n    width: 50%;\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n});\n\nexport default SilencesTable;\n","import React, { FC } from 'react';\nimport { Button, Field, Input, Checkbox, IconButton, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    register,\n    formState: { errors },\n  } = formApi;\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`}>\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <Field label=\"Regex\">\n                    <Checkbox {...register(`matchers.${index}.isRegex` as const)} defaultChecked={matcher.isRegex} />\n                  </Field>\n                  <Field label=\"Equal\">\n                    <Checkbox {...register(`matchers.${index}.isEqual` as const)} defaultChecked={matcher.isEqual} />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher: Matcher = { name: '', value: '', isRegex: false, isEqual: true };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matchers: css`\n      max-width: 585px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme } from '@grafana/data';\nimport { Field, TimeRangeInput, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n  const styles = useStyles(getStyles);\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeRange: css`\n    width: 400px;\n  `,\n});\n","import { Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles } from '@grafana/ui';\nimport {\n  DefaultTimeZone,\n  GrafanaTheme,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  UrlQueryMap,\n} from '@grafana/data';\nimport { useDebounce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { pickBy } from 'lodash';\nimport MatchersField from './MatchersField';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { useDispatch } from 'react-redux';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilencePeriod } from './SilencePeriod';\nimport { css, cx } from '@emotion/css';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../utils/misc';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (queryParams: UrlQueryMap): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const { matchers, comment } = queryParams;\n\n  if (typeof matchers === 'string') {\n    const formMatchers = parseQueryParamMatchers(matchers);\n    if (formMatchers.length) {\n      defaults.matchers = formMatchers;\n    }\n  }\n\n  if (typeof comment === 'string') {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (queryParams: UrlQueryMap, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: '',\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', isRegex: false, isEqual: true }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(queryParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [queryParams] = useQueryParams();\n  const defaultValues = useMemo(() => getDefaultFormValues(queryParams, silence), [silence, queryParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => state.unifiedAlerting.updateSilence);\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers } = data;\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={styles.flexRow}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea {...register('comment', { required: { value: true, message: 'Required.' } })} />\n          </Field>\n          <Field\n            className={cx(styles.field, styles.createdBy)}\n            label=\"Created by\"\n            required\n            error={formState.errors.createdBy?.message}\n            invalid={!!formState.errors.createdBy}\n          >\n            <Input {...register('createdBy', { required: { value: true, message: 'Required.' } })} />\n          </Field>\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  field: css`\n    margin: ${theme.spacing.sm} 0;\n  `,\n  textArea: css`\n    width: 600px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing.sm};\n    }\n  `,\n});\n\nexport default SilencesEditor;\n","import { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { parseMatcher } from './alertmanager';\n\n// parses comma separated matchers like \"foo=bar,baz=~bad*\" into SilenceMatcher[]\nexport function parseQueryParamMatchers(paramValue: string): Matcher[] {\n  return paramValue\n    .split(',')\n    .filter((x) => !!x.trim())\n    .map((x) => parseMatcher(x.trim()));\n}\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\n\nconst Silences: FC = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/silences\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <AlertManagerPicker disabled={!isRoot} current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading alert manager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = <Icon className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alert manager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alert manager' : 'Choose alert manager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { IconSize, useStyles, Icon } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  size?: IconSize;\n  className?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({ isCollapsed, onToggle, className, size = 'xl', ...restOfProps }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <button className={cx(styles.expandButton, className)} onClick={() => onToggle(!isCollapsed)} {...restOfProps}>\n      <Icon size={size} name={isCollapsed ? 'angle-right' : 'angle-down'} />\n    </button>\n  );\n};\n\nexport const getStyles = () => ({\n  expandButton: css`\n    background: none;\n    border: none;\n\n    outline: none !important;\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n});\n"],"sourceRoot":""}