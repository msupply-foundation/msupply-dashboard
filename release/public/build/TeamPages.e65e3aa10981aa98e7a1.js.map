{"version":3,"file":"TeamPages.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/core/components/AccessControl/types.ts","webpack://grafana/./public/app/core/components/AccessControl/AddPermission.tsx","webpack://grafana/./public/app/core/components/AccessControl/PermissionListItem.tsx","webpack://grafana/./public/app/core/components/AccessControl/PermissionList.tsx","webpack://grafana/./public/app/core/components/AccessControl/Permissions.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { t, Trans } from '@lingui/macro';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  weekStart: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone, weekStart } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone, weekStart });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardId, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                menuShouldPortal\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={(item) => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            aria-label={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label=\"Remove team member\"\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, OrgUser } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","export type ResourcePermission = {\n  id: number;\n  resourceId: string;\n  isManaged: boolean;\n  userId?: number;\n  userLogin?: string;\n  userAvatarUrl?: string;\n  team?: string;\n  teamId?: number;\n  teamAvatarUrl?: string;\n  builtInRole?: string;\n  actions: string[];\n  permission: string;\n};\n\nexport type SetPermission = {\n  userId?: number;\n  teamId?: number;\n  builtInRole?: string;\n  permission: string;\n  target: PermissionTarget;\n};\n\nexport enum PermissionTarget {\n  Team = 'Team',\n  User = 'User',\n  BuiltInRole = 'builtInRole',\n}\nexport type Description = {\n  assignments: Assignments;\n  permissions: string[];\n};\n\nexport type Assignments = {\n  users: boolean;\n  teams: boolean;\n  builtInRoles: boolean;\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TeamPicker } from 'app/core/components/Select/TeamPicker';\nimport { Alert, Button, Form, HorizontalGroup, Input, Select } from '@grafana/ui';\nimport { OrgRole } from 'app/types/acl';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { Assignments, PermissionTarget, SetPermission } from './types';\n\nexport interface Props {\n  title?: string;\n  permissions: string[];\n  assignments: Assignments;\n  canListUsers: boolean;\n  onCancel: () => void;\n  onAdd: (state: SetPermission) => void;\n}\n\nexport const AddPermission = ({\n  title = 'Add Permission For',\n  permissions,\n  assignments,\n  canListUsers,\n  onAdd,\n  onCancel,\n}: Props) => {\n  const [target, setPermissionTarget] = useState<PermissionTarget>(PermissionTarget.User);\n  const [teamId, setTeamId] = useState(0);\n  const [userId, setUserId] = useState(0);\n  const [builtInRole, setBuiltinRole] = useState('');\n  const [permission, setPermission] = useState('');\n\n  const targetOptions = useMemo(() => {\n    const options = [];\n    if (assignments.users && canListUsers) {\n      options.push({ value: PermissionTarget.User, label: 'User', isDisabled: false });\n    }\n    if (assignments.teams) {\n      options.push({ value: PermissionTarget.Team, label: 'Team' });\n    }\n    if (assignments.builtInRoles) {\n      options.push({ value: PermissionTarget.BuiltInRole, label: 'Role' });\n    }\n    return options;\n  }, [assignments, canListUsers]);\n\n  useEffect(() => {\n    if (permissions.length > 0) {\n      setPermission(permissions[0]);\n    }\n  }, [permissions]);\n\n  const isValid = () =>\n    (target === PermissionTarget.Team && teamId > 0) ||\n    (target === PermissionTarget.User && userId > 0) ||\n    (PermissionTarget.BuiltInRole && OrgRole.hasOwnProperty(builtInRole));\n\n  const renderMissingListUserRights = () => {\n    return (\n      <Alert severity=\"info\" title=\"Missing permission\">\n        You are missing the permission to list users (org.users:read). Please contact your administrator to get this\n        resolved.\n      </Alert>\n    );\n  };\n\n  return (\n    <div className=\"cta-form\" aria-label=\"Permissions slider\">\n      <CloseButton onClick={onCancel} />\n      <h5>{title}</h5>\n\n      {target === PermissionTarget.User && !canListUsers && renderMissingListUserRights()}\n\n      <Form\n        name=\"addPermission\"\n        maxWidth=\"none\"\n        onSubmit={() => onAdd({ userId, teamId, builtInRole, permission, target })}\n      >\n        {() => (\n          <HorizontalGroup>\n            <Select\n              aria-label=\"Role to add new permission to\"\n              value={target}\n              options={targetOptions}\n              onChange={(v) => setPermissionTarget(v.value!)}\n              disabled={targetOptions.length === 0}\n              menuShouldPortal\n            />\n\n            {target === PermissionTarget.User && canListUsers && (\n              <UserPicker onSelected={(u) => setUserId(u.value || 0)} className={'width-20'} />\n            )}\n            {target === PermissionTarget.User && !canListUsers && <Input disabled={true} className={'width-20'} />}\n\n            {target === PermissionTarget.Team && (\n              <TeamPicker onSelected={(t) => setTeamId(t.value?.id || 0)} className={'width-20'} />\n            )}\n\n            {target === PermissionTarget.BuiltInRole && (\n              <Select\n                aria-label={'Built-in role picker'}\n                menuShouldPortal\n                options={Object.values(OrgRole).map((r) => ({ value: r, label: r }))}\n                onChange={(r) => setBuiltinRole(r.value || '')}\n                width={40}\n              />\n            )}\n\n            <Select\n              aria-label=\"Permission Level\"\n              width={25}\n              menuShouldPortal\n              value={permissions.find((p) => p === permission)}\n              options={permissions.map((p) => ({ label: p, value: p }))}\n              onChange={(v) => setPermission(v.value || '')}\n            />\n            <Button type=\"submit\" disabled={!isValid()}>\n              Save\n            </Button>\n          </HorizontalGroup>\n        )}\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ResourcePermission } from './types';\nimport { Button, Icon, Select, Tooltip } from '@grafana/ui';\n\ninterface Props {\n  item: ResourcePermission;\n  permissionLevels: string[];\n  canSet: boolean;\n  onRemove: (item: ResourcePermission) => void;\n  onChange: (item: ResourcePermission, permission: string) => void;\n}\n\nexport const PermissionListItem = ({ item, permissionLevels, canSet, onRemove, onChange }: Props) => (\n  <tr>\n    <td style={{ width: '1%' }}>{getAvatar(item)}</td>\n    <td style={{ width: '90%' }}>{getDescription(item)}</td>\n    <td>\n      <div className=\"gf-form\">\n        <Select\n          className=\"width-20\"\n          menuShouldPortal\n          disabled={!canSet || !item.isManaged}\n          onChange={(p) => onChange(item, p.value!)}\n          value={permissionLevels.find((p) => p === item.permission)}\n          options={permissionLevels.map((p) => ({ value: p, label: p }))}\n        />\n      </div>\n    </td>\n    <td>\n      <Tooltip content={getPermissionInfo(item)}>\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    </td>\n    <td>\n      {item.isManaged ? (\n        <Button\n          size=\"sm\"\n          icon=\"times\"\n          variant=\"destructive\"\n          disabled={!canSet}\n          onClick={() => onRemove(item)}\n          aria-label={`Remove permission for ${getName(item)}`}\n        />\n      ) : (\n        <Tooltip content=\"Provisioned permission\">\n          <Button size=\"sm\" icon=\"lock\" />\n        </Tooltip>\n      )}\n    </td>\n  </tr>\n);\n\nconst getAvatar = (item: ResourcePermission) => {\n  if (item.teamId) {\n    return <img className=\"filter-table__avatar\" src={item.teamAvatarUrl} alt={`Avatar for team ${item.teamId}`} />;\n  } else if (item.userId) {\n    return <img className=\"filter-table__avatar\" src={item.userAvatarUrl} alt={`Avatar for user ${item.userId}`} />;\n  }\n  return <Icon size=\"xl\" name=\"shield\" />;\n};\n\nconst getName = (item: ResourcePermission) => {\n  if (item.userId) {\n    return item.userLogin;\n  }\n  if (item.teamId) {\n    return item.team;\n  }\n  return item.builtInRole;\n};\n\nconst getDescription = (item: ResourcePermission) => {\n  if (item.userId) {\n    return <span key=\"name\">{item.userLogin} </span>;\n  } else if (item.teamId) {\n    return <span key=\"name\">{item.team} </span>;\n  } else if (item.builtInRole) {\n    return <span key=\"name\">{item.builtInRole} </span>;\n  }\n  return <span key=\"name\" />;\n};\n\nconst getPermissionInfo = (p: ResourcePermission) => `Actions: ${[...new Set(p.actions)].sort().join(' ')}`;\n","import React from 'react';\nimport { ResourcePermission } from './types';\nimport { PermissionListItem } from './PermissionListItem';\n\ninterface Props {\n  title: string;\n  items: ResourcePermission[];\n  permissionLevels: string[];\n  canSet: boolean;\n  onRemove: (item: ResourcePermission) => void;\n  onChange: (resourcePermission: ResourcePermission, permission: string) => void;\n}\n\nexport const PermissionList = ({ title, items, permissionLevels, canSet, onRemove, onChange }: Props) => {\n  if (items.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <table className=\"filter-table gf-form-group\">\n        <thead>\n          <tr>\n            <th style={{ width: '1%' }} />\n            <th>{title}</th>\n            <th>Permission</th>\n            <th style={{ width: '1%' }} />\n            <th style={{ width: '1%' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item, index) => (\n            <PermissionListItem\n              item={item}\n              onRemove={onRemove}\n              onChange={onChange}\n              canSet={canSet}\n              key={`${index}-${item.userId}`}\n              permissionLevels={permissionLevels}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { sortBy } from 'lodash';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\n\nimport { Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { AddPermission } from './AddPermission';\nimport { PermissionList } from './PermissionList';\nimport { PermissionTarget, ResourcePermission, SetPermission, Description } from './types';\n\nconst EMPTY_PERMISSION = '';\n\nconst INITIAL_DESCRIPTION: Description = {\n  permissions: [],\n  assignments: {\n    teams: false,\n    users: false,\n    builtInRoles: false,\n  },\n};\n\ntype ResourceId = string | number;\ntype Type = 'users' | 'teams' | 'builtInRoles';\n\nexport type Props = {\n  title?: string;\n  buttonLabel?: string;\n  addPermissionTitle?: string;\n  resource: string;\n  resourceId: ResourceId;\n\n  canListUsers: boolean;\n  canSetPermissions: boolean;\n};\n\nexport const Permissions = ({\n  title = 'Permissions',\n  buttonLabel = 'Add a permission',\n  resource,\n  resourceId,\n  canListUsers,\n  canSetPermissions,\n  addPermissionTitle,\n}: Props) => {\n  const [isAdding, setIsAdding] = useState(false);\n  const [items, setItems] = useState<ResourcePermission[]>([]);\n  const [desc, setDesc] = useState(INITIAL_DESCRIPTION);\n\n  const fetchItems = useCallback(() => {\n    return getPermissions(resource, resourceId).then((r) => setItems(r));\n  }, [resource, resourceId]);\n\n  useEffect(() => {\n    getDescription(resource).then((r) => {\n      setDesc(r);\n      return fetchItems();\n    });\n  }, [resource, resourceId, fetchItems]);\n\n  const onAdd = (state: SetPermission) => {\n    let promise: Promise<void> | null = null;\n    if (state.target === PermissionTarget.User) {\n      promise = setUserPermission(resource, resourceId, state.userId!, state.permission);\n    } else if (state.target === PermissionTarget.Team) {\n      promise = setTeamPermission(resource, resourceId, state.teamId!, state.permission);\n    } else if (state.target === PermissionTarget.BuiltInRole) {\n      promise = setBuiltInRolePermission(resource, resourceId, state.builtInRole!, state.permission);\n    }\n\n    if (promise !== null) {\n      promise.then(fetchItems);\n    }\n  };\n\n  const onRemove = (item: ResourcePermission) => {\n    let promise: Promise<void> | null = null;\n    if (item.userId) {\n      promise = setUserPermission(resource, resourceId, item.userId, EMPTY_PERMISSION);\n    } else if (item.teamId) {\n      promise = setTeamPermission(resource, resourceId, item.teamId, EMPTY_PERMISSION);\n    } else if (item.builtInRole) {\n      promise = setBuiltInRolePermission(resource, resourceId, item.builtInRole, EMPTY_PERMISSION);\n    }\n\n    if (promise !== null) {\n      promise.then(fetchItems);\n    }\n  };\n\n  const onChange = (item: ResourcePermission, permission: string) => {\n    if (item.permission === permission) {\n      return;\n    }\n    if (item.userId) {\n      onAdd({ permission, userId: item.userId, target: PermissionTarget.User });\n    } else if (item.teamId) {\n      onAdd({ permission, teamId: item.teamId, target: PermissionTarget.Team });\n    } else if (item.builtInRole) {\n      onAdd({ permission, builtInRole: item.builtInRole, target: PermissionTarget.BuiltInRole });\n    }\n  };\n\n  const teams = useMemo(\n    () =>\n      sortBy(\n        items.filter((i) => i.teamId),\n        ['team']\n      ),\n    [items]\n  );\n  const users = useMemo(\n    () =>\n      sortBy(\n        items.filter((i) => i.userId),\n        ['userLogin']\n      ),\n    [items]\n  );\n  const builtInRoles = useMemo(\n    () =>\n      sortBy(\n        items.filter((i) => i.builtInRole),\n        ['builtInRole']\n      ),\n    [items]\n  );\n\n  return (\n    <div>\n      <div className=\"page-action-bar\">\n        <h3 className=\"page-sub-heading\">{title}</h3>\n        <div className=\"page-action-bar__spacer\" />\n        {canSetPermissions && (\n          <Button variant={'primary'} key=\"add-permission\" onClick={() => setIsAdding(true)}>\n            {buttonLabel}\n          </Button>\n        )}\n      </div>\n\n      <div>\n        <SlideDown in={isAdding}>\n          <AddPermission\n            title={addPermissionTitle}\n            onAdd={onAdd}\n            permissions={desc.permissions}\n            assignments={desc.assignments}\n            canListUsers={canListUsers}\n            onCancel={() => setIsAdding(false)}\n          />\n        </SlideDown>\n        <PermissionList\n          title=\"Role\"\n          items={builtInRoles}\n          permissionLevels={desc.permissions}\n          onChange={onChange}\n          onRemove={onRemove}\n          canSet={canSetPermissions}\n        />\n        <PermissionList\n          title=\"User\"\n          items={users}\n          permissionLevels={desc.permissions}\n          onChange={onChange}\n          onRemove={onRemove}\n          canSet={canSetPermissions}\n        />\n        <PermissionList\n          title=\"Team\"\n          items={teams}\n          permissionLevels={desc.permissions}\n          onChange={onChange}\n          onRemove={onRemove}\n          canSet={canSetPermissions}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getDescription = async (resource: string): Promise<Description> => {\n  try {\n    return await getBackendSrv().get(`/api/access-control/${resource}/description`);\n  } catch (e) {\n    console.error('failed to load resource description: ', e);\n    return INITIAL_DESCRIPTION;\n  }\n};\n\nconst getPermissions = (resource: string, resourceId: ResourceId): Promise<ResourcePermission[]> =>\n  getBackendSrv().get(`/api/access-control/${resource}/${resourceId}`);\n\nconst setUserPermission = (resource: string, resourceId: ResourceId, userId: number, permission: string) =>\n  setPermission(resource, resourceId, 'users', userId, permission);\n\nconst setTeamPermission = (resource: string, resourceId: ResourceId, teamId: number, permission: string) =>\n  setPermission(resource, resourceId, 'teams', teamId, permission);\n\nconst setBuiltInRolePermission = (resource: string, resourceId: ResourceId, builtInRole: string, permission: string) =>\n  setPermission(resource, resourceId, 'builtInRoles', builtInRole, permission);\n\nconst setPermission = (\n  resource: string,\n  resourceId: ResourceId,\n  type: Type,\n  typeId: number | string,\n  permission: string\n): Promise<void> =>\n  getBackendSrv().post(`/api/access-control/${resource}/${resourceId}/${type}/${typeId}`, { permission });\n","import React from 'react';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { AccessControlAction, Team } from '../../types';\nimport { contextSrv } from 'app/core/services/context_srv';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canListUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"Members\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canListUsers={canListUsers}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { AccessControlAction, Team } from 'app/types';\nimport { contextSrv } from 'app/core/core';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n          disabled={!canWriteTeamSettings}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"Name\" disabled={!canWriteTeamSettings}>\n                <Input {...register('name', { required: true })} id=\"name-input\" />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n                disabled={!canWriteTeamSettings}\n              >\n                <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n              </Field>\n              <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n                Update\n              </Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon, Button } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { StoreState, TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => this.onRemoveGroup(group)} disabled={isReadOnly}>\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                  disabled={isReadOnly}\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()}>\n                  Add group\n                </Button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"users-alt\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n            buttonDisabled={isReadOnly}\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { ReactNode, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Icon, LinkButton, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  text?: string;\n  size?: ComponentSize;\n  children?: ReactNode;\n  secondaryAction?: {\n    url: string;\n    text: string;\n  };\n}\n\nexport const UpgradeBox = ({ text, className, children, secondaryAction, size = 'md', ...htmlProps }: Props) => {\n  const styles = useStyles2((theme) => getUpgradeBoxStyles(theme, size));\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div>\n        <h4>You’ve found a Pro feature!</h4>\n        {text && <p className={styles.text}>{text}</p>}\n        {children}\n        <LinkButton\n          variant=\"primary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Upgrade to Pro\n        </LinkButton>\n\n        {secondaryAction && (\n          <LinkButton\n            variant=\"link\"\n            size={size}\n            className={cx(styles.button, styles.buttonSecondary)}\n            href={secondaryAction.url}\n            target=\"__blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {secondaryAction.text}\n          </LinkButton>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css`\n      display: flex;\n      position: relative;\n      border-radius: ${borderRadius};\n      background: ${theme.colors.primary.transparent};\n      border: 1px solid ${theme.colors.primary.shade};\n      padding: ${theme.spacing(2)};\n      color: ${theme.colors.primary.text};\n      font-size: ${theme.typography[fontBase].fontSize};\n      text-align: left;\n      line-height: 16px;\n    `,\n    text: css`\n      margin-bottom: 0;\n      padding: ${theme.spacing(2, 0)};\n      line-height: 1.5;\n    `,\n    button: css`\n      margin-top: ${theme.spacing(2)};\n\n      &:first-of-type {\n        margin-right: ${theme.spacing(1)};\n      }\n\n      &:focus-visible {\n        box-shadow: none;\n        color: ${theme.colors.text.primary};\n        outline: 2px solid ${theme.colors.primary.main};\n      }\n    `,\n    buttonSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    icon: css`\n      margin: ${theme.spacing(0.5, 1, 0.5, 0.5)};\n    `,\n  };\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { includes } from 'lodash';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\nimport { featureEnabled, reportExperimentView } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams> {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With FGAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n\n    const { isSyncEnabled } = this.state;\n    const currentPage = this.getCurrentPage();\n\n    if (currentPage === PageTypes.GroupSync && !isSyncEnabled && config.featureToggles.featureHighlights) {\n      reportExperimentView('feature-highlights-team-sync', 'test', '');\n    }\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return navModel;\n    }\n\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <UpgradeBox\n              text={\n                \"Team Sync immediately updates each user's Grafana teams and permissions based on their LDAP or Oauth group membership, instead of updating when users sign in.\"\n              }\n            />\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(TeamPages);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { contextSrv } from 'app/core/core';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\nimport { featureEnabled } from '@grafana/runtime';\nimport { NavModelItem, NavModel } from '@grafana/data';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With FGAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With FGAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  // With both Legacy and FGAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With FGAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["themes","value","label","id","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","weekStart","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","Button","variant","stylesFactory","css","WithFeatureToggle","featureToggle","children","LegacyForms","mapDispatchToProps","removeTeamMember","updateTeamMember","connector","connect","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","onPermissionChange","labels","map","TagBadge","removeIcon","count","onClick","syncEnabled","src","avatarUrl","login","email","DeleteButton","size","onConfirm","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","team","config","signedInUser","contextSrv","TeamMembers","isAdding","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","onToggleAdding","SlideDown","in","CloseButton","UserPicker","onSelected","onUserSelected","onAddUserToTeam","style","width","PermissionTarget","AddPermission","permissions","assignments","canListUsers","onAdd","onCancel","target","setPermissionTarget","useState","User","teamId","setTeamId","setUserId","builtInRole","setBuiltinRole","setPermission","targetOptions","useMemo","users","isDisabled","teams","Team","builtInRoles","BuiltInRole","useEffect","Alert","severity","maxWidth","HorizontalGroup","v","u","Input","TeamPicker","t","Object","values","OrgRole","r","p","PermissionListItem","permissionLevels","canSet","onRemove","getAvatar","getDescription","isManaged","getPermissionInfo","icon","getName","teamAvatarUrl","alt","userAvatarUrl","userLogin","Set","actions","sort","join","PermissionList","index","INITIAL_DESCRIPTION","Permissions","buttonLabel","resource","resourceId","canSetPermissions","addPermissionTitle","setIsAdding","setItems","desc","setDesc","fetchItems","useCallback","getPermissions","then","promise","setUserPermission","setTeamPermission","setBuiltInRolePermission","sortBy","filter","getBackendSrv","get","e","console","error","typeId","post","AccessControlAction","updateTeam","canWriteTeamSettings","VerticalGroup","defaultValues","formTeam","register","required","description","mapStateToProps","groups","getTeamGroups","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","TeamGroupSync","event","newGroupId","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","isReadOnly","onRemoveGroup","placement","onAddGroup","onNewGroupIdChanged","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","buttonDisabled","UpgradeBox","text","secondaryAction","htmlProps","useStyles2","getUpgradeBoxStyles","cx","box","LinkButton","button","href","rel","buttonSecondary","borderRadius","shape","fontBase","colors","primary","transparent","shade","spacing","typography","fontSize","main","secondary","PageTypes","loadTeam","loadTeamMembers","parseInt","match","params","getTeam","defaultPage","pageName","page","teamLoadingNav","getTeamLoadingNav","navModel","getNavModel","navIndex","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","navItem","textsAreEqual","Members","hideFromTabs","isLoading","isSyncEnabled","featureEnabled","fetchTeam","getCurrentPage","GroupSync","reportExperimentView","pages","currentPage","includes","renderPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Settings","Page","hideTabsFromNonTeamAdmin","keys","loadTeams","dispatch","teamsLoaded","response","accessControlQueryParam","perpage","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","loadingTeam","memberCount","TeamPermissionLevel","img","subTitle","breadcrumbs","active","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","getTeamsSearchPage","searchPage","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","userIsTeamAdmin"],"sourceRoot":""}