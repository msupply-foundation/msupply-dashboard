{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query_model.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","SqlPartDef","constructor","options","type","style","label","params","defaultParams","wrapOpen","wrapClose","separator","this","toUpperCase","substring","SqlPart","part","def","name","datatype","message","clone","updateParam","strValue","index","optional","splice","MySQLQueryModel","target","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","length","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","map","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","buildWhereClause","conditions","tag","buildGroupClause","groupSection","i","table","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","frame","values","textField","fields","f","valueField","push","text","get","textFields","filter","FieldType","string","flatMap","toArray","v","Array","from","Set","transformToKeyValueList","rows","textColIndex","valueColIndex","res","containsKey","transformToSimpleList","j","unique","findColIndex","columns","colName","key","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","annotation","time","tags","trim","split","MysqlDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","id","responseParser","queryModel","interval","interpolateVariable","_map","settingsData","jsonData","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","filterQuery","hide","applyTemplateVariables","refId","datasourceId","Promise","reject","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","toPromise","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","testDatasource","intervalMs","maxDataPoints","mapTo","status","catchError","err","console","error","of","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","register","dynamicLookup","quote","create","MysqlQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","formats","lastQueryError","showHelp","metaBuilder","lastQueryMeta","tableSegment","whereAdd","timeColumnSegment","metricColumnSegment","selectMenu","selectParts","groupParts","whereParts","groupAdd","panel","updateProjection","panelCtrl","then","result","segment","newSegment","html","updateRawSqlAndRefresh","fake","buildSelectMenu","newPlusButton","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","sqlPart","n","updatePersistedParts","submenu","toggleEditorMode","appEvents","publish","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","catch","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","meta","results","queryRes","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","templateUrl","MysqlConfigCtrl","onPasswordReset","onPasswordChange","Password","MysqlAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl"],"mappings":"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","file":"mysqlPlugin.17511e2bf08b06f121f8.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MySQLQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import { map } from 'lodash';\nimport { AnnotationEvent, DataFrame, FieldType, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      const textFields = frame.fields.filter((f) => f.type === FieldType.string);\n      if (textFields) {\n        values.push(\n          ...textFields\n            .flatMap((f) => f.values.toArray())\n            .map((v) => ({\n              text: '' + v,\n            }))\n        );\n      }\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number): MetricFindValue[] {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any): MetricFindValue[] {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return map(unique, (value) => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time' || f.name === 'time_sec');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    if (frame.fields.find((f) => f.name === 'title')) {\n      throw new Error('The title column for annotations is deprecated, now only a column named text is returned');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { getBackendSrv, DataSourceWithBackend, FetchResponse, BackendDataSourceResponse } from '@grafana/runtime';\nimport { DataSourceInstanceSettings, ScopedVars, MetricFindValue, AnnotationEvent } from '@grafana/data';\nimport MySQLQueryModel from 'app/plugins/datasource/mysql/mysql_query_model';\nimport ResponseParser from './response_parser';\nimport { MysqlQueryForInterpolation, MySQLOptions, MySQLQuery } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nexport class MysqlDatasource extends DataSourceWithBackend<MySQLQuery, MySQLOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MySQLQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MySQLOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MySQLQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as MySQLOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: MySQLQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(target: MySQLQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new MySQLQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  testDatasource(): Promise<any> {\n    return getBackendSrv()\n      .fetch({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .pipe(\n        mapTo({ status: 'success', message: 'Database Connection OK' }),\n        catchError((err) => {\n          console.error(err);\n          if (err.data && err.data.message) {\n            return of({ status: 'error', message: err.data.message });\n          } else {\n            return of({ status: 'error', message: err.status });\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MySQLQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError?: string;\n  showHelp!: boolean;\n\n  queryModel: MySQLQueryModel;\n  metaBuilder: MysqlMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            this.target.rawQuery = !this.target.rawQuery;\n          },\n        })\n      );\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport { MySQLQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n\nexport const plugin = new DataSourcePlugin<MysqlDatasource, MySQLQuery>(MysqlDatasource)\n  .setQueryCtrl(MysqlQueryCtrl)\n  .setConfigCtrl(MysqlConfigCtrl)\n  .setAnnotationQueryCtrl(MysqlAnnotationsQueryCtrl);\n"],"sourceRoot":""}