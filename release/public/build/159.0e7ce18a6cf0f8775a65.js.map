{"version":3,"file":"159.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/add_label_to_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_utils.ts","webpack://grafana/./node_modules/lru-cache/index.js","webpack://grafana/./node_modules/lru-cache/node_modules/yallist/iterator.js","webpack://grafana/./node_modules/lru-cache/node_modules/yallist/yallist.js"],"sourcesContent":["import { chain, isEqual } from 'lodash';\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right|bool';\nconst logicalOperators = 'or|and|unless';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  logicalOperators,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\n// We want to extract all possible metrics and also keywords\nconst metricsAndKeywordsRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\]{=!\",])/g;\n// Safari currently doesn't support negative lookbehind. When it does, we should refactor this.\n// We are creating 2 matching groups. (\\$) is for the Grafana's variables such as ${__rate_s}. We want to ignore\n// ${__rate_s} and not add variable to it.\nconst selectorRegexp = /(\\$)?{([^{]*)}/g;\n\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  value: string | number,\n  operator?: string,\n  hasNoMetrics?: boolean\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n\n  query = query.replace(metricsAndKeywordsRegexp, (match, word, offset) => {\n    const isMetric = isWordMetric(query, word, offset, previousWord, hasNoMetrics);\n    previousWord = word;\n\n    return isMetric ? `${word}{}` : word;\n  });\n\n  // Adding label to existing selectors\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    lastIndex = match.index + match[2].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    // If we matched 1st group, we know it is Grafana's variable and we don't want to add labels\n    if (match[1]) {\n      parts.push(prefix);\n      parts.push(match[0]);\n    } else {\n      // If we didn't match first group, we are inside selector and we want to add labels\n      const selector = match[2];\n      const selectorWithLabel = addLabelToSelector(selector, key, transformedValue, operator);\n      parts.push(prefix, selectorWithLabel);\n    }\n\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = chain(parsedLabels)\n    .uniqWith(isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nfunction isWordMetric(query: string, word: string, offset: number, previousWord: string, hasNoMetrics?: boolean) {\n  const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n  // Handle \"sum by (key) (metric)\"\n  const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n  // Check for colon as as \"word boundary\" symbol\n  const isColonBounded = word.endsWith(':');\n  // Check for words that start with \" which means that they are not metrics\n  const startsWithQuote = query[offset - 1] === '\"';\n  // Check for template variables\n  const isTemplateVariable = query[offset - 1] === '$';\n  // Check for time units\n  const isTimeUnit = ['s', 'm', 'h', 'd', 'w'].includes(word) && Boolean(Number(query[offset - 1]));\n\n  if (\n    !hasNoMetrics &&\n    !insideSelector &&\n    !isColonBounded &&\n    !previousWordIsKeyWord &&\n    !startsWithQuote &&\n    !isTemplateVariable &&\n    !isTimeUnit &&\n    builtInWords.indexOf(word) === -1\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default addLabelToQuery;\n","import { once, chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\nimport { Value } from 'slate';\n\nimport { dateTime, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItem, CompletionItemGroup, SearchFunctionType, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport {\n  addLimitInfo,\n  fixSummariesMetadata,\n  limitSuggestions,\n  parseSelector,\n  processHistogramLabels,\n  processLabels,\n  roundSecToMin,\n} from './language_utils';\nimport PromqlSyntax, { FUNCTIONS, RATE_RANGES } from './promql';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 5;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst wrapLabel = (label: string): CompletionItem => ({ label });\n\nconst setFunctionKind = (suggestion: CompletionItem): CompletionItem => {\n  suggestion.kind = 'function';\n  return suggestion;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: any[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query === item.label);\n  const count = historyForItem.length;\n  const recent = historyForItem[0];\n  let hint = `Queried ${count} times in the last 24h.`;\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nfunction addMetricsMetadata(metric: string, metadata?: PromMetricsMetadata): CompletionItem {\n  const item: CompletionItem = { label: metric };\n  if (metadata && metadata[metric]) {\n    const { type, help } = metadata[metric][0];\n    item.documentation = `${type.toUpperCase()}: ${help}`;\n  }\n  return item;\n}\n\nconst PREFIX_DELIMITER_REGEX = /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\ninterface AutocompleteContext {\n  history?: Array<HistoryItem<PromQuery>>;\n}\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange?: { start: number; end: number };\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  declare startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[] = [];\n  declare labelFetchTs: number;\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private labelsCache = new LRU<string, Record<string, string[]>>(10);\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = { start: 0, end: 0 };\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}): Promise<any> => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params);\n      return res.data.data;\n    } catch (error) {\n      console.error(error);\n    }\n\n    return defaultValue;\n  };\n\n  start = async (): Promise<any[]> => {\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    // TODO #33976: make those requests parallel\n    await this.fetchLabels();\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    this.metricsMetadata = fixSummariesMetadata(await this.request('/api/v1/metadata', {}));\n    this.processHistogramMetrics(this.metrics);\n\n    return [];\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  processHistogramMetrics = (data: string[]) => {\n    const { values } = processHistogramLabels(data);\n\n    if (values && values['__name__']) {\n      this.histogramMetrics = values['__name__'].slice().sort();\n    }\n  };\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: AutocompleteContext = {}\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^[\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for metric{|} and metric{foo=|}, as well as metric-independent label queries like {|}\n      return this.getLabelCompletionItems({ prefix, text, value, labelKey, wrapperClasses });\n    } else if (wrapperClasses.includes('context-aggregation')) {\n      // Suggestions for sum(metric) by (|)\n      return this.getAggregationCompletionItems(value);\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  };\n\n  getBeginningCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    const { history } = context;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (history && history.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        searchFunctionType: SearchFunctionType.Prefix,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const { metrics, metricsMetadata } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    suggestions.push({\n      searchFunctionType: SearchFunctionType.Prefix,\n      label: 'Functions',\n      items: FUNCTIONS.map(setFunctionKind),\n    });\n\n    if (metrics && metrics.length) {\n      const limitInfo = addLimitInfo(metrics);\n      suggestions.push({\n        label: `Metrics${limitInfo}`,\n        items: limitSuggestions(metrics).map((m) => addMetricsMetadata(m, metricsMetadata)),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  getAggregationCompletionItems = async (value: Value): Promise<TypeaheadOutput> => {\n    const suggestions: CompletionItemGroup[] = [];\n\n    // Stitch all query lines together to support multi-line queries\n    let queryOffset;\n    const queryText = value.document.getBlocks().reduce((text: string, block) => {\n      if (!block) {\n        return text;\n      }\n\n      const blockText = block?.getText();\n\n      if (value.anchorBlock.key === block.key) {\n        // Newline characters are not accounted for but this is irrelevant\n        // for the purpose of extracting the selector string\n        queryOffset = value.selection.anchor.offset + text.length;\n      }\n\n      return text + blockText;\n    }, '');\n\n    // Try search for selector part on the left-hand side, such as `sum (m) by (l)`\n    const openParensAggregationIndex = queryText.lastIndexOf('(', queryOffset);\n    let openParensSelectorIndex = queryText.lastIndexOf('(', openParensAggregationIndex - 1);\n    let closeParensSelectorIndex = queryText.indexOf(')', openParensSelectorIndex);\n\n    // Try search for selector part of an alternate aggregation clause, such as `sum by (l) (m)`\n    if (openParensSelectorIndex === -1) {\n      const closeParensAggregationIndex = queryText.indexOf(')', queryOffset);\n      closeParensSelectorIndex = queryText.indexOf(')', closeParensAggregationIndex + 1);\n      openParensSelectorIndex = queryText.lastIndexOf('(', closeParensSelectorIndex);\n    }\n\n    const result = {\n      suggestions,\n      context: 'context-aggregation',\n    };\n\n    // Suggestions are useless for alternative aggregation clauses without a selector in context\n    if (openParensSelectorIndex === -1) {\n      return result;\n    }\n\n    // Range vector syntax not accounted for by subsequent parse so discard it if present\n    const selectorString = queryText\n      .slice(openParensSelectorIndex + 1, closeParensSelectorIndex)\n      .replace(/\\[[^\\]]+\\]$/, '');\n\n    const selector = parseSelector(selectorString, selectorString.length - 2).selector;\n\n    const series = await this.getSeries(selector);\n    const labelKeys = Object.keys(series);\n    if (labelKeys.length > 0) {\n      const limitInfo = addLimitInfo(labelKeys);\n      suggestions.push({\n        label: `Labels${limitInfo}`,\n        items: labelKeys.map(wrapLabel),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n    return result;\n  };\n\n  getLabelCompletionItems = async ({\n    text,\n    wrapperClasses,\n    labelKey,\n    value,\n  }: TypeaheadInput): Promise<TypeaheadOutput> => {\n    if (!value) {\n      return { suggestions: [] };\n    }\n\n    const suggestions: CompletionItemGroup[] = [];\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const suffix = line.substr(cursorOffset);\n    const prefix = line.substr(0, cursorOffset);\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n    const isValueEnd = suffix.match(/^\"?[,}]|$/);\n    // Detect cursor in front of value, e.g., {key=|\"}\n    const isPreValue = prefix.match(/(=|=~|!=|!~)$/) && suffix.match(/^\"/);\n\n    // Don't suggest anything at the beginning or inside a value\n    const isValueEmpty = isValueStart && isValueEnd;\n    const hasValuePrefix = isValueEnd && !isValueStart;\n    if ((!isValueEmpty && !hasValuePrefix) || isPreValue) {\n      return { suggestions };\n    }\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    const containsMetric = selector.includes('__name__=');\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let series: Record<string, string[]> = {};\n    // Query labels for selector\n    if (selector) {\n      series = await this.getSeries(selector, !containsMetric);\n    }\n\n    if (Object.keys(series).length === 0) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { suggestions };\n    }\n\n    let context: string | undefined;\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && series[labelKey]) {\n        context = 'context-label-values';\n        const limitInfo = addLimitInfo(series[labelKey]);\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"${limitInfo}`,\n          items: series[labelKey].map(wrapLabel),\n          searchFunctionType: SearchFunctionType.Fuzzy,\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = series ? Object.keys(series) : containsMetric ? null : DEFAULT_KEYS;\n\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          context = 'context-labels';\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const limitInfo = addLimitInfo(newItems);\n          const newSuggestion: CompletionItemGroup = {\n            label: `Labels${limitInfo}`,\n            items: newItems,\n            searchFunctionType: SearchFunctionType.Fuzzy,\n          };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  };\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getTimeRangeParams();\n    const url = `/api/v1/label/${key}/values`;\n    return await this.request(url, [], params);\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/api/v1/labels';\n    const params = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, [], params);\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  }\n\n  /**\n   * Fetch labels for a series. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const range = this.datasource.getTimeRangeParams();\n    const urlParams = {\n      ...range,\n      'match[]': name,\n    };\n    const url = `/api/v1/series`;\n    // Cache key is a bit different here. We add the `withName` param and also round up to a minute the intervals.\n    // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n    // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n    // when user does not the newest values for a minute if already cached.\n    const cacheParams = new URLSearchParams({\n      'match[]': name,\n      start: roundSecToMin(parseInt(range.start, 10)).toString(),\n      end: roundSecToMin(parseInt(range.end, 10)).toString(),\n      withName: withName ? 'true' : 'false',\n    });\n\n    const cacheKey = `/api/v1/series?${cacheParams.toString()}`;\n    let value = this.labelsCache.get(cacheKey);\n    if (!value) {\n      const data = await this.request(url, [], urlParams);\n      const { values } = processLabels(data, withName);\n      value = values;\n      this.labelsCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams();\n    const params = { ...range, 'match[]': match };\n    return await this.request(url, {}, params);\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n","import { PromMetricsMetadata } from './types';\nimport { addLabelToQuery } from './add_label_to_query';\nimport { SUGGESTIONS_LIMIT } from './language_provider';\n\nexport const processHistogramLabels = (labels: string[]) => {\n  const resultSet: Set<string> = new Set();\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < labels.length; index++) {\n    const label = labels[index];\n    const isHistogramValue = regexp.test(label);\n    if (isHistogramValue) {\n      resultSet.add(label);\n    }\n  }\n  const result = [...resultSet];\n\n  return { values: { __name__: result } };\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  // For processing we are going to use sets as they have significantly better performance than arrays\n  // After we process labels, we will convert sets to arrays and return object with label values in arrays\n  const valueSet: { [key: string]: Set<string> } = {};\n  labels.forEach((label) => {\n    const { __name__, ...rest } = label;\n    if (withName) {\n      valueSet['__name__'] = valueSet['__name__'] || new Set();\n      if (!valueSet['__name__'].has(__name__)) {\n        valueSet['__name__'].add(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach((key) => {\n      if (!valueSet[key]) {\n        valueSet[key] = new Set();\n      }\n      if (!valueSet[key].has(rest[key])) {\n        valueSet[key].add(rest[key]);\n      }\n    });\n  });\n\n  // valueArray that we are going to return in the object\n  const valueArray: { [key: string]: string[] } = {};\n  limitSuggestions(Object.keys(valueSet)).forEach((key) => {\n    valueArray[key] = limitSuggestions(Array.from(valueSet[key]));\n  });\n\n  return { values: valueArray, keys: Object.keys(valueArray) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?(\\}|$)/;\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")/g;\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: any[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (label, key, operator, value) => {\n    const labelOffset = query.indexOf(label);\n    const valueStart = labelOffset + key.length + operator.length + 1;\n    const valueEnd = labelOffset + key.length + operator.length + value.length - 1;\n    // Skip label if cursor is in value\n    if (cursorOffset < valueStart || cursorOffset > valueEnd) {\n      labels[key] = { value, operator };\n    }\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const ruleNames = Object.keys(mapping);\n  const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n  const expandedQuery = query.replace(rulesRegex, (match, pre, name, post) => `${pre}${mapping[name]}${post}`);\n\n  // Split query into array, so if query uses operators, we can correctly add labels to each individual part.\n  const queryArray = expandedQuery.split(/(\\+|\\-|\\*|\\/|\\%|\\^)/);\n\n  // Regex that matches occurrences of ){ or }{ or ]{ which is a sign of incorrecly added labels.\n  const invalidLabelsRegex = /(\\)\\{|\\}\\{|\\]\\{)/;\n  const correctlyExpandedQueryArray = queryArray.map((query) => {\n    return addLabelsToExpression(query, invalidLabelsRegex);\n  });\n\n  return correctlyExpandedQueryArray.join('');\n}\n\nfunction addLabelsToExpression(expr: string, invalidLabelsRegexp: RegExp) {\n  const match = expr.match(invalidLabelsRegexp);\n  if (!match) {\n    return expr;\n  }\n\n  // Split query into 2 parts - before the invalidLabelsRegex match and after.\n  const indexOfRegexMatch = match.index ?? 0;\n  const exprBeforeRegexMatch = expr.substr(0, indexOfRegexMatch + 1);\n  const exprAfterRegexMatch = expr.substr(indexOfRegexMatch + 1);\n\n  // Create arrayOfLabelObjects with label objects that have key, operator and value.\n  const arrayOfLabelObjects: Array<{ key: string; operator: string; value: string }> = [];\n  exprAfterRegexMatch.replace(labelRegexp, (label, key, operator, value) => {\n    arrayOfLabelObjects.push({ key, operator, value });\n    return '';\n  });\n\n  // Loop trough all of the label objects and add them to query.\n  // As a starting point we have valid query without the labels.\n  let result = exprBeforeRegexMatch;\n  arrayOfLabelObjects.filter(Boolean).forEach((obj) => {\n    // Remove extra set of quotes from obj.value\n    const value = obj.value.substr(1, obj.value.length - 2);\n    result = addLabelToQuery(result, obj.key, value, obj.operator);\n  });\n\n  return result;\n}\n\n/**\n * Adds metadata for synthetic metrics for which the API does not provide metadata.\n * See https://github.com/grafana/grafana/issues/22337 for details.\n *\n * @param metadata HELP and TYPE metadata from /api/v1/metadata\n */\nexport function fixSummariesMetadata(metadata: PromMetricsMetadata): PromMetricsMetadata {\n  if (!metadata) {\n    return metadata;\n  }\n  const summaryMetadata: PromMetricsMetadata = {};\n  for (const metric in metadata) {\n    const item = metadata[metric][0];\n    if (item.type === 'histogram') {\n      summaryMetadata[`${metric}_bucket`] = [\n        {\n          type: 'counter',\n          help: `Cumulative counters for the observation buckets (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_count`] = [\n        {\n          type: 'counter',\n          help: `Count of events that have been observed for the histogram metric (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_sum`] = [\n        {\n          type: 'counter',\n          help: `Total sum of all observed values for the histogram metric (${item.help})`,\n        },\n      ];\n    }\n    if (item.type === 'summary') {\n      summaryMetadata[`${metric}_count`] = [\n        {\n          type: 'counter',\n          help: `Count of events that have been observed for the base metric (${item.help})`,\n        },\n      ];\n      summaryMetadata[`${metric}_sum`] = [\n        {\n          type: 'counter',\n          help: `Total sum of all observed values for the base metric (${item.help})`,\n        },\n      ];\n    }\n  }\n  // Synthetic series\n  const syntheticMetadata: PromMetricsMetadata = {};\n  syntheticMetadata['ALERTS'] = [\n    {\n      type: 'counter',\n      help:\n        'Time series showing pending and firing alerts. The sample value is set to 1 as long as the alert is in the indicated active (pending or firing) state.',\n    },\n  ];\n\n  return { ...metadata, ...summaryMetadata, ...syntheticMetadata };\n}\n\nexport function roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nexport function roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function limitSuggestions(items: string[]) {\n  return items.slice(0, SUGGESTIONS_LIMIT);\n}\n\nexport function addLimitInfo(items: any[] | undefined): string {\n  return items && items.length >= SUGGESTIONS_LIMIT ? `, limited to the first ${SUGGESTIONS_LIMIT} received items` : '';\n}\n\n// NOTE: the following 2 exported functions are very similar to the prometheus*Escape\n// functions in datasource.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\n\n// Prometheus regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of metacharacters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapePrometheusRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapePrometheusRegexp(labelValue));\n}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 2; i < arguments.length; i++) {\n    walker = insert(this, walker, arguments[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n"],"names":["keywords","builtInWords","join","split","metricsAndKeywordsRegexp","selectorRegexp","addLabelToQuery","query","key","value","operator","hasNoMetrics","Error","transformedValue","Infinity","toString","previousWord","replace","match","word","offset","isMetric","insideSelector","text","position","openChar","closeChar","nextSelectorStart","slice","indexOf","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","isColonBounded","endsWith","startsWithQuote","isTemplateVariable","isTimeUnit","includes","Boolean","Number","isWordMetric","exec","parts","lastIndex","suffix","prefix","index","length","push","selectorWithLabel","addLabelToSelector","labelRegexp","selector","labelKey","labelValue","labelOperator","parsedLabels","operatorForLabelKey","chain","uniqWith","isEqual","compact","sortBy","map","DEFAULT_KEYS","SUGGESTIONS_LIMIT","wrapLabel","label","setFunctionKind","suggestion","kind","PREFIX_DELIMITER_REGEX","PromQlLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","LRU","async","url","defaultValue","params","this","metadataRequest","data","error","console","lookupsDisabled","fetchLabels","metrics","fetchLabelValues","metricsMetadata","fixSummariesMetadata","request","processHistogramMetrics","values","processHistogramLabels","histogramMetrics","sort","wrapperClasses","context","emptyResult","suggestions","empty","document","selectedLines","getTextsAtRange","selection","currentLine","size","first","getText","nextCharacter","anchor","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","getAggregationCompletionItems","getEmptyCompletionItems","getBeginningCompletionItems","getTermCompletionItems","history","historyItems","h","expr","filter","uniq","take","item","cutoffTs","Date","now","historyForItem","ts","count","recent","hint","dateTime","fromNow","documentation","addHistoryMetadata","searchFunctionType","SearchFunctionType","skipSort","items","FUNCTIONS","limitInfo","addLimitInfo","limitSuggestions","m","metric","metadata","type","help","toUpperCase","addMetricsMetadata","queryOffset","queryText","getBlocks","reduce","block","blockText","anchorBlock","openParensAggregationIndex","lastIndexOf","openParensSelectorIndex","closeParensSelectorIndex","closeParensAggregationIndex","result","selectorString","parseSelector","series","getSeries","labelKeys","Object","keys","line","cursorOffset","substr","isValueStart","isValueEnd","isPreValue","parsedSelector","containsMetric","existingKeys","warn","possibleKeys","difference","newItems","newSuggestion","getTimeRangeParams","name","withName","range","urlParams","cacheKey","URLSearchParams","start","roundSecToMin","parseInt","end","labelsCache","get","processLabels","set","once","Promise","all","acc","i","timeRange","assign","cleanText","s","pop","trimLeft","PromqlSyntax","getLabelKeys","RATE_RANGES","fetchDefaultSeries","fetchSeriesLabels","labelFetchTs","valueOf","res","Array","isArray","labels","resultSet","Set","regexp","RegExp","test","add","__name__","valueSet","forEach","rest","has","valueArray","from","prefixOpen","prefixClose","suffixClose","suffixOpenIndex","suffixOpen","labelOffset","valueStart","valueEnd","metricMatch","cleanSelector","expandRecordingRules","mapping","ruleNames","rulesRegex","queryArray","pre","post","invalidLabelsRegex","invalidLabelsRegexp","indexOfRegexMatch","exprBeforeRegexMatch","exprAfterRegexMatch","arrayOfLabelObjects","obj","addLabelsToExpression","summaryMetadata","syntheticMetadata","roundMsToMin","milliseconds","seconds","Math","floor","RE2_METACHARACTERS","escapeLabelValueInExactSelector","escapeLabelValueInRegexSelector","Yallist","MAX","Symbol","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","self","doUse","node","hit","isStale","del","unshiftNode","maxAge","diff","trim","walker","tail","prev","delete","removeNode","Entry","forEachStep","fn","thisp","undefined","call","module","exports","options","max","TypeError","lc","stale","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","allowStale","mA","lC","rforEach","head","next","toArray","k","Map","dump","v","e","dumpLru","len","unshift","peek","load","arr","l","expiresAt","prune","prototype","iterator","list","arguments","insert","inserted","Node","create","pushNode","shift","forEachReverse","n","getReverse","mapReverse","initial","reduceReverse","toArrayReverse","to","ret","sliceReverse","splice","deleteCount","reverse","p","er"],"sourceRoot":""}