{"version":3,"sources":["webpack:///./public/app/plugins/datasource/tempo/datasource.ts","webpack:///./public/app/plugins/datasource/tempo/QueryField.tsx","webpack:///./public/app/plugins/datasource/tempo/module.ts","webpack:///./public/app/plugins/datasource/tempo/ConfigEditor.tsx"],"names":["TempoDatasource","instanceSettings","timeSrv","getTimeSrv","url","params","this","_request","hideFromInspector","toPromise","res","data","options","id","targets","query","encodeURIComponent","pipe","map","response","MutableDataFrame","fields","name","type","FieldType","trace","values","meta","preferredVisualisationType","of","status","range","timeRange","start","getTime","from","end","to","apiUrl","baseUrl","serializeParams","req","length","getBackendSrv","datasourceRequest","DataSourceApi","date","roundUp","dateMath","parse","valueOf","TempoQueryField","props","onChange","FormField","label","labelWidth","inputEl","className","style","width","value","e","currentTarget","React","PureComponent","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField"],"mappings":"ktDAsBO,IAAMA,EAAb,YACE,WAAoBC,GAAgG,MAAjCC,EAAiC,uDAAdC,cAAc,kBAClH,wBAAMF,KADYA,mBAAgG,EAAjCC,UAAiC,E,UADtH,W,kOAAA,M,EAAA,G,EAAA,uEAKwBE,EAAaC,GALrC,sGAMsBC,KAAKC,SAASH,EAAKC,EAAQ,CAAEG,mBAAmB,IAAQC,YAN9E,cAMUC,EANV,yBAOWA,EAAIC,KAAKA,MAPpB,4HAUQC,GAAsE,MAGpEC,EAAE,UAAGD,EAAQE,QAAQ,UAAnB,aAAG,EAAoBC,MAC/B,OAAIF,EACKP,KAAKC,SAAL,sBAA6BS,mBAAmBH,KAAOI,KAC5DC,aAAI,SAAAC,GAAY,MACd,MAAO,CACLR,KAAM,CACJ,IAAIS,mBAAiB,CACnBC,OAAQ,CACN,CACEC,KAAM,QACNC,KAAMC,YAAUC,MAChBC,QAAQP,aAAA,YAAAA,EAAUR,YAAV,eAAgBA,OAAQ,KAGpCgB,KAAM,CACJC,2BAA4B,iBAQjCC,YAAG,CACRlB,KAAM,CACJ,IAAIS,mBAAiB,CACnBC,OAAQ,CACN,CACEC,KAAM,QACNC,KAAMC,YAAUC,MAChBC,OAAQ,KAGZC,KAAM,CACJC,2BAA4B,gBA/C1C,gLAyDYtB,KAAKC,SAAL,sBAAoCE,YAzDhD,4DA6DU,uCAAGqB,SAAU,MAAO,uCAAGA,QAAS,KA7D1C,4DAiEW,GAjEX,2IAqEI,IAAMC,EAAQzB,KAAKJ,QAAQ8B,YAC3B,MAAO,CACLC,MAAOC,EAAQH,EAAMI,MAAM,GAC3BC,IAAKF,EAAQH,EAAMM,IAAI,MAxE7B,0CA4EsBtB,GAClB,OAAOA,EAAMA,QA7EjB,+BAgFmBuB,EAAgB3B,EAAYC,GAE3C,IAAM2B,EAAU,0BAAH,OAA6BjC,KAAKL,iBAAiBY,IAC1DR,EAASM,EAAO6B,YAAgB7B,GAAQ,GAExC8B,E,+VAAM,CAAH,GACJ7B,EADI,CAEPR,IAHU,GAAH,OAAMmC,GAAN,OAAgBD,GAAhB,OAAyBjC,EAAOqC,OAAP,WAAoBrC,GAAW,MAMjE,OAAO8B,YAAKQ,0BAAgBC,kBAAkBH,S,2BA1FlD,GAAqCI,iBA8FrC,SAASX,EAAQY,EAAyBC,GAIxC,MAHoB,iBAATD,IACTA,EAAOE,WAASC,MAAMH,EAAMC,IAEN,IAAjBD,EAAKI,U,gwCCjHP,IAAMC,EAAb,6E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCACW,MACqB7C,KAAK8C,MAAzBrC,EADD,EACCA,MAAOsC,EADR,EACQA,SAEf,OACE,kBAAC,cAAYC,UAAb,CACEC,MAAM,WACNC,WAAY,EACZC,QACE,yBAAKC,UAAU,8BACb,yBAAKA,UAAU,qBACb,2BACEC,MAAO,CAAEC,MAAO,QAChBC,MAAO9C,EAAMA,OAAS,GACtBsC,SAAU,SAAAS,GAAC,OACTT,E,+VAAS,IACJtC,EADG,CAENA,MAAO+C,EAAEC,cAAcF,qB,2BAjB3C,GAAqCG,IAAMC,eCP3C,uCAKO,IAAMC,EAAS,IAAIC,mBAAiBnE,GACxCoE,iBCA0C,SAAC,GAAiC,IAA/BxD,EAA+B,EAA/BA,QAASyD,EAAsB,EAAtBA,gBACvD,OACE,kBAAC,yBAAD,CACEC,WAAW,yBACXC,iBAAkB3D,EAClB4D,mBAAmB,EACnBnB,SAAUgB,ODLbI,qBAAqBtB","file":"tempoPlugin.be7fa34b3aa92fa71cc6.js","sourcesContent":["import {\n  dateMath,\n  DateTime,\n  MutableDataFrame,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQuery,\n  FieldType,\n} from '@grafana/data';\nimport { getBackendSrv, BackendSrvRequest } from '@grafana/runtime';\nimport { Observable, from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { serializeParams } from 'app/core/utils/fetch';\n\nexport type TempoQuery = {\n  query: string;\n} & DataQuery;\n\nexport class TempoDatasource extends DataSourceApi<TempoQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings, private readonly timeSrv: TimeSrv = getTimeSrv()) {\n    super(instanceSettings);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await this._request(url, params, { hideFromInspector: true }).toPromise();\n    return res.data.data;\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    // At this moment we expect only one target. In case we somehow change the UI to be able to show multiple\n    // traces at one we need to change this.\n    const id = options.targets[0]?.query;\n    if (id) {\n      return this._request(`/api/traces/${encodeURIComponent(id)}`).pipe(\n        map(response => {\n          return {\n            data: [\n              new MutableDataFrame({\n                fields: [\n                  {\n                    name: 'trace',\n                    type: FieldType.trace,\n                    values: response?.data?.data || [],\n                  },\n                ],\n                meta: {\n                  preferredVisualisationType: 'trace',\n                },\n              }),\n            ],\n          };\n        })\n      );\n    } else {\n      return of({\n        data: [\n          new MutableDataFrame({\n            fields: [\n              {\n                name: 'trace',\n                type: FieldType.trace,\n                values: [],\n              },\n            ],\n            meta: {\n              preferredVisualisationType: 'trace',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  async testDatasource(): Promise<any> {\n    try {\n      await this._request(`/api/traces/random`).toPromise();\n    } catch (e) {\n      // As we are not searching for a valid trace here this will definitely fail but we should return 502 if it's\n      // unreachable. 500 should otherwise be from tempo it self but probably makes sense to report them here.\n      if (e?.status >= 500 && e?.status < 600) {\n        throw e;\n      }\n    }\n    return true;\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: getTime(range.from, false),\n      end: getTime(range.to, true),\n    };\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    return query.query;\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    // Hack for proxying metadata requests\n    const baseUrl = `/api/datasources/proxy/${this.instanceSettings.id}`;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return from(getBackendSrv().datasourceRequest(req));\n  }\n}\n\nfunction getTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n  return date.valueOf() * 1000;\n}\n","import React from 'react';\nimport { TempoDatasource, TempoQuery } from './datasource';\n\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\n\ntype Props = ExploreQueryFieldProps<TempoDatasource, TempoQuery>;\nexport class TempoQueryField extends React.PureComponent<Props> {\n  render() {\n    const { query, onChange } = this.props;\n\n    return (\n      <LegacyForms.FormField\n        label=\"Trace ID\"\n        labelWidth={4}\n        inputEl={\n          <div className=\"slate-query-field__wrapper\">\n            <div className=\"slate-query-field\">\n              <input\n                style={{ width: '100%' }}\n                value={query.query || ''}\n                onChange={e =>\n                  onChange({\n                    ...query,\n                    query: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TempoDatasource } from './datasource';\nimport { TempoQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(TempoQueryField);\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <DataSourceHttpSettings\n      defaultUrl=\"http://localhost:16686\"\n      dataSourceConfig={options}\n      showAccessOptions={false}\n      onChange={onOptionsChange}\n    />\n  );\n};\n"],"sourceRoot":""}