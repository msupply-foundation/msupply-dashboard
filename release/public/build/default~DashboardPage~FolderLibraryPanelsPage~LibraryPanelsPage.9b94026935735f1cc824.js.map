{"version":3,"sources":["webpack:///./public/app/features/dashboard/components/VizTypePicker/VizTypePickerPlugin.tsx","webpack:///./public/app/features/dashboard/components/VizTypePicker/VizTypePicker.tsx","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/dashboard/components/VizTypePicker/PanelTypeCard.tsx","webpack:///./public/app/features/library-panels/styles.ts","webpack:///./node_modules/debounce-promise/dist/index.js","webpack:///./public/app/features/library-panels/components/LibraryPanelsView/reducer.ts","webpack:///./public/app/features/library-panels/components/LibraryPanelsView/actions.ts","webpack:///./public/app/features/library-panels/components/DeleteLibraryPanelModal/reducer.ts","webpack:///./public/app/features/library-panels/components/DeleteLibraryPanelModal/DeleteLibraryPanelModal.tsx","webpack:///./public/app/features/library-panels/components/DeleteLibraryPanelModal/actions.ts","webpack:///./public/app/features/library-panels/components/LibraryPanelCard/LibraryPanelCard.tsx","webpack:///./public/app/features/library-panels/components/LibraryPanelsView/LibraryPanelsView.tsx","webpack:///./public/app/core/components/FolderFilter/FolderFilter.tsx","webpack:///./public/app/features/library-panels/components/LibraryPanelsSearch/reducer.ts","webpack:///./public/app/features/library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch.tsx","webpack:///./public/app/core/components/PanelTypeFilter/PanelTypeFilter.tsx"],"names":["VizTypePickerPlugin","isCurrent","plugin","onClick","disabled","PanelTypeCard","title","name","description","info","showBadge","displayName","getAllPanelPluginMeta","allPanels","config","panels","Object","keys","filter","key","map","sort","a","b","filterPluginList","pluginsList","searchQuery","current","length","p","state","PluginState","deprecated","id","query","toLowerCase","first","match","item","idx","indexOf","push","concat","VizTypePicker","onTypeChange","theme","useTheme","styles","getStyles","useMemo","getFilteredPluginList","useCallback","filteredPluginList","hasResults","renderList","className","grid","index","matchesQuery","e","Boolean","metaKey","ctrlKey","altKey","renderVizPlugin","stylesFactory","css","spacing","sm","PluginStateInfo","props","display","text","color","tooltip","alpha","beta","getFeatureStateInfo","icon","onDelete","children","useStyles2","cssClass","cx","aria-label","selectors","components","PluginVisualization","undefined","img","src","logos","small","itemContent","badge","PanelPluginBadge","stopPropagation","colors","background","secondary","shape","borderRadius","shadows","z1","transitions","create","duration","short","emphasize","primary","border","action","selected","typography","size","fontWeightMedium","bodySmall","fontSize","fontWeightLight","isUnsignedPluginSignature","signature","status","getModalStyles","myTable","radius","bg3","bg1","textSemiWeak","md","xl","bg2","noteTextbox","textInfo","dashboardSearch","modal","modalText","heading","h4","link","d","getWait","wait","defer","deferred","promise","Promise","resolve","reject","module","exports","fn","arguments","options","lastCallAt","timer","pendingArgs","currentWait","currentTime","Date","getTime","isCold","_len","args","Array","_key","leading","accumulate","call","this","then","result","apply","clearTimeout","setTimeout","flush","bind","argsIndex","results","thisDeferred","initialLibraryPanelsViewState","loadingState","LoadingState","Loading","libraryPanels","totalCount","perPage","page","numberOfPages","currentPanelId","initSearch","createAction","searchCompleted","changePage","libraryPanelsViewReducer","payload","Math","ceil","Done","searchForLibraryPanels","dispatch","subscription","Subscription","dataObservable","from","getLibraryPanels","searchString","excludeUid","sortDirection","typeFilter","panelFilter","folderFilter","pipe","mergeMap","elements","of","catchError","err","console","error","finalize","unsubscribe","share","add","merge","mapTo","takeUntil","subscribe","asyncDispatcher","Function","initialDeleteLibraryPanelModalState","dashboardTitles","deleteLibraryPanelModalReducer","dashboards","DeleteLibraryPanelModal","libraryPanel","onDismiss","onConfirm","useStyles","useReducer","asyncDispatch","useEffect","async","apiGetConnectedDashboards","uid","getConnectedDashboards","connected","done","isOpen","LoadingIndicator","HasConnectedDashboards","Confirm","ButtonRow","variant","fill","suffix","message","i","LibraryPanelCard","showSecondaryActions","showDeletionModal","setShowDeletionModal","useState","panelPlugin","model","type","getPanelPluginNotFound","meta","FolderLink","folderUid","metaContainer","href","folderName","LibraryPanelsView","onClickCard","currentPanel","propsPerPage","getPanelViewStyles","useDebounce","apiDeleteLibraryPanel","deleteLibraryPanel","container","libraryPanelList","noPanelsFound","pagination","currentPage","onNavigate","hideWhenSinglePage","searchHeader","newPanelButton","FolderFilter","onChange","propsOnChange","maxMenuHeight","loading","setLoading","getOptions","params","permission","getBackendSrv","search","label","value","includes","unshift","getFoldersAsOptions","debouncedLoadOptions","debounce","setValue","folders","changedFolders","folder","selectOptions","defaultOptions","isMulti","noOptionsMessage","placeholder","resetSelectStyles","clear","menuShouldPortal","isLoading","loadOptions","prefix","maxContrast","initialLibraryPanelsSearchState","searchChanged","sortChanged","panelFilterChanged","folderFilterChanged","libraryPanelsSearchReducer","f","String","LibraryPanelsSearchVariant","LibraryPanelsSearch","Spacious","currentFolderId","DEFAULT_PER_PAGE_PAGINATION","showPanelFilter","showFolderFilter","showSort","toString","onFilterChange","onSortChange","sorting","onFolderFilterChange","onPanelFilterChange","plugins","FilterInput","width","justify","SortPicker","PanelTypeFilter","libraryPanelsView","buttonRow","tightFilter","tightSortFilter","imgUrl","localeCompare","changedPlugins","getOptionLabel","getOptionValue"],"mappings":"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","file":"default~DashboardPage~FolderLibraryPanelsPage~LibraryPanelsPage.9b94026935735f1cc824.js","sourcesContent":["import React, { MouseEventHandler } from 'react';\nimport { PanelPluginMeta } from '@grafana/data';\nimport { PanelTypeCard } from './PanelTypeCard';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  onClick: MouseEventHandler<HTMLDivElement>;\n  disabled: boolean;\n}\n\nexport const VizTypePickerPlugin: React.FC<Props> = ({ isCurrent, plugin, onClick, disabled }) => {\n  return (\n    <PanelTypeCard\n      title={plugin.name}\n      plugin={plugin}\n      description={plugin.info.description}\n      onClick={onClick}\n      isCurrent={isCurrent}\n      disabled={disabled}\n      showBadge={true}\n    />\n  );\n};\n\nVizTypePickerPlugin.displayName = 'VizTypePickerPlugin';\n","import React, { useCallback, useMemo } from 'react';\n\nimport config from 'app/core/config';\nimport { VizTypePickerPlugin } from './VizTypePickerPlugin';\nimport { EmptySearchResult, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, PanelPluginMeta, PluginState } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  current: PanelPluginMeta;\n  onTypeChange: (newType: PanelPluginMeta, withModKey: boolean) => void;\n  searchQuery: string;\n  onClose: () => void;\n}\n\nexport function getAllPanelPluginMeta(): PanelPluginMeta[] {\n  const allPanels = config.panels;\n\n  return Object.keys(allPanels)\n    .filter((key) => allPanels[key]['hideFromList'] === false)\n    .map((key) => allPanels[key])\n    .sort((a: PanelPluginMeta, b: PanelPluginMeta) => a.sort - b.sort);\n}\n\nexport function filterPluginList(\n  pluginsList: PanelPluginMeta[],\n  searchQuery: string,\n  current: PanelPluginMeta\n): PanelPluginMeta[] {\n  if (!searchQuery.length) {\n    return pluginsList.filter((p) => {\n      if (p.state === PluginState.deprecated) {\n        return current.id === p.id;\n      }\n      return true;\n    });\n  }\n\n  const query = searchQuery.toLowerCase();\n  const first: PanelPluginMeta[] = [];\n  const match: PanelPluginMeta[] = [];\n\n  for (const item of pluginsList) {\n    if (item.state === PluginState.deprecated && current.id !== item.id) {\n      continue;\n    }\n\n    const name = item.name.toLowerCase();\n    const idx = name.indexOf(query);\n\n    if (idx === 0) {\n      first.push(item);\n    } else if (idx > 0) {\n      match.push(item);\n    }\n  }\n\n  return first.concat(match);\n}\n\nexport const VizTypePicker: React.FC<Props> = ({ searchQuery, onTypeChange, current }) => {\n  const theme = useTheme();\n  const styles = getStyles(theme);\n  const pluginsList: PanelPluginMeta[] = useMemo(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n\n  const getFilteredPluginList = useCallback((): PanelPluginMeta[] => {\n    return filterPluginList(pluginsList, searchQuery, current);\n  }, [current, pluginsList, searchQuery]);\n\n  const renderVizPlugin = (plugin: PanelPluginMeta, index: number) => {\n    const isCurrent = plugin.id === current.id;\n    const filteredPluginList = getFilteredPluginList();\n\n    const matchesQuery = filteredPluginList.indexOf(plugin) > -1;\n    return (\n      <VizTypePickerPlugin\n        disabled={!matchesQuery && !!searchQuery}\n        key={plugin.id}\n        isCurrent={isCurrent}\n        plugin={plugin}\n        onClick={(e) => onTypeChange(plugin, Boolean(e.metaKey || e.ctrlKey || e.altKey))}\n      />\n    );\n  };\n\n  const filteredPluginList = getFilteredPluginList();\n  const hasResults = filteredPluginList.length > 0;\n  const renderList = filteredPluginList.concat(pluginsList.filter((p) => filteredPluginList.indexOf(p) === -1));\n\n  return (\n    <div className={styles.grid}>\n      {hasResults ? (\n        renderList.map((plugin, index) => {\n          if (plugin.state === PluginState.deprecated) {\n            return null;\n          }\n          return renderVizPlugin(plugin, index);\n        })\n      ) : (\n        <EmptySearchResult>Could not find anything matching your query</EmptySearchResult>\n      )}\n    </div>\n  );\n};\n\nVizTypePicker.displayName = 'VizTypePicker';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    grid: css`\n      max-width: 100%;\n      display: grid;\n      grid-gap: ${theme.spacing.sm};\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n","import React, { MouseEventHandler } from 'react';\nimport { GrafanaTheme2, isUnsignedPluginSignature, PanelPluginMeta, PluginState } from '@grafana/data';\nimport { IconButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { PluginStateInfo } from 'app/features/plugins/PluginStateInfo';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  title: string;\n  onClick: MouseEventHandler<HTMLDivElement>;\n  onDelete?: () => void;\n  disabled?: boolean;\n  showBadge?: boolean;\n  description?: string;\n}\n\nexport const PanelTypeCard: React.FC<Props> = ({\n  isCurrent,\n  title,\n  plugin,\n  onClick,\n  onDelete,\n  disabled,\n  showBadge,\n  description,\n  children,\n}) => {\n  const styles = useStyles2(getStyles);\n  const cssClass = cx({\n    [styles.item]: true,\n    [styles.disabled]: disabled || plugin.state === PluginState.deprecated,\n    [styles.current]: isCurrent,\n  });\n\n  return (\n    <div\n      className={cssClass}\n      aria-label={selectors.components.PluginVisualization.item(plugin.name)}\n      onClick={disabled ? undefined : onClick}\n      title={isCurrent ? 'Click again to close this section' : plugin.name}\n    >\n      <img className={styles.img} src={plugin.info.logos.small} />\n\n      <div className={styles.itemContent}>\n        <div className={styles.name}>{title}</div>\n        {description ? <span className={styles.description}>{description}</span> : null}\n        {children}\n      </div>\n      {showBadge && (\n        <div className={cx(styles.badge, disabled && styles.disabled)}>\n          <PanelPluginBadge plugin={plugin} />\n        </div>\n      )}\n      {onDelete && (\n        <IconButton\n          name=\"trash-alt\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onDelete();\n          }}\n          aria-label=\"Delete button on panel type card\"\n        />\n      )}\n    </div>\n  );\n};\n\nPanelTypeCard.displayName = 'PanelTypeCard';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    item: css`\n      position: relative;\n      display: flex;\n      flex-shrink: 0;\n      cursor: pointer;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      box-shadow: ${theme.shadows.z1};\n      border: 1px solid ${theme.colors.background.secondary};\n      align-items: center;\n      padding: 8px;\n      width: 100%;\n      position: relative;\n      overflow: hidden;\n      transition: ${theme.transitions.create(['background'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    itemContent: css`\n      position: relative;\n      width: 100%;\n      padding: ${theme.spacing(0, 1)};\n    `,\n    current: css`\n      label: currentVisualizationItem;\n      border: 1px solid ${theme.colors.primary.border};\n      background: ${theme.colors.action.selected};\n    `,\n    disabled: css`\n      opacity: 0.2;\n      filter: grayscale(1);\n      cursor: default;\n      pointer-events: none;\n    `,\n    name: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      font-size: ${theme.typography.size.sm};\n      font-weight: ${theme.typography.fontWeightMedium};\n      width: 100%;\n    `,\n    description: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.fontWeightLight};\n      width: 100%;\n    `,\n    img: css`\n      max-height: 38px;\n      width: 38px;\n      display: flex;\n      align-items: center;\n    `,\n    badge: css`\n      background: ${theme.colors.background.primary};\n    `,\n  };\n};\n\ninterface PanelPluginBadgeProps {\n  plugin: PanelPluginMeta;\n}\n\nconst PanelPluginBadge: React.FC<PanelPluginBadgeProps> = ({ plugin }) => {\n  if (isUnsignedPluginSignature(plugin.signature)) {\n    return <PluginSignatureBadge status={plugin.signature} />;\n  }\n\n  return <PluginStateInfo state={plugin.state} />;\n};\n\nPanelPluginBadge.displayName = 'PanelPluginBadge';\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\n\nexport function getModalStyles(theme: GrafanaTheme) {\n  return {\n    myTable: css`\n      max-height: 204px;\n      overflow-y: auto;\n      margin-top: 11px;\n      margin-bottom: 28px;\n      border-radius: ${theme.border.radius.sm};\n      border: 1px solid ${theme.colors.bg3};\n      background: ${theme.colors.bg1};\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.md};\n      width: 100%;\n\n      thead {\n        color: #538ade;\n        font-size: ${theme.typography.size.sm};\n      }\n\n      th,\n      td {\n        padding: 6px 13px;\n        height: ${theme.spacing.xl};\n      }\n\n      tbody > tr:nth-child(odd) {\n        background: ${theme.colors.bg2};\n      }\n    `,\n    noteTextbox: css`\n      margin-bottom: ${theme.spacing.xl};\n    `,\n    textInfo: css`\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.sm};\n    `,\n    dashboardSearch: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    modal: css`\n      width: 500px;\n    `,\n    modalText: css`\n      font-size: ${theme.typography.heading.h4};\n      color: ${theme.colors.link};\n      margin-bottom: calc(${theme.spacing.d} * 2);\n      padding-top: ${theme.spacing.d};\n    `,\n  };\n}\n","'use strict';\n\n/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var lastCallAt = void 0;\n  var deferred = void 0;\n  var timer = void 0;\n  var pendingArgs = [];\n  return function debounced() {\n    var currentWait = getWait(wait);\n    var currentTime = new Date().getTime();\n\n    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n\n    lastCallAt = currentTime;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isCold && options.leading) {\n      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {\n        return result[0];\n      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));\n    }\n\n    if (deferred) {\n      clearTimeout(timer);\n    } else {\n      deferred = defer();\n    }\n\n    pendingArgs.push(args);\n    timer = setTimeout(flush.bind(this), currentWait);\n\n    if (options.accumulate) {\n      var argsIndex = pendingArgs.length - 1;\n      return deferred.promise.then(function (results) {\n        return results[argsIndex];\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  function flush() {\n    var thisDeferred = deferred;\n    clearTimeout(timer);\n\n    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);\n\n    pendingArgs = [];\n    deferred = null;\n  }\n};\n\nfunction getWait(wait) {\n  return typeof wait === 'function' ? wait() : wait;\n}\n\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n//# sourceMappingURL=index.js.map","import { createAction } from '@reduxjs/toolkit';\nimport { LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../types';\nimport { AnyAction } from 'redux';\n\nexport interface LibraryPanelsViewState {\n  loadingState: LoadingState;\n  libraryPanels: LibraryElementDTO[];\n  totalCount: number;\n  perPage: number;\n  page: number;\n  numberOfPages: number;\n  currentPanelId?: string;\n}\n\nexport const initialLibraryPanelsViewState: LibraryPanelsViewState = {\n  loadingState: LoadingState.Loading,\n  libraryPanels: [],\n  totalCount: 0,\n  perPage: 40,\n  page: 1,\n  numberOfPages: 0,\n  currentPanelId: undefined,\n};\n\nexport const initSearch = createAction('libraryPanels/view/initSearch');\nexport const searchCompleted = createAction<\n  Omit<LibraryPanelsViewState, 'currentPanelId' | 'searchString' | 'loadingState' | 'numberOfPages'>\n>('libraryPanels/view/searchCompleted');\n\nexport const changePage = createAction<Pick<LibraryPanelsViewState, 'page'>>('libraryPanels/view/changePage');\n\nexport const libraryPanelsViewReducer = (state: LibraryPanelsViewState, action: AnyAction) => {\n  if (initSearch.match(action)) {\n    return { ...state, loadingState: LoadingState.Loading };\n  }\n\n  if (searchCompleted.match(action)) {\n    const { libraryPanels, page, perPage, totalCount } = action.payload;\n    const numberOfPages = Math.ceil(totalCount / perPage);\n    return {\n      ...state,\n      libraryPanels,\n      perPage,\n      totalCount,\n      loadingState: LoadingState.Done,\n      numberOfPages,\n      page: page > numberOfPages ? page - 1 : page,\n    };\n  }\n\n  if (changePage.match(action)) {\n    return { ...state, page: action.payload.page };\n  }\n\n  return state;\n};\n","import { Dispatch } from 'react';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { from, merge, of, Subscription, timer } from 'rxjs';\nimport { catchError, finalize, mapTo, mergeMap, share, takeUntil } from 'rxjs/operators';\n\nimport { deleteLibraryPanel as apiDeleteLibraryPanel, getLibraryPanels } from '../../state/api';\nimport { initialLibraryPanelsViewState, initSearch, searchCompleted } from './reducer';\n\ntype DispatchResult = (dispatch: Dispatch<AnyAction>) => void;\ninterface SearchArgs {\n  perPage: number;\n  page: number;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  currentPanelId?: string;\n}\n\nexport function searchForLibraryPanels(args: SearchArgs): DispatchResult {\n  return function (dispatch) {\n    const subscription = new Subscription();\n    const dataObservable = from(\n      getLibraryPanels({\n        searchString: args.searchString,\n        perPage: args.perPage,\n        page: args.page,\n        excludeUid: args.currentPanelId,\n        sortDirection: args.sortDirection,\n        typeFilter: args.panelFilter,\n        folderFilter: args.folderFilter,\n      })\n    ).pipe(\n      mergeMap(({ perPage, elements: libraryPanels, page, totalCount }) =>\n        of(searchCompleted({ libraryPanels, page, perPage, totalCount }))\n      ),\n      catchError((err) => {\n        console.error(err);\n        return of(searchCompleted({ ...initialLibraryPanelsViewState, page: args.page, perPage: args.perPage }));\n      }),\n      finalize(() => subscription.unsubscribe()), // make sure we unsubscribe\n      share()\n    );\n\n    subscription.add(\n      // If 50ms without a response dispatch a loading state\n      // mapTo will translate the timer event into a loading state\n      // takeUntil will cancel the timer emit when first response is received on the dataObservable\n      merge(timer(50).pipe(mapTo(initSearch()), takeUntil(dataObservable)), dataObservable).subscribe(dispatch)\n    );\n  };\n}\n\nexport function deleteLibraryPanel(uid: string, args: SearchArgs): DispatchResult {\n  return async function (dispatch) {\n    try {\n      await apiDeleteLibraryPanel(uid);\n      searchForLibraryPanels(args)(dispatch);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}\n\nexport function asyncDispatcher(dispatch: Dispatch<AnyAction>) {\n  return function (action: any) {\n    if (action instanceof Function) {\n      return action(dispatch);\n    }\n    return dispatch(action);\n  };\n}\n","import { DashboardSearchHit } from 'app/features/search/types';\nimport { LoadingState } from '@grafana/data';\nimport { AnyAction } from 'redux';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport interface DeleteLibraryPanelModalState {\n  loadingState: LoadingState;\n  dashboardTitles: string[];\n}\n\nexport const initialDeleteLibraryPanelModalState: DeleteLibraryPanelModalState = {\n  loadingState: LoadingState.Loading,\n  dashboardTitles: [],\n};\n\nexport const searchCompleted = createAction<{ dashboards: DashboardSearchHit[] }>(\n  'libraryPanels/delete/searchCompleted'\n);\n\nexport const deleteLibraryPanelModalReducer = (\n  state: DeleteLibraryPanelModalState = initialDeleteLibraryPanelModalState,\n  action: AnyAction\n): DeleteLibraryPanelModalState => {\n  if (searchCompleted.match(action)) {\n    return {\n      ...state,\n      dashboardTitles: action.payload.dashboards.map((d) => d.title),\n      loadingState: LoadingState.Done,\n    };\n  }\n\n  return state;\n};\n","import React, { FC, useEffect, useMemo, useReducer } from 'react';\nimport { Button, Modal, useStyles } from '@grafana/ui';\nimport { LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../types';\nimport { asyncDispatcher } from '../LibraryPanelsView/actions';\nimport { deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState } from './reducer';\nimport { getConnectedDashboards } from './actions';\nimport { getModalStyles } from '../../styles';\n\ninterface Props {\n  libraryPanel: LibraryElementDTO;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const DeleteLibraryPanelModal: FC<Props> = ({ libraryPanel, onDismiss, onConfirm }) => {\n  const styles = useStyles(getModalStyles);\n  const [{ dashboardTitles, loadingState }, dispatch] = useReducer(\n    deleteLibraryPanelModalReducer,\n    initialDeleteLibraryPanelModalState\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useEffect(() => {\n    asyncDispatch(getConnectedDashboards(libraryPanel));\n  }, [asyncDispatch, libraryPanel]);\n  const connected = Boolean(dashboardTitles.length);\n  const done = loadingState === LoadingState.Done;\n\n  return (\n    <Modal className={styles.modal} title=\"Delete library panel\" icon=\"trash-alt\" onDismiss={onDismiss} isOpen={true}>\n      {!done ? <LoadingIndicator /> : null}\n      {done ? (\n        <div>\n          {connected ? <HasConnectedDashboards dashboardTitles={dashboardTitles} /> : null}\n          {!connected ? <Confirm /> : null}\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={onConfirm} disabled={connected}>\n              Delete\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : null}\n    </Modal>\n  );\n};\n\nconst LoadingIndicator: FC = () => <span>Loading library panel...</span>;\n\nconst Confirm: FC = () => {\n  const styles = useStyles(getModalStyles);\n\n  return <div className={styles.modalText}>Do you want to delete this panel?</div>;\n};\n\nconst HasConnectedDashboards: FC<{ dashboardTitles: string[] }> = ({ dashboardTitles }) => {\n  const styles = useStyles(getModalStyles);\n  const suffix = dashboardTitles.length === 1 ? 'dashboard.' : 'dashboards.';\n  const message = `${dashboardTitles.length} ${suffix}`;\n  if (dashboardTitles.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <p className={styles.textInfo}>\n        {'This library panel can not be deleted because it is connected to '}\n        <strong>{message}</strong>\n        {' Remove the library panel from the dashboards listed below and retry.'}\n      </p>\n      <table className={styles.myTable}>\n        <thead>\n          <tr>\n            <th>Dashboard name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {dashboardTitles.map((title, i) => (\n            <tr key={`dash-title-${i}`}>\n              <td>{title}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { DispatchResult, LibraryElementDTO } from '../../types';\nimport { getConnectedDashboards as apiGetConnectedDashboards } from '../../state/api';\nimport { searchCompleted } from './reducer';\n\nexport function getConnectedDashboards(libraryPanel: LibraryElementDTO): DispatchResult {\n  return async function (dispatch) {\n    const dashboards = await apiGetConnectedDashboards(libraryPanel.uid);\n    dispatch(searchCompleted({ dashboards }));\n  };\n}\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Link, useStyles2 } from '@grafana/ui';\nimport { LibraryElementDTO } from '../../types';\nimport { PanelTypeCard } from 'app/features/dashboard/components/VizTypePicker/PanelTypeCard';\nimport { DeleteLibraryPanelModal } from '../DeleteLibraryPanelModal/DeleteLibraryPanelModal';\nimport { config } from '@grafana/runtime';\nimport { getPanelPluginNotFound } from 'app/features/dashboard/dashgrid/PanelPluginError';\n\nexport interface LibraryPanelCardProps {\n  libraryPanel: LibraryElementDTO;\n  onClick: (panel: LibraryElementDTO) => void;\n  onDelete?: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n}\n\nexport const LibraryPanelCard: React.FC<LibraryPanelCardProps & { children?: JSX.Element | JSX.Element[] }> = ({\n  libraryPanel,\n  onClick,\n  onDelete,\n  showSecondaryActions,\n}) => {\n  const [showDeletionModal, setShowDeletionModal] = useState(false);\n\n  const onDeletePanel = () => {\n    onDelete?.(libraryPanel);\n    setShowDeletionModal(false);\n  };\n\n  const panelPlugin = config.panels[libraryPanel.model.type] ?? getPanelPluginNotFound(libraryPanel.model.type).meta;\n\n  return (\n    <>\n      <PanelTypeCard\n        isCurrent={false}\n        title={libraryPanel.name}\n        description={libraryPanel.description}\n        plugin={panelPlugin}\n        onClick={() => onClick(libraryPanel)}\n        onDelete={showSecondaryActions ? () => setShowDeletionModal(true) : undefined}\n      >\n        <FolderLink libraryPanel={libraryPanel} />\n      </PanelTypeCard>\n      {showDeletionModal && (\n        <DeleteLibraryPanelModal\n          libraryPanel={libraryPanel}\n          onConfirm={onDeletePanel}\n          onDismiss={() => setShowDeletionModal(false)}\n        />\n      )}\n    </>\n  );\n};\n\ninterface FolderLinkProps {\n  libraryPanel: LibraryElementDTO;\n}\n\nfunction FolderLink({ libraryPanel }: FolderLinkProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n\n  if (!libraryPanel.meta.folderUid) {\n    return (\n      <span className={styles.metaContainer}>\n        <Icon name={'folder'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={styles.metaContainer}>\n      <Link href={`/dashboards/f/${libraryPanel.meta.folderUid}`}>\n        <Icon name={'folder-upload'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </Link>\n    </span>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    metaContainer: css`\n      display: flex;\n      align-items: center;\n      color: ${theme.colors.text.disabled};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      padding-top: ${theme.spacing(0.5)};\n\n      svg {\n        margin-right: ${theme.spacing(0.5)};\n        margin-bottom: 3px;\n      }\n    `,\n  };\n}\n","import React, { useMemo, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\nimport { css, cx } from '@emotion/css';\nimport { Pagination, useStyles } from '@grafana/ui';\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\n\nimport { LibraryPanelCard } from '../LibraryPanelCard/LibraryPanelCard';\nimport { LibraryElementDTO } from '../../types';\nimport { changePage, initialLibraryPanelsViewState, libraryPanelsViewReducer } from './reducer';\nimport { asyncDispatcher, deleteLibraryPanel, searchForLibraryPanels } from './actions';\n\ninterface LibraryPanelViewProps {\n  className?: string;\n  onClickCard: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  perPage?: number;\n}\n\nexport const LibraryPanelsView: React.FC<LibraryPanelViewProps> = ({\n  className,\n  onClickCard,\n  searchString,\n  sortDirection,\n  panelFilter,\n  folderFilter,\n  showSecondaryActions,\n  currentPanelId: currentPanel,\n  perPage: propsPerPage = 40,\n}) => {\n  const styles = useStyles(getPanelViewStyles);\n  const [{ libraryPanels, page, perPage, numberOfPages, loadingState, currentPanelId }, dispatch] = useReducer(\n    libraryPanelsViewReducer,\n    {\n      ...initialLibraryPanelsViewState,\n      currentPanelId: currentPanel,\n      perPage: propsPerPage,\n    }\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useDebounce(\n    () =>\n      asyncDispatch(\n        searchForLibraryPanels({\n          searchString,\n          sortDirection,\n          panelFilter,\n          folderFilter,\n          page,\n          perPage,\n          currentPanelId,\n        })\n      ),\n    300,\n    [searchString, sortDirection, panelFilter, folderFilter, page, asyncDispatch]\n  );\n  const onDelete = ({ uid }: LibraryElementDTO) =>\n    asyncDispatch(deleteLibraryPanel(uid, { searchString, page, perPage }));\n  const onPageChange = (page: number) => asyncDispatch(changePage({ page }));\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <div className={styles.libraryPanelList}>\n        {loadingState === LoadingState.Loading ? (\n          <p>Loading library panels...</p>\n        ) : libraryPanels.length < 1 ? (\n          <p className={styles.noPanelsFound}>No library panels found.</p>\n        ) : (\n          libraryPanels?.map((item, i) => (\n            <LibraryPanelCard\n              key={`library-panel=${i}`}\n              libraryPanel={item}\n              onDelete={onDelete}\n              onClick={onClickCard}\n              showSecondaryActions={showSecondaryActions}\n            />\n          ))\n        )}\n      </div>\n      {libraryPanels.length ? (\n        <div className={styles.pagination}>\n          <Pagination\n            currentPage={page}\n            numberOfPages={numberOfPages}\n            onNavigate={onPageChange}\n            hideWhenSinglePage={true}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst getPanelViewStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n    `,\n    libraryPanelList: css`\n      max-width: 100%;\n      display: grid;\n      grid-gap: ${theme.spacing.sm};\n    `,\n    searchHeader: css`\n      display: flex;\n    `,\n    newPanelButton: css`\n      margin-top: 10px;\n      align-self: flex-start;\n    `,\n    pagination: css`\n      align-self: center;\n      margin-top: ${theme.spacing.sm};\n    `,\n    noPanelsFound: css`\n      label: noPanelsFound;\n      min-height: 200px;\n    `,\n  };\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { AsyncMultiSelect, Icon, resetSelectStyles, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\n\nimport { FolderInfo } from 'app/types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\n\nexport interface FolderFilterProps {\n  onChange: (folder: FolderInfo[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport function FolderFilter({ onChange: propsOnChange, maxMenuHeight }: FolderFilterProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const getOptions = useCallback((searchString: string) => getFoldersAsOptions(searchString, setLoading), []);\n  const debouncedLoadOptions = useMemo(() => debounce(getOptions, 300), [getOptions]);\n  const [value, setValue] = useState<Array<SelectableValue<FolderInfo>>>([]);\n  const onChange = useCallback(\n    (folders: Array<SelectableValue<FolderInfo>>) => {\n      const changedFolders = [];\n      for (const folder of folders) {\n        if (folder.value) {\n          changedFolders.push(folder.value);\n        }\n      }\n      propsOnChange(changedFolders);\n      setValue(folders);\n    },\n    [propsOnChange]\n  );\n  const selectOptions = {\n    defaultOptions: true,\n    isMulti: true,\n    noOptionsMessage: 'No folders found',\n    placeholder: 'Filter by folder',\n    styles: resetSelectStyles(),\n    maxMenuHeight,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <span className={styles.clear} onClick={() => onChange([])}>\n          Clear folders\n        </span>\n      )}\n      <AsyncMultiSelect\n        menuShouldPortal\n        {...selectOptions}\n        isLoading={loading}\n        loadOptions={debouncedLoadOptions}\n        prefix={<Icon name=\"filter\" />}\n        aria-label=\"Folder filter\"\n      />\n    </div>\n  );\n}\n\nasync function getFoldersAsOptions(searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n\n  const params = {\n    query: searchString,\n    type: 'dash-folder',\n    permission: 'View',\n  };\n\n  const searchHits = await getBackendSrv().search(params);\n  const options = searchHits.map((d) => ({ label: d.title, value: { id: d.id, title: d.title } }));\n  if (!searchString || 'general'.includes(searchString.toLowerCase())) {\n    options.unshift({ label: 'General', value: { id: 0, title: 'General' } });\n  }\n\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      text-decoration: underline;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(2.75)};\n      right: 0;\n      cursor: pointer;\n      color: ${theme.colors.text.link};\n\n      &:hover {\n        color: ${theme.colors.text.maxContrast};\n      }\n    `,\n  };\n}\n","import { AnyAction } from 'redux';\nimport { createAction } from '@reduxjs/toolkit';\nimport { PanelPluginMeta, SelectableValue } from '@grafana/data';\n\nimport { FolderInfo } from '../../../../types';\n\nexport interface LibraryPanelsSearchState {\n  searchQuery: string;\n  sortDirection?: string;\n  panelFilter: string[];\n  folderFilter: string[];\n}\n\nexport const initialLibraryPanelsSearchState: LibraryPanelsSearchState = {\n  searchQuery: '',\n  panelFilter: [],\n  folderFilter: [],\n  sortDirection: undefined,\n};\n\nexport const searchChanged = createAction<string>('libraryPanels/search/searchChanged');\nexport const sortChanged = createAction<SelectableValue<string>>('libraryPanels/search/sortChanged');\nexport const panelFilterChanged = createAction<PanelPluginMeta[]>('libraryPanels/search/panelFilterChanged');\nexport const folderFilterChanged = createAction<FolderInfo[]>('libraryPanels/search/folderFilterChanged');\n\nexport const libraryPanelsSearchReducer = (state: LibraryPanelsSearchState, action: AnyAction) => {\n  if (searchChanged.match(action)) {\n    return { ...state, searchQuery: action.payload };\n  }\n\n  if (sortChanged.match(action)) {\n    return { ...state, sortDirection: action.payload.value };\n  }\n\n  if (panelFilterChanged.match(action)) {\n    return { ...state, panelFilter: action.payload.map((p) => p.id) };\n  }\n\n  if (folderFilterChanged.match(action)) {\n    return { ...state, folderFilter: action.payload.map((f) => String(f.id!)) };\n  }\n\n  return state;\n};\n","import React, { useReducer } from 'react';\nimport { HorizontalGroup, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { FilterInput } from '../../../../core/components/FilterInput/FilterInput';\nimport { SortPicker } from '../../../../core/components/Select/SortPicker';\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../core/constants';\nimport { LibraryElementDTO } from '../../types';\nimport { FolderFilter } from '../../../../core/components/FolderFilter/FolderFilter';\nimport { FolderInfo } from '../../../../types';\nimport {\n  folderFilterChanged,\n  initialLibraryPanelsSearchState,\n  libraryPanelsSearchReducer,\n  panelFilterChanged,\n  searchChanged,\n  sortChanged,\n} from './reducer';\n\nexport enum LibraryPanelsSearchVariant {\n  Tight = 'tight',\n  Spacious = 'spacious',\n}\n\nexport interface LibraryPanelsSearchProps {\n  onClick: (panel: LibraryElementDTO) => void;\n  variant?: LibraryPanelsSearchVariant;\n  showSort?: boolean;\n  showPanelFilter?: boolean;\n  showFolderFilter?: boolean;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  currentFolderId?: number;\n  perPage?: number;\n}\n\nexport const LibraryPanelsSearch = ({\n  onClick,\n  variant = LibraryPanelsSearchVariant.Spacious,\n  currentPanelId,\n  currentFolderId,\n  perPage = DEFAULT_PER_PAGE_PAGINATION,\n  showPanelFilter = false,\n  showFolderFilter = false,\n  showSort = false,\n  showSecondaryActions = false,\n}: LibraryPanelsSearchProps): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [{ sortDirection, panelFilter, folderFilter, searchQuery }, dispatch] = useReducer(libraryPanelsSearchReducer, {\n    ...initialLibraryPanelsSearchState,\n    folderFilter: currentFolderId ? [currentFolderId.toString(10)] : [],\n  });\n  const onFilterChange = (searchString: string) => dispatch(searchChanged(searchString));\n  const onSortChange = (sorting: SelectableValue<string>) => dispatch(sortChanged(sorting));\n  const onFolderFilterChange = (folders: FolderInfo[]) => dispatch(folderFilterChanged(folders));\n  const onPanelFilterChange = (plugins: PanelPluginMeta[]) => dispatch(panelFilterChanged(plugins));\n\n  if (variant === LibraryPanelsSearchVariant.Spacious) {\n    return (\n      <div className={styles.container}>\n        <VerticalGroup spacing=\"lg\">\n          <FilterInput\n            value={searchQuery}\n            onChange={onFilterChange}\n            placeholder={'Search by name or description'}\n            width={0}\n          />\n          <HorizontalGroup\n            spacing=\"sm\"\n            justify={(showSort && showPanelFilter) || showFolderFilter ? 'space-between' : 'flex-end'}\n          >\n            {showSort && (\n              <SortPicker value={sortDirection} onChange={onSortChange} filter={['alpha-asc', 'alpha-desc']} />\n            )}\n            <HorizontalGroup spacing=\"sm\" justify={showFolderFilter && showPanelFilter ? 'space-between' : 'flex-end'}>\n              {showFolderFilter && <FolderFilter onChange={onFolderFilterChange} />}\n              {showPanelFilter && <PanelTypeFilter onChange={onPanelFilterChange} />}\n            </HorizontalGroup>\n          </HorizontalGroup>\n          <div className={styles.libraryPanelsView}>\n            <LibraryPanelsView\n              onClickCard={onClick}\n              searchString={searchQuery}\n              sortDirection={sortDirection}\n              panelFilter={panelFilter}\n              folderFilter={folderFilter}\n              currentPanelId={currentPanelId}\n              showSecondaryActions={showSecondaryActions}\n              perPage={perPage}\n            />\n          </div>\n        </VerticalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <VerticalGroup spacing=\"xs\">\n        <div className={styles.buttonRow}>\n          <div className={styles.tightFilter}>\n            <FilterInput value={searchQuery} onChange={onFilterChange} placeholder={'Search by name'} width={0} />\n          </div>\n          <div className={styles.tightSortFilter}>\n            {showSort && <SortPicker value={sortDirection} onChange={onSortChange} />}\n            {showFolderFilter && <FolderFilter onChange={onFolderFilterChange} maxMenuHeight={200} />}\n            {showPanelFilter && <PanelTypeFilter onChange={onPanelFilterChange} maxMenuHeight={200} />}\n          </div>\n        </div>\n        <div className={styles.libraryPanelsView}>\n          <LibraryPanelsView\n            onClickCard={onClick}\n            searchString={searchQuery}\n            sortDirection={sortDirection}\n            panelFilter={panelFilter}\n            folderFilter={folderFilter}\n            currentPanelId={currentPanelId}\n            showSecondaryActions={showSecondaryActions}\n            perPage={perPage}\n          />\n        </div>\n      </VerticalGroup>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      width: 100%;\n      overflow-y: auto;\n      padding: ${theme.spacing(1)};\n      min-height: 400px;\n    `,\n    buttonRow: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-top: ${theme.spacing(1.5)}; // Clear types link\n    `,\n    tightFilter: css`\n      flex-grow: 1;\n    `,\n    tightSortFilter: css`\n      flex-grow: 1;\n      padding: ${theme.spacing(0, 0, 0, 0.5)};\n    `,\n    libraryPanelsView: css`\n      width: 100%;\n    `,\n  };\n}\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { getAllPanelPluginMeta } from '../../../features/dashboard/components/VizTypePicker/VizTypePicker';\nimport { Icon, resetSelectStyles, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  onChange: (plugins: PanelPluginMeta[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport const PanelTypeFilter = ({ onChange: propsOnChange, maxMenuHeight }: Props): JSX.Element => {\n  const plugins = useMemo<PanelPluginMeta[]>(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n  const options = useMemo(\n    () =>\n      plugins\n        .map((p) => ({ label: p.name, imgUrl: p.info.logos.small, value: p }))\n        .sort((a, b) => a.label?.localeCompare(b.label)),\n    [plugins]\n  );\n  const [value, setValue] = useState<Array<SelectableValue<PanelPluginMeta>>>([]);\n  const onChange = useCallback(\n    (plugins: Array<SelectableValue<PanelPluginMeta>>) => {\n      const changedPlugins = [];\n      for (const plugin of plugins) {\n        if (plugin.value) {\n          changedPlugins.push(plugin.value);\n        }\n      }\n      propsOnChange(changedPlugins);\n      setValue(plugins);\n    },\n    [propsOnChange]\n  );\n  const styles = useStyles2(getStyles);\n\n  const selectOptions = {\n    defaultOptions: true,\n    getOptionLabel: (i: any) => i.label,\n    getOptionValue: (i: any) => i.value,\n    noOptionsMessage: 'No Panel types found',\n    placeholder: 'Filter by type',\n    styles: resetSelectStyles(),\n    maxMenuHeight,\n    options,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <span className={styles.clear} onClick={() => onChange([])}>\n          Clear types\n        </span>\n      )}\n      <MultiSelect menuShouldPortal {...selectOptions} prefix={<Icon name=\"filter\" />} aria-label=\"Panel Type filter\" />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      text-decoration: underline;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(2.75)};\n      right: 0;\n      cursor: pointer;\n      color: ${theme.colors.text.link};\n\n      &:hover {\n        color: ${theme.colors.text.maxContrast};\n      }\n    `,\n  };\n}\n"],"sourceRoot":""}