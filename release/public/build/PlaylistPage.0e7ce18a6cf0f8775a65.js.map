{"version":3,"file":"PlaylistPage.0e7ce18a6cf0f8775a65.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/playlist/StartModal.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPage.tsx","webpack://grafana/./public/app/features/playlist/api.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\nimport { SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PlaylistDTO } from './types';\nimport { Button, Checkbox, Field, Modal, RadioButtonGroup, VerticalGroup } from '@grafana/ui';\n\nexport interface StartModalProps {\n  playlist: PlaylistDTO;\n  onDismiss: () => void;\n}\n\nexport const StartModal: FC<StartModalProps> = ({ playlist, onDismiss }) => {\n  const [mode, setMode] = useState<any>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<any>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: any = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.id}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <VerticalGroup>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </VerticalGroup>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useAsync } from 'react-use';\nimport { PlaylistDTO } from './types';\nimport { Button, Card, ConfirmModal, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\nimport { deletePlaylist, getAllPlaylist } from './api';\nimport { StartModal } from './StartModal';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\nexport interface PlaylistPageProps extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistPage: FC<PlaylistPageProps> = ({ navModel }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [startPlaylist, setStartPlaylist] = useState<PlaylistDTO | undefined>();\n  const [playlistToDelete, setPlaylistToDelete] = useState<PlaylistDTO | undefined>();\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n\n  const { value: playlists, loading } = useAsync(async () => {\n    return getAllPlaylist(searchQuery) as Promise<PlaylistDTO[]>;\n  }, [forcePlaylistsFetch]);\n  const hasPlaylists = playlists && playlists.length > 0;\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n    deletePlaylist(playlistToDelete.id).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  let content = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  if (hasPlaylists) {\n    content = (\n      <>\n        {playlists!.map((playlist) => (\n          <Card heading={playlist.name} key={playlist.id.toString()}>\n            <Card.Actions>\n              <Button variant=\"secondary\" icon=\"play\" onClick={() => setStartPlaylist(playlist)}>\n                Start playlist\n              </Button>\n              {contextSrv.isEditor && (\n                <>\n                  <LinkButton key=\"edit\" variant=\"secondary\" href={`/playlists/edit/${playlist.id}`} icon=\"cog\">\n                    Edit playlist\n                  </LinkButton>\n                  <Button\n                    disabled={false}\n                    onClick={() => setPlaylistToDelete({ id: playlist.id, name: playlist.name })}\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                  >\n                    Delete playlist\n                  </Button>\n                </>\n              )}\n            </Card.Actions>\n          </Card>\n        ))}\n      </>\n    );\n  }\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        {hasPlaylists && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={{ title: 'New playlist', href: '/playlists/new' }}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n        {content}\n        {playlistToDelete && (\n          <ConfirmModal\n            title={playlistToDelete.name}\n            confirmText=\"Delete\"\n            body={`Are you sure you want to delete '${playlistToDelete.name}' playlist?`}\n            onConfirm={onDeletePlaylist}\n            isOpen={Boolean(playlistToDelete)}\n            onDismiss={onDismissDelete}\n          />\n        )}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist, PlaylistDTO } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function deletePlaylist(id: number) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${id}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","StartModal","playlist","onDismiss","mode","setMode","useState","autoFit","setAutofit","Modal","isOpen","icon","VerticalGroup","Field","label","RadioButtonGroup","options","Checkbox","description","name","e","currentTarget","checked","Button","variant","onClick","params","kiosk","autofitpanels","locationService","urlUtil","id","PlaylistPage","navModel","startPlaylist","setStartPlaylist","playlistToDelete","setPlaylistToDelete","forcePlaylistsFetch","setForcePlaylistsFetch","playlists","loading","useAsync","async","getAllPlaylist","hasPlaylists","length","content","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","map","Card","heading","contextSrv","toString","Page","isLoading","ConfirmModal","confirmText","body","onConfirm","deletePlaylist","finally","undefined","Boolean","connect","state","getNavModel","navIndex","createPlaylist","withErrorHandling","getBackendSrv","post","updatePlaylist","put","delete","getPlaylist","get","query","apiCall","message","dispatch","notifyApp","createSuccessNotification","createErrorNotification"],"sourceRoot":""}