{"version":3,"file":"9122.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PanelTypeFilter/PanelTypeFilter.tsx","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/reducer.ts","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/DeleteLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/actions.ts","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelCard/LibraryPanelCard.tsx","webpack://grafana/./public/app/core/components/FolderFilter/FolderFilter.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsSearch/reducer.ts","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/LibraryPanelsView.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/actions.ts","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/reducer.ts","webpack://grafana/./public/app/features/library-panels/styles.ts","webpack://grafana/./public/app/features/panel/components/VizTypePicker/PanelTypeCard.tsx","webpack://grafana/./public/app/features/panel/state/util.ts","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { getAllPanelPluginMeta } from 'app/features/panel/state/util';\nimport { Icon, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  onChange: (plugins: PanelPluginMeta[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport const PanelTypeFilter = ({ onChange: propsOnChange, maxMenuHeight }: Props): JSX.Element => {\n  const plugins = useMemo<PanelPluginMeta[]>(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n  const options = useMemo(\n    () =>\n      plugins\n        .map((p) => ({ label: p.name, imgUrl: p.info.logos.small, value: p }))\n        .sort((a, b) => a.label?.localeCompare(b.label)),\n    [plugins]\n  );\n  const [value, setValue] = useState<Array<SelectableValue<PanelPluginMeta>>>([]);\n  const onChange = useCallback(\n    (plugins: Array<SelectableValue<PanelPluginMeta>>) => {\n      const changedPlugins = [];\n      for (const plugin of plugins) {\n        if (plugin.value) {\n          changedPlugins.push(plugin.value);\n        }\n      }\n      propsOnChange(changedPlugins);\n      setValue(plugins);\n    },\n    [propsOnChange]\n  );\n  const styles = useStyles2(getStyles);\n\n  const selectOptions = {\n    defaultOptions: true,\n    getOptionLabel: (i: any) => i.label,\n    getOptionValue: (i: any) => i.value,\n    noOptionsMessage: 'No Panel types found',\n    placeholder: 'Filter by type',\n    maxMenuHeight,\n    options,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <span className={styles.clear} onClick={() => onChange([])}>\n          Clear types\n        </span>\n      )}\n      <MultiSelect menuShouldPortal {...selectOptions} prefix={<Icon name=\"filter\" />} aria-label=\"Panel Type filter\" />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      text-decoration: underline;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(2.75)};\n      right: 0;\n      cursor: pointer;\n      color: ${theme.colors.text.link};\n\n      &:hover {\n        color: ${theme.colors.text.maxContrast};\n      }\n    `,\n  };\n}\n","import { DashboardSearchHit } from 'app/features/search/types';\nimport { LoadingState } from '@grafana/data';\nimport { AnyAction } from 'redux';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport interface DeleteLibraryPanelModalState {\n  loadingState: LoadingState;\n  dashboardTitles: string[];\n}\n\nexport const initialDeleteLibraryPanelModalState: DeleteLibraryPanelModalState = {\n  loadingState: LoadingState.Loading,\n  dashboardTitles: [],\n};\n\nexport const searchCompleted = createAction<{ dashboards: DashboardSearchHit[] }>(\n  'libraryPanels/delete/searchCompleted'\n);\n\nexport const deleteLibraryPanelModalReducer = (\n  state: DeleteLibraryPanelModalState = initialDeleteLibraryPanelModalState,\n  action: AnyAction\n): DeleteLibraryPanelModalState => {\n  if (searchCompleted.match(action)) {\n    return {\n      ...state,\n      dashboardTitles: action.payload.dashboards.map((d) => d.title),\n      loadingState: LoadingState.Done,\n    };\n  }\n\n  return state;\n};\n","import React, { FC, useEffect, useMemo, useReducer } from 'react';\nimport { Button, Modal, useStyles } from '@grafana/ui';\nimport { LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../types';\nimport { asyncDispatcher } from '../LibraryPanelsView/actions';\nimport { deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState } from './reducer';\nimport { getConnectedDashboards } from './actions';\nimport { getModalStyles } from '../../styles';\n\ninterface Props {\n  libraryPanel: LibraryElementDTO;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const DeleteLibraryPanelModal: FC<Props> = ({ libraryPanel, onDismiss, onConfirm }) => {\n  const styles = useStyles(getModalStyles);\n  const [{ dashboardTitles, loadingState }, dispatch] = useReducer(\n    deleteLibraryPanelModalReducer,\n    initialDeleteLibraryPanelModalState\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useEffect(() => {\n    asyncDispatch(getConnectedDashboards(libraryPanel));\n  }, [asyncDispatch, libraryPanel]);\n  const connected = Boolean(dashboardTitles.length);\n  const done = loadingState === LoadingState.Done;\n\n  return (\n    <Modal className={styles.modal} title=\"Delete library panel\" icon=\"trash-alt\" onDismiss={onDismiss} isOpen={true}>\n      {!done ? <LoadingIndicator /> : null}\n      {done ? (\n        <div>\n          {connected ? <HasConnectedDashboards dashboardTitles={dashboardTitles} /> : null}\n          {!connected ? <Confirm /> : null}\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={onConfirm} disabled={connected}>\n              Delete\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : null}\n    </Modal>\n  );\n};\n\nconst LoadingIndicator: FC = () => <span>Loading library panel...</span>;\n\nconst Confirm: FC = () => {\n  const styles = useStyles(getModalStyles);\n\n  return <div className={styles.modalText}>Do you want to delete this panel?</div>;\n};\n\nconst HasConnectedDashboards: FC<{ dashboardTitles: string[] }> = ({ dashboardTitles }) => {\n  const styles = useStyles(getModalStyles);\n  const suffix = dashboardTitles.length === 1 ? 'dashboard.' : 'dashboards.';\n  const message = `${dashboardTitles.length} ${suffix}`;\n  if (dashboardTitles.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <p className={styles.textInfo}>\n        {'This library panel can not be deleted because it is connected to '}\n        <strong>{message}</strong>\n        {' Remove the library panel from the dashboards listed below and retry.'}\n      </p>\n      <table className={styles.myTable}>\n        <thead>\n          <tr>\n            <th>Dashboard name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {dashboardTitles.map((title, i) => (\n            <tr key={`dash-title-${i}`}>\n              <td>{title}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { DispatchResult, LibraryElementDTO } from '../../types';\nimport { getConnectedDashboards as apiGetConnectedDashboards } from '../../state/api';\nimport { searchCompleted } from './reducer';\n\nexport function getConnectedDashboards(libraryPanel: LibraryElementDTO): DispatchResult {\n  return async function (dispatch) {\n    const dashboards = await apiGetConnectedDashboards(libraryPanel.uid);\n    dispatch(searchCompleted({ dashboards }));\n  };\n}\n","import React, { ReactElement, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Link, useStyles2 } from '@grafana/ui';\nimport { LibraryElementDTO } from '../../types';\nimport { PanelTypeCard } from 'app/features/panel/components/VizTypePicker/PanelTypeCard';\nimport { DeleteLibraryPanelModal } from '../DeleteLibraryPanelModal/DeleteLibraryPanelModal';\nimport { config } from '@grafana/runtime';\nimport { getPanelPluginNotFound } from 'app/features/panel/components/PanelPluginError';\n\nexport interface LibraryPanelCardProps {\n  libraryPanel: LibraryElementDTO;\n  onClick: (panel: LibraryElementDTO) => void;\n  onDelete?: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n}\n\nexport const LibraryPanelCard: React.FC<LibraryPanelCardProps & { children?: JSX.Element | JSX.Element[] }> = ({\n  libraryPanel,\n  onClick,\n  onDelete,\n  showSecondaryActions,\n}) => {\n  const [showDeletionModal, setShowDeletionModal] = useState(false);\n\n  const onDeletePanel = () => {\n    onDelete?.(libraryPanel);\n    setShowDeletionModal(false);\n  };\n\n  const panelPlugin = config.panels[libraryPanel.model.type] ?? getPanelPluginNotFound(libraryPanel.model.type).meta;\n\n  return (\n    <>\n      <PanelTypeCard\n        isCurrent={false}\n        title={libraryPanel.name}\n        description={libraryPanel.description}\n        plugin={panelPlugin}\n        onClick={() => onClick?.(libraryPanel)}\n        onDelete={showSecondaryActions ? () => setShowDeletionModal(true) : undefined}\n      >\n        <FolderLink libraryPanel={libraryPanel} />\n      </PanelTypeCard>\n      {showDeletionModal && (\n        <DeleteLibraryPanelModal\n          libraryPanel={libraryPanel}\n          onConfirm={onDeletePanel}\n          onDismiss={() => setShowDeletionModal(false)}\n        />\n      )}\n    </>\n  );\n};\n\ninterface FolderLinkProps {\n  libraryPanel: LibraryElementDTO;\n}\n\nfunction FolderLink({ libraryPanel }: FolderLinkProps): ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (!libraryPanel.meta.folderUid && !libraryPanel.meta.folderName) {\n    return null;\n  }\n\n  if (!libraryPanel.meta.folderUid) {\n    return (\n      <span className={styles.metaContainer}>\n        <Icon name={'folder'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={styles.metaContainer}>\n      <Link href={`/dashboards/f/${libraryPanel.meta.folderUid}`}>\n        <Icon name={'folder-upload'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </Link>\n    </span>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    metaContainer: css`\n      display: flex;\n      align-items: center;\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      padding-top: ${theme.spacing(0.5)};\n\n      svg {\n        margin-right: ${theme.spacing(0.5)};\n        margin-bottom: 3px;\n      }\n    `,\n  };\n}\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { AsyncMultiSelect, Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\n\nimport { FolderInfo, PermissionLevelString } from 'app/types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\n\nexport interface FolderFilterProps {\n  onChange: (folder: FolderInfo[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport function FolderFilter({ onChange: propsOnChange, maxMenuHeight }: FolderFilterProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const getOptions = useCallback((searchString: string) => getFoldersAsOptions(searchString, setLoading), []);\n  const debouncedLoadOptions = useMemo(() => debounce(getOptions, 300), [getOptions]);\n  const [value, setValue] = useState<Array<SelectableValue<FolderInfo>>>([]);\n  const onChange = useCallback(\n    (folders: Array<SelectableValue<FolderInfo>>) => {\n      const changedFolders = [];\n      for (const folder of folders) {\n        if (folder.value) {\n          changedFolders.push(folder.value);\n        }\n      }\n      propsOnChange(changedFolders);\n      setValue(folders);\n    },\n    [propsOnChange]\n  );\n  const selectOptions = {\n    defaultOptions: true,\n    isMulti: true,\n    noOptionsMessage: 'No folders found',\n    placeholder: 'Filter by folder',\n    maxMenuHeight,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <span className={styles.clear} onClick={() => onChange([])}>\n          Clear folders\n        </span>\n      )}\n      <AsyncMultiSelect\n        menuShouldPortal\n        {...selectOptions}\n        isLoading={loading}\n        loadOptions={debouncedLoadOptions}\n        prefix={<Icon name=\"filter\" />}\n        aria-label=\"Folder filter\"\n      />\n    </div>\n  );\n}\n\nasync function getFoldersAsOptions(searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n\n  const params = {\n    query: searchString,\n    type: 'dash-folder',\n    permission: PermissionLevelString.View,\n  };\n\n  const searchHits = await getBackendSrv().search(params);\n  const options = searchHits.map((d) => ({ label: d.title, value: { id: d.id, title: d.title } }));\n  if (!searchString || 'general'.includes(searchString.toLowerCase())) {\n    options.unshift({ label: 'General', value: { id: 0, title: 'General' } });\n  }\n\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      text-decoration: underline;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(2.75)};\n      right: 0;\n      cursor: pointer;\n      color: ${theme.colors.text.link};\n\n      &:hover {\n        color: ${theme.colors.text.maxContrast};\n      }\n    `,\n  };\n}\n","import { AnyAction } from 'redux';\nimport { createAction } from '@reduxjs/toolkit';\nimport { PanelPluginMeta, SelectableValue } from '@grafana/data';\n\nimport { FolderInfo } from '../../../../types';\n\nexport interface LibraryPanelsSearchState {\n  searchQuery: string;\n  sortDirection?: string;\n  panelFilter: string[];\n  folderFilter: string[];\n}\n\nexport const initialLibraryPanelsSearchState: LibraryPanelsSearchState = {\n  searchQuery: '',\n  panelFilter: [],\n  folderFilter: [],\n  sortDirection: undefined,\n};\n\nexport const searchChanged = createAction<string>('libraryPanels/search/searchChanged');\nexport const sortChanged = createAction<SelectableValue<string>>('libraryPanels/search/sortChanged');\nexport const panelFilterChanged = createAction<PanelPluginMeta[]>('libraryPanels/search/panelFilterChanged');\nexport const folderFilterChanged = createAction<FolderInfo[]>('libraryPanels/search/folderFilterChanged');\n\nexport const libraryPanelsSearchReducer = (state: LibraryPanelsSearchState, action: AnyAction) => {\n  if (searchChanged.match(action)) {\n    return { ...state, searchQuery: action.payload };\n  }\n\n  if (sortChanged.match(action)) {\n    return { ...state, sortDirection: action.payload.value };\n  }\n\n  if (panelFilterChanged.match(action)) {\n    return { ...state, panelFilter: action.payload.map((p) => p.id) };\n  }\n\n  if (folderFilterChanged.match(action)) {\n    return { ...state, folderFilter: action.payload.map((f) => String(f.id!)) };\n  }\n\n  return state;\n};\n","import React, { useReducer } from 'react';\nimport { HorizontalGroup, useStyles2, VerticalGroup, FilterInput } from '@grafana/ui';\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { SortPicker } from '../../../../core/components/Select/SortPicker';\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../core/constants';\nimport { LibraryElementDTO } from '../../types';\nimport { FolderFilter } from '../../../../core/components/FolderFilter/FolderFilter';\nimport { FolderInfo } from '../../../../types';\nimport {\n  folderFilterChanged,\n  initialLibraryPanelsSearchState,\n  libraryPanelsSearchReducer,\n  panelFilterChanged,\n  searchChanged,\n  sortChanged,\n} from './reducer';\n\nexport enum LibraryPanelsSearchVariant {\n  Tight = 'tight',\n  Spacious = 'spacious',\n}\n\nexport interface LibraryPanelsSearchProps {\n  onClick: (panel: LibraryElementDTO) => void;\n  variant?: LibraryPanelsSearchVariant;\n  showSort?: boolean;\n  showPanelFilter?: boolean;\n  showFolderFilter?: boolean;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  currentFolderId?: number;\n  perPage?: number;\n}\n\nexport const LibraryPanelsSearch = ({\n  onClick,\n  variant = LibraryPanelsSearchVariant.Spacious,\n  currentPanelId,\n  currentFolderId,\n  perPage = DEFAULT_PER_PAGE_PAGINATION,\n  showPanelFilter = false,\n  showFolderFilter = false,\n  showSort = false,\n  showSecondaryActions = false,\n}: LibraryPanelsSearchProps): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [{ sortDirection, panelFilter, folderFilter, searchQuery }, dispatch] = useReducer(libraryPanelsSearchReducer, {\n    ...initialLibraryPanelsSearchState,\n    folderFilter: currentFolderId ? [currentFolderId.toString(10)] : [],\n  });\n  const onFilterChange = (searchString: string) => dispatch(searchChanged(searchString));\n  const onSortChange = (sorting: SelectableValue<string>) => dispatch(sortChanged(sorting));\n  const onFolderFilterChange = (folders: FolderInfo[]) => dispatch(folderFilterChanged(folders));\n  const onPanelFilterChange = (plugins: PanelPluginMeta[]) => dispatch(panelFilterChanged(plugins));\n\n  if (variant === LibraryPanelsSearchVariant.Spacious) {\n    return (\n      <div className={styles.container}>\n        <VerticalGroup spacing=\"lg\">\n          <FilterInput\n            value={searchQuery}\n            onChange={onFilterChange}\n            placeholder={'Search by name or description'}\n            width={0}\n          />\n          <HorizontalGroup\n            spacing=\"sm\"\n            justify={(showSort && showPanelFilter) || showFolderFilter ? 'space-between' : 'flex-end'}\n          >\n            {showSort && (\n              <SortPicker value={sortDirection} onChange={onSortChange} filter={['alpha-asc', 'alpha-desc']} />\n            )}\n            <HorizontalGroup spacing=\"sm\" justify={showFolderFilter && showPanelFilter ? 'space-between' : 'flex-end'}>\n              {showFolderFilter && <FolderFilter onChange={onFolderFilterChange} />}\n              {showPanelFilter && <PanelTypeFilter onChange={onPanelFilterChange} />}\n            </HorizontalGroup>\n          </HorizontalGroup>\n          <div className={styles.libraryPanelsView}>\n            <LibraryPanelsView\n              onClickCard={onClick}\n              searchString={searchQuery}\n              sortDirection={sortDirection}\n              panelFilter={panelFilter}\n              folderFilter={folderFilter}\n              currentPanelId={currentPanelId}\n              showSecondaryActions={showSecondaryActions}\n              perPage={perPage}\n            />\n          </div>\n        </VerticalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <VerticalGroup spacing=\"xs\">\n        <div className={styles.buttonRow}>\n          <div className={styles.tightFilter}>\n            <FilterInput value={searchQuery} onChange={onFilterChange} placeholder={'Search by name'} width={0} />\n          </div>\n          <div className={styles.tightSortFilter}>\n            {showSort && <SortPicker value={sortDirection} onChange={onSortChange} />}\n            {showFolderFilter && <FolderFilter onChange={onFolderFilterChange} maxMenuHeight={200} />}\n            {showPanelFilter && <PanelTypeFilter onChange={onPanelFilterChange} maxMenuHeight={200} />}\n          </div>\n        </div>\n        <div className={styles.libraryPanelsView}>\n          <LibraryPanelsView\n            onClickCard={onClick}\n            searchString={searchQuery}\n            sortDirection={sortDirection}\n            panelFilter={panelFilter}\n            folderFilter={folderFilter}\n            currentPanelId={currentPanelId}\n            showSecondaryActions={showSecondaryActions}\n            perPage={perPage}\n          />\n        </div>\n      </VerticalGroup>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      width: 100%;\n      overflow-y: auto;\n      padding: ${theme.spacing(1)};\n    `,\n    buttonRow: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-top: ${theme.spacing(1.5)}; // Clear types link\n    `,\n    tightFilter: css`\n      flex-grow: 1;\n    `,\n    tightSortFilter: css`\n      flex-grow: 1;\n      padding: ${theme.spacing(0, 0, 0, 0.5)};\n    `,\n    libraryPanelsView: css`\n      width: 100%;\n    `,\n  };\n}\n","import React, { useMemo, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\nimport { css, cx } from '@emotion/css';\nimport { Pagination, useStyles } from '@grafana/ui';\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\n\nimport { LibraryPanelCard } from '../LibraryPanelCard/LibraryPanelCard';\nimport { LibraryElementDTO } from '../../types';\nimport { changePage, initialLibraryPanelsViewState, libraryPanelsViewReducer } from './reducer';\nimport { asyncDispatcher, deleteLibraryPanel, searchForLibraryPanels } from './actions';\n\ninterface LibraryPanelViewProps {\n  className?: string;\n  onClickCard: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  perPage?: number;\n}\n\nexport const LibraryPanelsView: React.FC<LibraryPanelViewProps> = ({\n  className,\n  onClickCard,\n  searchString,\n  sortDirection,\n  panelFilter,\n  folderFilter,\n  showSecondaryActions,\n  currentPanelId: currentPanel,\n  perPage: propsPerPage = 40,\n}) => {\n  const styles = useStyles(getPanelViewStyles);\n  const [{ libraryPanels, page, perPage, numberOfPages, loadingState, currentPanelId }, dispatch] = useReducer(\n    libraryPanelsViewReducer,\n    {\n      ...initialLibraryPanelsViewState,\n      currentPanelId: currentPanel,\n      perPage: propsPerPage,\n    }\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useDebounce(\n    () =>\n      asyncDispatch(\n        searchForLibraryPanels({\n          searchString,\n          sortDirection,\n          panelFilter,\n          folderFilter,\n          page,\n          perPage,\n          currentPanelId,\n        })\n      ),\n    300,\n    [searchString, sortDirection, panelFilter, folderFilter, page, asyncDispatch]\n  );\n  const onDelete = ({ uid }: LibraryElementDTO) =>\n    asyncDispatch(deleteLibraryPanel(uid, { searchString, page, perPage }));\n  const onPageChange = (page: number) => asyncDispatch(changePage({ page }));\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <div className={styles.libraryPanelList}>\n        {loadingState === LoadingState.Loading ? (\n          <p>Loading library panels...</p>\n        ) : libraryPanels.length < 1 ? (\n          <p className={styles.noPanelsFound}>No library panels found.</p>\n        ) : (\n          libraryPanels?.map((item, i) => (\n            <LibraryPanelCard\n              key={`library-panel=${i}`}\n              libraryPanel={item}\n              onDelete={onDelete}\n              onClick={onClickCard}\n              showSecondaryActions={showSecondaryActions}\n            />\n          ))\n        )}\n      </div>\n      {libraryPanels.length ? (\n        <div className={styles.pagination}>\n          <Pagination\n            currentPage={page}\n            numberOfPages={numberOfPages}\n            onNavigate={onPageChange}\n            hideWhenSinglePage={true}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst getPanelViewStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n    `,\n    libraryPanelList: css`\n      max-width: 100%;\n      display: grid;\n      grid-gap: ${theme.spacing.sm};\n    `,\n    searchHeader: css`\n      display: flex;\n    `,\n    newPanelButton: css`\n      margin-top: 10px;\n      align-self: flex-start;\n    `,\n    pagination: css`\n      align-self: center;\n      margin-top: ${theme.spacing.sm};\n    `,\n    noPanelsFound: css`\n      label: noPanelsFound;\n      min-height: 200px;\n    `,\n  };\n};\n","import { Dispatch } from 'react';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { from, merge, of, Subscription, timer } from 'rxjs';\nimport { catchError, finalize, mapTo, mergeMap, share, takeUntil } from 'rxjs/operators';\n\nimport { deleteLibraryPanel as apiDeleteLibraryPanel, getLibraryPanels } from '../../state/api';\nimport { initialLibraryPanelsViewState, initSearch, searchCompleted } from './reducer';\n\ntype DispatchResult = (dispatch: Dispatch<AnyAction>) => void;\ninterface SearchArgs {\n  perPage: number;\n  page: number;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  currentPanelId?: string;\n}\n\nexport function searchForLibraryPanels(args: SearchArgs): DispatchResult {\n  return function (dispatch) {\n    const subscription = new Subscription();\n    const dataObservable = from(\n      getLibraryPanels({\n        searchString: args.searchString,\n        perPage: args.perPage,\n        page: args.page,\n        excludeUid: args.currentPanelId,\n        sortDirection: args.sortDirection,\n        typeFilter: args.panelFilter,\n        folderFilter: args.folderFilter,\n      })\n    ).pipe(\n      mergeMap(({ perPage, elements: libraryPanels, page, totalCount }) =>\n        of(searchCompleted({ libraryPanels, page, perPage, totalCount }))\n      ),\n      catchError((err) => {\n        console.error(err);\n        return of(searchCompleted({ ...initialLibraryPanelsViewState, page: args.page, perPage: args.perPage }));\n      }),\n      finalize(() => subscription.unsubscribe()), // make sure we unsubscribe\n      share()\n    );\n\n    subscription.add(\n      // If 50ms without a response dispatch a loading state\n      // mapTo will translate the timer event into a loading state\n      // takeUntil will cancel the timer emit when first response is received on the dataObservable\n      merge(timer(50).pipe(mapTo(initSearch()), takeUntil(dataObservable)), dataObservable).subscribe(dispatch)\n    );\n  };\n}\n\nexport function deleteLibraryPanel(uid: string, args: SearchArgs): DispatchResult {\n  return async function (dispatch) {\n    try {\n      await apiDeleteLibraryPanel(uid);\n      searchForLibraryPanels(args)(dispatch);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}\n\nexport function asyncDispatcher(dispatch: Dispatch<AnyAction>) {\n  return function (action: any) {\n    if (action instanceof Function) {\n      return action(dispatch);\n    }\n    return dispatch(action);\n  };\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../types';\nimport { AnyAction } from 'redux';\n\nexport interface LibraryPanelsViewState {\n  loadingState: LoadingState;\n  libraryPanels: LibraryElementDTO[];\n  totalCount: number;\n  perPage: number;\n  page: number;\n  numberOfPages: number;\n  currentPanelId?: string;\n}\n\nexport const initialLibraryPanelsViewState: LibraryPanelsViewState = {\n  loadingState: LoadingState.Loading,\n  libraryPanels: [],\n  totalCount: 0,\n  perPage: 40,\n  page: 1,\n  numberOfPages: 0,\n  currentPanelId: undefined,\n};\n\nexport const initSearch = createAction('libraryPanels/view/initSearch');\nexport const searchCompleted = createAction<\n  Omit<LibraryPanelsViewState, 'currentPanelId' | 'searchString' | 'loadingState' | 'numberOfPages'>\n>('libraryPanels/view/searchCompleted');\n\nexport const changePage = createAction<Pick<LibraryPanelsViewState, 'page'>>('libraryPanels/view/changePage');\n\nexport const libraryPanelsViewReducer = (state: LibraryPanelsViewState, action: AnyAction) => {\n  if (initSearch.match(action)) {\n    return { ...state, loadingState: LoadingState.Loading };\n  }\n\n  if (searchCompleted.match(action)) {\n    const { libraryPanels, page, perPage, totalCount } = action.payload;\n    const numberOfPages = Math.ceil(totalCount / perPage);\n    return {\n      ...state,\n      libraryPanels,\n      perPage,\n      totalCount,\n      loadingState: LoadingState.Done,\n      numberOfPages,\n      page: page > numberOfPages ? page - 1 : page,\n    };\n  }\n\n  if (changePage.match(action)) {\n    return { ...state, page: action.payload.page };\n  }\n\n  return state;\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\n\nexport function getModalStyles(theme: GrafanaTheme) {\n  return {\n    myTable: css`\n      max-height: 204px;\n      overflow-y: auto;\n      margin-top: 11px;\n      margin-bottom: 28px;\n      border-radius: ${theme.border.radius.sm};\n      border: 1px solid ${theme.colors.bg3};\n      background: ${theme.colors.bg1};\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.md};\n      width: 100%;\n\n      thead {\n        color: #538ade;\n        font-size: ${theme.typography.size.sm};\n      }\n\n      th,\n      td {\n        padding: 6px 13px;\n        height: ${theme.spacing.xl};\n      }\n\n      tbody > tr:nth-child(odd) {\n        background: ${theme.colors.bg2};\n      }\n    `,\n    noteTextbox: css`\n      margin-bottom: ${theme.spacing.xl};\n    `,\n    textInfo: css`\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.sm};\n    `,\n    dashboardSearch: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    modal: css`\n      width: 500px;\n    `,\n    modalText: css`\n      font-size: ${theme.typography.heading.h4};\n      color: ${theme.colors.link};\n      margin-bottom: calc(${theme.spacing.d} * 2);\n      padding-top: ${theme.spacing.d};\n    `,\n  };\n}\n","import React, { MouseEventHandler } from 'react';\nimport { GrafanaTheme2, isUnsignedPluginSignature, PanelPluginMeta, PluginState } from '@grafana/data';\nimport { IconButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  title: string;\n  onClick: MouseEventHandler<HTMLDivElement>;\n  onDelete?: () => void;\n  disabled?: boolean;\n  showBadge?: boolean;\n  description?: string;\n}\n\nexport const PanelTypeCard: React.FC<Props> = ({\n  isCurrent,\n  title,\n  plugin,\n  onClick,\n  onDelete,\n  disabled,\n  showBadge,\n  description,\n  children,\n}) => {\n  const styles = useStyles2(getStyles);\n  const cssClass = cx({\n    [styles.item]: true,\n    [styles.disabled]: disabled || plugin.state === PluginState.deprecated,\n    [styles.current]: isCurrent,\n  });\n\n  return (\n    <div\n      className={cssClass}\n      aria-label={selectors.components.PluginVisualization.item(plugin.name)}\n      onClick={disabled ? undefined : onClick}\n      title={isCurrent ? 'Click again to close this section' : plugin.name}\n    >\n      <img className={styles.img} src={plugin.info.logos.small} alt=\"\" />\n\n      <div className={styles.itemContent}>\n        <div className={styles.name}>{title}</div>\n        {description ? <span className={styles.description}>{description}</span> : null}\n        {children}\n      </div>\n      {showBadge && (\n        <div className={cx(styles.badge, disabled && styles.disabled)}>\n          <PanelPluginBadge plugin={plugin} />\n        </div>\n      )}\n      {onDelete && (\n        <IconButton\n          name=\"trash-alt\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onDelete();\n          }}\n          aria-label=\"Delete button on panel type card\"\n        />\n      )}\n    </div>\n  );\n};\n\nPanelTypeCard.displayName = 'PanelTypeCard';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    item: css`\n      position: relative;\n      display: flex;\n      flex-shrink: 0;\n      cursor: pointer;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      box-shadow: ${theme.shadows.z1};\n      border: 1px solid ${theme.colors.background.secondary};\n      align-items: center;\n      padding: 8px;\n      width: 100%;\n      position: relative;\n      overflow: hidden;\n      transition: ${theme.transitions.create(['background'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    itemContent: css`\n      position: relative;\n      width: 100%;\n      padding: ${theme.spacing(0, 1)};\n    `,\n    current: css`\n      label: currentVisualizationItem;\n      border: 1px solid ${theme.colors.primary.border};\n      background: ${theme.colors.action.selected};\n    `,\n    disabled: css`\n      opacity: 0.2;\n      filter: grayscale(1);\n      cursor: default;\n      pointer-events: none;\n    `,\n    name: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      font-size: ${theme.typography.size.sm};\n      font-weight: ${theme.typography.fontWeightMedium};\n      width: 100%;\n    `,\n    description: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.fontWeightLight};\n      width: 100%;\n    `,\n    img: css`\n      max-height: 38px;\n      width: 38px;\n      display: flex;\n      align-items: center;\n    `,\n    badge: css`\n      background: ${theme.colors.background.primary};\n    `,\n  };\n};\n\ninterface PanelPluginBadgeProps {\n  plugin: PanelPluginMeta;\n}\n\nconst PanelPluginBadge: React.FC<PanelPluginBadgeProps> = ({ plugin }) => {\n  if (isUnsignedPluginSignature(plugin.signature)) {\n    return <PluginSignatureBadge status={plugin.signature} />;\n  }\n\n  return <PluginStateInfo state={plugin.state} />;\n};\n\nPanelPluginBadge.displayName = 'PanelPluginBadge';\n","import { PanelPluginMeta, PluginState, unEscapeStringFromRegex } from '@grafana/data';\nimport { config } from 'app/core/config';\n\nexport function getAllPanelPluginMeta(): PanelPluginMeta[] {\n  const allPanels = config.panels;\n\n  return Object.keys(allPanels)\n    .filter((key) => allPanels[key]['hideFromList'] === false)\n    .map((key) => allPanels[key])\n    .sort((a: PanelPluginMeta, b: PanelPluginMeta) => a.sort - b.sort);\n}\n\nexport function filterPluginList(\n  pluginsList: PanelPluginMeta[],\n  searchQuery: string, // Note: this will be an escaped regex string as it comes from `FilterInput`\n  current: PanelPluginMeta\n): PanelPluginMeta[] {\n  if (!searchQuery.length) {\n    return pluginsList.filter((p) => {\n      if (p.state === PluginState.deprecated) {\n        return current.id === p.id;\n      }\n      return true;\n    });\n  }\n\n  const query = unEscapeStringFromRegex(searchQuery).toLowerCase();\n  const first: PanelPluginMeta[] = [];\n  const match: PanelPluginMeta[] = [];\n  const isGraphQuery = 'graph'.startsWith(query);\n\n  for (const item of pluginsList) {\n    if (item.state === PluginState.deprecated && current.id !== item.id) {\n      continue;\n    }\n\n    const name = item.name.toLowerCase();\n    const idx = name.indexOf(query);\n\n    if (idx === 0) {\n      first.push(item);\n    } else if (idx > 0) {\n      match.push(item);\n    } else if (isGraphQuery && item.id === 'timeseries') {\n      first.push(item);\n    }\n  }\n\n  return first.concat(match);\n}\n","import React, { FC } from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["PanelTypeFilter","onChange","propsOnChange","maxMenuHeight","plugins","useMemo","getAllPanelPluginMeta","options","map","p","label","name","imgUrl","info","logos","small","value","sort","a","b","localeCompare","setValue","useState","useCallback","changedPlugins","plugin","push","styles","useStyles2","getStyles","selectOptions","defaultOptions","getOptionLabel","i","getOptionValue","noOptionsMessage","placeholder","className","container","length","clear","onClick","MultiSelect","menuShouldPortal","prefix","Icon","theme","css","spacing","colors","text","link","maxContrast","initialDeleteLibraryPanelModalState","loadingState","LoadingState","dashboardTitles","searchCompleted","createAction","deleteLibraryPanelModalReducer","state","action","match","payload","dashboards","d","title","DeleteLibraryPanelModal","libraryPanel","onDismiss","onConfirm","useStyles","getModalStyles","dispatch","useReducer","asyncDispatch","asyncDispatcher","useEffect","async","apiGetConnectedDashboards","uid","getConnectedDashboards","connected","Boolean","done","Modal","modal","icon","isOpen","LoadingIndicator","HasConnectedDashboards","Confirm","Button","variant","fill","disabled","modalText","suffix","message","textInfo","myTable","LibraryPanelCard","onDelete","showSecondaryActions","showDeletionModal","setShowDeletionModal","panelPlugin","config","model","type","getPanelPluginNotFound","meta","PanelTypeCard","isCurrent","description","undefined","FolderLink","folderUid","folderName","metaContainer","Link","href","size","secondary","typography","bodySmall","fontSize","FolderFilter","loading","setLoading","getOptions","searchString","params","query","permission","PermissionLevelString","getBackendSrv","search","id","includes","toLowerCase","unshift","getFoldersAsOptions","debouncedLoadOptions","debounce","folders","changedFolders","folder","isMulti","AsyncMultiSelect","isLoading","loadOptions","initialLibraryPanelsSearchState","searchQuery","panelFilter","folderFilter","sortDirection","searchChanged","sortChanged","panelFilterChanged","folderFilterChanged","libraryPanelsSearchReducer","f","String","LibraryPanelsSearchVariant","LibraryPanelsSearch","Spacious","currentPanelId","currentFolderId","perPage","DEFAULT_PER_PAGE_PAGINATION","showPanelFilter","showFolderFilter","showSort","toString","onFilterChange","onSortChange","sorting","onFolderFilterChange","onPanelFilterChange","VerticalGroup","FilterInput","width","HorizontalGroup","justify","SortPicker","filter","libraryPanelsView","LibraryPanelsView","onClickCard","buttonRow","tightFilter","tightSortFilter","currentPanel","propsPerPage","getPanelViewStyles","libraryPanels","page","numberOfPages","libraryPanelsViewReducer","initialLibraryPanelsViewState","useDebounce","searchForLibraryPanels","deleteLibraryPanel","cx","libraryPanelList","noPanelsFound","item","pagination","Pagination","currentPage","onNavigate","changePage","hideWhenSinglePage","sm","searchHeader","newPanelButton","args","subscription","Subscription","dataObservable","from","getLibraryPanels","excludeUid","typeFilter","pipe","mergeMap","elements","totalCount","of","catchError","err","console","error","finalize","unsubscribe","share","add","merge","timer","mapTo","initSearch","takeUntil","subscribe","apiDeleteLibraryPanel","e","Function","Math","ceil","border","radius","bg3","bg1","textSemiWeak","md","xl","bg2","noteTextbox","dashboardSearch","heading","h4","showBadge","children","cssClass","PluginState","current","selectors","img","src","alt","itemContent","badge","PanelPluginBadge","IconButton","stopPropagation","displayName","background","shape","borderRadius","shadows","z1","transitions","create","duration","short","emphasize","primary","selected","fontWeightMedium","fontWeightLight","isUnsignedPluginSignature","signature","PluginSignatureBadge","status","allPanels","Object","keys","key","filterPluginList","pluginsList","unEscapeStringFromRegex","first","isGraphQuery","startsWith","idx","indexOf","concat","PluginStateInfo","props","display","color","tooltip","getFeatureStateInfo","Badge"],"sourceRoot":""}