{"version":3,"file":"PlaylistPage.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/playlist/StartModal.tsx","webpack://grafana/./public/app/features/playlist/ShareModal.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPageList.tsx","webpack://grafana/./public/app/features/playlist/EmptyQueryListBanner.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPage.tsx","webpack://grafana/./public/app/features/playlist/api.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\nimport { SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PlaylistDTO, PlaylistMode } from './types';\nimport { Button, Checkbox, Field, FieldSet, Modal, RadioButtonGroup } from '@grafana/ui';\n\nexport interface StartModalProps {\n  playlist: PlaylistDTO;\n  onDismiss: () => void;\n}\n\nexport const StartModal: FC<StartModalProps> = ({ playlist, onDismiss }) => {\n  const [mode, setMode] = useState<PlaylistMode>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<PlaylistMode>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: any = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.id}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <FieldSet>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </FieldSet>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\nimport { AppEvents, SelectableValue, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { Checkbox, ClipboardButton, Field, FieldSet, Icon, Input, Modal, RadioButtonGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { buildBaseUrl } from '../dashboard/components/ShareModal/utils';\nimport { PlaylistMode } from './types';\n\ninterface ShareModalProps {\n  playlistId: number;\n  onDismiss: () => void;\n}\n\nexport const ShareModal = ({ playlistId, onDismiss }: ShareModalProps) => {\n  const [mode, setMode] = useState<PlaylistMode>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<PlaylistMode>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onShareUrlCopy = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  const params: UrlQueryMap = {};\n  if (mode) {\n    params.kiosk = mode;\n  }\n  if (autoFit) {\n    params.autofitpanels = true;\n  }\n\n  const shareUrl = urlUtil.renderUrl(`${buildBaseUrl()}/play/${playlistId}`, params);\n\n  return (\n    <Modal isOpen={true} title=\"Share playlist\" onDismiss={onDismiss}>\n      <FieldSet>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Field>\n          <Checkbox\n            label=\"Autofit\"\n            description=\"Panel heights will be adjusted to fit screen size\"\n            name=\"autofix\"\n            value={autoFit}\n            onChange={(e) => setAutofit(e.currentTarget.checked)}\n          />\n        </Field>\n\n        <Field label=\"Link URL\">\n          <Input\n            id=\"link-url-input\"\n            value={shareUrl}\n            readOnly\n            addonAfter={\n              <ClipboardButton variant=\"primary\" getText={() => shareUrl} onClipboardCopy={onShareUrlCopy}>\n                <Icon name=\"copy\" /> Copy\n              </ClipboardButton>\n            }\n          />\n        </Field>\n      </FieldSet>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { PlaylistDTO } from './types';\nimport { Button, Card, LinkButton, ModalsController, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DashNavButton } from '../dashboard/components/DashNav/DashNavButton';\nimport { ShareModal } from './ShareModal';\n\ninterface Props {\n  setStartPlaylist: (playlistItem: PlaylistDTO) => void;\n  setPlaylistToDelete: (playlistItem: PlaylistDTO) => void;\n  playlists: PlaylistDTO[] | undefined;\n}\n\nexport const PlaylistPageList = ({ playlists, setStartPlaylist, setPlaylistToDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <ul className={styles.list}>\n      {playlists!.map((playlist: PlaylistDTO) => (\n        <li className={styles.listItem} key={playlist.id.toString()}>\n          <Card>\n            <Card.Heading>\n              {playlist.name}\n              <ModalsController key=\"button-share\">\n                {({ showModal, hideModal }) => (\n                  <DashNavButton\n                    tooltip=\"Share playlist\"\n                    icon=\"share-alt\"\n                    iconSize=\"lg\"\n                    onClick={() => {\n                      showModal(ShareModal, {\n                        playlistId: playlist.id,\n                        onDismiss: hideModal,\n                      });\n                    }}\n                  />\n                )}\n              </ModalsController>\n            </Card.Heading>\n            <Card.Actions>\n              <Button variant=\"secondary\" icon=\"play\" onClick={() => setStartPlaylist(playlist)}>\n                Start playlist\n              </Button>\n              {contextSrv.isEditor && (\n                <>\n                  <LinkButton key=\"edit\" variant=\"secondary\" href={`/playlists/edit/${playlist.id}`} icon=\"cog\">\n                    Edit playlist\n                  </LinkButton>\n                  <Button\n                    disabled={false}\n                    onClick={() => setPlaylistToDelete({ id: playlist.id, name: playlist.name })}\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                  >\n                    Delete playlist\n                  </Button>\n                </>\n              )}\n            </Card.Actions>\n          </Card>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      display: 'grid',\n    }),\n    listItem: css({\n      listStyle: 'none',\n    }),\n  };\n}\n","import React from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const EmptyQueryListBanner = () => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.noResult}>No playlist found!</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noResult: css`\n      padding: ${theme.spacing(2)};\n      background: ${theme.colors.secondary.main};\n      font-style: italic;\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDebounce } from 'react-use';\nimport { PlaylistDTO } from './types';\nimport { ConfirmModal } from '@grafana/ui';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\nimport { deletePlaylist, getAllPlaylist } from './api';\nimport { StartModal } from './StartModal';\nimport { PlaylistPageList } from './PlaylistPageList';\nimport { EmptyQueryListBanner } from './EmptyQueryListBanner';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\nexport interface PlaylistPageProps extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistPage: FC<PlaylistPageProps> = ({ navModel }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery);\n  const [hasFetched, setHasFetched] = useState(false);\n  const [startPlaylist, setStartPlaylist] = useState<PlaylistDTO | undefined>();\n  const [playlistToDelete, setPlaylistToDelete] = useState<PlaylistDTO | undefined>();\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n\n  const [playlists, setPlaylists] = useState<PlaylistDTO[]>([]);\n\n  useDebounce(\n    async () => {\n      const playlists = await getAllPlaylist(searchQuery);\n      if (!hasFetched) {\n        setHasFetched(true);\n      }\n      setPlaylists(playlists);\n      setDebouncedSearchQuery(searchQuery);\n    },\n    350,\n    [forcePlaylistsFetch, searchQuery]\n  );\n\n  const hasPlaylists = playlists && playlists.length > 0;\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n    deletePlaylist(playlistToDelete.id).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  const emptyListBanner = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  const showSearch = playlists.length > 0 || searchQuery.length > 0 || debouncedSearchQuery.length > 0;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!hasFetched}>\n        {showSearch && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={{ title: 'New playlist', href: '/playlists/new' }}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n\n        {!hasPlaylists && searchQuery ? (\n          <EmptyQueryListBanner />\n        ) : (\n          <PlaylistPageList\n            playlists={playlists}\n            setStartPlaylist={setStartPlaylist}\n            setPlaylistToDelete={setPlaylistToDelete}\n          />\n        )}\n        {!showSearch && emptyListBanner}\n        {playlistToDelete && (\n          <ConfirmModal\n            title={playlistToDelete.name}\n            confirmText=\"Delete\"\n            body={`Are you sure you want to delete '${playlistToDelete.name}' playlist?`}\n            onConfirm={onDeletePlaylist}\n            isOpen={Boolean(playlistToDelete)}\n            onDismiss={onDismissDelete}\n          />\n        )}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist, PlaylistDTO } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function deletePlaylist(id: number) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${id}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","StartModal","playlist","onDismiss","mode","setMode","useState","autoFit","setAutofit","Modal","isOpen","icon","FieldSet","Field","label","RadioButtonGroup","options","Checkbox","description","name","e","currentTarget","checked","Button","variant","onClick","params","kiosk","autofitpanels","locationService","urlUtil","id","ShareModal","playlistId","shareUrl","buildBaseUrl","Input","readOnly","addonAfter","ClipboardButton","getText","onClipboardCopy","appEvents","AppEvents","Icon","PlaylistPageList","playlists","setStartPlaylist","setPlaylistToDelete","styles","useStyles2","getStyles","list","map","listItem","Card","ModalsController","showModal","hideModal","DashNavButton","tooltip","iconSize","contextSrv","toString","theme","css","display","listStyle","EmptyQueryListBanner","noResult","spacing","colors","secondary","main","PlaylistPage","navModel","debouncedSearchQuery","setDebouncedSearchQuery","hasFetched","setHasFetched","startPlaylist","playlistToDelete","forcePlaylistsFetch","setForcePlaylistsFetch","setPlaylists","useDebounce","async","getAllPlaylist","hasPlaylists","length","emptyListBanner","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","showSearch","Page","isLoading","ConfirmModal","confirmText","body","onConfirm","deletePlaylist","finally","undefined","Boolean","connect","state","getNavModel","navIndex","createPlaylist","withErrorHandling","getBackendSrv","post","updatePlaylist","put","delete","getPlaylist","get","query","apiCall","message","dispatch","notifyApp","createSuccessNotification","createErrorNotification"],"sourceRoot":""}