{"version":3,"file":"AlertingAdmin.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AddAlertManagerModal.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e.message;\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { useDispatch } from 'react-redux';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, FieldArray, Form, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { addExternalAlertmanagersAction } from '../../state/actions';\nimport { AlertmanagerUrl } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  onClose: () => void;\n  alertmanagers: AlertmanagerUrl[];\n}\n\nexport const AddAlertManagerModal: FC<Props> = ({ alertmanagers, onClose }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const defaultValues: Record<string, AlertmanagerUrl[]> = useMemo(\n    () => ({\n      alertmanagers: alertmanagers,\n    }),\n    [alertmanagers]\n  );\n\n  const modalTitle = (\n    <div className={styles.modalTitle}>\n      <Icon name=\"bell\" className={styles.modalIcon} />\n      <h3>Add Alertmanager</h3>\n    </div>\n  );\n\n  const onSubmit = (values: Record<string, AlertmanagerUrl[]>) => {\n    dispatch(addExternalAlertmanagersAction(values.alertmanagers.map((am) => cleanAlertmanagerUrl(am.url))));\n    onClose();\n  };\n\n  return (\n    <Modal title={modalTitle} isOpen={true} onDismiss={onClose} className={styles.modal}>\n      <div className={styles.description}>\n        We use a service discovery method to find existing Alertmanagers for a given URL.\n      </div>\n      <Form onSubmit={onSubmit} defaultValues={defaultValues}>\n        {({ register, control, errors }) => (\n          <div>\n            <FieldArray control={control} name=\"alertmanagers\">\n              {({ fields, append, remove }) => (\n                <div className={styles.fieldArray}>\n                  <div className={styles.bold}>Source url</div>\n                  <div className={styles.muted}>\n                    Authentication can be done via URL (e.g. user:password@myalertmanager.com) and only the Alertmanager\n                    v2 API is supported. The suffix is added internally, there is no need to specify it.\n                  </div>\n                  {fields.map((field, index) => {\n                    return (\n                      <Field\n                        invalid={!!errors?.alertmanagers?.[index]}\n                        error=\"Field is required\"\n                        key={`${field.id}-${index}`}\n                      >\n                        <Input\n                          className={styles.input}\n                          defaultValue={field.url}\n                          {...register(`alertmanagers.${index}.url`, { required: true })}\n                          placeholder=\"http://localhost:9093\"\n                          addonAfter={\n                            <Button\n                              aria-label=\"Remove alertmanager\"\n                              type=\"button\"\n                              onClick={() => remove(index)}\n                              variant=\"destructive\"\n                              className={styles.destroyInputRow}\n                            >\n                              <Icon name=\"trash-alt\" />\n                            </Button>\n                          }\n                        />\n                      </Field>\n                    );\n                  })}\n                  <Button type=\"button\" variant=\"secondary\" onClick={() => append({ url: '' })}>\n                    Add URL\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            <div>\n              <Button onSubmit={() => onSubmit}>Add Alertmanagers</Button>\n            </div>\n          </div>\n        )}\n      </Form>\n    </Modal>\n  );\n};\n\nfunction cleanAlertmanagerUrl(url: string): string {\n  return url.replace(/\\/$/, '').replace(/\\/api\\/v[1|2]\\/alerts/i, '');\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const muted = css`\n    color: ${theme.colors.text.secondary};\n  `;\n  return {\n    description: cx(\n      css`\n        margin-bottom: ${theme.spacing(2)};\n      `,\n      muted\n    ),\n    muted: muted,\n    bold: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    modal: css``,\n    modalIcon: cx(\n      muted,\n      css`\n        margin-right: ${theme.spacing(1)};\n      `\n    ),\n    modalTitle: css`\n      display: flex;\n    `,\n    input: css`\n      margin-bottom: ${theme.spacing(1)};\n      margin-right: ${theme.spacing(1)};\n    `,\n    inputRow: css`\n      display: flex;\n    `,\n    destroyInputRow: css`\n      padding: ${theme.spacing(1)};\n    `,\n    fieldArray: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n  };\n};\n","import { useSelector } from 'react-redux';\nimport { StoreState } from '../../../../types';\n\nconst SUFFIX_REGEX = /\\/api\\/v[1|2]\\/alerts/i;\ntype AlertmanagerConfig = { url: string; status: string; actualUrl: string };\n\nexport function useExternalAmSelector(): AlertmanagerConfig[] | undefined {\n  const discoveredAlertmanagers = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.discoveredAlertmanagers.result?.data\n  );\n  const alertmanagerConfig = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result?.alertmanagers\n  );\n\n  if (!discoveredAlertmanagers || !alertmanagerConfig) {\n    return [];\n  }\n\n  const enabledAlertmanagers: AlertmanagerConfig[] = [];\n  const droppedAlertmanagers: AlertmanagerConfig[] = discoveredAlertmanagers?.droppedAlertManagers.map((am) => ({\n    url: am.url.replace(SUFFIX_REGEX, ''),\n    status: 'dropped',\n    actualUrl: am.url,\n  }));\n\n  for (const url of alertmanagerConfig) {\n    if (discoveredAlertmanagers.activeAlertManagers.length === 0) {\n      enabledAlertmanagers.push({\n        url: url,\n        status: 'pending',\n        actualUrl: '',\n      });\n    } else {\n      let found = false;\n      for (const activeAM of discoveredAlertmanagers.activeAlertManagers) {\n        if (activeAM.url === `${url}/api/v2/alerts`) {\n          found = true;\n          enabledAlertmanagers.push({\n            url: activeAM.url.replace(SUFFIX_REGEX, ''),\n            status: 'active',\n            actualUrl: activeAM.url,\n          });\n        }\n      }\n      if (!found) {\n        enabledAlertmanagers.push({\n          url: url,\n          status: 'pending',\n          actualUrl: '',\n        });\n      }\n    }\n  }\n\n  return [...enabledAlertmanagers, ...droppedAlertmanagers];\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, HorizontalGroup, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { AddAlertManagerModal } from './AddAlertManagerModal';\nimport {\n  addExternalAlertmanagersAction,\n  fetchExternalAlertmanagersAction,\n  fetchExternalAlertmanagersConfigAction,\n} from '../../state/actions';\nimport { useExternalAmSelector } from '../../hooks/useExternalAmSelector';\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState({ open: false, payload: [{ url: '' }] });\n  const [deleteModalState, setDeleteModalState] = useState({ open: false, index: 0 });\n  const externalAlertManagers = useExternalAmSelector();\n\n  useEffect(() => {\n    dispatch(fetchExternalAlertmanagersAction());\n    dispatch(fetchExternalAlertmanagersConfigAction());\n    const interval = setInterval(() => dispatch(fetchExternalAlertmanagersAction()), 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  const onDelete = useCallback(\n    (index: number) => {\n      // to delete we need to filter the alertmanager from the list and repost\n      const newList = (externalAlertManagers ?? [])\n        .filter((am, i) => i !== index)\n        .map((am) => {\n          return am.url;\n        });\n      dispatch(addExternalAlertmanagersAction(newList));\n      setDeleteModalState({ open: false, index: 0 });\n    },\n    [externalAlertManagers, dispatch]\n  );\n\n  const onEdit = useCallback(() => {\n    const ams = externalAlertManagers ? [...externalAlertManagers] : [{ url: '' }];\n    setModalState((state) => ({\n      ...state,\n      open: true,\n      payload: ams,\n    }));\n  }, [setModalState, externalAlertManagers]);\n\n  const onOpenModal = useCallback(() => {\n    setModalState((state) => {\n      const ams = externalAlertManagers ? [...externalAlertManagers, { url: '' }] : [{ url: '' }];\n      return {\n        ...state,\n        open: true,\n        payload: ams,\n      };\n    });\n  }, [externalAlertManagers]);\n\n  const onCloseModal = useCallback(() => {\n    setModalState((state) => ({\n      ...state,\n      open: false,\n    }));\n  }, [setModalState]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'green';\n\n      case 'pending':\n        return 'yellow';\n\n      default:\n        return 'red';\n    }\n  };\n\n  const noAlertmanagers = externalAlertManagers?.length === 0;\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <div className={styles.muted}>\n        You can have your Grafana managed alerts be delivered to one or many external Alertmanager(s) in addition to the\n        internal Alertmanager by specifying their URLs below.\n      </div>\n      <div className={styles.actions}>\n        {!noAlertmanagers && (\n          <Button type=\"button\" onClick={onOpenModal}>\n            Add Alertmanager\n          </Button>\n        )}\n      </div>\n      {noAlertmanagers ? (\n        <EmptyListCTA\n          title=\"You have not added any external alertmanagers\"\n          onClick={onOpenModal}\n          buttonTitle=\"Add Alertmanager\"\n          buttonIcon=\"bell-slash\"\n        />\n      ) : (\n        <table className=\"filter-table form-inline filter-table--hover\">\n          <thead>\n            <tr>\n              <th>Url</th>\n              <th>Status</th>\n              <th style={{ width: '2%' }}>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {externalAlertManagers?.map((am, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    <span className={styles.url}>{am.url}</span>\n                    {am.actualUrl ? (\n                      <Tooltip content={`Discovered ${am.actualUrl} from ${am.url}`} theme=\"info\">\n                        <Icon name=\"info-circle\" />\n                      </Tooltip>\n                    ) : null}\n                  </td>\n                  <td>\n                    <Icon name=\"heart\" style={{ color: getStatusColor(am.status) }} title={am.status} />\n                  </td>\n                  <td>\n                    <HorizontalGroup>\n                      <Button variant=\"secondary\" type=\"button\" onClick={onEdit} aria-label=\"Edit alertmanager\">\n                        <Icon name=\"pen\" />\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        aria-label=\"Remove alertmanager\"\n                        type=\"button\"\n                        onClick={() => setDeleteModalState({ open: true, index })}\n                      >\n                        <Icon name=\"trash-alt\" />\n                      </Button>\n                    </HorizontalGroup>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n      <ConfirmModal\n        isOpen={deleteModalState.open}\n        title=\"Remove Alertmanager\"\n        body=\"Are you sure you want to remove this Alertmanager\"\n        confirmText=\"Remove\"\n        onConfirm={() => onDelete(deleteModalState.index)}\n        onDismiss={() => setDeleteModalState({ open: false, index: 0 })}\n      />\n      {modalState.open && <AddAlertManagerModal onClose={onCloseModal} alertmanagers={modalState.payload} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css``,\n});\n","import React from 'react';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\n\nexport default function Admin(): JSX.Element {\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />\n    </AlertingPageWrapper>\n  );\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["AlertmanagerConfig","dispatch","useDispatch","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","isVanillaPrometheusAlertManagerDataSource","styles","useStyles2","getStyles","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","useMemo","configJSON","JSON","stringify","className","container","AlertManagerPicker","current","onChange","Alert","severity","title","message","GRAFANA_RULES_SOURCE_NAME","Form","onSubmit","values","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","Field","disabled","label","invalid","TextArea","required","value","validate","v","e","id","rows","HorizontalGroup","Button","type","variant","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","theme","css","spacing","AddAlertManagerModal","alertmanagers","onClose","modalTitle","Icon","name","modalIcon","addExternalAlertmanagersAction","map","am","url","replace","Modal","modal","description","control","FieldArray","fields","append","remove","fieldArray","bold","muted","field","index","Input","input","defaultValue","placeholder","addonAfter","destroyInputRow","colors","text","secondary","cx","typography","fontWeightBold","inputRow","SUFFIX_REGEX","ExternalAlertmanagers","modalState","setModalState","open","payload","deleteModalState","setDeleteModalState","externalAlertManagers","discoveredAlertmanagers","useSelector","unifiedAlerting","externalAlertmanagers","data","alertmanagerConfig","enabledAlertmanagers","droppedAlertmanagers","droppedAlertManagers","status","actualUrl","activeAlertManagers","length","push","found","activeAM","useExternalAmSelector","fetchExternalAlertmanagersAction","fetchExternalAlertmanagersConfigAction","interval","setInterval","clearInterval","onDelete","useCallback","newList","filter","i","onEdit","ams","onOpenModal","onCloseModal","getStatusColor","noAlertmanagers","actions","EmptyListCTA","buttonTitle","buttonIcon","style","width","Tooltip","content","color","table","Admin","AlertingPageWrapper","pageId","children","isLoading","navModel","getNavModel","navIndex","isAlertManagerSource","getAlertManagerDataSources","find","ds","queryParams","updateQueryParams","useQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","undefined","storeSource"],"sourceRoot":""}