{"version":3,"sources":["webpack:///./public/app/features/playlist/PlaylistNewPage.tsx","webpack:///./public/app/features/playlist/usePlaylist.tsx","webpack:///./node_modules/debounce-promise/dist/index.js","webpack:///./public/app/features/playlist/api.ts","webpack:///./public/app/core/components/Select/DashboardPicker.tsx","webpack:///./public/app/features/playlist/PlaylistTableRow.tsx","webpack:///./public/app/features/playlist/PlaylistTableRows.tsx","webpack:///./public/app/features/playlist/PlaylistTable.tsx","webpack:///./public/app/features/playlist/PlaylistForm.tsx","webpack:///./public/app/features/playlist/usePlaylistItems.tsx","webpack:///./public/app/features/playlist/styles.ts"],"names":["PlaylistNewPage","navModel","styles","useStyles2","getPlaylistStyles","playlist","loading","usePlaylist","Contents","isLoading","className","subHeading","description","onSubmit","async","createPlaylist","locationService","push","connect","state","getNavModel","navIndex","playlistId","setPlaylist","useState","items","interval","name","setLoading","useEffect","list","getPlaylist","initPlaylist","getWait","wait","defer","deferred","promise","Promise","resolve","reject","module","exports","fn","arguments","length","undefined","options","lastCallAt","timer","pendingArgs","currentWait","currentTime","Date","getTime","isCold","_len","args","Array","_key","leading","accumulate","call","this","then","result","apply","concat","clearTimeout","setTimeout","flush","bind","argsIndex","results","thisDeferred","withErrorHandling","getBackendSrv","post","updatePlaylist","id","put","get","apiCall","dispatch","notifyApp","createSuccessNotification","e","createErrorNotification","getDashboards","query","backendSrv","search","type","map","item","uid","value","label","folderTitle","title","DashboardPicker","onChange","width","isClearable","invalid","disabled","debouncedSearch","debounce","defaultOptions","loadOptions","placeholder","noOptionsMessage","PlaylistTableRow","onDelete","onMoveDown","onMoveUp","first","last","useStyles","getStyles","aria-label","selectors","pages","PlaylistForm","itemRow","cx","td","itemIdType","itemTagType","TagBadge","removeIcon","count","settings","size","onClick","event","preventDefault","itemMoveUp","itemMoveDown","itemDelete","theme","css","spacing","xs","PlaylistTableRows","index","PlaylistTable","searchSrv","SearchSrv","propItems","addById","addByTag","deleteItem","moveDown","moveUp","playlistItems","setItems","useCallback","dashboard","find","newItem","toString","order","tags","tag","movePlaylistItem","offset","newItems","currentPosition","indexOf","newPosition","splice","filter","i","usePlaylistItems","validateOn","register","errors","isDisabled","Object","keys","error","message","required","defaultValue","TagFilter","hideValues","tagOptions","getDashboardTags","variant","href","config","appSubUrl"],"mappings":"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","file":"PlaylistNewPage.17511e2bf08b06f121f8.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PlaylistForm } from './PlaylistForm';\nimport { createPlaylist } from './api';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\nimport { getPlaylistStyles } from './styles';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistNewPage: FC<Props> = ({ navModel }) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist();\n  const onSubmit = async (playlist: Playlist) => {\n    await createPlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>New Playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistNewPage);\n","import { useEffect, useState } from 'react';\nimport { Playlist } from './types';\nimport { getPlaylist } from './api';\n\nexport function usePlaylist(playlistId?: number) {\n  const [playlist, setPlaylist] = useState<Playlist>({ items: [], interval: '5m', name: '' });\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initPlaylist = async () => {\n      if (!playlistId) {\n        setLoading(false);\n        return;\n      }\n      const list = await getPlaylist(playlistId);\n      setPlaylist(list);\n      setLoading(false);\n    };\n    initPlaylist();\n  }, [playlistId]);\n\n  return { playlist, loading };\n}\n","'use strict';\n\n/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var lastCallAt = void 0;\n  var deferred = void 0;\n  var timer = void 0;\n  var pendingArgs = [];\n  return function debounced() {\n    var currentWait = getWait(wait);\n    var currentTime = new Date().getTime();\n\n    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n\n    lastCallAt = currentTime;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isCold && options.leading) {\n      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {\n        return result[0];\n      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));\n    }\n\n    if (deferred) {\n      clearTimeout(timer);\n    } else {\n      deferred = defer();\n    }\n\n    pendingArgs.push(args);\n    timer = setTimeout(flush.bind(this), currentWait);\n\n    if (options.accumulate) {\n      var argsIndex = pendingArgs.length - 1;\n      return deferred.promise.then(function (results) {\n        return results[argsIndex];\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  function flush() {\n    var thisDeferred = deferred;\n    clearTimeout(timer);\n\n    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);\n\n    pendingArgs = [];\n    deferred = null;\n  }\n};\n\nfunction getWait(wait) {\n  return typeof wait === 'function' ? wait() : wait;\n}\n\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n//# sourceMappingURL=index.js.map","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(async () => await getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(async () => await getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>) {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification('Playlist saved')));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n","import React, { FC } from 'react';\nimport debounce from 'debounce-promise';\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit } from 'app/features/search/types';\n\nexport interface DashboardPickerItem extends Pick<DashboardSearchHit, 'uid' | 'id'> {\n  value: number;\n  label: string;\n}\n\nexport interface Props {\n  onChange: (dashboard: DashboardPickerItem) => void;\n  value?: SelectableValue;\n  width?: number;\n  isClearable?: boolean;\n  invalid?: boolean;\n  disabled?: boolean;\n}\n\nconst getDashboards = (query = '') => {\n  return backendSrv.search({ type: 'dash-db', query }).then((result: DashboardSearchHit[]) => {\n    return result.map((item: DashboardSearchHit) => ({\n      id: item.id,\n      uid: item.uid,\n      value: item.id,\n      label: `${item?.folderTitle ?? 'General'}/${item.title}`,\n    }));\n  });\n};\n\nexport const DashboardPicker: FC<Props> = ({ onChange, value, width, isClearable = false, invalid, disabled }) => {\n  const debouncedSearch = debounce(getDashboards, 300);\n\n  return (\n    <AsyncSelect\n      width={width}\n      isClearable={isClearable}\n      defaultOptions={true}\n      loadOptions={debouncedSearch}\n      onChange={onChange}\n      placeholder=\"Select dashboard\"\n      noOptionsMessage=\"No dashboards found\"\n      value={value}\n      invalid={invalid}\n      disabled={disabled}\n    />\n  );\n};\n","import React, { FC, MouseEvent } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Icon, IconButton, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\nimport { PlaylistItem } from './types';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface PlaylistTableRowProps {\n  first: boolean;\n  last: boolean;\n  item: PlaylistItem;\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRow: FC<PlaylistTableRowProps> = ({ item, onDelete, onMoveDown, onMoveUp, first, last }) => {\n  const styles = useStyles(getStyles);\n  const onDeleteClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onDelete(item);\n  };\n  const onMoveDownClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveDown(item);\n  };\n  const onMoveUpClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveUp(item);\n  };\n\n  return (\n    <tr aria-label={selectors.pages.PlaylistForm.itemRow} key={item.title}>\n      {item.type === 'dashboard_by_id' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"apps\" aria-label={selectors.pages.PlaylistForm.itemIdType} />\n          <span>{item.title}</span>\n        </td>\n      ) : null}\n      {item.type === 'dashboard_by_tag' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"tag-alt\" aria-label={selectors.pages.PlaylistForm.itemTagType} />\n          <TagBadge key={item.id} label={item.title} removeIcon={false} count={0} />\n        </td>\n      ) : null}\n      <td className={cx(styles.td, styles.settings)}>\n        {!first ? (\n          <IconButton\n            name=\"arrow-up\"\n            size=\"md\"\n            onClick={onMoveUpClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveUp}\n            type=\"button\"\n          />\n        ) : null}\n        {!last ? (\n          <IconButton\n            name=\"arrow-down\"\n            size=\"md\"\n            onClick={onMoveDownClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveDown}\n            type=\"button\"\n          />\n        ) : null}\n        <IconButton\n          name=\"times\"\n          size=\"md\"\n          onClick={onDeleteClick}\n          aria-label={selectors.pages.PlaylistForm.itemDelete}\n          type=\"button\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    td: css`\n      label: td;\n      line-height: 28px;\n      max-width: 335px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    item: css`\n      label: item;\n      span {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRow } from './PlaylistTableRow';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowsProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRows: FC<PlaylistTableRowsProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  if (items.length === 0) {\n    return (\n      <tr>\n        <td>\n          <em>Playlist is empty. Add dashboards below.</em>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const first = index === 0;\n        const last = index === items.length - 1;\n        return (\n          <PlaylistTableRow\n            first={first}\n            last={last}\n            item={item}\n            onDelete={onDelete}\n            onMoveDown={onMoveDown}\n            onMoveUp={onMoveUp}\n            key={item.title}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTable: FC<PlaylistTableProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <table className=\"filter-table\">\n        <tbody>\n          <PlaylistTableRows items={items} onMoveUp={onMoveUp} onMoveDown={onMoveDown} onDelete={onDelete} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { Playlist } from './types';\nimport { DashboardPicker } from '../../core/components/Select/DashboardPicker';\nimport { TagFilter } from '../../core/components/TagFilter/TagFilter';\nimport { SearchSrv } from '../../core/services/search_srv';\nimport { usePlaylistItems } from './usePlaylistItems';\nimport { PlaylistTable } from './PlaylistTable';\n\ninterface PlaylistFormProps {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nconst searchSrv = new SearchSrv();\n\nexport const PlaylistForm: FC<PlaylistFormProps> = ({ onSubmit, playlist }) => {\n  const { name, interval, items: propItems } = playlist;\n  const { items, addById, addByTag, deleteItem, moveDown, moveUp } = usePlaylistItems(propItems);\n  return (\n    <>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} onMoveUp={moveUp} onMoveDown={moveDown} onDelete={deleteItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPicker onChange={addById} isClearable />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={searchSrv.getDashboardTags}\n                    onChange={addByTag}\n                    placeholder={''}\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { PlaylistItem } from './types';\nimport { DashboardPickerItem } from '../../core/components/Select/DashboardPicker';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  const addById = useCallback(\n    (dashboard: DashboardPickerItem) => {\n      if (items.find((item) => item.id === dashboard.id)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        id: dashboard.id,\n        title: dashboard.label,\n        type: 'dashboard_by_id',\n        value: dashboard.id.toString(10),\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        title: tag,\n        type: 'dashboard_by_tag',\n        value: tag,\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const movePlaylistItem = useCallback(\n    (item: PlaylistItem, offset: number) => {\n      const newItems = [...items];\n      const currentPosition = newItems.indexOf(item);\n      const newPosition = currentPosition + offset;\n\n      if (newPosition >= 0 && newPosition < newItems.length) {\n        newItems.splice(currentPosition, 1);\n        newItems.splice(newPosition, 0, item);\n      }\n      setItems(newItems);\n    },\n    [items]\n  );\n\n  const moveUp = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, -1);\n    },\n    [movePlaylistItem]\n  );\n\n  const moveDown = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, 1);\n    },\n    [movePlaylistItem]\n  );\n\n  const deleteItem = useCallback(\n    (item: PlaylistItem) => {\n      setItems(items.filter((i) => i !== item));\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveDown, moveUp };\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function getPlaylistStyles(theme: GrafanaTheme2) {\n  return {\n    description: css`\n      label: description;\n      width: 555px;\n      margin-bottom: 20px;\n    `,\n    subHeading: css`\n      label: sub-heading;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n"],"sourceRoot":""}