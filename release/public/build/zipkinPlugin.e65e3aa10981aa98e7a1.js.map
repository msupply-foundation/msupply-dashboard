{"version":3,"file":"zipkinPlugin.e65e3aa10981aa98e7a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/datasource.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/module.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/0/cache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\nimport React from 'react';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean;\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n          label=\"Tags\"\n          labelWidth={26}\n        >\n          <TagsInput\n            tags={options.jsonData.tracesToLogs?.tags}\n            width={40}\n            onChange={(tags) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: options.jsonData.tracesToLogs?.datasourceUid,\n                tags: tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Loki Search\" labelWidth={26} grow tooltip=\"Use this logs data source to search for traces.\">\n          <InlineSwitch\n            id=\"lokiSearch\"\n            defaultChecked={true}\n            value={options.jsonData.tracesToLogs?.lokiSearch}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                lokiSearch: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined): {\n  [id: string]: { span: T; children: string[] };\n} {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\nimport { ZipkinSpan } from '../types';\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\n\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  constructor(private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(target.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport {\n  ButtonCascader,\n  CascaderOption,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  RadioButtonGroup,\n  useTheme2,\n  QueryField,\n  useStyles2,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQuery, ZipkinQueryType, ZipkinSpan } from './types';\n\ntype Props = QueryEditorProps<ZipkinDatasource, ZipkinQuery>;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tracesCascader: css({\n      label: 'tracesCascader',\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n\nexport const ZipkinQueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const serviceOptions = useServices(datasource);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\">\n          <RadioButtonGroup<ZipkinQueryType>\n            options={[\n              { value: 'traceID', label: 'TraceID' },\n              { value: 'upload', label: 'JSON file' },\n            ]}\n            value={query.queryType || 'traceID'}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                queryType: v,\n              })\n            }\n            size=\"md\"\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {query.queryType === 'upload' ? (\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onRunQuery();\n            }}\n          />\n        </div>\n      ) : (\n        <InlineFieldRow>\n          <ButtonCascader\n            options={cascaderOptions}\n            onChange={onSelectTrace}\n            loadData={onLoadOptions}\n            variant=\"secondary\"\n            buttonProps={{ className: styles.tracesCascader }}\n          >\n            Traces\n          </ButtonCascader>\n          <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n            <QueryField\n              query={query.query}\n              onChange={onChangeQuery}\n              onRunQuery={onRunQuery}\n              placeholder={'Insert Trace ID (run with Shift+Enter)'}\n              portalOrigin=\"zipkin\"\n            />\n          </div>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', error)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setQueryEditor(ZipkinQueryField)\n  .setConfigEditor(ConfigEditor);\n","import { identity } from 'lodash';\nimport { ZipkinAnnotation, ZipkinEndpoint, ZipkinSpan } from '../types';\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin',\n      },\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  if (span.shared) {\n    row.tags = [\n      {\n        key: 'shared',\n        value: span.shared,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n    valueToTag('endpointType', span.localEndpoint ? 'local' : 'remote'),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Transforms data frame to Zipkin response\n */\nexport const transformToZipkin = (data: MutableDataFrame): ZipkinSpan[] => {\n  let response: ZipkinSpan[] = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n    response.push({\n      traceId: span.traceID,\n      parentId: span.parentSpanID,\n      name: span.operationName,\n      id: span.spanID,\n      timestamp: span.startTime * 1000,\n      duration: span.duration * 1000,\n      ...getEndpoint(span),\n      annotations: span.logs.length\n        ? span.logs.map((l: TraceLog) => ({ timestamp: l.timestamp, value: l.fields[0].value }))\n        : undefined,\n      tags: span.tags.length\n        ? span.tags\n            .filter((t: TraceKeyValuePair) => t.key !== 'kind' && t.key !== 'endpointType' && t.key !== 'shared')\n            .reduce((tags: { [key: string]: string }, t: TraceKeyValuePair) => {\n              if (t.key === 'error') {\n                return {\n                  ...tags,\n                  [t.key]: span.tags.find((t: TraceKeyValuePair) => t.key === 'errorValue').value || '',\n                };\n              }\n              return { ...tags, [t.key]: t.value };\n            }, {})\n        : undefined,\n      kind: span.tags.find((t: TraceKeyValuePair) => t.key === 'kind')?.value,\n      shared: span.tags.find((t: TraceKeyValuePair) => t.key === 'shared')?.value,\n    });\n  }\n\n  return response;\n};\n\n// Returns remote or local endpoint object\nconst getEndpoint = (span: any): { [key: string]: ZipkinEndpoint } | undefined => {\n  const key =\n    span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'endpointType')?.value === 'local'\n      ? 'localEndpoint'\n      : 'remoteEndpoint';\n  return span.serviceName !== 'unknown'\n    ? {\n        [key]: {\n          serviceName: span.serviceName,\n          ipv4: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv4')?.value,\n          ipv6: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv6')?.value,\n          port: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'port')?.value,\n        },\n      }\n    : undefined;\n};\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","InlineFieldRow","row","InlineField","tooltip","label","labelWidth","InlineSwitch","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","TraceToLogsSettings","width","infoText","DataSourcePicker","inputId","pluginId","current","tracesToLogs","datasourceUid","noDefault","ds","uid","tags","TagsInput","grow","Input","type","placeholder","v","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","defaultChecked","lokiSearch","spacing","md","colors","textSemiWeak","getNonOverlappingDuration","ranges","sort","a","b","reduce","acc","range","length","tail","slice","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","children","parentId","parentIds","push","undefined","getStats","duration","traceDuration","selfDuration","main","toFixedNoTrailingZeros","secondary","n","parseFloat","toFixed","makeFrames","MutableDataFrame","fields","name","Fields","FieldType","config","displayName","color","mode","meta","preferredVisualisationType","createGraphFrames","data","nodes","edges","spans","traceEndTime","traceStartTime","Infinity","timestamp","findTraceDuration","map","c","childrenDuration","stats","localEndpoint","serviceName","remoteEndpoint","convertTraceToGraph","nodesFrame","edgesFrame","node","add","edge","ZipkinDatasource","DataSourceApi","constructor","instanceSettings","super","this","query","target","targets","queryType","uploadedJson","of","traceData","JSON","parse","responseToDataQueryResponse","error","message","request","encodeURIComponent","pipe","res","emptyDataQueryResponse","url","params","lastValueFrom","hideFromInspector","metadataRequest","status","getQueryDisplayText","apiUrl","serializeParams","req","getBackendSrv","fetch","response","transformResponse","values","custom","traceFormat","tracesCascader","marginRight","noTracesFoundOptions","isLeaf","noTracesOptions","plugin","DataSourcePlugin","setQueryEditor","onRunQuery","datasource","serviceOptions","servicesOptions","useAsyncFn","async","services","service","dispatch","notifyApp","createErrorNotification","useMount","useServices","useTheme2","useStyles2","onLoadOptions","allOptions","isMounted","useMountedState","setAllOptions","useState","fetchSpans","state","spanOptions","fromPairs","fetchTraces","spanName","search","traces","newTraces","trace","rootSpan","find","Math","floor","traceId","useCallback","selectedOptions","useLoadOptions","onSelectTrace","traceID","cascaderOptions","useMemo","Object","keys","traceName","useMapToCascaderOptions","RadioButtonGroup","size","padding","FileDropzone","multiple","onLoad","result","ButtonCascader","loadData","variant","buttonProps","QueryField","nextQuery","portalOrigin","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","zSpans","spanRows","transformSpan","frame","spanID","parentSpanID","operationName","serviceTags","startTime","logs","annotations","transformAnnotation","key","kind","shared","annotation","endpoint","valueToTag","ipv4","ipv6","port","filter","identity","transformToZipkin","i","get","getEndpoint","l","t","fn"],"sourceRoot":""}